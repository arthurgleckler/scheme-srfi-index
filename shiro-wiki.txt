("blob-copy!" . "(:ctime 1144700986 :cuser #f :mtime 1144712052 :muser #f)* [procedure] blob-copy! ''source'' ''source-start'' ''target'' ''target-start'' ''n''\n\n[[SRFI-74]]: Copies the octets from ''source'' at indices [''source-start'', ''source-start'' + ''n'') to consecutive indices in ''target'' starting at ''target-index''.\n\nThe return values are unspecified.\n")
(">=?" . "(:ctime 1144494246 :cuser #f :mtime 1144501914 :muser #f)[[$$include =?]]\n")
("inspect" . "(:ctime 1014896336 :cuser #f :mtime 1018344529 :muser #f)* [procedure] inspect ''obj''\n\n[[ChezScheme]]: See also [[inspect/object]]\n\n[[STk]]: invokes the graphical inspector.\n\n")
("char-set->list" . "(:ctime 1018085054 :cuser #f :mtime 1018085085 :muser #f)* [procedure] char-set->list ''char-set''\n* [procedure] char-set->string ''char-set''\n\n[[SRFI-14]]: see [[char-set]].\n")
(":optional" . "(:ctime 1015043232 :cuser #f :mtime 1015043232 :muser #f)* [syntax] :optional ''args'' ''default''\n\n[[Chicken]]:\n\n   (lambda (args default)\n      (cond ((null? args) default)\n            ((null? (cdr args)) (car args))\n            (else (error ...))))\n\nSee also [[let-optionals]], [[let-optionals*]]\n")
("fork-and-forget" . "(:ctime 1015282315 :cuser #f :mtime 1015282315 :muser #f)* [procedure] fork-and-forget ''thunk''\n\n[[Scheme48]]: runs ''thunk'' in a different process.  See also [[fork]].\n")
("char-set:letter+digit" . "(:ctime 1018082662 :cuser #f :mtime 1018082662 :muser #f)[[$$include char-set:lower-case]]\n")
("bitwise-and" . "(:ctime 1015049098 :cuser #f :mtime 1191715382 :muser #f)* [procedure] bitwise-and ''n1'' ...\n* [procedure] bitwise-ior ''n1'' ...\n* [procedure] bitwise-xor ''n1'' ...\n* [procedure] bitwise-not ''n1''\n\n[[R6RS]]: Bitwise operations that operate on 2's complement \nrepresentation of exact integers.  See also [[fxand]] etc\nfor fixnum-only ops.  See also [[bitwise-arithmetic-shift]].\n\nIf no arguments are given to [[bitwise-and]], -1 is returned.\nIf no arguments are given to [[bitwise-ior]] or [[bitwise-xor]], 0\nis returned.\n\n* [procedure] bitwise-and ''n1'' ''n2''\n* [procedure] bitwise-ior ''n1'' ''n2''\n* [procedure] bitwise-xor ''n1'' ''n2''\n* [procedure] bitwise-not ''n1''\n\n[[Chicken]], [[Scheme48]], [[Scsh]], [[MzScheme]]:\nSimilar, but the number of arguments for -and, -ior and -xor operations\nare fixed.\n\nSee also  [[arithmetic-shift]].\n\nThese are called [[logand]] etc, or [[bit-and]] etc,\nin some other implementations.\n")
("alet*" . "(:ctime 1170065147 :cuser #f :mtime 1170065787 :muser #f)* [syntax] alet* (''binding-spec'' ...) ''body'' ...\n* [syntax] alet* ''name'' (''binding-spec'' ...) ''body'' ...\n\n[[SRFI-86]]:\n[[let*]] +\n- multiple values binding with [[mu]] and [[nu]]\n- escape function\n- [[and-let*]]\n- [[let-optionals]] in [[Scsh]]\n- [[let-keywords]] and [[let-keywords*]]\n- [[letrec]] and [[letrec*]]\n- multiple values binding with [[values]] and [[call-with-values]] (like [[SRFI-71]])\n- binding forms intervening external environment\n\nSee also [[alet]].\n")
("set-fdes-status" . "(:ctime 1018386772 :cuser #f :mtime 1018386772 :muser #f)[[$$include fdes-status]]\n")
("test-runner-on-bad-count!" . "(:ctime 1151049296 :cuser #f :mtime 1151083342 :muser #f)[[$$include test-runner-on-bad-count]]\n")
("file-open" . "(:ctime 1015184022 :cuser #f :mtime 1015184390 :muser #f)* [procedure] file-open ''filename'' ''flags'' [''mode'']\n\n[[Chicken]]: low-level interface to open(2).  Returns a file\ndescrtiptor.  ''flags'' is or-ed values of [[open/rdonly]] etc.\n''mode'' is or-ed values of [[perm/irusr]] etc.\nSee also [[file-close]], [[file-read]], [[file-select]], \n[[file-write]], [[port->fileno]], [[open-input-file*]],\n[[open-output-file*]].\n")
("alphabetic" . "(:ctime 1018071835 :cuser #f :mtime 1018071835 :muser #f)[[$$include lower-case]]\n")
("dequeue!" . "(:ctime 1015072095 :cuser #f :mtime 1017980782 :muser #f)* [procedure] dequeue! ''queue''\n\n[[SLIB]], [[Gauche]], [[Scheme48]]: removes and returns the first item of ''queue''.\n\n[[queue-pop!]] does the same thing.\n\nThis is called [[queue-remove!]] in some implementations.\n\nSee also [[make-queue]], [[enqueue!]]\n")
("range" . "(:ctime 1018037845 :cuser #f :mtime 1018037845 :muser #f)* [procedure] range ''low-char'' ''high-char''\n\n[[Scheme48]]: character set constructor.\nSee [[set]].\n")
("pathname-strip-directory" . "(:ctime 1015101059 :cuser #f :mtime 1018337641 :muser #f)* [procedure] pathname-strip-directory ''pathname''\n\n[[Chicken]]: see also [[pathname-directory]], [[pathname-replace-directory]],\n[[pathname-strip-extension]].\n\nSome implementations call this\n[[basename]], [[sys-basename]], [[file-name-nondirectory]].\n\n")
("hashtable-contains?" . "(:ctime 1191360247 :cuser #f :mtime 1191360247 :muser #f)* [procedure] hashtable-contains? ''hashtable'' ''key''\n\n[[R6RS]]: Returns #t iff ''hashtable'' has an entry with ''key''.\n\nSee also [[Concept:HashTable]].\n\nOther implementations have: [[hash-table-exists?]]\n")
("time-utc->date" . "(:ctime 1099301444 :cuser #f :mtime 1099301517 :muser #f)* [procedure] time-utc->date ''time'' [''tz-offset'']\n* [procedure] time-utc->julian-day ''time''\n* [procedure] time-utc->modified-julian-day ''time''\n* [procedure] time-utc->time-monotonic ''time''\n* [procedure] time-utc->time-monotonic! ''time''\n* [procedure] time-utc->time-tai ''time''\n* [procedure] time-utc->time-tai! ''time''\n\n[[SRFI-19]]: Conversion procedures.\n\n")
("/." . "(:ctime 1191218580 :cuser #f :mtime 1191218581 :muser #f)[[$$include +.]]\n")
("make-guardian" . "(:ctime 1015030844 :cuser #f :mtime 1015030844 :muser #f)* [procedure] make-guardian\n\n[[ChezScheme]]: see [[weak-cons]]\n")
("union" . "(:ctime 1018038040 :cuser #f :mtime 1018038976 :muser #f)* [procedure] union ''char-set'' ''char-set''\n\n[[Scheme48]]: character set operation.  see [[set]].\n\n\nSRFI-14 calls this [[char-set-union]].\n")
("merge" . "(:ctime 1014943601 :cuser #f :mtime 1015072450 :muser #f)Merges two sorted sequences.  Like [[sort]], this comes\nwith conflicting APIs.\n\n* [procedure] merge ''sequence1'' ''sequence2'' ''predicate''\n\n[[SLIB]], [[Chicken]]: both ''sequences'' are lists.  Expects ''predicate''\nto behave like <.  Non-destructive.\n\n* [procedure] merge ''predicate'' 'sequence1'' ''sequence2''\n\n[[ChezScheme]]: both ''sequences'' are lists.  Expects ''predicate''\nto behave like <.  Non-destructive.\n\nSee also [[merge!]]\n")
("read-case-insensitive" . "(:ctime 1063244584 :cuser #f :mtime 1063244584 :muser #f)[[$$include read/case]]\n")
("hashtable-keys" . "(:ctime 1191360834 :cuser #f :mtime 1191360834 :muser #f)* [procedure] hashtable-keys ''hashtable''\n\n[[R6RS]]: Returns a ''vector'' of all keys in the hashtable.\n\nSee also [[Concept:HashTable]].\n\nOther implementations have [[hash-table-keys]] and [[hash-table/key-list]],\nbut they returns a ''list'' of all keys, not a vector.\n")
("symbol->string" . "(:ctime 1014859219 :cuser #f :mtime 1191565187 :muser #f)* [procedure] symbol->string ''symbol''\n\n[[R5RS]], [[R6RS]]: Returns the name of ''symbol'' as a string. \nReturned string is immutable.\n\nIn R5RS, if ''symbol'' is originated from a literal expression\nor from the read procedure, the implementation may fold the\ncase of alphabetic characters in the symbol name to its\npreferred standard case.\n\n{{{\n  (symbol->string 'aBc) => abc or ABC   ;; R5RS\n  (symbol->string 'aBc) => aBc          ;; R6RS\n}}}\n\nIn R6RS, case folding is off by default.  (The implementation may provide\ncase folding mode.  A token [[#!fold-case]] may be used in the source\nto show it should be read in case folding mode.)\n\nSee also [[string->symbol]].\n")
("seconds->utc-time" . "(:ctime 1015200327 :cuser #f :mtime 1015200327 :muser #f)[[$$include seconds->local-time]]\n")
("close-output-port" . "(:ctime 1014841024 :cuser #f :mtime 1014841024 :muser #f)* [procedure] close-output-port ''port''\n\n[[R5RS]]\n\nSee also [[close-input-port]].\n")
("user-info-id" . "(:ctime 1018125255 :cuser #f :mtime 1018125255 :muser #f)[[$$include user-info?]]\n")
("logbit?" . "(:ctime 1015772976 :cuser #f :mtime 1039750759 :muser #f)* [procedure] logbit? ''index'' ''n''\n\n[[SLIB]], [[Gauche]], [[Guile]]: (logtest ''n'' (ash 1 ''index''))\n\n")
("process-id=?" . "(:ctime 1015282596 :cuser #f :mtime 1015282596 :muser #f)* [procedure] process-id=? ''pid1'' ''pid2''\n\n[[Scheme48]]: see [[process-id?]].\n")
("time-utc->time-monotonic" . "(:ctime 1099301547 :cuser #f :mtime 1099301547 :muser #f)[[$$include time-utc->date]]\n")
("append-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535574 :muser #f)* [syntax] append-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe list obtained by appending all values of ''expression'', which must all\nbe lists.\nThink of it as ([[apply]] [[append]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n")
(">=fl" . "(:ctime 1039382049 :cuser #f :mtime 1039382049 :muser #f)[[$$include =fl]]\n")
("set-group-id!" . "(:ctime 1015139073 :cuser #f :mtime 1015198859 :muser #f)* [procedure] set-group-id! ''group-id''\n\n[[Scheme48]]: see also [[Concept:UserGroup]], [[get-group-id]].\n\nChicken has [[set-user-id!]], but seems lacking [[set-group-id!]].\n\nGauche has [[sys-setgid]].\n")
("string-incomplete->complete" . "(:ctime 1015805926 :cuser #f :mtime 1015805926 :muser #f)[[$$include string-complete->incomplete]]\n")
("string-search" . "(:ctime 1015104380 :cuser #f :mtime 1015104380 :muser #f)* [procedure] string-search ''regexp'' ''string'' [''start'' ''range'']\n* [procedure] string-search-positions ''regexp'' ''string'' [''start'' ''range'']\n\n[[Chicken]]: match regular expression ''regexp'' (string) with ''string''.\nSee also [[Concept:RegularExpression]], [[string-match]].\n")
("test-runner-factory" . "(:ctime 1151049296 :cuser #f :mtime 1151078394 :muser #f)* [syntax] test-runner-factory\n* [syntax] test-runner-factory ''factory''\n\n[[SRFI-64]]: gets or sets the current test runner factory. Default value is [[test-runner-simple]].\n\nSee also [[test-runner-create]].\n")
("vector-swap!" . "(:ctime 1099388463 :cuser #f :mtime 1099388464 :muser #f)* [procedure] vector-swap! ''vec'' ''i'' ''j''\n\n[[SRFI-43]]: Swaps the ''i''-th element and ''j''-th element of ''vec''.\n")
("a:fixn16b" . "(:ctime 1144485145 :cuser #f :mtime 1144529340 :muser #f)* [procedure] a:fixn16b [''k'']\n[[SRFI-63]]: Returns an exact non-negative binary fixnum uniform-array prototype with at least 16 bits of precision.\n")
("Scsh" . "(:ctime 1015204445 :cuser #f :mtime 1019447056 :muser #f)Scsh (Scheme Shell) is a Unix shell embedded in Scheme.\nIt is built on top of [[Scheme48]].\n\nhttp://www.scsh.net/\n\n----\nThe list is taken from scsh version 0.6.1, released February 25, 2002.\n\n** Introduction\n\n[[#<]], [[#<<]]\n\n** Process notation\n\n[[run/port]], [[run/file]], [[run-string]], [[run-strings]],\n[[run/sexp]], [[run/sexps]],\n[[run/port*]], [[run/file*]], [[run-string*]], [[run-strings*]],\n[[run/sexp*]], [[run/sexps*]]\n\n[[port->string]], [[port->sexp-list]], [[port->string-list]],\n[[port->list]], [[port-fold]]\n\n[[run/port+proc]], [[run/port+proc*]], [[run/collecting]],\n[[run/collectiong*]], [[||]], [[&&]]\n\n[[char-filter]], [[string-filter]]\n\n** System calls\n[[errno-error]], [[with-errno-handler*]], [[with-errno-handler]]\n\n[[close-after]], [[error-output-port]], \n[[with-current-input-port*]], [[with-current-output-port*]],\n[[with-error-output-port*]], \n[[with-current-input-port]], [[with-current-output-port]],\n[[with-error-output-port]], \n[[set-current-input-port!]], [[set-current-output-port!]],\n[[set-error-output-port!]], [[close]],\n[[stdports->stdio]], [[stdio->stdports]],\n[[with-stdio-ports*]], [[with-stdio-ports]]\n\n[[make-string-input-port]], [[make-string-output-port]],\n[[string-output-port-output]], [[call-with-string-output-port]]\n\n[[fdes->inport]], [[fdes->outport]], [[port->fdes]],\n[[port-revealed]], [[release-port-handle]], [[call/fdes]],\n[[move->fdes]]\n\n[[dup]], [[dup->inport]], [[dup->outport]], [[dup->fdes]],\n[[seek]], [[tell]], [[open-file]], [[open-input-file]],\n[[open-output-file]], [[open-fdes]], [[fdes-flags]],\n[[set-fdes-flags]], [[fdes-status]], [[set-fdes-status]],\n[[pipe]], [[read-string]], [[read-string!]],\n[[read-string/partial]], [[read-string!/partial]],\n[[select]], [[select!]], [[write-string]], [[write-string/partial]],\n[[set-port-buffering]], [[force-output]], [[flush-all-ports]],\n[[make-lock-region]], [[lock-region]], [[lock-region/no-block]],\n[[get-lock-region]], [[unlock-region]], [[with-region-lock*]],\n[[with-region-lock]]\n\n[[create-directory]], [[create-fifo]], [[create-hard-link]],\n[[create-symlink]], [[delete-directory]],\n[[delete-file]], [[delete-filesys-object]], [[read-symlink]],\n[[rename-file]], [[set-file-mode]], [[set-file-owner]],\n[[set-file-group]], [[set-file-times]],\n[[sync-file]], [[sync-file-system]],\n[[truncate-file]], [[file-info]], [[file-directory?]],\n[[file-fifo?]], [[file-regular?]], [[file-socket?]],\n[[file-special?]], [[file-symlink?]], [[file-not-readable?]],\n[[file-not-writable?]], [[file-not-executable?]],\n[[file-readable?]], [[file-writable?]], [[file-executable?]],\n[[file-not-exists?]], [[file-exists]], [[directory-files]],\n[[glob]], [[glob-quote]], [[file-match]],\n[[create-temp-file]], [[temp-file-iterate]],\n[[*temp-file-template*]], [[temp-file-channel]]\n\n[[exec]], [[exec-path]], [[exec/env]], [[exec-path/env]],\n[[%exec]], [[exec-path-search]], [[exit]], [[%exit]],\n[[call-terminally]], [[suspend]], [[fork]], [[%fork]],\n[[fork/pipe]], [[%fork/pipe]], [[fork/pipe+]], [[%fork/pipe+]],\n[[pid->proc]], [[autoreap-policy]], [[reap-zombies]],\n[[wait]], [[wait-any]], [[wait-process-group]],\n[[status:exit-val]], [[status:stop-sig]], [[status:term-sig]]\n\n[[umask]], [[set-umask]], [[with-umask*]], [[with-umask]],\n[[chdir]], [[cwd]], [[with-cwd*]], [[with-cwd]],\n[[pid]], [[parent-pid]], [[process-group]], [[set-process-group]],\n[[set-priority]], [[priority]], [[nice]],\n[[user-login-name]], [[user-uid]], [[user-effective-uid]],\n[[user-gid]], [[user-effective-gid]], [[user-supplementary-gids]],\n[[set-uid]], [[set-gid]], [[process-times]],\n[[cpu-ticks/sec]]\n\n[[user-info]], [[->uid]], [[->username]],\n[[group-info]]\n\n[[command-line-arguments]], [[command-line]],\n[[arg]], [[arg*]], [[argv]]\n\n[[system-name]]\n\n[[signal-process]], [[signal-process-group]], [[itimer]],\n[[pause-until-interrupt]], [[process-sleep]], [[process-sleep-until]],\n\n[[signal->interrupt]], [[interrupt-set]], [[enabled-interrupts]],\n[[set-enabled-interrupts]], [[with-enabled-interrupts]],\n[[with-enabled-interrupts*]], [[set-interrupt-handler]],\n[[interrupt-handler]]\n\n[[make-date]], [[time+ticks]], [[ticks/sec]], [[date]], [[time]],\n[[date->string]], [[format-date]], [[fill-in-date!]],\n[[setenv]], [[getenv]], [[env->alist]], [[alist->env]],\n[[alist-delete]], [[alist-update]], [[alist-compress]],\n[[with-env*]], [[with-total-env*]], [[with-env]], [[with-total-env]],\n[[add-before]], [[add-after]], [[home-directory]],\n[[exec-path-list]]\n\n[[tty?]], [[tty-file-name]], [[make-tty-info]], [[copy-tty-info]],\n[[tty-info]], [[set-tty-info/now]], [[set-tty-info/drain]],\n[[set-tty-info/flush]], [[send-tty-break]], [[drain-tty]],\n[[flush-tty/input]], [[flush-tty/output]], [[flush-tty/both]],\n[[start-tty-output]], [[stop-tty-output]], [[start-tty-input]],\n[[stop-tty-input]], [[open-control-tty]], [[become-session-leader]],\n[[tty-process-group]], [[set-tty-process-group]], [[control-tty-file-name]],\n[[fork-pty-session]], [[open-pty]], [[pty-name->tty-name]],[[tty-name->pty-name]], [[make-pty-generator]], [[ttychar/delete-char]],\n[[ttychar/delete-line]], [[ttychar/eof]], [[tychar/eol]],\n[[ttychar/interrupt]], [[ttychar/quit]]\n")
("char-set:printing" . "(:ctime 1018082675 :cuser #f :mtime 1018082675 :muser #f)[[$$include char-set:lower-case]]\n")
("RRRS" . "(:ctime 1152474763 :cuser #f :mtime 1467277534 :muser #f)The Revised Revised Report on Scheme or The Uncommon Lisp. (1985)\n\nhttp://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.18.1891\n\n----\n\n* Special forms\n\n[[quote]], [[lambda]], [[if]], [[cond]], [[case]], [[and]], [[or]], [[let]], [[let*]], [[letrec]], [[rec]], [[named-lambda]], [[define]], [[set!]], [[begin]], [[sequence]], [[do]]\n\n* Booleans\n[[#!false]], [[#!true]], [[not]], [[nil]], [[t]]\n\n* Equivalence predicates\n[[eq?]], [[eqv?]], [[equal?]]\n\n* Pairs and lists\n[[pair?]], [[cons]], [[car]], [[cdr]], [[set-car!]], [[set-cdr!]], [[#!null]], [[null?]], [[list]], [[length]], [[append]], [[append!]], [[reverse]], [[list-ref]], [[list-tail]], [[last-pair]], [[memq]], [[memv]], [[member]], [[assq]], [[assv]], [[assoc]]\n\n* Symbols\n[[symbol?]], [[symbol->string]], [[string->symbol]]\n\n* Numbers\n[[number?]], [[complex?]], [[real?]], [[rational?]], [[integer?]], [[zero?]], [[positive?]], [[negative?]], [[odd?]], [[even?]], [[exact?]], [[inexact?]], [[=]], [[=?]], [[<]], [[<?]], [[>]], [[>?]], [[<=]], [[<=?]], [[>=]], [[>=?]], [[max]], [[min]], [[+]], [[*]], [[-]], [[/]], [[1+]], [[-1+]], [[abs]], [[quotient]], [[remainder]], [[modulo]], [[gcd]], [[lcm]], [[floor]], [[ceiling]], [[truncate]], [[round]], [[rationalize]], [[exp]], [[log]], [[expt]], [[sin]], [[cos]], [[tan]], [[asin]], [[acos]], [[atan]], [[make-rectangular]], [[make-polar]], [[real-part]], [[imag-part]], [[magnitude]], [[angle]], [[exact->inexact]], [[inexact->exact]]\n\n[[number->string]], [[string->number]]\n\n[[int]], [[rat]], [[fix]], [[flo]], [[sci]], [[rect]], [[polar]], [[heur]], [[exactness]], [[radix]]\n\n* Character\n[[char?]], [[char=?]], [[char<?]], [[char>?]], [[char<=?]], [[char>=?]], [[char-ci=?]], [[char-ci<?]], [[char-ci>?]], [[char-ci<=?]], [[char-ci>=?]], [[char-upper-case?]], [[char-lower-case?]], [[char-alphabetic?]], [[char-numeric?]], [[char-whitespace?]], [[char->integer]], [[integer->char]], [[char-upcase]], [[char-downcase]]\n\n* Strings\n[[string?]], [[string-null?]], [[string=?]], [[string-ci=?]], [[string=?]], [[string<?]], [[string>?]], [[string<=?]], [[string>=?]], [[string-ci<?]], [[string-ci>?]], [[string-ci<=?]], [[string-ci>=?]], [[make-string]], [[string-length]], [[string-ref]], [[substring]], [[string-append]], [[string->list]], [[list->string]], [[string-set!]], [[string-fill!]], [[string-copy]], [[substring-fill!]], [[substring-move-right!]], [[substring-move-left!]]\n\n* Vectors\n[[vector?]], [[make-vector]], [[vector]], [[vector-length]], [[vector-ref]], [[vector-set!]], [[vector->list]], [[list->vector]], [[vector-fill!]]\n\n* The object table\n[[object-hash]], [[object-unhash]]\n\n* Procedures\n[[apply]], [[map]], [[for-each]], [[call-with-current-continuation]]\n\n* Ports\n[[call-with-input-file]], [[call-with-output-file]], [[input-port?]], [[output-port?]], [[current-input-port]], [[current-output-port]], [[with-input-from-file]], [[with-output-to-file]], [[open-input-file]], [[open-output-file]], [[close-input-port]], [[close-output-port]]\n\n* Input\n[[eof-object?]], [[read]], [[read-char]], [[char-ready?]], [[load]]\n\n* Output\n[[write]], [[display]], [[newline]], [[write-char]], [[transcript-on]], [[transcript-off]]\n")
("hashtable-set!" . "(:ctime 1191359987 :cuser #f :mtime 1191359987 :muser #f)* [procedure] hashtable-set! ''hashtable'' ''key'' ''obj''\n\n[[R6RS]]: Changes ''hashtable'' to associate ''key'' with ''obj''.\n\nSee also [[Concept:HashTable]].\n\nOther implementations have [[hash-table-set!]], [[hashtable-put!]],\n[[hash-table-put!]], [[hash-table/put!]], [[put!]], [[table-set!]].\n")
("case-lambda" . "(:ctime 1014883120 :cuser #f :mtime 1099722607 :muser #f)* [syntax] case-lambda (''formals'' ''body'') ...\n\n[[SRFI-16]], [[ChezScheme]], [[Chicken]], [[MzScheme]], [[Gauche]], [[STklos]]\n\n{{{\n(define plus\n   (case-lambda \n     (() 0)\n     ((x) x)\n     ((x y) (+ x y))\n     ((x y z) (+ (+ x y) z))\n     (args (apply + args))))\n\n(plus)                     --> 0\n(plus 1)                   --> 1\n(plus 1 2 3)               --> 6\n\n((case-lambda \n   ((a) a)\n   ((a b) (* a b)))\n 1 2 3)                    --> error\n}}}\n\nSee also [[lambda]].\n")
("SRFI-89" . "(:ctime 1184128266 :cuser #f :mtime 1184128266 :muser #f)SRFI 89: Optional positional and named parameters\n\nhttp://srfi.schemers.org/srfi-89/srfi-89.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[define*]], [[lambda*]]\n")
("list-index" . "(:ctime 1014870670 :cuser #f :mtime 1014870670 :muser #f)* [procedure] list-index ''pred'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Return the index of the leftmost element that satisfies ''pred''.\nThe iteration stops when one of the lists runs out of values; \nin this case, list-index returns #f. \n")
("char-set-complement!" . "(:ctime 1099288296 :cuser #f :mtime 1099288296 :muser #f)[[$$include char-set-complement]]\n")
("display*" . "(:ctime 1039756356 :cuser #f :mtime 1039756356 :muser #f)* [procedure] display* ''expr'' ...\n\n[[Bigloo]]: displays ''expr'' ....  Does not append\nnewline.  See [[print]].\n\nThis is called [[print*]] in some implementations.\n")
("user-information" . "(:ctime 1015273778 :cuser #f :mtime 1015273778 :muser #f)* [procedure] user-information ''user''\n\n[[Chicken]]: returns the user information (password entry fields) of ''user'' (user name\nor uid), in 7 values.\n\n")
("string=" . "(:ctime 1014892479 :cuser #f :mtime 1014892792 :muser #f)* [procedure] string= ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string<> ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string<= ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string< ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string>= ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string> ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-compare]].\n\n")
("integer->digit" . "(:ctime 1015772145 :cuser #f :mtime 1015772145 :muser #f)[[$$include digit->integer]]\n")
("do-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535105 :muser #f)* [syntax] do-ec ''qualifier'' ... ''command''\n[[SRFI-42]]:\nEvaluates the ''command'' exactly once for each binding in the sequence\ndefined by the ''qualifier''s. If there are no ''qualifier''s ''command'' is\nevaluated exactly once. The expression is evaluated for its side-effects\nonly. The result of the comprehension is unspecified.\n\n")
("file-unlock" . "(:ctime 1015199209 :cuser #f :mtime 1015199337 :muser #f)* [procedure] file-unlock ''lock''\n\n[[Chicken]]: ''lock'' is the object returned from [[file-lock]].\n\n")
("call/1cc" . "(:ctime 1014941492 :cuser #f :mtime 1014941492 :muser #f)* [procedure] call/1cc ''procedure''\n\n[[ChezScheme]]: creates ''one-shot continuation'' and passes it to\n''procedure''.\n\nSee also [[call-with-current-continuation]], [[call/cc]].\n")
("fp>" . "(:ctime 1191226812 :cuser #f :mtime 1191226812 :muser #f)[[$$include fp=]]\n")
("a:flor32b" . "(:ctime 1144485145 :cuser #f :mtime 1144529257 :muser #f)* [procedure] a:flor32b [''z'']\n[[SRFI-63]]: Returns an inexact 32.bit flonum real uniform-array prototype.\n")
("bit-extract" . "(:ctime 1039751024 :cuser #f :mtime 1039751024 :muser #f)* [procedure] bit-extract ''n'' ''start'' ''end''\n\n[[Guile]]: returns an integer whose bits are extracted\nfrom integer ''n'' 's ''start''-th and ''end''-th bits.\n")
("sys-getegid" . "(:ctime 1038189989 :cuser #f :mtime 1038189989 :muser #f)[[$$include sys-getgid]]\n")
("get-keyword*" . "(:ctime 1038030051 :cuser #f :mtime 1038030064 :muser #f)* [macro] get-keyword* ''key'' ''kv-list'' [''default'']\n\n[[Gauche]]: like [[get-keyword]], but evaluates ''default''\nonly if ''key'' is not found in ''kv-list''. \n")
("Index:w" . "(:ctime 1014846469 :cuser #f :mtime 1015014809 :muser #f)[[$$index w]]\n\n")
("flonum-unparser-cutoff" . "(:ctime 1353896934 :cuser #f :mtime 1353896934 :muser #f) (fluid-let ((flonum-unparser-cutoff '(absolute 5)))\n       (number->string (* 4 (atan 1 1))))\n")
("&i/o-file-is-read-only-error" . "(:ctime 1099273736 :cuser #f :mtime 1099273755 :muser #f)* [condition-type] &i/o-file-is-read-only-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-file-is-read-only-error &i/o-file-protection-error\n  i/o-file-is-read-only-error?)\n}}}\n\nSee [[&condition]], [[&i/o-file-protection-error]].\n")
("cfl=" . "(:ctime 1014953199 :cuser #f :mtime 1014953199 :muser #f)* [procedure] cfl= ''cflonum'' ...\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[=]], [[fl=]]\n")
("kill-thread" . "(:ctime 1020750162 :cuser #f :mtime 1020750162 :muser #f)* [procedure] kill-thread ''thread''\n\n[[MzScheme]]: kill a thread.\n\nSRFI-18 and SRFI-21 have [[thread-terminate!]].\n")
("system-information" . "(:ctime 1015273713 :cuser #f :mtime 1015273713 :muser #f)* [procedure] system-information\n\n[[Chicken]]: calls uname(), and returns the result in 5 values.\n\nGauche has [[sys-uname]], but it returns a list.\n")
("get-process-id" . "(:ctime 1015137793 :cuser #f :mtime 1015282657 :muser #f)* [procedure] get-process-id\n* [procedure] get-parent-process-id\n\n[[Scheme48]]: note: Scheme48's process-id is a structure, not just an \ninteger.  See also [[process-id?]], [[process-id=?]], [[process-id->integer]],\n[[integer->process-id]], [[process-id-exit-status]], \n[[process-id-terminating-signal]], [[wait-for-child-process]].\n\nSome implementations have procedures to get an integer process id;\nsee [[current-process-id]], [[parent-process-id]],\n[[sys-getpid]], [[sys-getppid]], [[getpid]], [[getppid]].\n")
("-1+" . "(:ctime 1100163281 :cuser #f :mtime 1100163389 :muser #f)* [procedure] -1+ ''num''\n\n[[MIT-Scheme]]:\n\nSee also [[1+]], [[1-]].\n")
("sstats-print" . "(:ctime 1015029360 :cuser #f :mtime 1015029360 :muser #f)* [procedure] sstats-print ''sstats'' [''output-port'']\n\n[[ChezScheme]]: see [[statistics]].\n")
("test-result-set!" . "(:ctime 1151049296 :cuser #f :mtime 1151080705 :muser #f)* [syntax] test-result-set! ''runner'' ''pname'' ''value''\n\n[[SRFI-64]]: sets the values of the test result property named ''pname'' to ''value''.\n")
("write-with-shared-structure" . "(:ctime 1099277561 :cuser #f :mtime 1099277561 :muser #f)* [procedure] write-with-shared-structure ''obj'' [''port'' [''optarg'']]\n\n[[SRFI-38]]: Writes an external representation of ''obj'' to ''port'',\nusing the shared structure notation such as [[#1=]] and [[#1#]] if needed.\n\nSome implementations may have a shorter name, [[write/ss]], as well.\n\nSome implementations may extend the built-in [[write]] to handle\nthe shared structure.\n")
("tan" . "(:ctime 1014858924 :cuser #f :mtime 1191311978 :muser #f)* [procedure] tan ''z''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[sin]], [[cos]], [[atan]], [[tanh]].\n\n")
("program" . "(:ctime 1014882169 :cuser #f :mtime 1014882277 :muser #f)* [configuration language] program ''program-clause'' ...\n\n[[SRFI-7]]: meta-level configuration language.  ''program-clause''\nmay be one of the followings:\n\n  (requires <feature identifier>+)\n  (files <filename>*)\n  (code <Scheme expression, definition, or syntax definition>*)\n  (feature-cond <feature-cond clause>+)\n  (feature-cond <feature-cond clause>* (else <program clause>+))\n\nSee also [[requires]], [[files]], [[code]], [[feature-cond]],\n[[cond-expand]].\n\n\n")
("au32" . "(:ctime 1099398099 :cuser #f :mtime 1099398100 :muser #f)[[$$include ac64]]\n")
("get-parent-process-id" . "(:ctime 1015137817 :cuser #f :mtime 1015137817 :muser #f)[[$$include get-process-id]]\n")
("char-set-map" . "(:ctime 1039169043 :cuser #f :mtime 1039169043 :muser #f)* [procedure] char-set-map ''proc'' ''char-set''\n\n[[SRFI-14]]: apply ''proc'' for each character in\n''char-set'', and creates a new character set\nthat consists of the characters returned from ''proc''.\nSee also [[char-set-fold]], [[char-set-for-each]].\n")
("begin" . "(:ctime 1014838660 :cuser #f :mtime 1191209699 :muser #f)* [syntax] begin ''expr'' ''expr2'' ...\n\n[[R5RS]], [[R6RS]]\n\nSome implementations allow begin with no ''exprs'': [[Chicken]], [[STk]], [[Gauche]]\n\n* [module clause] begin ''expr'' ...\n\n[[Chicken]]: this form can be used in the module clause in [[define-module]].\nSee [[Chicken:ModuleSystem]].\n\n* [configuration language] begin ''expr'' ...\n\n[[Scheme48]]: used in configuration language.  See [[Scheme48:ModuleSystem]].\n")
("define-reader-ctor" . "(:ctime 1015070011 :cuser #f :mtime 1015070011 :muser #f)* [procedure] define-reader-ctor ''symbol'' ''proc''\n\n[[SRFI-10]]: makes ''proc'' as a reader of the form #,(''symbol'' ''exp'' ...).\n\nSee also [[#,]].\n")
("fxmodulo" . "(:ctime 1014950854 :cuser #f :mtime 1191225108 :muser #f)[[$$include fxquotient]]\n")
("mutex-unlock!" . "(:ctime 1015927624 :cuser #f :mtime 1015963655 :muser #f)* [procedure] mutex-unlock! ''mutex'' [''condition-variable'' ''timeout'']\n\n[[SRFI-18]], [[SRFI-21]]\n")
("fxsrl" . "(:ctime 1014950996 :cuser #f :mtime 1191225451 :muser #f)[[$$include fxsll]]\n")
("open-input-file" . "(:ctime 1014857223 :cuser #f :mtime 1039755577 :muser #f)* [procedure] open-input-file ''filename''\n\n[[R5RS]]: Takes a string naming an existing file and returns an input port capable of delivering characters from the file. If the file cannot\nbe opened, an error is signalled.\n\nSee also [[open-output-file]].\n\n[[Bigloo]], [[STk]]: extends this to allow piped command\nin ''filename''.\n\n* [procedure] open-input-file ''filename'' [''mode'']\n\n[[Chicken]]: takes an optional argument which can be #:text, #:binary or #:append.\n\n* [procedure] open-input-file ''filename'' [''flags'']\n\n[[Scsh]]: ''flags'' is an integer composed by or-ing\nbit flags.\n\n* [procedure] open-input-file ''filename'' [''options'' ...]\n\n[[Gauche]] extends R5RS to take various keyword arguments to customize\nbehavior of [[open-input-file]].\n")
("boot-tail" . "(:ctime 1015883557 :cuser #f :mtime 1015883557 :muser #f)* [procedure] boot-tail ''dumped?''\n\n[[SCM]]: called just before entering the interactive top-level.\n")
("char-set:upper-case" . "(:ctime 1018082632 :cuser #f :mtime 1018082632 :muser #f)[[$$include char-set:lower-case]]\n")
("exec-file-with-environment" . "(:ctime 1015285338 :cuser #f :mtime 1015285338 :muser #f)[[$$include exec]]\n")
("queue-length" . "(:ctime 1017980638 :cuser #f :mtime 1017980650 :muser #f)* [procedure] queue-length ''queue''\n\n[[Scheme48]]: see also [[make-queue]].\n")
("SRFI-1" . "(:ctime 1014861412 :cuser #f :mtime 1122428496 :muser #f)SRFI-1: List Library \n\nhttp://srfi.schemers.org/srfi-1/srfi-1.html\n\n[[$$srfi-implementors]]\n\n----\n\n** Constructors\n\n[[cons]], [[list]],\n[[xcons]], [[cons*]], [[make-list]], [[list-tabulate]],\n[[list-copy]], [[circular-list]], [[iota]]\n\n** Predicates\n\n[[pair?]], [[null?]],\n[[proper-list?]], [[circular-list?]], [[dotted-list?]],\n[[not-pair?]], [[null-list?]], [[list=]]\n\n** Selectors\n\n[[car]], [[cdr]], [[list-ref]],\n[[first]], [[second]], [[third]], [[fourth]], [[fifth]],\n[[sixth]], [[seventh]], [[eighth]], [[ninth]], [[tenth]],\n[[car+cdr]],\n[[take]], [[drop]],\n[[take-right]], [[drop-right]],\n[[take!]], [[drop-right!]], [[split-at]], [[split-at!]], [[last]], [[last-pair]]\n\n** Miscellaneous: length, append, concatenate, reverse, zip & count\n\n[[length]], [[length+]],\n[[append]], [[concatenate]], [[reverse]],\n[[append!]], [[concatenate!]], [[reverse!]],\n[[append-reverse]], [[append-reverse!]],\n[[zip]], [[unzip1]], [[unzip2]], [[unzip3]], [[unzip4]], [[unzip5]],\n[[count]]\n\n** Fold, unfold & map\n\n[[map]], [[for-each]],\n[[fold]], [[unfold]], [[pair-fold]], [[reduce]], [[fold-right]],\n[[unfold-right]], [[pair-fold-right]], [[reduce-right]],\n[[append-map]], [[append-map!]],\n[[map!]], [[pair-for-each]], [[filter-map]], [[map-in-order]],\n\n** Filtering & partitioning\n\n[[filter]], [[partition]], [[remove]],\n[[filter!]], [[partition!]], [[remove!]],\n\n** Searching\n\n[[member]], [[memq]], [[memv]],\n[[find]], [[find-tail]], [[any]], [[every]],\n[[list-index]],\n[[take-while]], [[drop-while]], [[take-while!]],\n[[span]], [[break]], [[span!]], [[break!]]\n\n** Deleting\n\n[[delete]], [[delete-duplicates]], [[delete!]], [[delete-duplicates!]]\n\n** Association lists\n\n[[assoc]], [[assq]], [[assv]],\n[[alist-cons]], [[alist-copy]],\n[[alist-delete]], [[alist-delete!]]\n\n** Set operations on lists\n\n[[lset<=]], [[lset=]], [[lset-adjoin]],\n[[lset-union]], [[lset-union!]],\n[[lset-intersection]], [[lset-intersection!]],\n[[lset-difference]], [[lset-difference!]],\n[[lset-xor]], [[lset-xor!]],\n[[lset-diff+intersection]], [[lset-diff+intersection!]]\n\n** Primitive side-effects\n\n[[set-car!]], [[set-cdr!]]\n\n\n\n")
("fx1-" . "(:ctime 1014951236 :cuser #f :mtime 1014951236 :muser #f)* [procedure] fx1- ''fixnum''\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[1-]]\n")
("SRFI-48" . "(:ctime 1099394850 :cuser #f :mtime 1122428862 :muser #f)SRFI-48: Intermediate Format Strings\n\nhttp://srfi.schemers.org/srfi-48/srfi-48.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[format]]\n")
("char-upper-case?" . "(:ctime 1015063503 :cuser #f :mtime 1015063503 :muser #f)[[$$include char-lower-case?]]\n")
("copy-port" . "(:ctime 1015916140 :cuser #f :mtime 1018335008 :muser #f)* [procedure] copy-port ''src-port'' ''dst-port''\n\n[[Scsh]], [[STk]]: Read from ''src-port'' and writes it to ''dst-port''.\n\n* [procedure] copy-port ''src-port'' ''dst-port'' &keyword ''unit''\n\n[[Gauche]]: takes a keyword argument ''unit'' --- you can copy by bytes, characters,\nor blocks.\n\n")
("use-syntax" . "(:ctime 1014928760 :cuser #f :mtime 1014928768 :muser #f)* [syntax] use-syntax ''module-name''\n\n[[Guile]]: Load the module ''module-name'' and use its system transformer as\nthe system transformer for the currently defined module, as well\nas installing it as the current system transformer.\n\nSee also [[use-modules]], [[define-module]].\n")
("with-input-from-string" . "(:ctime 1015070414 :cuser #f :mtime 1099726274 :muser #f)* [procedure] with-input-from-string ''string'' ''thunk''\n* [procedure] with-output-to-string ''thunk''\n\n[[Bigloo]], [[Chicken]], [[Gauche]], [[STk]], [[STklos]], [[SISC]]\n\nSee also [[open-input-string]], [[open-output-string]],\n[[call-with-input-string]], [[call-with-output-string]]\n")
("condition-variable?" . "(:ctime 1015927646 :cuser #f :mtime 1015963669 :muser #f)* [procedure] condition-variable? ''obj''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("char-set-union!" . "(:ctime 1099288385 :cuser #f :mtime 1099288385 :muser #f)[[$$include char-set-union]]\n")
("obj->string" . "(:ctime 1063240247 :cuser #f :mtime 1063240247 :muser #f)[[$$include string->obj]]\n")
("#i" . "(:ctime 1014848100 :cuser #f :mtime 1014848100 :muser #f)* [reader syntax] #i''nnn...''\n\n[[R5RS]] Denotes inexact number literal.\n\nSee also [[#e]].\n")
("rational?" . "(:ctime 1014854816 :cuser #f :mtime 1191210902 :muser #f)* [procedure] rational? ''obj''\n\n[[R5RS]], [[R6RS]]\n\nNote: in R6RS, (rational? +inf.0), (rational? -inf.0) and (rational? +nan.0) are all #f.\n\nSee also [[number?]], [[complex?]], [[real?]], [[integer?]].\n")
("room" . "(:ctime 1015888231 :cuser #f :mtime 1015888231 :muser #f)* [procedure] room [''flag'']\n\n[[SCM]]: prints heap information.\n")
("zip" . "(:ctime 1014864837 :cuser #f :mtime 1014864849 :muser #f)* [procedure] zip ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]\n\nSee also [[unzip1]], [[unzip2]], [[unzip3]],\n[[unzip4]], [[unzip5]].\n")
("wstandend" . "(:ctime 1015883074 :cuser #f :mtime 1015883074 :muser #f)[[$$include wstandout]]\n")
("&i/o-filename-error" . "(:ctime 1099273653 :cuser #f :mtime 1099273653 :muser #f)* [condition-type] &i/o-filename-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-filename-error &i/o-error\n  i/o-filename-error?\n  (filename i/o-error-filename))\n}}}\n\nSee [[&condition]], [[&i/o-error]].\n")
("&i/o-malformed-filename-error" . "(:ctime 1099273686 :cuser #f :mtime 1099273686 :muser #f)* [condition-type] &i/o-malformed-filename-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-malformed-filename-error &i/o-filename-error\n  i/o-malformed-filename-error?)\n}}}\n\nSee [[&condition]], [[&i/o-filename-error]].\n")
("<fl" . "(:ctime 1039382028 :cuser #f :mtime 1039382028 :muser #f)[[$$include =fl]]\n")
("ucs2-string-append" . "(:ctime 1039428191 :cuser #f :mtime 1039428191 :muser #f)* [procedure] ucs2-string-append ''ucs2str'' ...\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("R7RS" . "(:ctime 1412118678 :cuser #f :mtime 1412118678 :muser #f)Revised^7 Report on the Algorithmic Language Scheme. (2013)\n\nhttp://www.r7rs.org/\n\n----\n\n* Lexical conventions\n\n** Datum Labels\n\n[[#1#]], [[#1=]]\n\n* Expressions\n\n** Primitive expression types\n\n[[quote]], [[']], [[lambda]], [[if]], [[set!]],\n[[include]], [[include-ci]]\n\n** Derived expression types\n\n[[cond]], [[and]], [[or]], [[when]], [[unless]],\n[[cond-expand]]\n\n[[let]], [[let*]], [[letrec]], [[letrec*]],\n[[let-values]], [[let*-values]], [[begin]], [[do]]\n\n[[delay]], [[delay-force]], [[force]], [[promise?]], [[make-promise]]\n\n[[make-parameter]], [[parameterize]]\n\n[[guard]]\n\n[[quasiquote]], [[`]], [[unquote]], [[,]], [[unquote-splicing]], [[,@]]\n\n[[case-lambda]]\n\n[[let-syntax]], [[letrec-syntax]], [[syntax-rules]], [[syntax-error]]\n\n** Program structure\n\n[[import]], [[define]], [[define-values]], [[define-syntax]],\n\n** Record-type definitions\n\n[[define-record-type]]\n\n* Libraries\n\n[[define-library]]\n\n* Standard procedures\n\n** Equivalence predicates\n\n[[eqv?]], [[eq?]], [[equal?]]\n\n** Numbers\n\n[[number?]], [[complex?]], [[real?]], [[rational?]], [[integer?]],\n[[exact?]], [[inexact?]], [[exact-integer?]], [[finite?]], [[infinite?]],\n[[nan?]], [[zero?]], [[positive?]], [[negative?]], [[odd?]], [[even?]],\n[[max]], [[min]], [[+]], [[*]], [[-]], [[/]], [[abs]],\n[[floor/]], [[floor-quotient]], [[floor-remainder]],\n[[truncate/]], [[truncate-quotient]], [[truncate-remainder]],\n[[quotient]], [[remainder]], [[modulo]], [[gcd]], [[lcm]],\n[[numerator]], [[denominator]], [[floor]], [[ceiling]], [[truncate]],\n[[round]], [[rationalize]],\n[[exp]], [[log]], [[sin]], [[cos]], [[tan]], [[asin]], [[acos]], [[atan]],\n[[square]], [[sqrt]], [[exact-integer-sqrt]], [[expt]],\n[[make-rectangular]], [[make-polar]], [[real-part]], [[imag-part]],\n[[magnitude]], [[angle]], [[inexact]], [[exact]],\n[[number->string]], [[string->number]]\n\n** Booleans\n\n[[not]], [[boolean?]], [[boolean=?]]\n\n** Pairs and lists\n\n[[pair?]], [[cons]], [[car]], [[cdr]], [[set-car!]], [[set-cdr!]],\n[[caar]], [[cadr]], [[cdar]], [[cddr]], [[null?]], [[list?]],\n[[make-list]], [[list]], [[length]], [[append]], [[reverse]],\n[[list-tail]], [[list-ref]], [[list-set!]],\n[[memq]], [[memv]], [[member]], [[assq]], [[assv]], [[assoc]],\n[[list-copy]]\n\n** Symbols\n\n[[symbol?]], [[symbol->string]], [[string->symbol]]\n\n** Characters\n\n[[char?]], [[char=?]], [[char<?]], [[char<=?]], [[char>?]], [[char>=?]],\n[[char-ci=?]], [[char-ci<?]], [[char-ci<=?]], [[char-ci>?]], [[char-ci>=?]],\n[[char-alphabetic?]], [[char-numeric?]], [[char-whitespace?]],\n[[char-upper-case?]], [[char-lower-case?]], [[digit-value]],\n[[char->integer]], [[integer->char]], [[char-upcase]],\n[[char-downcase]], [[char-foldcase]]\n\n** Strings\n\n[[string?]], [[make-string]], [[string]], [[string-length]], [[string-ref]],\n[[string-set!]], [[string=?]], [[string-ci=?]], \n[[stirng<?]], [[string-ci<?]], [[string<=?]], [[string-ci<=?]],\n[[string>?]], [[string-ci>?]], [[string>=?]], [[string-ci>=?]],\n[[string-upcase]], [[string-downcase]], [[string-foldcase]],\n[[substring]], [[string-append]], [[string->list]], [[list->string]],\n[[string-copy]], [[string-copy!]], [[string-fill!]]\n\n** Vectors\n\n[[vector?]], [[make-vector]], [[vector]], [[vector-length]], [[vector-ref]],\n[[vector-set!]], [[vector->list]], [[list->vector]], [[vector->string]],\n[[string->vector]], [[vector-copy]], [[vector-copy!]], [[vector-fill!]]\n\n** Bytevectors\n\n[[bytevector?]], [[make-bytevector]], [[bytevector]],\n[[bytevector-length]], [[bytevector-u8-ref]], [[bytevector-u8-set!]],\n[[bytevector-copy]], [[bytevector-copy!]], [[bytevector-append]],\n[[utf8->string]], [[string->utf8]]\n\n** Control features\n\n[[procedure?]], [[apply]], [[map]], [[string-map]],\n[[vector-map]], [[for-each]], [[string-for-each]], [[vector-for-each]],\n[[call-with-current-continuation]], [[call/cc]],\n[[values]], [[call-with-values]]\n\n** Exceptions\n\n[[with-exception-handler]], [[raise]], [[raise-continuable]],\n[[error]], [[error-object?]], [[error-object-irritants]],\n[[read-error?]], [[file-error?]]\n\n** Environments and evaluation\n\n[[environment]], [[scheme-report-environment]],\n[[null-environment]], [[interaction-environment]], [[eval]]\n\n** Input and output\n\n[[call-with-port]], [[call-with-input-file]], [[call-with-output-file]],\n[[input-port?]], [[output-port?]], [[textual-port?]], [[binary-port?]],\n[[port?]], [[input-port-open?]], [[output-port-open?]],\n[[current-input-port]], [[current-output-port]], [[current-error-port]],\n[[with-input-from-file]], [[with-output-to-file]],\n[[open-input-file]], [[open-binary-input-file]],\n[[open-output-file]], [[open-binary-output-file]],\n[[close-port]], [[close-input-port]], [[close-output-port]],\n[[open-input-string]], [[open-output-string]], [[get-output-string]],\n[[open-input-bytevector]], [[open-output-bytevector]],\n[[get-output-bytevector]]\n\n[[read]], [[read-char]], [[peek-char]], [[read-line]],\n[[eof-object?]], [[eof-object]], [[char-ready?]], [[read-string]],\n[[read-u8]], [[peek-u8]], [[u8-ready?]], [[read-bytevector]]\n\n[[write]], [[write-shared]], [[write-simple]], [[display]],\n[[newline]], [[write-char]], [[write-string]], \n[[write-u8]], [[write-bytevector]], [[flush-output-port]]\n\n** System interface\n\n[[load]], [[file-exists?]], [[delete-file]], [[command-line]], [[exit]],\n[[emergency-exit]], [[get-environment-variable]],\n[[get-environment-variables]], [[current-second]],\n[[current-jiffy]], [[jiffies-per-second]], [[features]]\n")
("andmap" . "(:ctime 1014941382 :cuser #f :mtime 1327407072 :muser #f)* [procedure] andmap ''procedure'' ''list1'' ''list2'' ...\n\n[[ChezScheme]], [[MzScheme]]: applies ''procedure'' to corresponding elements \nof the ''lists'' in sequence until either the ''lists'' run out or\n''procedure'' returns a false value.\n\nThis is equivalent to [[SRFI-1]]'s [[every]], except that\n[[andmap]] requires all lists be the same length.\n\nSee also [[ormap]], [[every]], [[for-all]].\n [http://www.obtenir-rio.info rio orange]\n")
("close" . "(:ctime 1018382187 :cuser #f :mtime 1018382204 :muser #f)* [procedure] close ''fd/port''\n\n[[Scsh]]: closes the port or file descriptor.\n\nSome implementations have [[close-port]].\n")
("and" . "(:ctime 1014837956 :cuser #f :mtime 1191209268 :muser #f)* [syntax] and ''test'' ...\n\n[[R5RS]], [[R6RS]]: The ''test'' expressions are evaluated from left to right,\nand the value of the first expression that evaluates to a false value\nis returned. Any remaining expressions are not evaluated. If all \nthe expressions evaluate to true values, the value of\nthe last expression is returned. If there are no expressions then \n#t is returned\n\nSee also [[or]], [[and-let*]], [[andmap]].\n")
("exact-match?" . "(:ctime 1018083528 :cuser #f :mtime 1018083528 :muser #f)* [procedure] exact-match? ''regexp'' ''string''\n\n[[Scheme48]]: regexp matcher.  Returns a boolean value\nindicating whether ''string'' exactly matches ''regexp''.\nSee [[Concept:RegularExpression]], [[match]],\n[[any-match?]].\n\n")
("socket-host-address" . "(:ctime 1018343120 :cuser #f :mtime 1099738295 :muser #f)* [procedure] socket-host-address ''socket''\n\n[[STk]], [[STklos]]: returns a string of IP address of the\nremote host connected to ''socket''.\nSee also [[make-client-socket]], [[make-server-socket]],\n[[socket-host-name]], [[socket-local-address]].\n")
("try-finally" . "(:ctime 1161201462 :cuser #f :mtime 1161207568 :muser #f)* [syntax] try-finally ''body'' ''handler''\n\n[[Kawa]]: Runs ''body'' and returns its result(s).\n''handler'' is executed just before returning from this form,\neither normally or abnormally.\n")
("SRFI-131" . "(:ctime 1474476377 :cuser #f :mtime 1474476377 :muser #f)SRFI-131: ERR5RS Record Syntax (reduced)\n\nhttp://srfi.schemers.org/srfi-131/srfi-131.html\n\n[[$$srfi-implementors]]\n")
("move-file" . "(:ctime 1022544368 :cuser #f :mtime 1022544368 :muser #f)* [procedure] move-file ''src'' ''dst'' &keyword ''if-exists'' ''backup-suffix''\n\n[[Gauche]]: moves file.  ''src'' and ''dst'' can be on the\ndifferent filesystems.  See also [[copy-file]].\n")
("sin" . "(:ctime 1014858902 :cuser #f :mtime 1191311946 :muser #f)* [procedure] sin ''z''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[cos]], [[tan]], [[asin]], [[sinh]].\n\n")
("test-runner-aux-value" . "(:ctime 1151136447 :cuser #f :mtime 1151146521 :muser #f)* [syntax] test-runner-aux-value ''runner''\n* [syntax] test-runner-aux-value! ''runner'' ''value''\n\n[[SRFI-64]]: gets or sets the value of aux-value field of ''runner''.\n")
("SRFI-17" . "(:ctime 1014858686 :cuser #f :mtime 1122428631 :muser #f)SRFI-17: Generalized set!\n\nhttp://srfi.schemers.org/srfi-17/srfi-17.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[set!]], [[setter]], [[getter-with-setter]]\n\n")
("group-info-id" . "(:ctime 1018125303 :cuser #f :mtime 1018125303 :muser #f)[[$$include group-info?]]\n")
("getter-with-setter" . "(:ctime 1015017227 :cuser #f :mtime 1015017227 :muser #f)* [procedure] getter-with-setter ''proc''\n\n[[SRFI-17]]\n\nSee also [[set!]], [[setter]].\n")
("eval-handler" . "(:ctime 1015047823 :cuser #f :mtime 1015047823 :muser #f)* [procedure] eval-handler [''newhandler'']\n\n[[Chicken]]: gets/sets eval handler.  See [[eval]].\n")
("command-line" . "(:ctime 1038277550 :cuser #f :mtime 1418329611 :muser #f)* [procedure] command-line\n\n[[R6RS]], [[Scsh]]: returns a list of strings of command-line arguments,\n'''including the program name'''.\n\n[[Bigloo]]: returns a list of strings of command-line arguments,\n'''excluding the program name'''.  See also [[executable-name]].\n\nChicken has [[command-line-arguments]].  In [[Scsh]],\n[[command-line-arguments]] is a variable.\n\n[[Guile]]: Same as [[Scsh]].\n\n[[MIT-Scheme]]: Same as [[Bigloo]]. No [[executable-name]] procedure, though.\n")
("integer-length" . "(:ctime 1014955100 :cuser #f :mtime 1039750798 :muser #f)* [procedure] integer-length ''n''\n\n[[ChezScheme]], [[SLIB]], [[Gauche]], [[Guile]]:\nReturns the length in bits of the smallest two's complement\nrepresentation for ''n''.\n\n")
("blob-u16-native-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144717835 :muser #f)* [procedure] blob-u16-native-set! ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: equivalent to (blob-uint-set! 2 (endianess native) ''blob'' ''k'' ''n'').\n\nSee also [[blob-uint-set!]] and [[endianness]].\n")
("read" . "(:ctime 1170794282 :cuser #f :mtime 1170798183 :muser #f)* [procedure] read [''port'']\n\n[[R4RS]], [[R5RS]]: Returns the next object parsable from the given input port. ''port'' defaults to [[current-input-port]].\n")
("string-compare-ci" . "(:ctime 1014889726 :cuser #f :mtime 1144499437 :muser #f)* [procedure] string-compare-ci ''s1'' ''s2'' ''proc<'' ''proc='' ''proc>'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]: Case-insensitive variant of [[string-compare]].\n\n* [procedure] string-compare-ci string[1] string[2]\n[[SRFI-67]]: Case-insensitive variant of [[string-compare]].\nCompare strings as string-ci<=?. The suffix -ci means ``case\ninsensitive.''\n\n")
("blob->u8-list" . "(:ctime 1144700986 :cuser #f :mtime 1144712233 :muser #f)* [procedure] blob->u8-list ''blob''\n\n[[SRFI-74]]: Returns a newly allocated list of the octets of ''blob'' in the same order.\n")
("vector-map!" . "(:ctime 1099387370 :cuser #f :mtime 1191569952 :muser #f)* [procedure] vector-map! ''proc'' ''vec1'' ''vec2'' ...\n\n[[SRFI-43]]: Maps ''proc'' on elements of vectors.  Destructively modifies\n''vec1'' to store the results, and returns an unspecified value.\n\nSee also [[vector-map]], [[vector-for-each]].\n\n")
("a:floc64b" . "(:ctime 1144485145 :cuser #f :mtime 1144529205 :muser #f)* [procedure] a:floc64b [''z'']\n[[SRFI-63]]: Returns an inexact 64.bit flonum complex uniform-array prototype.\n")
("errno/isdir" . "(:ctime 1015077240 :cuser #f :mtime 1015077240 :muser #f)[[$$include errno/perm]]\n")
("car" . "(:ctime 1014839170 :cuser #f :mtime 1191314043 :muser #f)* [procedure] car ''obj''\n\n[[R5RS]], [[R6RS]]\n\nIn R6RS, (car '()) raises &assertion exception.\n\n")
("unit" . "(:ctime 1015048707 :cuser #f :mtime 1015048707 :muser #f)* [module clause] unit ''unitname''\n\n[[Chicken]]: defines a library unit which should be used when this module is imported. \nSee also [[define-module]].\n")
("compare-by=/>" . "(:ctime 1144494246 :cuser #f :mtime 1144505033 :muser #f)[[$$include compare-by<]]\n")
("chain>=?" . "(:ctime 1144494246 :cuser #f :mtime 1144504151 :muser #f)[[$$include chain=?]]\n")
("break-handler" . "(:ctime 1014964203 :cuser #f :mtime 1014964203 :muser #f)* [procedure] break-handler [''newval'']\n\n[[ChezScheme]] gets/sets the handler of [[break]].\n")
("implicit-exit-handler" . "(:ctime 1015047894 :cuser #f :mtime 1015047894 :muser #f)* [procedure] implicit-exit-handler [''newhandler'']\n\n[[Chicken]]: gets/sets a handler that is executed when the last expression\nof program has executed.  See also [[exit-handler]].\n")
("open/trunc" . "(:ctime 1015106392 :cuser #f :mtime 1015106392 :muser #f)[[$$include open/rdonly]]\n")
("file-test-lock" . "(:ctime 1015199314 :cuser #f :mtime 1015199314 :muser #f)* [procedure] file-test-lock ''port'' [''start'' ''len'']\n\n[[Chicken]]: see if the file referred by ''port'' is locked or not.\nSee also [[file-lock]], [[file-unlock]].\n")
("make-output-port" . "(:ctime 1014955817 :cuser #f :mtime 1015072994 :muser #f)* [procedure] make-output-port ''handler'' ''input-buffer''\n\n[[ChezScheme]]: creates a generic port for output\n\nSee also [[make-input-port]], [[make-input/output-port]],\n[[port-handler]], [[port-output-buffer]], [[port-output-size]],\n[[port-output-index]], [[set-port-output-size!]], [[set-port-output-index!]].\n\n* [procedure] make-output-port ''write'' ''close''\n\n[[Chicken]]\n\nSee also [[make-input-port]]\n\n")
("scheme" . "(:ctime 1015023248 :cuser #f :mtime 1015023450 :muser #f)* [module] scheme\n\n[[ChezScheme]]: bindings built into ChezScheme.\nSee also [[r5rs]], [[r5rs-syntax]], [[ieee]], [[module]].\n\n[[Gauche]]: bindings defined in R5RS.\nIn Gauche, a module [[gauche]] contains bindings built into Gauche.\nSee also [[null]], [[gauche]], [[user]], [[define-module]]\n")
("SRFI-99" . "(:ctime 1325858863 :cuser #f :mtime 1325858863 :muser #f)SRFI 99: ERR5RS Records\n\nhttp://srfi.schemers.org/srfi-99/srfi-99.html\n\n[[$$srfi-implementors]]\n----\n[[make-rtd]] [[rtd?]] [[rtd-constructor]] [[rtd-predicate]] [[rtd-accessor]] [[rtd-mutator]]\n[[record?]] [[record-rtd]] [[rtd-name]] [[rtd-parent]] [[rtd-field-names]] [[rtd-all-field-names]]\n")
("weak-cons" . "(:ctime 1015030715 :cuser #f :mtime 1015030715 :muser #f)* [procedure] weak-cons ''obj1'' ''obj2''\n\n[[ChezScheme]]: creates a weak pair.  See also [[#!bwp]], [[weak-pair?]],\n[[bwp-object?]], [[make-guardian]]\n")
("stream-filter" . "(:ctime 1099280541 :cuser #f :mtime 1099280541 :muser #f)* [procedure] stream-filter ''predicate'' ''stream''\n\n[[SRFI-40]]: Returns a new stream that consists of elements in ''stream''\nwhich satisfies ''predicate''.\n")
("sys-putenv" . "(:ctime 1015904773 :cuser #f :mtime 1015904773 :muser #f)[[$$include sys-getenv]]\n")
("<" . "(:ctime 1014954626 :cuser #f :mtime 1015066040 :muser #f)[[$$include =]]\n\n")
("string-parse-start+end" . "(:ctime 1014895213 :cuser #f :mtime 1014895213 :muser #f)* [procedure] string-parse-start+end ''proc'' ''s'' ''args''\n\n[[SRFI-13]]\n\nSee also [[string-parse-final-start+end]], [[let-string-start+end]]\n\n")
("error-handler" . "(:ctime 1014963660 :cuser #f :mtime 1015047746 :muser #f)* [procedure] error-handler [''newval'']\n\n[[ChezScheme]], [[Chicken]]: gets/sets current error handler.\n\nGauche has [[with-error-handler]] form that alters the current error handler.\n\nSee also [[error]].\n")
("byte-vector->s8vector" . "(:ctime 1015075777 :cuser #f :mtime 1015075777 :muser #f)[[$$include byte-vector->u8vector]]\n")
("signal-queue?" . "(:ctime 1020374786 :cuser #f :mtime 1020374786 :muser #f)* [procedure] signal-queue? ''x''\n\n[[Scheme48]]: see [[make-signal-queue]]\n")
("null-pointer" . "(:ctime 1015273927 :cuser #f :mtime 1015273927 :muser #f)* [procedure] null-pointer\n\n[[Chicken]]: (address->pointer 0).  See [[address->pointer]], [[null-pointer?]].\n")
("SRFI-90" . "(:ctime 1184128455 :cuser #f :mtime 1184128455 :muser #f)SRFI 90: Extensible hash table constructor\n\nhttp://srfi.schemers.org/srfi-90/srfi-90.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[make-table]]\n")
("drop" . "(:ctime 1014863678 :cuser #f :mtime 1014863678 :muser #f)* [procedure] drop ''x'' ''k''\n\n[[SRFI-1]]: returns all but the first ''k'' elements of list ''x''.\n\nSee also [[take]], [[drop-right]].\n\n")
("vector-index-right" . "(:ctime 1099388021 :cuser #f :mtime 1099388021 :muser #f)[[$$include vector-index]]\n")
("message-condition?" . "(:ctime 1099267607 :cuser #f :mtime 1099267607 :muser #f)* [procedure] message-condition? ''obj''\n\n[[SRFI-35]]: See [[&message]].\n")
("SRFI-113" . "(:ctime 1474475243 :cuser #f :mtime 1474475244 :muser #f)SRFI-113: Sets and bags \n\nhttp://srfi.schemers.org/srfi-113/srfi-113.html\n\n[[$$srfi-implementors]]\n")
("user-id->user-info" . "(:ctime 1018124485 :cuser #f :mtime 1018124544 :muser #f)* [procedure] user-id->user-info\n* [procedure] name->user-info\n\n[[Scheme48]]: obtain user information.\nSee [[Concept:UserGroup]], [[integer->user-id]].\n")
("#`" . "(:ctime 1015042402 :cuser #f :mtime 1191206739 :muser #f)* [reader syntax] #` ''template''\n\n[[R6RS]], [[SRFI-72]]: (quasisyntax ''template''). See [[quasisyntax]].\n\n* [reader syntax] #` ''string''\n\n[[Gauche]]: short notation of (string-interpolate ''string'').\nReturns a string, with every occurence of \",''expr''\" in ''string''\nis expanded to the value of ''expr''.\n\n  (let ((x 2)) #`\"The number is ,(+ x x).\") ==> \"The number is 4.\"\nSee also [[string-interpolate]].\n\n[[Chicken]] has a multiline string-interpolating syntax: see [[#<#]].\n\n* [reader syntax] #` ''code''\n\n[[MzScheme]]: denotes compiled code.\n\n")
(":" . "(:ctime 1144527545 :cuser #f :mtime 1144537203 :muser #f)* [syntax] : ''vars'' ''arg1'' ''arg'' ...\n[[SRFI-42]]:\nFirst the expressions ''arg1'' ''arg'' ... are evaluated into a[1] a[2] ... a[n]\nand then a global dispatch procedure is used to dispatch on the number and\ntypes of the arguments and run the resulting generator. Initially (after\nloading the [[SRFI]]), the following cases are recognized:\n\n::list:\nif for all i in {1..n}: (list? a[i]).\n::string:\nif for all i in {1..n}: (string? a[i]).\n::vector:\nif for all i in {1..n}: (vector? a[i]).\n::range:\nif n in {1..3} and for all i in {1..n}: (integer? a[i]) and (exact? a[i]).\n::real-range:\nif n in {1..3} and for all i in {1..n}: (real? a[i]).\n::char-range:\nif n = 2 and for all i in {1, 2}: (char? a[i]).\n::port:\nif n in {1,2} and (input-port? a[1]) and (procedure? a[2]).\n\nThe current dispatcher can be retrieved as (:-dispatch-ref), a new\ndispatcher d can be installed by (:-dispatch-set! d) yielding an\nunspecified result, and a copy of the initial dispatcher can be obtained as\n(make-initial-:-dispatch). Please refer to the section below for\nrecommendation how to add cases to the dispatcher.\n")
("flatten" . "(:ctime 1015070273 :cuser #f :mtime 1015070273 :muser #f)* [procedure] flatten ''list1'' ...\n\n[[Chicken]]\n")
("denominator" . "(:ctime 1014847553 :cuser #f :mtime 1191219734 :muser #f)* [procedure] denominator ''q''\n\n[[R5RS]], [[R6RS]]\n\nNote:\n (denominator 0) => 1\n\n\nSee also [[numerator]], [[rationalize]]\n")
("foreign-callback-lambda" . "(:ctime 1015046846 :cuser #f :mtime 1015046846 :muser #f)* [syntax] foreign-callback-lambda ''returntype'' ''name'' ''argtype''\n* [syntax] foreign-callback-lambda* ''returntype'' ((''argtype'' ''variable'') ...) ''string'' ...\n\n[[Chicken]]: defines a binding to external routine.  Similar to\n[[foreign-lambda]] and [[foreign-lambda*]], but the external routine\nmay call Scheme functions.  [[foreign-callback-lambda*]] defines\nC body in-line (inside ''string'').\n\nSee also [[foreign-lambda]], [[foreign-lambda*]].\n")
("wait-for-child-process" . "(:ctime 1015282981 :cuser #f :mtime 1015282981 :muser #f)* [procedure] wait-for-child-process ''process-id''\n\n[[Scheme48]]: wait process to terminate.   See also\n[[process-id-exit-status]], [[process-id-terminating-signal]],\n[[process-id?]], [[exit]], [[fork]].\n")
("pretty-print" . "(:ctime 1014959244 :cuser #f :mtime 1099776842 :muser #f)* [procedure] pretty-print ''obj'' [''output-port'']\n\n[[ChezScheme]], [[Chicken]]\n\n[[ChezScheme]]: See also [[pretty-file]], [[print-level]], [[print-length]],\n[[pretty-line-length]], [[pretty-one-line-limit]], [[pretty-initial-indent]],\n[[pretty-standard-indent]], [[pretty-maximum-lines]]\n\n[[Chicken]]: See also [[pretty-print-width]]\n\n* [procedure] pretty-print ''obj'' [:key ''port'' ''width'']\n* [procedure] pp ''obj'' [:key ''port'' ''width'']\n\n[[STklos]]: takes keyword arguments.\n")
("read-error?" . "(:ctime 1099273904 :cuser #f :mtime 1099273904 :muser #f)* [procedure] read-error? ''obj''\n* [procedure] read-error-line ''obj''\n* [procedure] read-error-column ''obj''\n* [procedure] read-error-position ''obj''\n* [procedure] read-error-span ''obj''\n\n[[SRFI-36]]: See [[&read-error]].\n")
("check-substring-spec" . "(:ctime 1014884778 :cuser #f :mtime 1014884778 :muser #f)* [procedure] check-substring-spec ''proc'' ''s'' ''start'' ''end''\n\n[[SRFI-13]]\n\nSee also [[substring-spec-ok?]].\n")
("current-language" . "(:ctime 1036934828 :cuser #f :mtime 1036934828 :muser #f)* [procedure] current-language\n* [procedure] current-language ''symbol''\n\n[[SRFI-29]]: gets/sets the current ISO 639-1 language code as a symbol.  See also [[current-country]], [[current-locale-details]].\n")
("define-in-module" . "(:ctime 1015724996 :cuser #f :mtime 1015724996 :muser #f)* [syntax] define-in-module ''module'' ''var'' ''expr''\n* [syntax] define-in-module ''module'' (''var'' ''formals'' ...) ''expr''\n\n[[Gauche]]: Defines binding of variable ''var'' to the value of ''expr''\nin the ''module''.  Useful to insert binding into the other module.\n\nSee also [[define-module]]\n")
("hash-table-map" . "(:ctime 1015915502 :cuser #f :mtime 1020285303 :muser #f)[[$$include hash-table-for-each]]\n")
("make-hash-table" . "(:ctime 1015070839 :cuser #f :mtime 1327407264 :muser #f)* [procedure] make-hash-table [''equal?'' ''hash'' ''args'' ...]\n\n[[SRFI-69]]: Create a new hash table with no associations.\n''equal?'' is a predicate that should accept two keys and return a boolean\ntelling whether they denote the same key value; it defaults to [[equal?]].\n\n''hash'' is a hash function, and defaults to an appropriate hash function\nfor the given ''equal?'' predicate.\nHowever, an acceptable default is not guaranteed to be given\nfor any equivalence predicate coarser than [[equal?]],\nexcept for [[string-ci=?]].\n[1] The function ''hash'' must be acceptable for ''equal?'',\nso if you use coarser equivalence than [[equal?]] other than [[string-ci=?]],\nyou must always provide the function hash yourself.\n[1] An equivalence predicate ''c1'' is coarser than a equivalence predicate\n''c2'' iff there exist values ''x'' and ''y'' such that\n(and (c1 x y) (not (c2 x y))).\n\nImplementations are allowed to use the rest ''args'' for implementation-specific\nextensions. Be warned, though, that using these extensions will make your\nprogram less portable.\n\n* [procedure] make-hash-table [''equal?'' ''hash'' ''size-hint'']\n\n[[Kawa]]: Creates a new hash table.  ''equal?'' and ''hash'' are\nprocedures to be used for comparison and calculating hash values.\n\n* [procedure] make-hash-table [''size'']\n\n[[ChezScheme]]: makes a hash table.  Key comparer is fixed to [[eq?]].\nSee [[Concept:HashTable]].\nSee also [[get]], [[put!]], [[hash-table-count]],\n[[hash-table-for-each]], [[hash-table-ref]], [[hash-table-set!]]\n\n* [procedure] make-hash-table [''type'']\n\n[[Gauche]]: makes a hash table.  ''Type'' may be one of the symbols\n'eq?', 'eqv?', 'equal?' or 'string=?'.   See [[Concept:HashTable]].\nSee also [[hash-table-get]], [[hash-table-put!]], [[hash-table-exists?]],\n[[hash-table-push!]], [[hash-table-pop!]], \n[[hash-table-map]], [[hash-table-for-each]], [[hash-table-fold]],\n[[hash-table]]\n\n* [procedure] make-hash-table [''comparison'' ''hash'']\n\n[[STk]], [[STklos]]: makes a hash table, with given comparison\nfunction and hash function.   Comparison defaults to\n[[eq?]], and hash defaults to [[hash-table-hash]].\n\nSee also [[hash-table?]], [[hash-table-put!]],\n[[hash-table-get]], [[hash-table-remove!]], [[hash-table-update!]], \n[[hash-table-for-each]], [[hash-table-map]], [[hash-table->list]], [[hash-table-stats]].\n\n* [procedure] make-hash-table\n\n[[MzScheme]]: makes a hash table.  comparison is fixed to [[eq?]].\n\nSee also [[make-hash-table-weak]], [[hash-table?]],\n[[hash-table-put!]], [[hash-table-get]], [[hash-table-remove!]], \n[[hash-table-map]], [[hash-table-for-each]]\n\n* [procedure] make-hash-table ''ms'' ''nb'' ''gk'' ''eq'' [''is'']\n\n[[Bigloo]]: ('''Deprecated''') Creates a hash table.  See [[make-hashtable]]\nfor the current hashtable support.\n\n [http://www.obtenir-rio.info B and You]\n")
("char-set-difference" . "(:ctime 1099288653 :cuser #f :mtime 1099288653 :muser #f)* [procedure] char-set-difference ''cset0'' ''cset1'' ...\n* [procedure] char-set-difference ''cset0'' ''cset1'' ...\n\n[[SRFI-14]]: Returns a character set that has all characters in ''cset0''\nexcept the characters in ''cset1'' ....\nSee also [[char-set-diff+intersection]].\n")
("pipe" . "(:ctime 1018386803 :cuser #f :mtime 1018386829 :muser #f)* [procedure] pipe\n\n[[Scsh]]: returns two ports.\n\nThis is called [[create-pipe]] or [[sys-pipe]]\nin some implementations.\n")
("util.queue" . "(:ctime 1015312764 :cuser #f :mtime 1015312764 :muser #f)* [module] util.queue\n\n[[Gauche]]: module to implement queue.  See [[make-queue]].\n")
("string-ci>?" . "(:ctime 1015063624 :cuser #f :mtime 1015063624 :muser #f)[[$$include string-ci=?]]\n")
("Index:n" . "(:ctime 1014843118 :cuser #f :mtime 1015014637 :muser #f)[[$$index n]]\n\n")
("define-record-type" . "(:ctime 1014882925 :cuser #f :mtime 1110658665 :muser #f)* [syntax] define-record-type ''typename'' (''constructor'' ''tag'' ...) ''predicate'' ''field'' ...\n\nwhere:\n  ''field'' : (''field-tag'' ''accessor-name'')\n            | (''field-tag'' ''accessor-name'' ''modifier-name'')\n\n[[SRFI-9]], [[Scheme48]]:\n\n\n* [syntax] define-record-type ''type'' (''constructor'' ''tag'' ...) ''predicate'' ''field'' ...\n\n[[SRFI-57]]: Extends srfi-9 in the following ways:\n- Allows inheritance, using schemes (see [[define-record-scheme]]).\nThus ''type'' can be either just a symbol, or a list like (''type-name'' ''scheme-name'' ...) when ''type-name'' inherits from ''scheme-name'' ....\n- The type name becomes a macro that works as a constructor with labeled\nfield initializer arguments.\n- Most syntax arguments can be omitted or given #f if unnecessary.\n\n\n** notes\n\nChezScheme has [[define-record]], which implicitly creates constructors,\npredicates, and field accessor/mutators.\n\n[[Scheme48]] also defines a bunch of low-level procedures\nfor records and record types.  See [[make-record]], \n[[record]], [[record?]], [[record-length]], [[record-type]],\n[[record-ref]], [[record-set!]], [[make-record-type]],\n[[record-type?]], [[record-type-name]], \n[[record-type-field-names]], [[record-constructor]],\n[[record-predicate]], [[record-accessor]], [[record-modifier]],\n[[define-record-discloser]], [[define-record-resumer]].\n\nSLIB provides low-level record API which is similar to\nScheme48's.  See [[make-record-type]].\n")
("#<" . "(:ctime 1015920159 :cuser #f :mtime 1015920159 :muser #f)* [reader syntax] #<''x'' ...''stuff''... ''x''\n\n[[Scsh]]: String literal, delimited by a single character ''x''.\n")
("delete-filesys-object" . "(:ctime 1018346036 :cuser #f :mtime 1018346036 :muser #f)* [procedure] delete-filesys-object ''fname''\n\n[[Scsh]]: deletes an object of any type from the\nfile system.  See also [[Concept:FileSystem]].\n")
("signal/alrm" . "(:ctime 1015076592 :cuser #f :mtime 1015076592 :muser #f)[[$$include signal/hup]]\n")
("file-directory?" . "(:ctime 1015312321 :cuser #f :mtime 1015312321 :muser #f)* [procedure] file-directory? ''pathname''\n\n[[Scsh]]: see if ''pathname'' is a directory.\n\nThis is called [[directory?]] or [[file-is-directory?]]\nin some implementations.  See also [[Concept:FileSystem]].\n")
("collect-notify" . "(:ctime 1015030470 :cuser #f :mtime 1015030470 :muser #f)* [procedure] collect-notify [''newval'']\n\n[[ChezScheme]]: garbage collector parameter.  See [[collect]].\n")
("pair-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144500326 :muser #f)* [procedure] pair-compare ''compare-car'' ''compare-cdr'' ''pair1'' ''pair2''\n* [procedure] pair-compare [''compare''] ''obj1'' ''obj2''\n[[SRFI-67]]: Compares two pairs, or (possibly improper) lists.\n\nThe 4-ary form compares two pairs ''pair1'' ''pair2'' by comparing their cars using\n''compare-car'', and if the cars are equal the cdrs are compared using ''compare-cdr''.\n\nThe 3-ary form compares two objects by type using the ordering of types null < pair < neither-null-nor-pair.\n\nTwo objects of type neither-null-nor-pair are compared using ''compare''.\nTwo pairs are compared by using ''compare'' on the cars, and if the cars are equal by\nrecursing on the cdrs.\n\nThe 2-ary form uses [[default-compare]] for ''compare''.\n")
("fl=" . "(:ctime 1014952302 :cuser #f :mtime 1014952302 :muser #f)* [procedure] fl= ''flonum'' ...\n\n[[ChezScheme]]\n\nSee also [[flonum?]], [[=]], [[fx=]]\n")
("ucs2-string->list" . "(:ctime 1039428217 :cuser #f :mtime 1039428217 :muser #f)* [procedure] ucs2-string->list ''ucs2str''\n* [procedure] list->ucs2-string ''list''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("test-runner-current" . "(:ctime 1151049296 :cuser #f :mtime 1151077888 :muser #f)* [syntax] test-runner-current\n* [syntax] test-runner-current ''test-runner''\n\n[[SRFI-64]]: gets or sets the current test runner.\n")
("SRFI-2" . "(:ctime 1014875145 :cuser #f :mtime 1122428505 :muser #f)SRFI-2: AND-LET*: an AND with local bindings, a guarded LET* special\nform\n\nhttp://srfi.schemers.org/srfi-2/srfi-2.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[and-let*]]\n\n")
("assq" . "(:ctime 1014838335 :cuser #f :mtime 1327407332 :muser #f)* [procedure] assq ''obj'' ''alist''\n\nSearch ''obj'' from an association list ''alist'' using [[eq?]]. [[R5RS]]\n\nSee also [[assoc]], [[assv]].\n [http://www.obtenir-rio.info rio orange]\n")
("regcomp" . "(:ctime 1224217061 :cuser #f :mtime 1224217062 :muser #f)11 11 \n")
("fxneg" . "(:ctime 1015049737 :cuser #f :mtime 1015049737 :muser #f)* [procedure] fxneg ''fixnum1''\n\n[[Chicken]]: negates its fixnum argument.\n\nSee also [[fixnum?]]\n\n")
("unread-char" . "(:ctime 1014957529 :cuser #f :mtime 1014957529 :muser #f)* [procedure] unread-char ''char'' [''port'']\n\n[[ChezScheme]]: push back one character ''char'' to the input port ''port''.\nOnly one character pushback is supported.\n\n")
("pathname-file" . "(:ctime 1015100460 :cuser #f :mtime 1015100679 :muser #f)procedure] pathname-file ''pathname''\n\n[[Chicken]]: see also [[pathname-directory]], [[pathname-extension]],\n[[decompose-pathname]], [[pathname-replace-file]]\n")
("Index:e" . "(:ctime 1014842776 :cuser #f :mtime 1327407026 :muser #f)[[$$index e]]\n\n [http://www.obtenir-rio.info B and You]\n")
("remove-to" . "(:ctime 1099651434 :cuser #f :mtime 1099651434 :muser #f)[[$$include filter-to]]\n")
("process-id-terminating-signal" . "(:ctime 1015282992 :cuser #f :mtime 1015282992 :muser #f)[[$$include process-id-exit-status]]\n")
("fdes-status" . "(:ctime 1018386756 :cuser #f :mtime 1018386756 :muser #f)* [procedure] fdes-status ''fd/port''\n* [procedure] set-fdes-status ''fd/port'' ''integer''\n\n[[Scsh]]: gets/sets file descriptor status.\n")
("most-positive-fixnum" . "(:ctime 1014952702 :cuser #f :mtime 1017697804 :muser #f)* [procedure] most-positive-fixnum\n\n[[ChezScheme]]\n\nSee also [[most-negative-fixnum]], [[fixnum?]]\n\n* [variable] most-positive-fixnum\n\n[[SLIB]]\n")
("atan" . "(:ctime 1014838533 :cuser #f :mtime 1191312074 :muser #f)* [procedure] atan ''z''\n* [procedure] atan ''y'' ''x''\n\n[[R5RS]], [[R6RS]]: arctan.  two argument version calculates (angle (make-rectangular ''x'' ''y'')).\n\nR6RS specifies these boundary cases:\n (atan -inf.0)  => -π/2\n (atan +inf.0)  =>  π/2\n\n[[SRFI-94]]: two arguments version signals error if ''y'' or ''x'' is not real.\n\n\n")
("SRFI-58" . "(:ctime 1122428932 :cuser #f :mtime 1122428942 :muser #f)SRFI-58: Array notation\n\nhttp://srfi.schemers.org/srfi-58/srfi-58.html\n\n[[$$srfi-implementors]]\n\n----\n")
("ac32" . "(:ctime 1099398037 :cuser #f :mtime 1099398037 :muser #f)[[$$include ac64]]\n")
("assertion-violation" . "(:ctime 1191570409 :cuser #f :mtime 1191570409 :muser #f)* [procedure] assertion-violation ''who'' ''message'' ''irritant'' ...\n\n[[R6RS]]: Like [[error]], but raises [[&assertion]] type condition.\n\nSee also [[error]], [[assert]].\n")
("current-module" . "(:ctime 1014928306 :cuser #f :mtime 1014928306 :muser #f)* [procedure] current-module\n\n[[STk]], [[STklos]]: Returns the current module.\n\nSee also [[define-module]], [[select-module]].\n\n* [syntax] current-module\n\n[[Gauche]]: Gauche interprets [[current-module]] at compilation time\ninstead of run time.\n\nSee also [[define-module]], [[select-module]].\n")
("perm/isuid" . "(:ctime 1015099888 :cuser #f :mtime 1015099888 :muser #f)[[$$include perm/irusr]]\n")
("*interactive*" . "(:ctime 1015883499 :cuser #f :mtime 1015883499 :muser #f)* [variable] *interactive*\n\n[[SCM]]: A flag to indicate interactive mode.\n")
("get-internal-info" . "(:ctime 1018344267 :cuser #f :mtime 1018344267 :muser #f)* [procedure] get-internal-info\n\n[[STk]]: returns some internal information.\n")
("blob-s16-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144718119 :muser #f)* [procedure] blob-s16-ref ''endianness'' ''blob'' ''k''\n\n[[SRFI-74]]: equivalent to (blob-sint-ref 2 ''endianness'' ''blob'' ''k'').\n\nSee also [[blob-sint-ref]].\n")
("string->0..255" . "(:ctime 1045088949 :cuser #f :mtime 1045088949 :muser #f)* [procedure] string->0..255 ''string''\n* [procedure] string->0..2^x-1 ''string'' ''power''\n* [procedure] int->0..255 ''int''\n* [procedure] int->0..2^x-1 ''int'' ''power''\n* [procedure] obj->0..255 ''obj''\n* [procedure] obj->0..2^x-1 ''obj'' ''power''\n\n[[Bigloo]]: ('''Deprecated''') procedures to compute hash values.\nSee [[object-hashnumber]] for the current hash method.\n")
("ash" . "(:ctime 1014951727 :cuser #f :mtime 1043985165 :muser #f)* [procedure] ash ''n'' ''count''\n\n[[ChezScheme]], [[SLIB]], [[Gauche]], [[Guile]]: arithmetic shift\n\nThis is called [[arithmetic-shift]] in some implementations.\n\nSISC have distinct left-shift and right-shift functions,\n[[ashl]] and [[ashr]].\n\nBigloo also has distinct functions, [[bit-lsh]] and [[bit-rsh]].\n\nChez also has [[fxsra]] and [[fxsll]] for shifting fixnums.\n\nSee also [[logand]], [[logior]], [[logxor]], [[lognot]].\n\n")
(":real-range" . "(:ctime 1144527545 :cuser #f :mtime 1144537620 :muser #f)* [syntax] :real-range ''vars''         ''stop''\n* [syntax] :real-range ''vars'' ''start'' ''stop''\n* [syntax] :real-range ''vars'' ''start'' ''stop'' ''step''\n[[SRFI-42]]:\nRuns through a range of real numbers using an explicit index variable. This\nform of range enumeration avoids accumulation of rounding errors and is the\none to use if any of the numbers defining the range is inexact, not an\ninteger, or a bignum of large magnitude.\n\nProviding default value 0 for ''start'' and 1 for ''step'', the generator first\nevaluates ''start'', ''stop'', and ''step'', which must result in reals a, b, an\nd\ns such that n = (b-a)/s is also representable as a real. Then the sequence\n0, 1, 2, ... is enumerated while the current value i is less than n, and\nthe variable in ''vars'' is bound to the value a + i s. If any of the values\na, b, or s is non-exact then all values in the sequence are non-exact.\n\n")
("ucs2-string-ci<=?" . "(:ctime 1039428113 :cuser #f :mtime 1039428113 :muser #f)[[$$include ucs2-string-ci=?]]\n")
("write-string/partial" . "(:ctime 1018387257 :cuser #f :mtime 1018387257 :muser #f)* [procedure] write-string/partial ''string'' [''fd/port'' ''start'' ''end'']\n\n[[Scsh]]: atomic best-effort/forward-progress version\nof [[write-string]].\n")
("module-imports" . "(:ctime 1015772581 :cuser #f :mtime 1099723066 :muser #f)* [procedure] module-imports ''module''\n\n[[STk]], [[STklos]], [[Gauche]]: see also [[module-exports]].\n")
("dup" . "(:ctime 1036969992 :cuser #f :mtime 1036969996 :muser #f)* [procedure] dup ''fd/port'' [''newfd'']\n\n[[Scsh]]: dup(2) or dup2(2).\nSee also [[dup->inport]], [[dup->outport]], [[dup->fdes]].\n")
("read-case-sensitive" . "(:ctime 1063241199 :cuser #f :mtime 1063244569 :muser #f)[[$$include read/case]]\n")
("lset=" . "(:ctime 1014874469 :cuser #f :mtime 1014874469 :muser #f)* [procedure] lset= ''elt='' ''list1'' ''list2'' ...\n\n[[SRFI-1]]: Returns true iff every ''listi'' is set-equal to ''listi+1'', \nusing ''elt='' for the element-equality procedure. \"Set-equal\" simply means\nthat ''listi'' is a subset of ''listi+1'', and ''listi+1'' is a subset \nof ''listi''. The ''elt='' procedure's first argument is an element \nof ''listi''; its second is an element of ''listi+1''. \n\nSee also [[lset<=]].\n")
("fp/" . "(:ctime 1191226938 :cuser #f :mtime 1191226938 :muser #f)[[$$include fp+]]\n")
("let-fluids" . "(:ctime 1017989897 :cuser #f :mtime 1017989897 :muser #f)[[$$include let-fluid]]\n")
("break-thread" . "(:ctime 1020750195 :cuser #f :mtime 1020750195 :muser #f)* [procedure] break-thread ''thread''\n\n[[MzScheme]]: breaks the thread.\n\n")
("min-precision" . "(:ctime 1039510043 :cuser #f :mtime 1039510043 :muser #f)* [procedure] min-precision [''value'']\n* [procedure] max-precision [''value'']\n\n[[SISC]]: parameters to set the precision of numeric\nlibrary.  (SISC has arbitrary-precision numeric library).\n")
("set-user-id!" . "(:ctime 1015138835 :cuser #f :mtime 1015198699 :muser #f)* [procedure] set-user-id! ''user-id''\n\n[[Chicken]], [[Scheme48]]: see also [[Concept:UserGroup]], [[get-user-id]]\n\nGauche has [[sys-setuid]].\n")
("file-info-mode" . "(:ctime 1040727337 :cuser #f :mtime 1040727337 :muser #f)[[$$include file-info-name]]\n")
("bitwise-arithmetic-shift-left" . "(:ctime 1191715343 :cuser #f :mtime 1191715344 :muser #f)[[$$include bitwise-arithmetic-shift]]\n")
("read-error-position" . "(:ctime 1099273949 :cuser #f :mtime 1099273949 :muser #f)[[$$include read-error?]]\n")
("SRFI-27" . "(:ctime 1038272703 :cuser #f :mtime 1122428707 :muser #f)SRFI-27: Sources of Random Bits\n\nhttp://srfi.schemers.org/srfi-27/srfi-27.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[random-integer]], [[random-real]], [[default-random-source]]\n\n[[make-random-source]], [[random-source?]],\n[[random-source-state-ref]], [[random-source-state-set!]],\n[[random-source-randomize!]], \n[[random-source-pseudo-randomize!]]\n\n[[random-source-make-integers]],\n[[random-source-make-reals]]\n")
("perm/ixusr" . "(:ctime 1015099781 :cuser #f :mtime 1015099781 :muser #f)[[$$include perm/irusr]]\n")
("with-input-from-port" . "(:ctime 1015073781 :cuser #f :mtime 1099726310 :muser #f)* [procedure] with-input-from-port ''port'' ''thunk''\n\n[[Chicken]], [[Gauche]], [[STk]], [[STklos]], [[SCM]]\n\nSee also [[with-error-to-port]], [[with-output-to-port]].\n")
("truncate-file" . "(:ctime 1023685586 :cuser #f :mtime 1023685586 :muser #f)* [procedure] truncate-file ''fname/fd/port'' ''len''\n\n[[Scsh]]: truncates the specified file to the given length.\n")
("add-signal-queue-signal!" . "(:ctime 1020375002 :cuser #f :mtime 1020375002 :muser #f)* [procedure] add-signal-queue-signal! ''signal-queue'' ''signal''\n* [procedure] remove-signal-queue-signal! ''signal-queue'' ''signal''\n\n[[Scheme48]]: adds/removes ''signal'' to/from ''signal-queue''.\nSee [[make-signal-queue]].\n")
("subseq" . "(:ctime 1202095391 :cuser #f :mtime 1437012787 :muser #f)* [generic function] subseq ''sequence'' ''start'' [''end'']\n\n[[Gauche]]: Extract a subsequence of ''sequence'', starting from ''start''\n(inclusive) and ending at ''end'' (exclusive).\nIf ''end'' is omitted, it extracts to the end of the sequence.\nProvided in gauche.sequence module.\n\nSubseq can be used with generalized [[set!]].\n\n  (set! (subseq seq 2 3) '(a b))\n\n\n")
("lset-union" . "(:ctime 1014875013 :cuser #f :mtime 1014875013 :muser #f)* [procedure] lset-union ''elt='' ''list1'' ...\n\n[[SRFI-1]]: Returns the union of the lists, \nusing ''elt='' for the element-equality procedure. \n")
("tanh" . "(:ctime 1014955609 :cuser #f :mtime 1015237237 :muser #f)[[$$include sinh]]\n\n")
("ucs2-string-copy" . "(:ctime 1039428266 :cuser #f :mtime 1039428266 :muser #f)* [procedure] ucs2-string-copy ''ucs2str''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("block-ref" . "(:ctime 1015281326 :cuser #f :mtime 1015281326 :muser #f)* [procedure] block-ref ''block'' ''index''\n* [procedure] block-set! ''block'' ''index'' ''value''\n\n[[Chicken]]: low-level object accessor.  ''block'' may be a\nvector, record structure, pair or symbol.   See also [[number-of-slots]].\n")
("nil" . "(:ctime 1152518355 :cuser #f :mtime 1152526992 :muser #f)* [variable] nil\n[[RRRS]]: defined as [[#!null]].\n\n[[R3RS]], [[SLIB]]: defined as [[#f]].\n\nSee also [[t]].\n")
("values-append" . "(:ctime 1161187076 :cuser #f :mtime 1161201239 :muser #f)* [procedure] values-append ''arg'' ...\n\n[[Kawa]]: The values resulting of evaluation of each argument are appended\ntogether.\n\nNB: Kawa manual says this is a procedure, but in general you can't implement\nit as a procedure unless the implementation has first-class multiple\nvalues (a cotroversial topic in c.l.s).\n\n")
(":let" . "(:ctime 1144527545 :cuser #f :mtime 1144538190 :muser #f)* [syntax] :let ''vars'' ''expression''\n[[SRFI-42]]:\nRuns through the sequence consisting of the value of ''expression'', only.\nThis is the same as (:list ''vars'' (list ''expression'')). If an index\nvariable is specified, its value is 0. The :let-generator can be used to\nintroduce an intermediate variable depending on outer generators.\n")
("struct-set!" . "(:ctime 1099725858 :cuser #f :mtime 1099725858 :muser #f)* [procedure] struct-set! ''struct'' ''slot-name'' ''value''\n\n[[STklos]]: struct modifier.  see [[make-struct]].\n")
("default-hash-function" . "(:ctime 1017985062 :cuser #f :mtime 1017985062 :muser #f)* [procedure] default-hash-function ''value''\n\n[[Scheme48]]: default hash function.\nSee also [[make-table]], [[Concept:HashTable]].\n")
("user-id->integer" . "(:ctime 1018124302 :cuser #f :mtime 1018124302 :muser #f)[[$$include user-id?]]\n")
("dynamic-wind" . "(:ctime 1014847684 :cuser #f :mtime 1191664142 :muser #f)* [procedure] dynamic-wind ''before'' ''thunk'' ''after''\n\n[[R5RS]], [[R6RS]].\n\n\n")
(">" . "(:ctime 1014954676 :cuser #f :mtime 1015063757 :muser #f)[[$$include =]]\n\n")
("input-port?" . "(:ctime 1014854514 :cuser #f :mtime 1014857565 :muser #f)* [procedure] input-port? ''obj''\n\n[[R5RS]]: Returns #t if obj is an input port, otherwise returns #f.\n\nSee also [[port?]], [[output-port?]].\n")
("#!" . "(:ctime 1015888963 :cuser #f :mtime 1219263840 :muser #f)* [reader syntax] #! ''interpreter''\n\nThis line appears as the first line of executable scripts in Unix\n(sometimes called as \"shebang\").\n\n[[SRFI-22]] says that if the first line begins with '#!', the line is ignored.\n\n[[Gauche]] ignores the line beginning with '#!', up to the end of the line.\n\n[[SCM]], [[Scsh]], [[Guile]]: Allows to continuate the interpreter invocation line to\nthe second line, using '\\'.  Anything up to '!#' will be ignored.\n\n[[MzScheme]]: ignores the first line beginning with '#!'.\nIf the line ends with '\\', then the next line is ignored\nas well.\n\n* [reader syntax] #! ''identifier''\n\n[[R6RS]] uses this syntax for directives to the reader.  Syntactically\nit is treated as a comment.\n\n'''#!r6rs''' denotes that the stuff following this conforms r6rs syntax\nwithout extension.   R6RS also mentiones '''#!fold-case''' and\n'''#!no-fold-case''' to control reader's case folding mode, although it\nis not in the spec per se, but in non-normative appendix.\n\nIn R6RS, shebang in scripts are treated as a different lexical context\n(it is not a part of toplevel scheme program, but is a part of\n<script-header>.  See \n[http://www.r6rs.org/final/html/r6rs-app/r6rs-app-Z-H-6.html R6RS Appendix D].\n\nNote that this specification requires a reader for Scheme scripts and\na reader for other Scheme programs be different.  If a file begins with #!<identifier>, there's no way to tell from the content itself that it\nis a Scheme script or a Scheme program, since Appendix D recommends that\nimplementations should ignore the first line if it begins with #!, even\nif it is not #!/ or #!<space>.  If the reader is a 'script' mode, it\nignores anything after #!<identifier> until the end of line.  If the reader\nis in r6rs mode, it should only ignore (or interpret) #!<identifier> token.\n\n\n* Implementation issues\n\n'#!<identifier>' syntax has been used in past RnRS (e.g. [[#!true]]), and\nalso by several existing implementations (e.g. [[#!bwp]]).  Since those\nusages do denote a datum, they can't be used together with R6RS-compatible\nreader, which would treat those tokens as comments.\n\nThe safe bet is to switch the reader mode when it sees '''#!r6rs''' token.\n\nA questionable situation is when a reader sees #!r6rs at the beginning of\nthe file.  If it is an R6RS Scheme program or library, then the token asserts\nit is so.  If it is a Scheme script, however, the whole first line\nshould be ignored (even if the script ''is'' r6rs conformant).  In practice\nsuch file is very likely to be an R6RS Scheme program (not script), but\nthis uncertainty is somewhat uncomfortable.\n\nAnother issue is the scope of '#!<identifier>' directive.\nApparently #!r6rs, #!fold-case and #!no-fold-case affects the rest of\nthe stream, possibly until the other directive appears.  It means that\nthe state is not local to a [[read]] procedure.  For [[load]]ing programs,\nthe loader may keep the state.  But what if we want to [[read]] the \nsame file as data?\n\n\n")
("expand-heap" . "(:ctime 1018344246 :cuser #f :mtime 1018344246 :muser #f)* [procedure] expand-heap ''n''\n\n[[STk]]: expands the heap for at least ''n'' cells.\n")
("directory-list" . "(:ctime 1020221969 :cuser #f :mtime 1023697206 :muser #f)* [procedure] directory-list [''path'']\n\n[[MzScheme]]: returns a list of entries in the directory\n''path''.  If omitted, the current directory is used.\n\nThis is called [[directory]], [[directory->list]], [[directory-files]],\n[[list-directory]], [[sys-readdir]]\nin other implementations.\n\n* [procedure] directory-list ''path'' &keyword ''add-path?'' ''children?''\n\n[[Gauche]]: see also [[directory-list2]].\n")
("get-user-id" . "(:ctime 1015137894 :cuser #f :mtime 1015198525 :muser #f)* [procedure] get-user-id\n* [procedure] get-effective-user-id\n\n[[Scheme48]]: see also [[Concept:UserGroup]], [[set-user-id!]]\n\nGauche has [[sys-getuid]] and [[sys-geteuid]].\n")
("hash-table-for-each" . "(:ctime 1015071207 :cuser #f :mtime 1045089190 :muser #f)* [procedure] hash-table-for-each ''hash-table'' ''proc''\n* [procedure] hash-table-map ''hash-table'' ''proc''\n\n[[STk]], [[STklos]], [[Gauche]], [[MzScheme]]: \ncalls ''proc'' for each entry in \n''hash-table''.  ''proc'' receives two arguments, a key and a value.\nReverses the order of argument from [[Chicken]].\n\nGauche also has [[hash-table-fold]].\n\n* [procedure] hash-table-for-each ''proc'' ''hash-table''\n\n[[Chicken]]: calls ''proc'' for each entry in ''hash-table''.  ''proc''\nreceives two arguments, a key and a value.\nChicken lacks hash-table-map.\n\nSee also [[make-hash-table]].\n\n\n\n")
("vector" . "(:ctime 1014856327 :cuser #f :mtime 1191568613 :muser #f)* [procedure] vector ''obj'' ...\n\n[[R5RS]], [[R6RS]]\n\nSee also [[make-vector]].\n")
("let1" . "(:ctime 1144700986 :cuser #f :mtime 1144706531 :muser #f)* [syntax] let1 ''var'' ''expr'' ''body''\n[[Gauche]]: A convenient macro when you have only one variable. Expanded as follows.\n{{{\n(let ((var expr)) body ...)\n}}}\n")
("s16vector->byte-vector" . "(:ctime 1015075612 :cuser #f :mtime 1015075612 :muser #f)[[$$include u8vector->byte-vector]]\n")
("do" . "(:ctime 1014847652 :cuser #f :mtime 1014847652 :muser #f)* [syntax] do ((''variable'' ''init'' ''step'') ...) (''test'' ''expr'' ...) ''command'' ...\n\n[[R5RS]]\n\n")
("string-search-positions" . "(:ctime 1015104405 :cuser #f :mtime 1015104405 :muser #f)[[$$include string-search]]\n")
("make-vector" . "(:ctime 1014856305 :cuser #f :mtime 1191568594 :muser #f)* [procedure] make-vector ''k'' [''fill'']\n\n[[R5RS]], [[R6RS]]\n\nSee also [[vector]].\n")
(":while" . "(:ctime 1144527545 :cuser #f :mtime 1144538304 :muser #f)* [syntax] :while ''generator'' ''expression''\n[[SRFI-42]]:\nRuns ''generator'' while ''expression'' evaluates to non-#f. The guarding\nexpression is included in the scope of the variables introduced by the\ngenerator.\n\nNote the distinction between the filter if and the modified generator\nexpressed by :while.\n")
("record-modifier" . "(:ctime 1014949637 :cuser #f :mtime 1017982951 :muser #f)* [procedure] record-modifier ''rtd'' ''field-name''\n\n[[SLIB]], [[Scheme48]]\n\nChez Scheme has equivalent procedure as [[record-field-mutator]].\n\nSee also [[make-record-type]].\n")
("list-tabulate" . "(:ctime 1014861943 :cuser #f :mtime 1327407234 :muser #f)* [procedure] list-tabulate ''n'' ''init-proc''\n\n[[SRFI-1]]: Returns an ''n''-element list. Element ''i'' of the list, \nwhere 0 <= ''i'' < ''n'', is produced by (''init-proc'' ''i''). \nNo guarantee is made\nabout the dynamic order in which ''init-proc'' is applied to these indices. \n [http://www.obtenir-rio.info rio orange]\n")
("count" . "(:ctime 1014865550 :cuser #f :mtime 1014865550 :muser #f)* [procedure] count ''pred'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: ''pred'' is a procedure taking as many arguments as there \nare lists and returning a single value. It is applied element-wise to\nthe elements of the lists, and a count is tallied of the number of \nelements that produce a true value. This count is returned.\ncount is \"iterative\" in that it is guaranteed to apply pred to the list \nelements in a left-to-right order. The counting stops\nwhen the shortest list expires. \n\nSee also [[fold]], [[reduce]].\n")
("struct-type" . "(:ctime 1099725669 :cuser #f :mtime 1099725669 :muser #f)* [procedure] struct-type ''struct''\n\n[[STklos]]: returns the type of a struct ''struct''.\nSee [[make-struct]].\n")
("assoc" . "(:ctime 1014838279 :cuser #f :mtime 1014873845 :muser #f)* [procedure] assoc ''obj'' ''alist''\n\n[[R5RS]]: finds the \nfirst pair in ''alist'' whose car field is ''obj'', and returns\nthat pair. If no pair in alist has obj as its car, then #f\nis returned.   Uses [[equal?]] to compare.\n\nSee also [[assq]], [[assv]]\n\n* [procedure] assoc ''obj'' ''alist'' [''='']\n\n[[SRFI-1]] extends R5RS to allow the client to pass in an optional \nequality procedure ''='' used to compare keys. \n\n")
("user-pass" . "(:ctime 1015041241 :cuser #f :mtime 1015041241 :muser #f)* [procedure] user-option-pass [''newval'']\n\n[[Chicken]]: compiler parameter.\n\nSee also [[user-read-pass]], [[user-preprocessor-pass]], [[user-option-pass]]\n")
("fx<=" . "(:ctime 1014950627 :cuser #f :mtime 1015069126 :muser #f)[[$$include fx=]]\n\n")
("ucs2-string-upcase!" . "(:ctime 1039428374 :cuser #f :mtime 1039428374 :muser #f)[[$$include ucs2-string-downcase]]\n")
("array-set!" . "(:ctime 1017981840 :cuser #f :mtime 1144488880 :muser #f)* [procedure] array-set! ''array'' ''index0'' ... ''value''\n* [procedure] array-set! ''array'' ''index-obj'' ''value''\n\n[[SRFI-25]]: array modifier.  See [[array-ref]], [[make-array]].\n\n* [procedure] array-set! ''array'' ''value'' ''index0'' ...\n\n[[SRFI-47]], [[SRFI-63]], [[Scheme48]]: array modifier.  The order of the\narguments differs from srfi-25's.  See [[array-ref]],\n[[make-array]].\n\n")
("file-info-size" . "(:ctime 1040727318 :cuser #f :mtime 1040727318 :muser #f)[[$$include file-info-name]]\n")
("string-null?" . "(:ctime 1014895465 :cuser #f :mtime 1039751433 :muser #f)* [procedure] string-null? ''s''\n\n[[SRFI-13]]:  Is ''s'' the empty string?\n\nAlso in [[Guile]].\n")
("getyx" . "(:ctime 1015883029 :cuser #f :mtime 1015883029 :muser #f)* [procedure] getyx ''win''\n\n[[SCM]]: curses interface.  returns a list of y and x coord.  see [[initscr]].\n")
("external-pointer" . "(:ctime 1015047426 :cuser #f :mtime 1015047426 :muser #f)* [syntax] external-pointer ''name''\n\n[[Chicken]]: obtain a pointer of the external variable defined\nby [[define-external]].\n")
("lset-xor!" . "(:ctime 1014875109 :cuser #f :mtime 1014875109 :muser #f)* [procedure] lset-xor! ''elt='' ''list1'' ...\n\n[[SRFI-1]]: linear-update variant of [[lset-xor]].\n")
("blank" . "(:ctime 1018071920 :cuser #f :mtime 1018071920 :muser #f)[[$$include lower-case]]\n")
("unlock-object" . "(:ctime 1015033687 :cuser #f :mtime 1015033687 :muser #f)* [procedure] unlock-object ''obj''\n\n[[ChezScheme]]: see [[lock-object]].\n")
("hash-table->list" . "(:ctime 1018341374 :cuser #f :mtime 1106768043 :muser #f)* [procedure] hash-table->list ''hash''\n\n[[Chicken]], [[STk]], [[STklos]]: returns an association list for all entries in ''hash''. See [[make-hash-table]], [[Concept:HashTable]].\n")
("socket-output-port" . "(:ctime 1099738449 :cuser #f :mtime 1099738449 :muser #f)[[$$include socket-input-port]]\n")
("input-obj" . "(:ctime 1063240571 :cuser #f :mtime 1063240571 :muser #f)* [procedure] input-obj ''bport''\n* [procedure] output-obj ''bport'' ''obj''\n\n[[Bigloo]]: input-obj reads a serialized Scheme object from a binary port ''bport''.\noutput-obj serializes Scheme object ''obj'' to a binary port ''bport''.\n\nSee [[binary-port?]] about binary ports.  See [[string->obj]] and [[obj->string]]\nabout serialization.\n")
("find-path" . "(:ctime 1099727661 :cuser #f :mtime 1099727661 :muser #f)* [procedure] find-path ''str'' [''paths'' ''suffixes'']\n\n[[STklos]]: search the filename with ''str'' in ''paths'',\n\nGauche has [[find-file-in-paths]].\n")
("define-foreign-parameter" . "(:ctime 1015046205 :cuser #f :mtime 1015046205 :muser #f)* [syntax] define-foreign-parameter ''name'' ''type'' [''string'']\n\n[[Chicken]]: defines a global parameter (procedure)\n''name'' to access the foreign variable ''string''.\nSee also [[define-foreign-variable]].\n")
("vector-length" . "(:ctime 1014860585 :cuser #f :mtime 1191568786 :muser #f)* [procedure] vector-length ''vector''\n\n[[R5RS]], [[R6RS]]: Returns the number of elements in ''vector'' as an exact integer.\n")
("vector-count" . "(:ctime 1099387562 :cuser #f :mtime 1099387562 :muser #f)* [procedure] vector-count ''pred'' ''vec1'' ''vec2'' ...\n\n[[SRFI-43]]: Returns a number of elements in vectors that satisfy ''pred''.\n\n{{{\n(vector-count (lambda (i elt) (even? elt)) '#(3 1 4 1 5 9 2 5 6))\n => 3\n\n(vector-count (lambda (i x y) (< x y)) '#(1 3 6 9) '#(2 4 6 8 10 12))\n => 2\n}}}\n")
("running-os" . "(:ctime 1099742405 :cuser #f :mtime 1099742405 :muser #f)* [procedure] running-os\n\n[[STklos]]: Returns the type of OS.  Either 'unix or 'windows, for the time\nbeing.\n\nOther implementations have a similar feature under the name [[os-name]].\n")
("collect-trip-bytes" . "(:ctime 1015030500 :cuser #f :mtime 1015030500 :muser #f)* [procedure] collect-trip-bytes [''newval'']\n\n[[ChezScheme]]: garbage collector parameter.  See [[collect]].\n")
("fp*" . "(:ctime 1191226933 :cuser #f :mtime 1191226933 :muser #f)[[$$include fp+]]\n")
("real-cos" . "(:ctime 1170264990 :cuser #f :mtime 1170267412 :muser #f)* real-cos ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[cos]], but signals error if the argument is not real  or the result is not real.\n")
("or" . "(:ctime 1014857419 :cuser #f :mtime 1191209286 :muser #f)* [procedure] or ''test'' ...\n\n[[R5RS]], [[R6RS]]: The ''test'' expressions are evaluated from left to right, \nand the value of the first expression that evaluates to a true value \nis returned. Any remaining expressions are not evaluated. If all \nexpressions evaluate to false values, the value of\nthe last expression is returned. If there are no expressions then \n#f is returned.\n\nSee also [[and]], [[when]], [[unless]].\n")
("string-join" . "(:ctime 1014895625 :cuser #f :mtime 1015806587 :muser #f)* [procedure] string-join ''string-list'' [''delimiter'' ''grammer'']\n\n[[SRFI-13]]\n\nAlso in [[Gauche]].\n")
("fx>?" . "(:ctime 1191225936 :cuser #f :mtime 1191225936 :muser #f)[[$$include fx=?]]\n")
("x->number" . "(:ctime 1015725075 :cuser #f :mtime 1383097761 :muser #f)* [generic] x->number ''obj''\n\n[[Gauche]]: generic function to convert ''obj'' to a number.\nSee also [[x->integer]], [[x->string]].\n\n[[Sagittarius]] and [[T]] have [[->number]].\n")
("command:make-editable-table" . "(:ctime 1435228989 :cuser #f :mtime 1435228989 :muser #f)<>\n")
("string=?" . "(:ctime 1014859422 :cuser #f :mtime 1191568277 :muser #f)* [procedure] string=? ''string1'' ''string2''\n* [procedure] string<? ''string1'' ''string2''\n* [procedure] string<=? ''string1'' ''string2''\n* [procedure] string>? ''string1'' ''string2''\n* [procedure] string>=? ''string1'' ''string2''\n\n[[R5RS]]\n\nSee also [[string-ci=?]].\n\n* [procedure] string=? ''string1'' ''string2'' ''string3'' ...\n* [procedure] string<? ''string1'' ''string2'' ''string3'' ...\n* [procedure] string<=? ''string1'' ''string2'' ''string3'' ...\n* [procedure] string>? ''string1'' ''string2'' ''string3'' ...\n* [procedure] string>=? ''string1'' ''string2'' ''string3'' ...\n\n[[R6RS]], [[MzScheme]]: Allows more than two arguments.\n\nSee also [[string-ci=?]].\n\n")
("exec-list" . "(:ctime 1099773185 :cuser #f :mtime 1099773185 :muser #f)* [procedure] exec-list ''string''\n\n[[STklos]]: run command specified by ''string'' via shell, and\nreturns a list of lines of command output.  See also [[exec]].\n\n{{{\n(exec-list \"echo A; echo B\")           => (\"A\" \"B\")\n}}}\n\nGauche has [[process-output->string-list]].\n")
("restart" . "(:ctime 1015888129 :cuser #f :mtime 1015888129 :muser #f)* [procedure] restart\n\n[[SCM]]: restarts the SCM program.\n")
("char-set-difference!" . "(:ctime 1099288669 :cuser #f :mtime 1099288669 :muser #f)[[$$include char-set-difference]]\n")
("append-output-file" . "(:ctime 1039755744 :cuser #f :mtime 1039755744 :muser #f)* [procedure] append-output-file ''filename''\n\n[[Bigloo]]: returns an output port that appends to\nthe named file.  See also [[open-output-file]].\n\nSome implementations have the same functionality\nby adding special options to [[open-output-file]].\n")
("modified-julian-day->date" . "(:ctime 1099301060 :cuser #f :mtime 1099301060 :muser #f)* [procedure] modified-julian-day->date ''number'' [''tz-offset'']\n* [procedure] modified-julian-day->time-monotonic ''number''\n* [procedure] modified-julian-day->time-tai ''number''\n* [procedure] modified-julian-day->time-utc ''number''\n\n[[SRFI-19]]: Converts modified julian day number to date or time object.\nSee also [[make-date]] and [[make-time]].\n")
("move-memory!" . "(:ctime 1015281188 :cuser #f :mtime 1015281188 :muser #f)* [procedure] move-memory! ''from'' ''to'' [''bytes'']\n\n[[Chicken]]: low-level memory handling routine.  See also [[evict]].\n")
("file-info" . "(:ctime 1036979345 :cuser #f :mtime 1040727074 :muser #f)* [procedure] file-info ''fname/fd/port'' [''chase'']\n\n[[Scsh]]: returns a record of file information (stat).\n\n (define-record file-info\n  type      ; {block-special, char-special, directory,\n            ;     fifo, regular, socket, symlink}\n  device    ; Device file resides on.\n  inode     ; File's inode.\n  mode      ; File's mode bits: permissions, setuid, setgid\n  nlinks    ; Number of hard links to this file.\n  uid       ; Owner of file.\n  gid       ; File's group id.\n  size      ; Size of file, in bytes.\n  atime     ; Time of last access.\n  mtime     ; Time of last mod.\n  ctime)    ; Time of last status change. \n\nSee also [[file-type]], [[file-inode]], [[file-mode]],\n[[file-nlinks]], [[file-owner]], [[file-group]],\n[[file-size]], [[file-last-access]], [[file-last-mod]],\n[[file-last-status-change]].\n\nOther implementations have similar procedures to obtain\nstat information; [[sys-stat]], [[get-file-info]].\n")
("socket-client?" . "(:ctime 1099738570 :cuser #f :mtime 1099738570 :muser #f)* [procedure] socket-client? ''socket''\n* [procedure] socket-server? ''socket''\n\n[[STklos]]: returns #t iff the socket is a client socket and a server socket,\nrespectively.  See also [[make-client-socket]], [[make-server-socket]].\n")
("set-write-length!" . "(:ctime 1063245630 :cuser #f :mtime 1063245630 :muser #f)* [procedure] set-write-length! ''len''\n* [procedure] get-write-length\n\n[[Bigloo]]: sets/gets a global write length parameter, which specifies\nmaximum number of atoms written by [[write]] and [[display]].\nCan be used to avoid infinit loop while printing circular structure.\n\nCommon Lisp has similar feature using variable *print-length*.\n")
("ucs2=?" . "(:ctime 1039428750 :cuser #f :mtime 1039429304 :muser #f)* [procedure] ucs2=? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2<? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2<=? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2>? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2>=? ''ucs2a'' ''ucs2b''\n\n[[Bigloo]]: UCS2 counterparts of\n[[char=?]], [[char<?]], [[char<=?]], [[char>?]] and [[char>=?]].\n\n\nSee [[ucs2?]]\n")
("promise?" . "(:ctime 1018333837 :cuser #f :mtime 1099722696 :muser #f)* [procedure] promise? ''obj''\n\n[[STk]], [[STklos]]: returns #t if ''obj'' is an object returned\nby the application of [[delay]].  \n\n[[MzScheme]]: returns #t if ''obj'' is an object returned\nby the form of [[delay]], or the procedure call of\n[[make-promise]].\n")
("uninterned-symbol?" . "(:ctime 1014946841 :cuser #f :mtime 1014946841 :muser #f)* [procedure] uninterned-symbol? ''obj''\n\n[[ChezScheme]]\n\nSee also [[string->uninterned-symbol]].\n")
("match-error-control" . "(:ctime 1015101972 :cuser #f :mtime 1015101972 :muser #f)* [procedure] match-error-control [''newmode'']\n\n[[Chicken]]: gets/sets current error mode of [[match]] package.\n")
(">fl" . "(:ctime 1039382036 :cuser #f :mtime 1039382036 :muser #f)[[$$include =fl]]\n")
("last-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144536230 :muser #f)* [syntax] last-ec  ''default'' ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe last value of ''expression'' in the sequence of bindings\nspecified by the ''qualifier''s. Before enumeration, the result is initialized\nwith the value of ''default''; so this will be the result if the sequence is\nempty.\n")
("time-second" . "(:ctime 1015209926 :cuser #f :mtime 1015210300 :muser #f)* [procedure] time-second ''time''\n* [procedure] set-time-second! ''time'' ''integer''\n\n[[SRFI-19]]: Getter and setter of ''second'' field of a time structure ''time''.\nSee also [[make-time]].\n\nSRFI-18 and SRFI-21 defines [[time->seconds]], and [[time-second]] can be\nused for it (not vice versa; SRFI-18/21 doesn't specify the ''epoch'' of\nseconds).\n\n")
("char-set-unfold!" . "(:ctime 1039168942 :cuser #f :mtime 1039168942 :muser #f)[[$$include char-set-unfold]]\n")
("chop" . "(:ctime 1015070177 :cuser #f :mtime 1015070177 :muser #f)* [procedure] chop ''list'' ''n''\n\n[[Chicken]]\n\n (chop '(1 2 3 4 5 6) 2) ==> ((1 2) (3 4) (5 6))\n (chop '(a b c d) 3)     ==> ((a b c) (d))\n\n")
("process-exit-status" . "(:ctime 1018342500 :cuser #f :mtime 1099737975 :muser #f)* [procedure] process-exit-status ''process''\n\n[[STk]], [[STklos]], [[Gauche]]: get exit status of ''process''.\nSee [[run-process]], [[process-wait]].\n")
("sstats-difference" . "(:ctime 1015029334 :cuser #f :mtime 1015029334 :muser #f)* [procedure] sstats-difference ''sstats1'' ''sstats2''\n\n[[ChezScheme]]: statistics.  See [[statistics]]\n")
("endianness" . "(:ctime 1144700986 :cuser #f :mtime 1144716050 :muser #f)* [syntax] endianness big\n* [syntax] endianness little\n* [syntax] endianness native\n\n[[SRFI-74]]: (endianness big) and (endianness little) evaluate to two distinct and\nunique objects representing an endianness. The native endianness evaluates\nto the endianness of the underlying machine architecture, and must be [[eq?]]\nto either (endianness big) or (endianness little).\n")
("foreign-callback-lambda*" . "(:ctime 1015069202 :cuser #f :mtime 1015069202 :muser #f)[[$$include foreign-callback-lambda]]\n")
("stream-map" . "(:ctime 1099280440 :cuser #f :mtime 1099280440 :muser #f)* [procedure] stream-map ''proc'' ''stream_0'' ''stream_1'' ...\n\n[[SRFI-40]]: Returns a new stream, whose elements are obtained by\napplying ''proc'' to the successive eleements of ''stream_i''s.\nSee also [[stream-unfoldn]], [[stream-for-each]].\n")
("hashtable-clear!" . "(:ctime 1191360631 :cuser #f :mtime 1191360631 :muser #f)* [procedure] hashtable-clear! ''hashtable'' [''init-size'']\n\n[[R6RS]]: Empties the hashtable.\n\nSee also [[Concept:HashTable]].\n\nOther implementations have [[hash-table-clear!]].\n")
("string-ci<" . "(:ctime 1015066206 :cuser #f :mtime 1015066206 :muser #f)[[$$include string-ci=]]\n")
("current-effective-group-id" . "(:ctime 1015198609 :cuser #f :mtime 1015198609 :muser #f)[[$$include current-group-id]]\n")
("touchline" . "(:ctime 1015882638 :cuser #f :mtime 1015882638 :muser #f)* [procedure] touchline ''win'' ''start'' ''count''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("gensym-count" . "(:ctime 1014946722 :cuser #f :mtime 1014946722 :muser #f)* [procedure] gensym-count [''newcount'']\n\n[[ChezScheme]]: this parameter keeps counter to be used for\n[[gensym]]ed symbols.\n")
("require" . "(:ctime 1015883380 :cuser #f :mtime 1099727697 :muser #f)* [procedure] require ''feature''\n* [procedure] provide ''feature''\n* [procedure] provided? ''feature''\n\nLoads a library specified by ''feature''.\n\n[[SCM]]: ''feature'' is a symbol.  Mapping from ''feature'' to the pathname of the library\nfile is managed by global catalog.\n\n[[STk]], [[STklos]], [[Gauche]]: ''feature'' is a string, and it is directly used as a part of the\npathname of the library file to load.\nSee also [[STklos:ModuleSystem]], [[Gauche:ModuleSystem]].\n\nSee also [[require-extension]].\n\n\n\n")
("struct-type?" . "(:ctime 1099725449 :cuser #f :mtime 1099725450 :muser #f)* [procedure] struct-type? ''obj''\n\n[[STklos]]: see [[make-struct-type]].\n")
("char-set:full" . "(:ctime 1018082728 :cuser #f :mtime 1018082728 :muser #f)[[$$include char-set:lower-case]]\n")
("print-radix" . "(:ctime 1014960372 :cuser #f :mtime 1014960372 :muser #f)* [procedure] print-radix [''newval'']\n\n[[ChezScheme]]: a parameter for [[write]] and [[pretty-print]]\n")
("char-set=" . "(:ctime 1015889914 :cuser #f :mtime 1015889914 :muser #f)* [procedure] char-set= ''cset1'' ''cset2''\n* [procedure] char-set<= ''cset1'' ''cset2''\n\n[[SRFI-14]]: character set comparison.\n")
("copy-bit-field" . "(:ctime 1015805620 :cuser #f :mtime 1015805620 :muser #f)* [procedure] copy-bit-field ''to'' ''start'' ''end'' ''from''\n\n[[SLIB]], [[Gauche]]: returns an integer which is the same as an integer ''to''\nexcept its ''start''-th bit to ''end''-th bit are replaced by ''from''.\nSee also [[copy-bit]], [[bit-field]].\n")
("full-current-time" . "(:ctime 1099743026 :cuser #f :mtime 1099743027 :muser #f)* [procedure] full-current-time\n\n[[STklos]]: returns # of seconds and milliseconds from Unix Epoch.\ngettimeofday().\n\nOther implementations have similar features under the name like\n[[sys-gettimeofday]].\n")
("set-file-creation-mask!" . "(:ctime 1020397375 :cuser #f :mtime 1020397375 :muser #f)* [procedure] set-file-creation-mask! ''file-mode''\n\n[[Scheme48]]: set umask.\n\nSome implementations call this [[set-umask]] or [[sys-umask]].\n")
("char-set:symbol" . "(:ctime 1018082698 :cuser #f :mtime 1018082698 :muser #f)[[$$include char-set:lower-case]]\n")
("blob-s16-native-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144717603 :muser #f)* [procedure] blob-s16-native-ref ''blob'' ''k''\n\n[[SRFI-74]]: equivalent to (blob-sint-ref 2 (endianess native) ''blob'' ''k'').\n\nSee also [[blob-sint-ref]] and [[endianness]].\n")
("min&max" . "(:ctime 1144591693 :cuser #f :mtime 1144597076 :muser #f)* [procedure] min&max ''x1'' ''x2'' ...\n\n[[Gauche]]: Returns a maximum and minimum number in the given real numbers.\n")
("thread" . "(:ctime 1020749740 :cuser #f :mtime 1020750076 :muser #f)* [procedure] thread ''thunk''\n\n[[MzScheme]]: creates a new thread and evaluates ''thunk'' in it. \n\nSee also [[current-thread]], [[thread?]], [[thread-running?]],\n[[thread-wait]], [[kill-thread]], [[break-thread]],\n[[call-in-nested-thread]], [[sleep]]\n\nSRFI-18 and SRFI-21 have [[make-thread]].\n")
("integer->process-id" . "(:ctime 1015282731 :cuser #f :mtime 1015282731 :muser #f)[[$$include process-id->integer]]\n")
("test-on-test-begin-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151084203 :muser #f)* [procedure] test-on-test-begin-simple ''runner''\n\n[[SRFI-64]]: (test-runner-on-test-begin (test-runner-simple)).\n\nSee also [[test-runner-simple]] and [[test-runner-on-test-begin]].\n")
("byte-vector->f64vector" . "(:ctime 1015075825 :cuser #f :mtime 1015075825 :muser #f)[[$$include byte-vector->u8vector]]\n")
("current-expand" . "(:ctime 1014965907 :cuser #f :mtime 1014965907 :muser #f)* [procedure] current-expand [''newval'']\n\n[[ChezScheme]]: gets/sets current expander.\n\nSee also [[expand]], [[sc-expand]], [[eps-expand]]\n\n")
("port-fold" . "(:ctime 1018345620 :cuser #f :mtime 1327407197 :muser #f)* [procedure] port-fold ''port'' ''reader'' ''op'' . ''seeds''\n\n[[Scsh]]: Applys ''reader'' on ''port'' repeatedly,\nuntil it returns eof.   The first value ''v0'' returned\nby ''reader'' will be passed to ''op'' with ''seeds'',\nas (''op'' ''v0'' . ''seeds'').  This should return\na new set of seed values, which will be passed with\nthe next value returned by ''reader'', and so on.\nSee also [[port->list]].\n [http://www.obtenir-rio.info numero rio]\n")
("u16vector->byte-vector" . "(:ctime 1015075603 :cuser #f :mtime 1015075603 :muser #f)[[$$include u8vector->byte-vector]]\n")
("list*" . "(:ctime 1014942104 :cuser #f :mtime 1099724592 :muser #f)* [procedure] list* ''obj'' ... ''final-obj''\n\n[[ChezScheme]], [[STk]], [[STklos]], [[Gauche]], [[MzScheme]]\n\nThe same procedure is defined as [[cons*]] in [[SRFI-1]].\n\nSee also [[cons*]].\n")
("symbol=?" . "(:ctime 1191565259 :cuser #f :mtime 1191565259 :muser #f)* [procedure] symbol=? ''symbol1'' ''symbol2'' ''symbol3'' ...\n\n[[R6RS]]: Returns #t if all symbols are the same.\n\n")
("process-id?" . "(:ctime 1015282454 :cuser #f :mtime 1015282573 :muser #f)* [procedure] process-id? ''obj''\n\n[[Scheme48]]: see also [[fork]], [[get-process-id]], [[get-parent-process-id]],\n[[process-id=?]], [[process-id->integer]], [[integer->process-id]],\n[[process-id-exit-status]], \n[[process-id-terminating-signal]], [[wait-for-child-process]].\n")
("user-info-name" . "(:ctime 1018125237 :cuser #f :mtime 1018125247 :muser #f)[[$$include user-info?]]\n")
("reverse-list->string" . "(:ctime 1014884430 :cuser #f :mtime 1014884430 :muser #f)* [procedure] reverse-list->string ''char-list''\n\n[[SRFI-13]]:  An efficient implementation of (compose list->string reverse)\n\nSee also [[list->string]].\n")
("integer-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499721 :muser #f)* [procedure] integer-compare ''x'' ''y''\n* [procedure] rational-compare ''x'' ''y''\n* [procedure] real-compare ''x'' ''y''\n* [procedure] complex-compare ''x'' ''y''\n* [procedure] number-compare ''x'' ''y''\n[[SRFI-67]]: Compare two numbers. It is an error if an argument is not of the type specified by the name of the procedure.\n\nComplex numbers are ordered lexicographically on pairs (re, im). For objects\nrepresenting real numbers sign(x - y) is computed. The ordering for values\nsatisfying [[real?]] or [[complex?]] but not representing a real or complex number\nshould be consistent with procedures [[=]] and [[<]] of [[R5RS]] , and apart from that it is unspecified.\n")
("identifier-syntax" . "(:ctime 1014962526 :cuser #f :mtime 1191844520 :muser #f)* [syntax] identifier-syntax ''tmpl''\n* [syntax] identifier-syntax (''id1'' ''tmpl1'') ((set! ''id2'' ''e2'') ''tmpl2'')\n\n[[R6RS]], [[ChezScheme]]\n\nFrom R6RS examples:\n{{{\ndefine p (cons 4 5))\n(define-syntax p.car (identifier-syntax (car p)))\np.car         => 4\n(set! p.car 15)         =>  &syntax exception\n}}}\n{{{\n(define p (cons 4 5))\n(define-syntax p.car\n  (identifier-syntax\n    (_ (car p))\n    ((set! _ e) (set-car! p e))))\n(set! p.car 15)\np.car                   => 15\np                       => (15 5)\n}}}\n\nSee also [[syntax-rules]], [[syntax-case]]\n")
("port-seek" . "(:ctime 1039776924 :cuser #f :mtime 1039776924 :muser #f)* [procedure] port-seek ''port'' ''offset'' [''whence'']\n\n[[Gauche]]: lseek(2).  can be applied to string ports\nas well.  See also [[port-tell]].\n\nOther implementations calls this [[set-file-position!]] or\n[[seek]].\n")
("test-runner-reset" . "(:ctime 1151146683 :cuser #f :mtime 1151146695 :muser #f)* [syntax] test-runner-reset ''runner''\n\n[[SRFI-64]]: resets the state of ''runner'' to its initial state.\n")
("SRFI-5" . "(:ctime 1015066520 :cuser #f :mtime 1122428527 :muser #f)SRFI-5: A compatible let form with signatures and rest arguments\n\nhttp://srfi.schemers.org/srfi-5/srfi-5.html\n\n[[$$srfi-implementors]]\n----\n\n[[let]]\n")
("process-id->integer" . "(:ctime 1015282716 :cuser #f :mtime 1015282716 :muser #f)* [procedure] process-id->integer ''process-id''\n* [procedure] integer->process-id ''integer''\n\n[[Scheme48]]: convertion between integer pid and process-id structure.\nSee [[process-id?]], [[get-process-id]], [[fork]].\n")
("flo:atan2" . "(:ctime 1480141597 :cuser #f :mtime 1480141597 :muser #f)(flo:atan2 0 0)\n")
("char=?" . "(:ctime 1014840940 :cuser #f :mtime 1191566317 :muser #f)* [procedure] char=? ''char1'' ''char2''\n* [procedure] char<=? ''char1'' ''char2''\n* [procedure] char<? ''char1'' ''char2''\n* [procedure] char>=? ''char1'' ''char2''\n* [procedure] char>? ''char1'' ''char2''\n\n[[R5RS]]: Compare two chracters.\n\n* [procedure] char=? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char<=? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char<? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char>=? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char>? ''char1'' ''char2'' ''char3'' ...\n\n[[R6RS]], [[MzScheme]]: Compare two or more characters.\n\n")
("char-set-delete!" . "(:ctime 1099288234 :cuser #f :mtime 1099288234 :muser #f)[[$$include char-set-delete]]\n")
("define-constant" . "(:ctime 1015044565 :cuser #f :mtime 1346001812 :muser #f)* [syntax] define-constant ''var'' ''constant''\n* [syntax] define-constant (''var'' ''formals'') ''body'' ...\n\n[[Chicken]], [[Gauche]], [[Sagittarius]]: defining constant binding.\n")
("unsyntax-splicing" . "(:ctime 1191208707 :cuser #f :mtime 1191208707 :muser #f)[[$$include unsyntax]]\n")
("read-string!" . "(:ctime 1018386954 :cuser #f :mtime 1018386954 :muser #f)* [procedure] read-string! ''str'' [''fd/port'' ''start'' ''end'']\n\n[[Scsh]]: reads characters into the given string.\nSee also [[read-string]], [[read-string!/partial]].\n")
("compile-port" . "(:ctime 1014965501 :cuser #f :mtime 1014965501 :muser #f)* [procedure] compile-port ''input-port'' ''output-port'' [''machine-type'']\n\n[[ChezScheme]]\n\nSee also [[compile-file]], [[compile]]\n")
("SRFI-88" . "(:ctime 1184128106 :cuser #f :mtime 1184128107 :muser #f)SRFI 88: Keyword objects\n\nhttp://srfi.schemers.org/srfi-88/srfi-88.html\n\n[[$$srfi-implementors]]\n----\n\n[[keyword?]], [[keyword->string]], [[string->keyword]]\n")
("gauche-architecture" . "(:ctime 1015904874 :cuser #f :mtime 1015904874 :muser #f)* [procedure] gauche-architecture\n* [procedure] gauche-library-directory\n* [procedure] gauche-architecture-directory\n* [procedure] gauche-site-library-directory\n* [procedure] gauche-site-architecture-directory\n\n[[Gauche]]: Query the system parameters.\n")
("string<" . "(:ctime 1015063833 :cuser #f :mtime 1015063898 :muser #f)[[$$include string=]]\n\n")
("access-mode" . "(:ctime 1020397839 :cuser #f :mtime 1020397839 :muser #f)[[$$include accessible?]]\n")
("setenv!" . "(:ctime 1015199893 :cuser #f :mtime 1099742243 :muser #f)* [procedure] setenv! ''variable'' ''value''\n\n[[STk]], [[STklos]]: modifies the environemnt variable ''variable''.\nSee also [[getenv]].\n\nThis is called [[setenv]] or [[sys-putenv]] on some\nimplementations.\n")
("make-engine" . "(:ctime 1014941719 :cuser #f :mtime 1014941719 :muser #f)* [procedure] make-engine ''thunk''\n\n[[ChezScheme]]: create an engine, a high-level process abstraction\nsupporting ''timed preemtption''.   Can be used for multithreading.\n\nSee also [[engine-block]], [[engine-return]].\n\n")
("remq!" . "(:ctime 1014944928 :cuser #f :mtime 1039345225 :muser #f)* [procedure] remq! ''obj'' ''list''\n\n[[ChezScheme]], [[Bigloo]]: Linear-update version of ''remq''.\nEquivalent to [[SRFI-1]]'s [[delete!]] with passing [[eq?]] for\ncomparison predicate.\n\nSee also [[remove!]], [[remq]], [[remv!]].\n")
("procedure?" . "(:ctime 1014857837 :cuser #f :mtime 1191210627 :muser #f)* [procedure] procedure? ''obj''\n\n[[R5RS]], [[R6RS]]: Returns #t if ''obj'' is a procedure, otherwise returns #f.\n\n")
("SRFI-4" . "(:ctime 1014875453 :cuser #f :mtime 1122428516 :muser #f)SRFI-4: Homogeneous numeric vector datatypes \n\nhttp://srfi.schemers.org/srfi-4/srfi-4.html\n\n[[$$srfi-implementors]]\n")
("SRFI-126" . "(:ctime 1474475551 :cuser #f :mtime 1474475551 :muser #f)SRFI-126: \nR6RS-based hashtables\n\n\nhttp://srfi.schemers.org/srfi-126/srfi-126.html\n\n[[$$srfi-implementors]]\n")
("quotient&reminder" . "(:ctime 1144591693 :cuser #f :mtime 1144597058 :muser #f)* [procedure] quotient&remainder ''n1'' ''n2''\n\n[[Gauche]]:\nCalculates the quotient and the remainder of dividing integer ''n1'' by integer\n''n2'' simultaneously, and returns them as two values.\n")
("SRFI-78" . "(:ctime 1144197855 :cuser #f :mtime 1145787719 :muser #f)SRFI 78: Lightweight testing\n\nhttp://srfi.schemers.org/srfi-78/srfi-78.html\n\n[[$$srfi-implementors]]\n----\n\n[[check]], [[check-ec]], [[check-report]], [[check-set-mode!]], [[check-reset!]], [[check-passed?]]\n")
("mutex?" . "(:ctime 1015927477 :cuser #f :mtime 1015963572 :muser #f)* [procedure] mutex? ''obj''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("integer-expt" . "(:ctime 1039750942 :cuser #f :mtime 1170268192 :muser #f)* [procedure] integer-expt ''x'' ''y''\n\n[[SLIB]], [[Guile]]: ''x''^''y'', for integer ''x'' and\nnon-negative integer ''y''.\n\nThis would be introduced for optimization, although\nI can imagine on most Schemes [[expt]] uses optimized\ncalculation when both args are exact integer.  You can\nstill save a couple of dispatch, though.\n\n[[SRFI-94]]: returns ''x'' raised to the power ''y'' if that result is an exact integer; otherwise signals an error.\n\n(integer-expt 0 ''y'') returns 1 for ''y'' equal to 0; returns 0 for positive integer ''y''; signals an error otherwise.\n")
("hash-table-remove!" . "(:ctime 1018341338 :cuser #f :mtime 1099737646 :muser #f)* [procedure] hash-table-remove! ''hash'' ''key''\n\n[[STk]], [[STklos]], [[MzScheme]]: removes the specified entry.\nSee also [[make-hash-table]], [[Concept:HashTable]].\n\nThis is called [[hash-table-delete!]] or [[hashtable-remove!]] in some\nimplementations.\n\n")
("date->time-monotonic" . "(:ctime 1099300864 :cuser #f :mtime 1099300864 :muser #f)[[$$include date->julian-day]]\n")
("blob-u16-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144718105 :muser #f)* [procedure] blob-u16-ref ''endianness'' ''blob'' ''k''\n\n[[SRFI-74]]: equivalent to (blob-uint-ref 2 ''endianness'' ''blob'' ''k'').\n\nSee also [[blob-uint-ref]].\n")
("binary-port?" . "(:ctime 1063240486 :cuser #f :mtime 1063240486 :muser #f)* [procedure] binary-port? ''port''\n\n[[Bigloo]]: returns #t iff ''port'' is a binary port.\nSee [[open-output-binary-file]], [[append-output-binary-file]],\n[[open-input-binary-file]], [[close-binary-port]].\n\nIn Bigloo, binary ports can be used to dump Scheme objects to, and \nto restore Scheme objects from.   [[input-obj]] and [[output-obj]]\ncan be used to do so.   Object serialization/deserialization is done by [[string->obj]]\nand [[obj->string]].\n\nUse special procedures, [[input-char]] and [[output-char]], to do normal\ncharacter I/O on a binary port.\n")
("void" . "(:ctime 1014947337 :cuser #f :mtime 1099776422 :muser #f)* [procedure] void\n\n[[ChezScheme]], [[Chicken]], [[MzScheme]]: returns void object.\n\nSee also [[void?]]\n\nBigloo has [[unspecified]].\n\n* [procedure] void [''arg'' ...]\n\n[[STklos]]: returns void object.   If arguments are passed,\nthey are evaluated and the result is discarded.\n")
("sinh" . "(:ctime 1014955604 :cuser #f :mtime 1039750669 :muser #f)* [procedure] sinh ''z''\n* [procedure] cosh ''z''\n* [procedure] tanh ''z''\n\n[[ChezScheme]], [[Gauche]], [[SCM]], [[Guile]]: hyperbolic sine, cosine and tangent.\n\nSee also [[asinh]], [[acosh]], [[atanh]].\n\n")
("file-info-last-info-change" . "(:ctime 1040727359 :cuser #f :mtime 1040727359 :muser #f)[[$$include file-info-name]]\n")
("number-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499883 :muser #f)[[$$include integer-compare]]\n")
("gensym" . "(:ctime 1014946519 :cuser #f :mtime 1168118142 :muser #f)* [procedure] gensym\n\n[[ChezScheme]]: returns a new uninterned symbol.\n\n[[LispMe]]: returns a new unique symbol.\n\nSee also [[string->uninterned-symbol]], [[gensym-prefix]], [[gensym-counter]].\n\n* [procedure] gensym [''prefix'']\n\n[[Gauche]]: returns an unique symbol.  If string ''prefix'' is given,\nit is used as a prefix of the symbol.\n\n[[STk]], [[STklos]], [[Chicken]]: returns an uninterned symbol.  If string ''prefix'' is given,\nit is used as a prefix of the symbol.\n\n[[MzScheme]]: creates an uninterned symbol.\n''Prefix'' may be a symbol or a string.\n\n[[Bigloo]]: creates a new fresh symbol.  ''Prefix'' may be\na symbol or a string.\n\nSome implementations have [[gentemp]].\n")
("eps-expand" . "(:ctime 1014965813 :cuser #f :mtime 1014965813 :muser #f)* [procedure] eps-expand ''obj'' [''env-spec'']\n\n[[ChezScheme]]\n\nSee also [[eps-expand-once]], [[sc-expand]], [[current-expand]], [[expand]]\n")
("char-set:whitespace" . "(:ctime 1018082680 :cuser #f :mtime 1018082680 :muser #f)[[$$include char-set:lower-case]]\n")
("fxlogand" . "(:ctime 1014950881 :cuser #f :mtime 1191224885 :muser #f)* [procedure] fxlogand ''fixnum'' ...\n* [procedure] fxlogor ''fixnum'' ...\n* [procedure] fxlogior ''fixnum'' ...\n* [procedure] fxlogxor ''fixnum'' ...\n\n[[ChezScheme]]: Bitwise and, ior, and xor operations.\nSee [[fixnum?]] for other fixnum-specific operations.\nSee [[logand]] for other bitwise operations.\n\nIn R6RS, these operations are [[fxand]], [[fxior]] and [[fxxor]].\n\n")
("let/cc" . "(:ctime 1060172320 :cuser #f :mtime 1080858357 :muser #f)* [syntax] let/cc ''k'' ''expr'' ...\n\n[[MzScheme]], [[Gauche]]:\na macro that expands to (call/cc (lambda (''k'') ''expr'' ...)\n\nSee also [[let/ec]].\n")
("decode-float" . "(:ctime 1014952501 :cuser #f :mtime 1138264396 :muser #f)* [procedure] decode-float ''flonum''\n\n[[ChezScheme]], [[Gauche]]: returns a vector with tree integer elements,\n''m'', ''e'', and ''s'', such that ''flonum'' = ''s''*''m''*2^''e''.\n\nSee also [[flonum?]]\n")
("input-port-position" . "(:ctime 1039755836 :cuser #f :mtime 1039755836 :muser #f)* [procedure] input-port-position ''iport''\n* [procedure] output-port-position ''oport''\n\n[[Bigloo]]: returns the current position of the port.\n\nSome implementations have [[file-position]], [[tell]]\nor [[ftell]].\n\n")
("open-input-virtual" . "(:ctime 1018334410 :cuser #f :mtime 1018334519 :muser #f)* [procedure] open-input-virtual ''getc'' ''readyp'' ''eofp'' ''close''\n\n[[STk]]: creates a virtual (procedural) port.\nSee also [[open-output-virtual]].\n\nSome implementations have [[make-input-port]] \nto create customized input port.\n")
("lset-union!" . "(:ctime 1014875043 :cuser #f :mtime 1014875043 :muser #f)* [procedure] lset-union! ''elt='' ''list1'' ...\n\n[[SRFI-1]]: linear-update variant of [[lset-union]].\n")
("get-optional" . "(:ctime 1044325252 :cuser #f :mtime 1044325257 :muser #f)* [syntax] get-optional ''args'' ''default''\n\n[[Gauche]]: shorthand notation of [[let-optionals*]] when\nthere's only one optional arguments.\n\n  (define (proc arg . opts)\n    (list arg (get-optional opts #f)))\n \n  (proc 0) => (0 #f)\n  (proc 0 1) => (0 1)\n\n")
("list-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144505880 :muser #f)[[$$include vector-compare]]\n")
("make-server-socket" . "(:ctime 1018343235 :cuser #f :mtime 1099740668 :muser #f)* [procedure] make-server-socket [''port-number'']\n\n[[STk]]: opens a server socket.  See also \n[[socket-accept-connection]], [[make-client-socket]].\n\n[[STklos]]: opens a server socket.  See also\n[[socket-accept]], [[make-client-socket]].\n\nThis is called [[open-socket]] in some implementations.\n")
("get-host-name" . "(:ctime 1015200696 :cuser #f :mtime 1167345930 :muser #f)* [procedure] get-host-name \n\n[[Chicken]], [[Scheme48]]: gethostname. \n\nGauche has [[sys-gethostname]].\nScsh has [[system-name]].\nSTklos has [[hostname]].\n\nIn mzscheme, do this:\n  (require (lib \"os.ss\" \"mzlib\"))\n  (gethostname)\n\nThis works for me in sisc:\n  (get-host-name-by-ip (get-local-host))\n")
("machine-name" . "(:ctime 1020375215 :cuser #f :mtime 1020375215 :muser #f)[[$$include os-name]]\n")
("#<<" . "(:ctime 1015042115 :cuser #f :mtime 1015204490 :muser #f)* [reader syntax] #<< ''TAG''\n\n[[Chicken]]: starts multiline string constant.  See also [[#<#]].\n\n[[Scsh]]: starts multiline string constant.\n")
("write" . "(:ctime 1014856764 :cuser #f :mtime 1014856764 :muser #f)* [procedure] write ''obj'' [''port'']\n\n[[R5RS]]\n\nSee also [[display]], [[newline]].\n")
("ucs2-ci>?" . "(:ctime 1039428836 :cuser #f :mtime 1039428836 :muser #f)[[$$include ucs2-ci=?]]\n")
("print*" . "(:ctime 1015069274 :cuser #f :mtime 1015069274 :muser #f)[[$$include print]]\n")
("bit-rsh" . "(:ctime 1043985175 :cuser #f :mtime 1043985175 :muser #f)[[$$include bit-lsh]]\n")
("test-eqv" . "(:ctime 1151049296 :cuser #f :mtime 1151074020 :muser #f)* [syntax] test-eqv [''test-name''] ''expected'' ''test-expr''\n\n[[SRFI-64]]: equivalent to\n (test-assert [''test-name''] (eqv? ''expected'' ''test-expr''))\n\nSee also [[test-assert]].\n")
("define-inline" . "(:ctime 1015044733 :cuser #f :mtime 1015044733 :muser #f)* [syntax] define-inline ''name'' ''exp''\n* [syntax] define-inline (''name'' ''formals'') ''body'' ...\n\n[[Chicken]]: define inlinable procedure.  See also [[define-integrable]].\n")
("alet" . "(:ctime 1170065147 :cuser #f :mtime 1170065651 :muser #f)* [syntax] alet (''binding-spec'' ...) ''body'' ...\n* [syntax] alet ''name'' (''binding-spec'' ...) ''body'' ...\n\n[[SRFI-86]]:\n[[let]] + \n- left to right evaluation of binding forms\n- multiple values binding with [[mu]] and [[nu]]\n- escape function\n- [[and-let*]]\n- [[let-optionals]] in [[Scsh]]\n- [[let-keywords]] and [[let-keywords*]]\n- [[letrec]] and [[letrec*]]\n- multiple values binding with [[values]] and [[call-with-values]] (like [[SRFI-71]])\n- binding forms intervening external environment\n\nSee also [[alet*]].\n")
("bitwise-bit-count" . "(:ctime 1191715781 :cuser #f :mtime 1191715781 :muser #f)* [procedure] bitwise-bit-count ''e1''\n\n[[R6RS]]: If ''e1'' is positive, returns the number of '1' bits in it.\nOtherwise, the result will be:\n{{{\n(bitwise-not (bitwise-bit-count (bitwise-not e1)))\n}}}\n\nThe [[logcount]] procedure in [[SLIB]] etc. also counts the number of\n'1' bits for the positive exact integer argument; but it works differently\nif the argument is negative ([[logcount]] returns the number of '0' bits\nin such case).\n")
("fluid-let-syntax" . "(:ctime 1014962017 :cuser #f :mtime 1014962017 :muser #f)* [syntax] fluid-let-syntax ((''keyword'' ''exp'') ...) ''form1'' ''form2'' ...\n\n[[ChezScheme]]\n")
("blob-s8-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144716339 :muser #f)* [procedure] blob-s8-set! ''blob'' ''k'' ''byte''\n\n[[SRFI-74]]: Stores the two's complement representation of ''byte'' in element\n''k'' of ''blob''.  ''Byte'', must be an exact integer in the interval {-128, ..., 127}.\n\nThe return values are unspecified.\n")
("rxmatch-if" . "(:ctime 1015915771 :cuser #f :mtime 1015915832 :muser #f)* [syntax] rxmatch-if ''match-expr'' (''var'' ...) ''then-form'' ''else-form''\n\n[[Gauche]]: evaluates ''match-expr'' that should return a [[<regmatch>]] object or #f.\nIf it is a match object, binds matched substrings to ''var'' ..., and evaluates\n''then-form''.  Otherwise, evaluates ''else-form''.\n\nSee also [[Concept:RegularExpression]], [[rxmatch-let]], [[rxmatch-cond]],\n[[rxmatch-case]].\n\nScsh calls this [[if-match]].\n")
("uri-parse" . "(:ctime 1099777087 :cuser #f :mtime 1099777087 :muser #f)* [procedure] uri-parse ''str''\n\n[[STklos]]: decompose uri string and returns keyed value list.\n{{{\n(uri-parse \"http://google.com\")\n    ⇒ (:scheme \"http\" :host \"google.com\" :port 80 :path \"/\" \n        :query \"\" :fragment \"\")\n(uri-parse \"http://stklos.net:8080/a/file?x=1;y=2#end\")\n    ⇒ (:scheme \"http\" :host \"stklos.net\" :port 8080 \n        :path \"/a/file\" :query \"x=1;y=2\" :fragment \"end\")\n(uri-parse \"/a/file\")           \n   ⇒ (:scheme \"file\" :host \"\" :port 0 :path \"/a/file\" \n       :query \"\" :fragment \"\")\n(uri-parse \"\")\n   ⇒ (:scheme \"file\" :host \"\" :port 0 :path \"\" \n       :query \"\" :fragment \"\")\n}}}\n\n* [procedure] uri-parse ''uri''\n\n[[Gauche]]: decompose uri string and return components in multiple values,\ni.e. (values ''scheme'' ''user-info'' ''hostname'' ''port-number'' ''path'' ''query'' ''fragment'').\n\nSee also [[uri-scheme&specific]], [[uri-decompose-hierarchical]],\n[[uri-decompose-authority]], [[uri-compose]], [[uri-decode]], [[uri-decode-string]],\n[[uri-encode]], [[uri-encode-string]].\n")
("quit" . "(:ctime 1015211742 :cuser #f :mtime 1018344614 :muser #f)* [procedure] quit [''code'']\n\n[[SCM]], [[STk]]: exits program with the specified code.  Same as [[exit]].\n")
("cfl-" . "(:ctime 1014953243 :cuser #f :mtime 1014953243 :muser #f)* [procedure] cfl- ''cflonum'' ...\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[-]], [[fl-]]\n")
("SRFI-37" . "(:ctime 1099274079 :cuser #f :mtime 1122428786 :muser #f)SRFI-37: args-fold: a program argument processor\n\nhttp://srfi.schemers.org/srfi-37/srfi-37.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[args-fold]]\n\n[[option]], [[option-names]], [[option-required-arg?]],\n[[option-optional-arg?]], [[option-processor]]\n")
("char-set-adjoin" . "(:ctime 1099288158 :cuser #f :mtime 1099288158 :muser #f)* [procedure] char-set-adjoin ''cset'' ''char1'' ...\n* [procedure] char-set-adjoin! ''cset'' ''char1'' ...\n\n[[SRFI-14]]: Returns a character set that contains all characters\nin ''cset'' and characters given as ''char1'' ....\n[[char-set-adjoin]] always creates a new character set.\n[[char-set-adjoin!]] may modify ''cset''.\n\nSee also [[char-set-delete]], [[char-set-delete!]].\n\n")
("object-hash" . "(:ctime 1152518355 :cuser #f :mtime 1152527909 :muser #f)* [procedure] object-hash ''obj''\n\n[[RRRS]]: associates an integer with ''obj'' in a global table and returns the integer.\n\nSee also [[object-unhash]].\n")
("directory-files" . "(:ctime 1018346505 :cuser #f :mtime 1018346505 :muser #f)* [procedure] directory-files [''dir'' ''dotfiles?'']\n\n[[Scsh]]: reads entries in ''dir''.\n\nThis functionality can be found in other implementations\nunder the name like [[directory]], [[list-directory]]\nor [[sys-readdir]].\n")
("tail?" . "(:ctime 1015070301 :cuser #f :mtime 1015070301 :muser #f)* [procedure] tail? ''x'' ''list''\n\n[[Chicken]]\n")
("SRFI" . "(:ctime 1122418010 :cuser #f :mtime 1122862573 :muser #f)Scheme Requests for Implementation: http://srfi.schemers.org/\n\n----\n\n* Final SRFIs and their support.\n\n''(The number of supporting implementations are derived from '$$srfis'\n~ macro in each implementation's page.  To see which implementations\n~ support the srfi, follow the link on the srfi number.)''\n\n[[$$srfi-implementors-map]]\n")
("debug" . "(:ctime 1014896297 :cuser #f :mtime 1014896297 :muser #f)* [procedure] debug\n\n[[ChezScheme]]\n")
("generate-inspector-information" . "(:ctime 1015023853 :cuser #f :mtime 1015023853 :muser #f)* [procedure] generate-inspector-information [''newval'']\n\n[[ChezScheme]]: compiler parameter.\n")
("substq" . "(:ctime 1014945123 :cuser #f :mtime 1014945123 :muser #f)* [procedure] substq ''new'' ''old'' ''tree''\n\n[[ChezScheme]]: traverses ''tree'', replacing all objects equivalent\n([[eq?]]) to ''obj'' with the object ''new''.\n\nSee also [[subst]], [[substv]], [[subst!]]\n")
("ucs2-string->utf8-string" . "(:ctime 1039427820 :cuser #f :mtime 1039427820 :muser #f)* [procedure] ucs2-string->utf8-string ''ucs2-string''\n* [procedure] utf8-string->ucs2-string ''utf8-string''\n\n[[Bigloo]]: conversion between ucs2-string and utf8-string.\nSee [[ucs2-string?]].\n")
("signal/trap" . "(:ctime 1015076577 :cuser #f :mtime 1015076577 :muser #f)[[$$include signal/hup]]\n")
("set-current-input-port" . "(:ctime 1036928032 :cuser #f :mtime 1036928042 :muser #f)* [procedure] set-current-input-port ''port''\n* [procedure] set-current-output-port ''port''\n* [procedure] set-current-error-port ''port''\n\n[[Guile]]: sets current ports.\n\nScsh has [[set-current-input-port!]], [[set-current-output-port!]] and [[set-error-output-port!]].\n\nChezScheme and Chicken's [[current-input-port]],\n[[current-output-port]] and [[current-error-port]]\nhave the ability to change the current ports.\n\nOther implementation provides [[with-input-from-port]] etc.,\nto alternate current ports temporary.\n")
("R5RS" . "(:ctime 1014837147 :cuser #f :mtime 1346013638 :muser #f)Revised^5 Report on the Algorithmic Language Scheme. (1998)\n\nhttp://www.schemers.org/Documents/Standards/\n\n----\n** Syntax\n\n[[lambda]], [[if]], [[set!]], [[cond]], [[and]], [[or]],\n[[let]], [[letrec]], [[begin]], [[do]], [[delay]], [[quasiquote]],\n[[let-syntax]], [[letrec-syntax]], [[syntax-rules]], [[define-syntax]],\n[[define]]\n\n** Procedures\n\n*** Equivalence\n\n[[eqv?]], [[eq?]], [[equal?]]\n\n*** Numbers\n\n[[number?]], [[complex?]], [[real?]], [[rational?]], [[integer?]],\n[[exact?]], [[inexact?]]\n\n[[=]], [[<]], [[<=]], [[>]], [[>=]],\n[[zero?]], [[positive?]], [[negative?]], [[odd?]], [[even?]],\n[[max]], [[min]]\n\n[[+]], [[-]], [[*]], [[/]], [[abs]], [[quotient]], [[remainder]],\n[[modulo]], [[gcd]], [[lcm]]\n\n[[numerator]], [[denominator]], [[floor]], [[ceiling]], [[truncate]],\n[[round]], [[rationalize]]\n\n[[exp]], [[log]], [[sin]], [[cos]], [[tan]], [[asin]], [[acos]],\n[[atan]], [[sqrt]], [[expt]]\n\n[[make-rectangular]], [[make-polar]], [[real-part]], [[imag-part]],\n[[magnitude]], [[angle]]\n\n[[exact->inexact]], [[inexact->exact]]\n\n[[number->string]], [[string->number]]\n\n*** Other data types\n\n[[not]], [[boolean?]]\n\n[[pair?]], [[cons]], [[car]], [[cdr]], [[set-car!]], [[set-cdr!]],\n[[list]], [[length]], [[append]], [[reverse]], [[list-tail]],\n[[list-ref]], [[memq]], [[memv]], [[member]], [[assq]], [[assv]], [[assoc]]\n\n[[symbol?]], [[symbol->string]], [[string->symbol]]\n\n[[char?]], [[char=?]], [[char<?]], [[char<=?]], [[char>?]], [[char>=?]],\n[[char-ci=?]], [[char-ci<?]], [[char-ci<=?]], [[char-ci>?]], [[char-ci>=?]]\n[[char-alphabetic?]], [[char-numeric?]], [[char-whitespace?]],\n[[char-upper-case?]], [[char-lower-case?]], [[char->integer]],\n[[integer->char]], [[char-upcase]], [[char-downcase]]\n\n[[string?]], [[make-string]], [[string]], [[string-length]],\n[[string-ref]], [[string-set!]], [[string=?]], [[string<?]], [[string<=?]],\n[[string>?]], [[string>=?]], [[string-ci=?]], [[string-ci<?]], \n[[string-ci<=?]], [[string-ci>?]], [[string-ci>=?]],\n[[substring]], [[string-append]], [[string->list]], [[list->string]],\n[[string-copy]], [[string-fill!]]\n\n[[vector?]], [[make-vector]], [[vector]], [[vector-length]],\n[[vector-ref]], [[vector-set!]], [[vector->list]], [[list->vector]],\n[[vector-fill!]]\n\n[[procedure?]], [[apply]], [[map]], [[for-each]], [[force]],\n[[call-with-current-continuation]], [[values]], [[call-with-values]],\n[[dynamic-wind]]\n\n[[eval]], [[scheme-report-environment]], [[null-environment]],\n[[interaction-environment]]\n\n[[call-with-input-file]], [[call-with-output-file]],\n[[input-port?]], [[output-port?]], [[current-input-port]],\n[[current-output-port]], [[with-input-from-file]], \n[[with-output-to-file]], [[port?]], [[open-input-file]],\n[[open-output-file]], [[close-input-port]], [[close-output-port]]\n\n[[read]], [[read-char]], [[peek-char]], [[eof-object?]],\n[[char-ready?]]\n\n[[write]], [[display]], [[newline]], [[write-char]]\n\n[[load]], [[transcript-off]], [[transcript-on]]\n\n\n")
("generate-temporaries" . "(:ctime 1014963318 :cuser #f :mtime 1014963318 :muser #f)* [procedure] generate-temporaries ''list''\n\n[[ChezScheme]]\n\nSee [[syntax-case]].\n")
("winify-file-name" . "(:ctime 1099741760 :cuser #f :mtime 1099741760 :muser #f)* [procedure] winify-file-name ''path''\n\n[[STklos]]: returns Windows style pathname from Unix-style (Cygwin) pathname.\n")
("stream-cons" . "(:ctime 1099279842 :cuser #f :mtime 1099279842 :muser #f)* [procedure] stream-cons ''obj'' ''stream''\n\n[[SRFI-40]]: Primitive constructor of streams.  See also [[stream]],\n[[stream-pair?]].\n\nExamples:\n{{{\n(stream-cons 'a stream-null)                => (stream 'a)\n(stream-cons 'a (stream 'b 'c 'd))          => (stream 'a 'b 'c 'd)\n(stream-cons \"a\" (stream 'b 'c))            => (stream \"a\" 'b 'c)\n(stream-cons 'a 3)                          => error\n(stream-cons (stream 'a 'b) (stream 'c))    => (stream (stream 'a 'b) 'c)\n}}}\n")
("vector-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535653 :muser #f)* [syntax] vector-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe vector of all values of ''expression''.\nThink of it as ([[list->vector]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n")
("SRFI-121" . "(:ctime 1474475432 :cuser #f :mtime 1474475432 :muser #f)SRFI-121: Generators\n\nhttp://srfi.schemers.org/srfi-121/srfi-121.html\n\n[[$$srfi-implementors]]\n")
("sys-localtime" . "(:ctime 1099743402 :cuser #f :mtime 1099743402 :muser #f)* [procedure] sys-localtime ''seconds''\n* [procedure] sys-gmtime ''seconds''\n\n[[Gauche]]: POSIX localtime() and gmtime().  Returns <sys-tm> instance.\nSee also [[sys-mktime]].\n\n\nOther implementations provide similar features under the names\n[[posix-localtime]]/[[posix-gmtime]], [[seconds->local-time]]/[[seconds->utc-time]],\n[[seconds->date]].\n")
("class-of" . "(:ctime 1201717870 :cuser #f :mtime 1201717870 :muser #f)* [procedure] class-of ''obj''\n\n[[Gauche]]: Returns the class of ''obj''.\n\nSee also [[is-a?]], [[define-class]].\n")
("vector-set-length!" . "(:ctime 1038091512 :cuser #f :mtime 1038091568 :muser #f)* [procedure] vector-set-length! ''object'' ''length''\n\n[[SCM]]: changes the length of vector-like objects\n(vector, bit-vector, array).\n\nNot all implementations have resizable vector, but\nSTk has [[vector-resize]].\n")
("output-port?" . "(:ctime 1014854535 :cuser #f :mtime 1014857537 :muser #f)* [procedure] output-port? ''obj''\n\n[[R5RS]]: Returns #t if obj is an output port, otherwise returns #f.\n\nSee also [[port?]], [[input-port?]].\n")
("process-signal" . "(:ctime 1015185555 :cuser #f :mtime 1020374493 :muser #f)* [procedure] process-signal ''pid'' [''signal'']\n\n[[Chicken]]: kill(2).  See [[signal/term]] etc.\n\nOther implementations have [[process-send-signal]],\n[[signal-process]], [[sys-kill]].\n")
("bind-exit" . "(:ctime 1039430893 :cuser #f :mtime 1039430927 :muser #f)* [syntax] bind-exit (''escape'') . ''body''\n\n[[Bigloo]]: binds a variable ''escape'' to a\none-shot, upward-only continuation (a.k.a. ''escape procedure'') of this form, then evaluates ''body''.\nSee also [[unwind-protect]].\n\nSome implementations have [[call/ep]], which is\nsimilar to this.\n")
("load-srfi-7-program" . "(:ctime 1015069680 :cuser #f :mtime 1015069680 :muser #f)* [procedure] load-srfi-7-program ''filename'' [''evalproc'']\n\n[[Chicken]]\n\nSee also [[load]].\n")
("tk-command?" . "(:ctime 1018335372 :cuser #f :mtime 1018335636 :muser #f)* [procedure] tk-command? ''obj''\n\n[[STk]]: returns #t if ''obj'' is a Tk-command.\n")
("any-pred" . "(:ctime 1201783516 :cuser #f :mtime 1201783552 :muser #f)* [procedure] any-pred ''fn'' ...\n* [procedure] every-pred ''fn'' ...\n\n[[Gauche]]: Creates a predicate that returns true if the argument\nsatisfies any ''fn'' ([[any-pred]]) or every ''fn'' ([[every-pred]]),\nrespectively.\n")
("elong?" . "(:ctime 1039408976 :cuser #f :mtime 1039408976 :muser #f)* [procedure] elong? ''obj''\n* [procedure] llong? ''obj''\n\n[[Bigloo]]: checks if ''obj'' is an integer and fits\nin the hardware ''long'' and ''long long'' integers,\nrespectively.\n\nBigloo has several procedures specialized to these\n''elong'' and ''llong'' types.\nSee [[elong->string]], [[string->elong]],\n[[llong->string]], [[string->llong]],\n[[elong->flonum]], [[flonum->elong]],\n[[llong->flonum]], [[flonum->llong]]\n")
("read-block" . "(:ctime 1014958007 :cuser #f :mtime 1014958007 :muser #f)* [procedure] read-block ''nbytes'' [''input-port'']\n\n[[Gauche]]: reads octet stream from ''input-port'' up to ''nbytes''.\n\nChezScheme has similar function [[block-read]].\n\n")
("hash-table-equivalence-function" . "(:ctime 1144485145 :cuser #f :mtime 1144493765 :muser #f)* [procedure] hash-table-equivalence-function ''hash-table''\n\n[[SRFI-69]]: Returns the equivalence predicate used for keys of ''hash-table''.\n")
("external-exists?" . "(:ctime 1018343692 :cuser #f :mtime 1018343692 :muser #f)* [procedure] external-exists? ''entry'' [''library'']\n\n[[STk]]: see also [[define-external]].\n")
("set-file-position!" . "(:ctime 1015184813 :cuser #f :mtime 1039755997 :muser #f)* [procedure] set-file-position! ''port-or-fd'' ''position'' [''whence'']\n\n[[Chicken]]: interface for seek(2).  See also [[file-position]].\n\nSome implementations have [[seek]] or\n[[set-input-port-position!]]/[[set-output-port-position!]].\n\n")
("#!null" . "(:ctime 1152518355 :cuser #f :mtime 1161177779 :muser #f)* [constant] #!null\n\n[[RRRS]]: empty list.\n\nSee also [[nil]].\n\n[[Kawa]]: Represents Java null value.  Used in low-level code.\n\n")
("alist-delete" . "(:ctime 1014874099 :cuser #f :mtime 1014874099 :muser #f)* [procedure] alist-delete ''key'' ''alist'' [''='']\n\n[[SRFI-1]]: alist-delete deletes all associations from ''alist'' \nwith the given ''key'', using key-comparison procedure ''='', which defaults\nto [[equal?[[. The dynamic order in which the various applications \nof ''='' are made is not specified. \n\nSee also [[delete]], [[alist-delete!]].\n\n")
("let-keywords" . "(:ctime 1038030549 :cuser #f :mtime 1203994435 :muser #f)* [syntax] let-keywords ''kv-list'' ''allow-other-keys?'' (''binding'' ...) ''body'' ...\n* [syntax] let-keywords* ''kv-list'' ''allow-other-keys?'' (''binding'' ...) ''body'' ...\n\n[[Guile]]: extracts value associated of keywords specified in\n''binding'', and binds them accordingly, then evaluates ''body'' ....\n\n''Binding'' can be just a variable, or (''variable'' ''default'').\n\nIf ''allow-other-keys?'' is false, an error is thrown if\nkeywords not listed in ''binding'' is found in ''kv-list''.\n\nLet-keywords and let-keywords* differ in terms of binding\ntiming of variables.\n\n* [syntax] let-keywords* ''kv-list'' (''binding'' ...) ''body'' ...\n* [syntax] let-keywords* ''kv-list'' (''binding'' ... . ''other-keys'') ''body'' ...\n\n[[Gauche]]: only has let-keywords* variant, and slightly \ndifferent from Guile's.  Doesn't take ''allow-other-keys?'';\ninstead, providing ''other-keys'' argument let the form\naccept keywords that aren't listed in ''binding''s, and \nthose unmatched kv-list is bound to ''other-keys''.\n\n''Binding'' can be either (''variable'' ''default'') or \n(''variable'' ''key'' ''default'').\n")
("describe" . "(:ctime 1015279279 :cuser #f :mtime 1015312673 :muser #f)* [procedure] describe ''exp'' [''port'']\n\n[[Chicken]]: print description of ''exp'' to the ''port''.\nSee also [[dump]].\n\n* [procedure] describe ''exp''\n\n[[Gauche]]'s describe doesn't take optional argument.\n\n\n")
("fl>=" . "(:ctime 1014952372 :cuser #f :mtime 1014952372 :muser #f)* [procedure] fl>= ''flonum'' ...\n\n[[ChezScheme]]\n\nSee also [[flonum?]], [[>=]], [[fx>=]]\n")
("waiter-write" . "(:ctime 1015024397 :cuser #f :mtime 1015024397 :muser #f)* [procedure] waiter-write [''newval'']\n\n[[ChezScheme]]: gets/sets write method of repl.\n\nSee also [[new-cafe]]\n")
("SRFI-6" . "(:ctime 1014881007 :cuser #f :mtime 1122428543 :muser #f)SRFI-6 : Basic String Ports\n\nhttp://srfi.schemers.org/srfi-6/srfi-6.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[open-input-string]], [[open-output-string]], [[get-output-string]]\n\n")
("delete!" . "(:ctime 1014871068 :cuser #f :mtime 1014871068 :muser #f)* [procedure] delete! ''x'' ''list'' [''='']\n\n[[SRFI-1]]: linear-update variant of [[delete]].\n")
("stream-delay" . "(:ctime 1099280166 :cuser #f :mtime 1099280166 :muser #f)* [syntax] stream-delay ''expr''\n\n[[SRFI-40]]: Returns a stream which is a delayed form of ''expr''---when\nthe value of the components of the stream is needed, ''expr'' is evaluated.\n\n{{{\n(define from0\n  (let loop ((x 0))\n    (stream-delay\n      (stream-cons x (loop (+ x 1))))))\nfrom0                                       => (stream 0 1 2 3 4 5 6 ...)\n}}}\n")
("string-downcase!" . "(:ctime 1014894465 :cuser #f :mtime 1015074279 :muser #f)[[$$include string-upcase!]]\n\n")
("time-tai->time-utc" . "(:ctime 1099301428 :cuser #f :mtime 1099301428 :muser #f)[[$$include time-tai->date]]\n")
("SRFI-98" . "(:ctime 1307804446 :cuser #f :mtime 1307804512 :muser #f)SRFI 98: An interface to access environment variables.\n\nhttp://srfi.schemers.org/srfi-98/srfi-98.html\n\n[[$$srfi-implementors]]\n----\n\n[[get-environment-variable]] [[get-environment-variables]]\n\n")
("char-ci>?" . "(:ctime 1015062777 :cuser #f :mtime 1015062793 :muser #f)[[$$include char-ci=?]]\n")
("logand" . "(:ctime 1014951458 :cuser #f :mtime 1043984875 :muser #f)* [procedure] logand ''n1'' ''n2''\n\n[[SLIB]], [[Guile]]: bitwise and of two integers.\n\nThis is called [[bitwise-and]]\nor [[bit-and]] in some implementations.\n\nChez has [[fxlogand]] that works for fixnum range.\n\n* [procedure] logand ''n1'' ...\n\n[[Gauche]], [[SISC]]: allows arbitrary number of integer arguments.\n\nNote that SISC has range limitation in ''n1'' ... (as of 1.6.4).\n\nSee also [[logior]], [[logor]], [[logxor]], [[lognot]], [[ash]], [[ashl]], [[ashr]]\n")
("set-signal-mask!" . "(:ctime 1015199615 :cuser #f :mtime 1015199615 :muser #f)* [procedure] set-signal-mask! ''siglist''\n\n[[Chicken]]: see also [[set-signal-handler!]].\n")
("open/wronly" . "(:ctime 1015106284 :cuser #f :mtime 1015106284 :muser #f)[[$$include open/rdonly]]\n")
("sqrt" . "(:ctime 1014859010 :cuser #f :mtime 1191312349 :muser #f)* [procedure] sqrt ''z''\n\n[[R5RS]], [[R6RS]]: Returns a principal square root of ''z''.\n\nR6RS defines these boundary cases:\n  (sqrt +inf.0)  => +inf.0\n  (sqrt -inf.0)  => +inf.0i\n\nSee also [[expt]], [[exact-integer-sqrt]].\n")
("eq?" . "(:ctime 1014847742 :cuser #f :mtime 1191210600 :muser #f)* [procedure] eq? ''obj1'' ''obj2''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[eqv?]], [[equal?]].\n")
("record-case" . "(:ctime 1014940971 :cuser #f :mtime 1015045395 :muser #f)* [syntax] record-case ''exp'' ''clause1'' ''clause2'' ...\n\n[[ChezScheme]]: A restricted form of [[case]] that supports the destructuring \nof records, or tagged lists.\n\n  (define calc\n    (lambda (x)\n      (record-case x\n        [(add) (x y) (+ x y)]\n        [(sub) (x y) (- x y)]\n        [(mul) (x y) (* x y)]\n        [(div) (x y) (/ x y)]\n        [else (error 'calc \"invalid expression ~s\" x)]))) \n\n  (calc '(add 3 4)) ==> 7\n  (calc '(div 3 4)) ==> 3/4 \n\n* [syntax] record-case ''exp'' ((''head1'' ''var1'' ...) ''body'' ...) [(else ''body'' ...)\n\n[[Chicken]]: dispatches the execution depending on the record type of\n''exp'', with binding its field to ''var1'' ....\nThis is different thing from Chez's record-case.\n\nSee also [[define-record]].\n\n")
("append-reverse" . "(:ctime 1014864606 :cuser #f :mtime 1014864606 :muser #f)* [procedure] append-reverse ''rev-head'' ''tail''\n\n[[SRFI-1]]: (append (reverse ''rev-head'') ''tail'').\n\nSee also [[append]], [[reverse]], [[append-reverse!]].\n")
("string-end" . "(:ctime 1018082805 :cuser #f :mtime 1018082805 :muser #f)[[$$include string-start]]\n")
("create-directory" . "(:ctime 1015101411 :cuser #f :mtime 1018345754 :muser #f)* [procedure] create-directory ''dirname''\n\n[[Chicken]]: see also [[delete-directory]].  \nSee [[Concept:FileSystem]].\n\nThis is called [[make-directory]] or [[sys-mkdir]] in\nsome implementations.\n\n* [procedure] create-directory ''name'' [''perms'' ''override?'']\n\n[[Scsh]]: ''perms'' is the integer mask for the\npermission.  ''orverride?'' controls the behavior\nwhen the named directory already exists.\n")
("let-syntax" . "(:ctime 1014855290 :cuser #f :mtime 1191844156 :muser #f)* [syntax] let-syntax ((''keyword'' ''transformer-spec'') ...) ''body''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[letrec-syntax]], [[define-syntax]].\n")
("split-at" . "(:ctime 1014863909 :cuser #f :mtime 1014863909 :muser #f)* [procedure] split-at ''x'' ''k''\n\n[[SRFI-1]]: splits the list ''x'' at index ''k'',\nreturning a list of the first ''k'' elements, and\nthe remaining tail.\n\nSee also [[take]], [[drop]], [[split-at!]].\n")
("sstats-gc-bytes" . "(:ctime 1015029128 :cuser #f :mtime 1015029161 :muser #f)* [procedure] sstats-gc-bytes ''sstats''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[set-sstats-gc-bytes!]].\n")
("create-pipe" . "(:ctime 1015106040 :cuser #f :mtime 1018386847 :muser #f)* [procedure] create-pipe\n\n[[Chicken]]: calls pipe(2) and returns two pipes, one for input and the other\nfor output.\n\nThis is called [[pipe]] or [[sys-pipe]] \nin some implementations.\n")
("when-port-readable" . "(:ctime 1018334711 :cuser #f :mtime 1018334711 :muser #f)* [procedure] when-port-readable ''port'' [''handler'']\n* [procedure] when-port-writable ''port'' [''handler'']\n\n[[STk]]: sets ''handler'' to be called when ''port''\nis ready to be read/write.\n")
("in-module" . "(:ctime 1099723191 :cuser #f :mtime 1099723191 :muser #f)* [syntax] in-module ''mod'' ''symbol'' [''default'']\n\n[[STklos]]: equivalent to \n{{{\n  (symbol-value* 'symbol (find-module 'mod) default)\n}}}\n\nSee [[symbol-value*]].\n")
("heur" . "(:ctime 1152518355 :cuser #f :mtime 1152526042 :muser #f)* [format descriptor] heur\n[[RRRS]], [[R3RS]]: express heuristically using the minimum number of digits required to get an expression that when coerced back to a number produces the original machine representation. Exact numbers are expressed as (int) or (rat). Inexact numbers are expressed as (flo h) or (sci h) depending on their range. Complex numbers are expressed in (rect). This is the normal default of the system printer.\n\nSee also [[int]], [[rat]], [[flo]], [[sci]], [[rect]] and [[number->string]].\n")
("sint-list->blob" . "(:ctime 1144700986 :cuser #f :mtime 1144712581 :muser #f)[[$$include blob->uint-list]]\n")
("seconds->time" . "(:ctime 1015210314 :cuser #f :mtime 1015210314 :muser #f)[[$$include time->seconds]]\n")
("putenv" . "(:ctime 1046488913 :cuser #f :mtime 1046488913 :muser #f)* [procedure] putenv ''string'' ''val''\n\n[[Bigloo]]: putenv.  See also [[getenv]].\n\nThis is called [[setenv]], [[setenv!]] or [[sys-putenv]] in\nother implementations.\n")
("foreign-lambda" . "(:ctime 1015046843 :cuser #f :mtime 1015046843 :muser #f)* [syntax] foreign-lambda ''returntype'' ''name'' ''argtype''\n* [syntax] foreign-lambda* ''returntype'' ((''argtype'' ''variable'') ...) ''string'' ...\n\n[[Chicken]]: defines a binding to external routine.  Similar to\n[[foreign-callback-lambda]] and [[foreign-callback-lambda*]], \nbut the external routine\nmay not call Scheme functions.  [[foreign-lambda*]] defines\nC body in-line (inside ''string'').\n\nSee also [[foreign-callback-lambda]], [[foreign-callback-lambda*]].\n")
("time-monotonic->time-utc!" . "(:ctime 1099301310 :cuser #f :mtime 1099301310 :muser #f)[[$$include time-monotonic->date]]\n")
("queue-push!" . "(:ctime 1015072222 :cuser #f :mtime 1015072222 :muser #f)* [procedure] queue-push! ''queue'' ''x''\n\n[[SLIB]]: adds ''x'' to the front of ''queue''.\n\nSee also [[make-queue]], [[queue-pop!]]\n\n* [procedure] queue-push! ''queue'' ''obj1'' ''obj2'' ...\n\n[[Gauche]] allows more than one object to be queued.\n\n\n\n")
("absolute-pathname?" . "(:ctime 1015100104 :cuser #f :mtime 1020224814 :muser #f)* [procedure] absolute-pathname? ''pathname''\n\n[[Chicken]]\n\nMzScheme has [[absolute-path?]].\n\n")
("vector-index" . "(:ctime 1099388007 :cuser #f :mtime 1099388007 :muser #f)* [procedure] vector-index ''pred'' ''vec1'' ''vec2'' ...\n* [procedure] vector-index-right ''pred'' ''vec1'' ''vec2'' ...\n* [procedure] vector-skip ''pred'' ''vec1'' ''vec2'' ...\n* [procedure] vector-skip-right ''pred'' ''vec1'' ''vec2'' ...\n\n[[SRFI-43]]: [[vector-index]] applies ''pred'' to each parallel elements of\n''vec1'' ''vec2'' ..., from 0-th elements, and returns the first index\nwhere ''pred'' returns true (iteration ends at the shortest vector).\n\n[[vector-index-right]] reverses the direction of application of ''pred''.\nAll vectors have the same length.\n\n[[vector-skip]] and [[vector-skip-right]] reverses the meaning of ''pred''.\n\nThe names are parallel to [[srfi-13]]'s [[string-index]], [[string-index-right]],\n[[string-skip]] and [[string-skip-right]], but note the order of arguments\n(string version takes a string first).\n")
("Index:v" . "(:ctime 1014846437 :cuser #f :mtime 1015014797 :muser #f)[[$$index v]]\n\n")
("latin-1-integer->char" . "(:ctime 1019619702 :cuser #f :mtime 1019619702 :muser #f)[[$$include char->latin-1-integer]]\n")
("Concept:Module" . "(:ctime 1063413063 :cuser #f :mtime 1245540993 :muser #f)* Module systems\n\nMost Scheme implementations have the means to manage their libraries and subsystems.\nIt is called differently among implementations, but usually has the following features.\n\n- ability to create separate namespaces\n- mechanism to manage files that actually implement the library.\n- syntax to declare interface of the libraries.\n\n----\n** Actual systems\n\n:[[Scheme48:ModuleSystem]]: [[Scheme48]] uses a special metalanguage \n(called configuration language) to manage modules.\n:[[STklos:ModuleSystem]]: Based on simple namespace mechanism suitable for interactive use.\n:[[Gauche:ModuleSystem]]: [[Gauche]] inherits STk's module system, but\nenhances it to integrate library file layout.\n:[[Guile:ModuleSystem]]:\n:[[PLTScheme:ModuleSystem]]: \n:[[SCM:ModuleSystem]]: Very portable module management system used in [[SCM]] and [[SLIB]].\n----\n** Discussions\n")
("date" . "(:ctime 1023886764 :cuser #f :mtime 1099742940 :muser #f)* [procedure] date [''time'' ''tz'']\n\n[[Scsh]]: without args, returns current date.  See [[make-date]].\n(NB: Scsh's date is like struct tm, not like SRFI-19's.)\n\nIf ''time'' is given, convert it to date.\nIf ''tz'' is given, use it as a timezone string\n(localtime default).\n\nSee also [[time]].\n\nSRFI-19 has [[current-date]], and [[time-utc->date]].\n\nGauche has [[sys-gmtime]] and [[sys-localtime]].\n\n* [procedure] date\n\n[[Bigloo]], [[STklos]]: returns the current date in string.  Takes no arguments.\n")
(">/>?" . "(:ctime 1144494246 :cuser #f :mtime 1144503626 :muser #f)[[$$include </<?]]\n")
("i/o-file-already-exists-error?" . "(:ctime 1099273577 :cuser #f :mtime 1099273577 :muser #f)* [procedure] i/o-file-already-exists-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-file-alread-exists-error]].\n")
("foreign-lambda*" . "(:ctime 1015069213 :cuser #f :mtime 1015069213 :muser #f)[[$$include foreign-lambda]]\n")
("change-file-mode" . "(:ctime 1015197426 :cuser #f :mtime 1039755373 :muser #f)* [procedure] change-file-mode ''filename'' ''mode''\n\n[[Chicken]]: chmod().  See [[perm/irusr]] etc, for ''mode'' bits.\nSee also [[Concept:FileSystem]].\n\nSome implementations have [[set-file-mode]],\n[[chmod]] or [[sys-chmod]].\n\n\n")
("Index:m" . "(:ctime 1014843052 :cuser #f :mtime 1015014620 :muser #f)[[$$index m]]\n\n")
("time->string" . "(:ctime 1015200458 :cuser #f :mtime 1015318114 :muser #f)* [procedure] time->string ''time''\n\n[[Chicken]]: convers a vector ''time'', which is returned by\n[[seconds->local-time]] or [[seconds->utc-time]], to a string.\nPOSIX asctime.\n\nOther implementations call this [[posix-asctime]], [[sys-asctime]].\n\n* [procedure] time->string ''time''\n\n[[Scheme48]]: takes a time record and resturs the string representation.\nTime record in Scheme48 contains # of seconds from the Unix Epoch,\nso this is like POSIX ctime.\nSee also [[make-time]], [[current-time]], [[time-seconds]].\n\nOther implementations have [[posix-ctime]], [[sys-ctime]].\n\n")
("as32" . "(:ctime 1099398071 :cuser #f :mtime 1099398071 :muser #f)[[$$include ac64]]\n")
("engine-block" . "(:ctime 1014941794 :cuser #f :mtime 1014941794 :muser #f)* [procedure] engine-block\n\n[[ChezScheme]]: stops the running engine.\n\nSee also [[make-engine]], [[engine-return]].\n")
("delete-file" . "(:ctime 1014961924 :cuser #f :mtime 1191233086 :muser #f)* [procedure] delete-file ''filename''\n\n[[Bigloo]], [[ChezScheme]], [[Chicken]], [[Scsh]], [[MzScheme]], [[SLIB]]: See [[Concept:FileSystem]].\n\n[[R6RS]]: If ''filename'' does not exist or cannot be deleted, an exception with\ncondition type [[&i/o-filename]] is raised.\n\nThis is called [[remove-file]], [[unlink]] or [[sys-unlink]]\nin some implementations.\n\n\n\n")
("hashtable-hash-function" . "(:ctime 1191361195 :cuser #f :mtime 1191361195 :muser #f)* [procedure] hashtable-hash-function ''hashtable''\n\n[[R6RS]]: Returns the hash function of ''hashtable''.\nIf ''hashtable'' is created by [[make-eq-hashtable]] or [[make-eqv-hashtable]],\nthis procedure returns #f.\n\nSee also [[Concept:HashTable]]\n")
("SRFI-57" . "(:ctime 1110658035 :cuser #f :mtime 1122428893 :muser #f)SRFI 57: Records\n\nhttp://srfi.schemers.org/srfi-57/srfi-57.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[define-record-type]], [[define-record-scheme]], \n[[record-update]], [[record-update!]], [[record-compose]]\n")
("string-take" . "(:ctime 1014889137 :cuser #f :mtime 1014889137 :muser #f)* [procedure] string-take ''s'' ''nchars''\n\n[[SRFI-13]]\n\nSee also [[string-take-right]], [[string-drop]].\n")
("duplicate-fileno" . "(:ctime 1015183808 :cuser #f :mtime 1015183808 :muser #f)* [procedure] duplicate-fileno ''old'' [''new'']\n\n[[Chicken]]: dup(2) or dup2(2).  ''old'' and ''new'' should be \na file descriptor.  See also [[port->fileno]].\n")
("dup->outport" . "(:ctime 1036970055 :cuser #f :mtime 1036970055 :muser #f)[[$$include dup->inport]]\n")
("procedure-data" . "(:ctime 1015274548 :cuser #f :mtime 1015274548 :muser #f)* [procedure] procedure-data ''procedure''\n* [procedure] set-procedure-data! ''procedure'' ''x''\n\n[[Chicken]]: gets/sets data from/to the optional data slot of extended procedure\n''procedure''.  See also [[extend-procedure]].\n")
("exactness" . "(:ctime 1152518355 :cuser #f :mtime 1152526019 :muser #f)* [format descriptor] exactness ''s''\n[[RRRS]], [[R3RS]]: controls the expression of the exactness prefix of a number. ''s'' must be a symbol, either 'E or 'S, indicating whether the exactness is to be expressed or suppressed, respectively. If no exactness modifier is specified for a format then the exactness is by default suppressed.\n\nSee also [[number->string]].\n")
("test-group" . "(:ctime 1151049296 :cuser #f :mtime 1151075387 :muser #f)* [syntax] test-group ''suite-name'' ''decl-or-expr''\n\n[[SRFI-64]]: equivalent to:\n{{{\n(dynamic-wind\n  (lambda () (test-begin suite-name))\n  (lambda () decl-or-expr ...)\n  (lambda () (test-end suite-name))))\n}}}\n\nHowever the entire group is skipped if it matched an active [[test-skip]].\n")
("Concept:Networking" . "(:ctime 1240114907 :cuser #f :mtime 1245540978 :muser #f)Memorandom for network API of some implementations.\n\n* [[Ikarus]]\n\n- [[tcp-connect]] host service\n- [[tcp-connect-nonblocking]] host service\n- [[udp-connect]] host service\n- [[udp-connect-nonblocking]] host-name service-name\n- [[tcp-server-socket]] port-number\n- [[tcp-server-socket-nonblocking]] port-number\n- [[accept-connection]] tcp-server\n- [[accept-connection-nonblocking]] tcp-server\n- [[close-tcp-server-socket]] tcp-server\n- [[register-callback]] input-port thunk\n- [[register-callback]] output-port thunk\n- [[register-callback]] tcp-server thunk\n\n* [[Ypsilon]]\n\n(socket)\n\n- [[call-with-socket]] socket proc\n- [[make-client-socket]] node service . [ai-family ai-socktype ai-flag ai-protocol]\n- [[make-server-socket]] service . [ai-family ai-protocol]\n- [[shutdown-output-port]] port\n- [[socket?]] obj\n- [[make-socket]] node service ai-family ai-socktype ai-flag ai-protocol\n- [[socket-accept]] socket flags\n- [[socket-port]] socket => <binary-input/output-port>\n- [[socket-send]] socket buffer flags\n- [[socket-send]] socket flags\n- [[socket-shutdown]] socket how\n- [[socket-close]] socket\n- [[gethostname]]\n\n* [[Gauche]]\n\n*** Low-level API\n\n- [[make-socket]] domain type &optional protocol\n- [[socket-fd]] socket\n- [[socket-status]] socket\n- [[socket-bind]] socket address\n- [[socket-listen]] socket backlog\n- [[socket-accept]] socket\n- [[socket-connect]] socket address\n- [[socket-shutdown]] socket how\n- [[socket-getsockname]] socket\n- [[socket-getpeername]] socket\n- [[socket-send]] socket msg &optional flags\n- [[socket-sendto]] socket msg to-address &optional flags\n- [[socket-sendmsg]] socket msg &optional flags\n- [[socket-recv!]] socket buf &optional flags\n- [[socket-recvfrom!]] socket buf addrs &optional flags\n- [[socket-recv]] socket bytes &optional flags\n- [[socket-recvfrom]] socket bytes &optional flags\n- [[socket-setsockopt]] socket level option value\n- [[socket-getsockopt]] socket level option rsize\n- [[inet-checksum]] packet size\n- [[inet-string->address]] string\n- [[inet-string->address!]] string\n- [[inet-address->string]] address protocol\n- [[sys-gethostbyname]] name\n- [[sys-gethostbyaddr]] addr proto\n- [[sys-getservbyname]] name proto\n- [[sys-getservbyport]] port proto\n- [[sys-getaddrinfo]] nodename servname hints\n- [[sys-ntohs]] integer\n- [[sys-ntohl]] integer\n- [[sys-htons]] integer\n- [[sys-htonl]] integer\n\n*** High-level API\n\n- [[make-client-socket]] &optional address-spec …\n- [[make-server-socket]] &optional address-spec …\n- [[make-server-sockets]] host port &keyword reuse-addr? sock-init\n- [[socket-address]] socket\n- [[socket-input-port]] socket &keyword (buffering :modest)\n- [[socket-output-port]] socket &keyword (buffering :line)\n- [[socket-close]] socket\n- [[call-with-client-socket]] socket proc\n")
("vector-mutable?" . "(:ctime 1099725129 :cuser #f :mtime 1099725129 :muser #f)* [procedure] vector-mutable? ''obj''\n\n[[STklos]]: returns #t iff ''obj'' is a mutable vector.\n\nSee also [[string-mutable?]], [[pair-mutable?]].\n")
("user-info?" . "(:ctime 1018125168 :cuser #f :mtime 1018125168 :muser #f)* [procedure] user-info? ''x''\n* [procedure] user-info-name ''user-info''\n* [procedure] user-info-id ''user-info''\n* [procedure] user-info-group ''user-info''\n* [procedure] user-info-home-directory ''user-info''\n* [procedure] user-info-shell ''user-info''\n\n[[Scheme48]]: accessors to user information.\nSee [[Concept:UserGroup]], [[user-id->user-info]],\n[[name->user-info]].\n")
("#\\x" . "(:ctime 1292548241 :cuser #f :mtime 1292548241 :muser #f)* [reader syntax] #\\x''XXXX''\n\n[[R6RS]]: A character U+''XXXX''.   It can take any number of digits,\nbut the resulting hex number should be in the Unicode code range.\n\nSee also [[#\\u]].\n")
("char-set-cursor-next" . "(:ctime 1039168736 :cuser #f :mtime 1039168736 :muser #f)* [procedure] char-set-cursor-next ''char-set'' ''cursor''\n\n[[SRFI-14]]: Returns a new cursor that points to the\nnext character in ''char-set'' pointed by ''cursor''.\nIt is an error if ''cursor'' points past the end.\nSee [[char-set-cursor]], [[end-of-char-set?]].\n")
("SRFI-108" . "(:ctime 1381734878 :cuser #f :mtime 1381734879 :muser #f)SRFI-108: SRFI Libraries\n\nhttp://srfi.schemers.org/srfi-108/srfi-108.html\n\n[[$$srfi-implementors]]\n")
("set-top-level-value!" . "(:ctime 1014930048 :cuser #f :mtime 1014930048 :muser #f)* [procedure] set-top-level-value ''symbol'' ''obj''\n\n[[ChezScheme]]: alter top level binding of ''symbol''.\n\nSee also [[define-top-level-value]], [[top-level-value]], [[top-level-bound?]]\n")
("SRFI-47" . "(:ctime 1099394335 :cuser #f :mtime 1328752722 :muser #f)SRFI-47: Array\n\nhttp://srfi.schemers.org/srfi-47/srfi-47.html\n\n[[$$srfi-implementors]]\n\n----\n[[array?]], [[make-array]], [[make-shared-array]]\n\n[[equal?]]\n\n[[ac64]], [[ac32]], [[ar64]], [[ar32]], [[as64]], [[as32]],\n[[as16]], [[as8]], [[au64]], [[au32]], [[au16]], [[au8]], [[at1]]\n\n[[array-rank]], [[array-dimensions]], [[array-in-bounds?]], \n[[array-ref]], [[array-set!]]\n\n----\n\nSRFI-47 arrays can be homogeneous arrays, in similar sense of [[SRFI-4]].\nThe API differs from [[SRFI-25]] arrays, though both can coexist.\n")
("byte-vector-set!" . "(:ctime 1015275663 :cuser #f :mtime 1015275663 :muser #f)[[$$include byte-vector-ref]]\n")
("any?-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144536049 :muser #f)* [syntax] any?-ec ''qualifier'' ... ''test''\n[[SRFI-42]]:\nTests whether any value of ''test'' in the sequence of bindings specified by\nthe ''qualifier''s is non-#f. If this is the case, #t is returned, otherwise #f.\nIf there are no bindings in the sequence specified by the ''qualifier''s at\nall then the result is #f. The enumeration of values stops after the first\nnon-#f encountered.\n")
("syntax-case" . "(:ctime 1014962313 :cuser #f :mtime 1015105098 :muser #f)* [syntax] syntax-case ''exp'' (''literal'' ...) ''clause'' ...\n\n[[ChezScheme]]: lower layer of hygienic macro expander.\n\nThe following syntax and procedures are also used to implement\nlower layer of hygienic macro: [[syntax]], [[identifier?]],\n[[identifier-syntax]], [[bound-identifier=?]], [[free-identifier=?]],\n[[literal-identifier=?]], [[with-syntax]], [[syntax-object->datum]],\n[[datum->syntax-object]].\n\n[[Chicken]] also has it in syntax-case unit.\n\n")
("make-pseudo-random-generator" . "(:ctime 1019619502 :cuser #f :mtime 1019619502 :muser #f)* [procedure] make-pseudo-random-generator\n\n[[MzScheme]]: returns a new pseudo random generator.\n\nSee also [[current-pseudo-random-generator]],\n[[pseudo-random-generator?]]\n")
("map!" . "(:ctime 1014868602 :cuser #f :mtime 1014868602 :muser #f)* [procedure] map! ''f'' ''list1'' ''clist2'' ...\n\n[[SRFI-1]]: Linear-update variant of [[map]] -- map! is allowed, \nbut not required, to alter the cons cells of ''list1'' to construct the result\nlist. \n\nThe dynamic order in which the various applications of ''f'' are made is not\nspecified. In the n-ary case, ''clist2'', ''clist3'', ... must\nhave at least as many elements as ''list1''. \n\nSee also [[map]].\n")
("record-field-accessor" . "(:ctime 1014948233 :cuser #f :mtime 1014949597 :muser #f)* [procedure] record-field-accessor ''rtd'' ''field-name''\n\n[[ChezScheme]]\n\nSLIB has equivalent procedure as [[record-accessor]].\n\nSee also [[make-record-type]], [[define-record]].\n")
("integer-valued?" . "(:ctime 1191211214 :cuser #f :mtime 1191211215 :muser #f)[[$$include real-valued?]]\n")
("dotted-list?" . "(:ctime 1014862327 :cuser #f :mtime 1014862327 :muser #f)* [procedure] dotted-list? ''obj''\n\n[[SRFI-1]]: True if ''obj'' is a finite, non-nil-terminated list.\n\nSee also [[proper-list?]], [[circular-list?]], [[cons*]], [[list*]].\n")
("lset<=" . "(:ctime 1014874371 :cuser #f :mtime 1014874371 :muser #f)* [procedure] lset<= ''elt='' ''list1'' ...\n\n[[SRFI-1]]:  Returns true iff every ''listi'' is a subset of ''listi+1'', \nusing ''elt='' for the element-equality procedure. List A is a subset of \nlist B if every element in A is equal to some element of B. \nWhen performing an element comparison, the ''elt='' procedure's first\nargument is an element of A; its second, an element of B. \n\nSee also [[lset=]].\n")
("real-tan" . "(:ctime 1170264990 :cuser #f :mtime 1170267446 :muser #f)* real-tan ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[tan]], but signals error if the argument is not real  or the result is not real.\n")
("merge!" . "(:ctime 1014943689 :cuser #f :mtime 1015072466 :muser #f)Merges two sequences, possibly reusing the storage of the\nfirst sequence.   Like [[sort]], this comes with conflicting APIs.\nSee description of [[merge]].\n\n* [procedure] merge! ''sequence1'' ''sequence2'' ''predicate''\n\n[[SLIB]], [[Chicken]]\n\n* [procedure] merge! ''predicate'' ''sequence1'' ''sequence2''\n\n[[ChezScheme]]\n")
("current-load-port" . "(:ctime 1015807047 :cuser #f :mtime 1015807047 :muser #f)* [procedure] current-load-port\n* [procedure] current-load-history\n* [procedure] current-load-next\n\n[[Gauche]]: queries the current context of loading.  See also [[load]].\n")
("flush-output-port" . "(:ctime 1014957063 :cuser #f :mtime 1099727522 :muser #f)* [procedure] flush-output-port [''port'']\n\n[[Bigloo]], [[ChezScheme]], [[STklos]]: flush unwritten characters in the buffer of ''port''.\n\nThis is called [[flush]], [[flush-output]] or [[force-output]] in some\nScheme implementations.\n\n")
("fpmin" . "(:ctime 1191227716 :cuser #f :mtime 1191227716 :muser #f)* [procedure] fpmin ''flonum1'' ''flonum2''\n* [procedure] fpmax ''flonum1'' ''flonum2''\n\n[[Chicken]]: flonum-specific [[min]] and [[max]].\nSee [[flonum?]] for other flonum operations.\n\nR6RS has [[flmin]] and [[flmax]].\n")
("kth-largest" . "(:ctime 1144494246 :cuser #f :mtime 1144504608 :muser #f)* [procedure] kth-largest compare ''k'' ''x0'' ''x1'' ...\n[[SRFI-67]]: Returns the ''k''-th largest element of values ''x0'' ''x1'' ...(one or more values) with respect to the compare procedure ''compare''.\n\n")
("open-output-file" . "(:ctime 1014857268 :cuser #f :mtime 1327407369 :muser #f)* [procedure] open-output-file ''filename''\n\n[[R5RS]]: Takes a string naming an output file to be created and returns an output port capable of writing characters to a new file by that\nname. If the file cannot be opened, an error is signalled. If a file with the given name already exists, the effect is unspecified.\n\nSee also [[open-input-file]], [[call-with-output-file]], [[with-output-to-file]]\n\n[[Bigloo]], [[STk]]: extends this to take a piped command\nas ''filename''.\n\n* [procedure] open-output-file ''filename'' [''if-exists'']\n\n[[ChezScheme]] extends R5RS to take the optional flag ''if-exists'',\nwhich may be one of the symbol ''error'', ''replace'',\n''truncate'' or ''append''.\n\n* [procedure] open-output-file ''filename'' [''mode'']\n\n[[Chicken]]: takes an optional argument which can be #:text, #:binary or #:append.\n\n* [procedure] open-output-file ''filename'' [''flags'' ''perms'']\n\n[[Scsh]]: ''flags'' and ''perms'' are integer that\nare composed by or-ing bit flags.\n\n* [procedure] open-output-file ''filename'' [''options'' ...]\n\n[[Gauche]] extends R5RS to take various keyword arguments to customize\nbehavior of [[open-output-file]].\n [http://www.obtenir-rio.info numero rio]\n")
("fxlogxor" . "(:ctime 1014950941 :cuser #f :mtime 1191224922 :muser #f)[[$$include fxlogand]]\n")
("default-random-source" . "(:ctime 1038272875 :cuser #f :mtime 1038272884 :muser #f)* [variable] default-random-source\n\n[[SRFI-27]]: holds a random source from which\n[[random-integer]] and [[random-real]] is derived,\nusing [[random-source-make-integers]] and\n[[random-source-make-reals]].\n")
("regexp-match-positions" . "(:ctime 1099777754 :cuser #f :mtime 1099777754 :muser #f)[[$$include regexp-match]]\n")
("the-environment" . "(:ctime 1018336505 :cuser #f :mtime 1018336505 :muser #f)* [procedure] the-environment\n\n[[STk]]: Returns the current environment.\nSee also [[environment?]], [[global-environment]],\n[[parent-environment]], [[environment->list]],\n[[procedure-environment]], [[module-environment]].\n")
("putprop" . "(:ctime 1014946928 :cuser #f :mtime 1327407354 :muser #f)* [procedure] putprop ''symbol'' ''key'' ''value''\n\n[[ChezScheme]]: set ''key''-''value'' association to the ''symbol'' 's\nproperty list.\n\nSee also [[getprop]], [[remprop]], [[property-list]]\n\nBigloo calls this [[putprop!]].\n\n* [procedure] putprop ''symbol'' ''environment'' ''value''\n\n[[SISC]]: reversed the idea of symbol property list.\n''Environment'' can be either a symbol name of \nenvironment or a first-class environment object.\nSee [[getprop]] for details.\n\n [http://www.obtenir-rio.info B and You]\n")
("select" . "(:ctime 1018387166 :cuser #f :mtime 1018387166 :muser #f)* [procedure] select ''rvec'' ''wvec'' ''evec'' [''timeout'']\n* [procedure] select! ''rvec'' ''wvec'' ''evec'' [''timeout'']\n\n[[Scsh]]: select(2) interface.\n\nOther implementaions have [[sys-select]]/[[sys-select!]].\n")
("fxsll" . "(:ctime 1014950978 :cuser #f :mtime 1191225432 :muser #f)* [procedure] fxsll ''fixnum1'' ''fixnum2''\n* [procedure] fxsrl ''fixnum1'' ''fixnum2''\n* [procedure] fxsra ''fixnum1'' ''fixnum2''\n\n[[ChezScheme]]: fixnum-specific shift operations.\nSee [[fixnum?]] for other fixnum operations.\n\nIn R6RS, these are covered by [[fxarithmetic-shift-left]],\nand [[fxarithmetic-shift-right]].  ([[fxsrl]] may be realized\nby [[fxcopy-bit-field]]).\n\nChicken has [[fxshl]] and [[fxshr]].\n")
("port->sexp-list" . "(:ctime 1018335193 :cuser #f :mtime 1099727233 :muser #f)* [procedure] port->sexp-list ''port''\n\n[[Scsh]], [[STk]], [[STklos]], [[Gauche]]: Equivalent to\n(port->list read ''port'').\nSee also [[port->list]], [[port->string]], [[port->string-list]].\n")
("string-right-trim" . "(:ctime 1015074626 :cuser #f :mtime 1015074626 :muser #f)* [procedure] string-right-trim ''s'' ''trimchars''\n\n[[Chicken]]: ''trimchars'' should be a string, and must be present.\nSee [[string-trim]].\n\nSRFI-13 has [[string-trim-right]].\n\n")
("Ypsilon" . "(:ctime 1230189821 :cuser #f :mtime 1351744156 :muser #f)Ypsilon is the implementation of Scheme Programming Language, which conforms to the latest standard [[R6RS]]. It achieves a remarkably short GC pause time and the best performance in parallel execution as it implements \"mostly concurrent garbage collection\", which is optimized for the multi-core CPU system.\n\nhttp://code.google.com/p/ypsilon/\n\n[[$$srfis 1 13 14 19 26 27 28 38 39 41 42 48 6 8 9 98]]\n----\n")
("randomize" . "(:ctime 1015072696 :cuser #f :mtime 1018343926 :muser #f)* [procedure] randomize [''x'']\n\n[[Chicken]]: sets the random seed.\n\nThis is called [[random-seed]] or [[set-random-seed!]] in some implementations.\n")
("fxabs" . "(:ctime 1014951251 :cuser #f :mtime 1014951251 :muser #f)* [procedure] fxabs ''fixnum''\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[abs]]\n")
("process" . "(:ctime 1014896582 :cuser #f :mtime 1308103347 :muser #f)* [procedure] process ''command''\n[[ChezScheme]], [[Chicken]]: Run ''command'' in the separate \nprocess asynchronously. Return values are #<input port> (where process outputs), \n#<output port> (where process get inputs), and PID, in this order.\n\nSee also [[run-process]], [[system]]\n\nExample in Chicken:\n ([[require]] 'posix)\n ; blocks for one second\n ([[receive]] (in out pid) ('''process''' \"sleep 1\") ([[process-wait]] pid))\n\n** references\n- [http://www.scheme.com/csug8/foreign.html#./foreign:s7 process @ ChezScheme manual]\n- [http://wiki.call-cc.org/man/4/Unit%20posix#process process @ Chicken manual]\n\n")
("thread-yield!" . "(:ctime 1015927370 :cuser #f :mtime 1015928255 :muser #f)* [procedure] thread-yield!\n\n[[SRFI-18]], [[SRFI-21]]\n")
("wdelch" . "(:ctime 1015882865 :cuser #f :mtime 1015882865 :muser #f)* [procedure] wdelch ''win''\n* [procedure] wdeleteln ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("queue-first" . "(:ctime 1015072318 :cuser #f :mtime 1015072318 :muser #f)* [procedure] queue-first ''queue''\n\n[[Chicken]]: see [[make-queue]].\n\nThis is called [[queue-front]] in some implementations.\n")
("test-result-alist" . "(:ctime 1151049296 :cuser #f :mtime 1151081196 :muser #f)* [syntax] test-result-alist ''runner''\n\n[[SRFI-64]]: returns the test result property of ''runner'' as an association list.\nReturned association list may be modified by future calls of [[test-result-set!]] or [[test-result-remove]].\nHowever, [[test-result-clear]] does not modify it.\n")
("string-every" . "(:ctime 1014888456 :cuser #f :mtime 1015074424 :muser #f)* [procedure] string-every ''char/char-set/pred'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]:  Checks to see if the given criteria is true of every character \nin ''s'', proceeding from left (index ''start'') to right (index ''end'').\n\nSee also [[string-any]].\n\n* [procedure] string-every ''proc'' ''string1'' ''string2'' ...\n\n[[Chicken]] implements different functionality.\n\n")
("test-runner-on-final" . "(:ctime 1151049296 :cuser #f :mtime 1151083167 :muser #f)* [syntax] test-runner-on-final ''runner''\n* [syntax] test-runner-on-final! ''runner'' ''function''\n\n[[SRFI-64]]: gets or sets the callback function for on-final.\n''function'' is called after on-group-end function for outer most [[test-end]].\n\nSee also [[test-runner-on-group-end]] and [[test-on-final-simple]].\n")
("file-inode" . "(:ctime 1037014697 :cuser #f :mtime 1037014697 :muser #f)* [procedure] file-inode ''fname/fd/port'' [''chase?'']\n\n[[Scsh]]: Returns inode number.  See also [[file-info]].\n\nGauche has [[file-ino]].\n")
("test-on-final-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151084182 :muser #f)* [procedure] test-on-final-simple ''runner''\n\n[[SRFI-64]]: (test-runner-on-final (test-runner-simple)).\n\nSee also [[test-runner-simple]] and [[test-runner-on-final]].\n")
("SRFI-16" . "(:ctime 1014883061 :cuser #f :mtime 1122428622 :muser #f)SRFI-16: Syntax for procedures of variable arity.\n\nhttp://srfi.schemers.org/srfi-16/srfi-16.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[case-lambda]]\n")
("!" . "(:ctime 1018340049 :cuser #f :mtime 1018340049 :muser #f)* [procedure] ! ''string''\n\n[[STk]]: synonym of [[system]].\n")
("Concept:HashTable" . "(:ctime 1015104863 :cuser #f :mtime 1327407049 :muser #f)Hash tables can be seen in many implementations, with the following\nvariations.\n\n- Compare function : fixed or user-customizable\n- Hash function : fixed or user-customizable\n- External representation\n- API\n\n----\n** [[R6RS]]\n- Compare and hash: User-customizable by [[make-hashtable]].\nThe fixed ones are also provided by [[make-eq-hashtable]] and [[make-eqv-hashtable]].\n- External: no\n- API: [[make-eq-hashtable]], [[make-eqv-hashtable]], [[make-hashtable]],\n[[hashtable?]], [[hashtable-size]], [[hashtable-ref]], [[hashtable-set!]],\n[[hashtable-delete!]], [[hashtable-contains?]], [[hashtable-update!]],\n[[hashtable-copy]], [[hashtable-clear!]], [[hashtable-keys]],\n[[hashtable-entries]], [[hashtable-equivalence-function]],\n[[hashtable-hash-function]], [[hashtable-mutable?]],\n[[equal-hash]], [[string-hash]], [[string-ci-hash]], [[symbol-hash]]\n\n** [[Bigloo]]\n- Compare : (fixed?)\n- Hash : (fixed?)\n- External : no\n- API : [[make-hashtable]], [[hashtable?]], [[hashtable-size]],\n[[hashtable-get]], [[hashtable-put!]], [[hashtable-remove!]],\n[[hashtable-update!]], [[hashtable->vector]], [[hashtable->list]],\n[[hashtable-for-each]], [[object-hashnumber]]\n\n** [[Chicken]]\n- Compare : user-specified (default [[eq?]])\n- Hash : fixed (makes some comparators like string-ci=? useless)\n- External : No\n- API : [[clear-hash-table!]], [[get]], [[hash-table?]],\n[[hash-table-count]], [[hash-table-for-each]],\n[[hash-table-ref]], [[hash-table-set!]],\n[[make-hash-table]], [[put!]], [[hash-table-size]]\n\n** [[Gauche]]\n- Compare : [[eq?]], [[eqv?]], [[equal?]], [[string=?]]; user-defined object\ncan have its own equality function via [[object-equal?]] method. \n- Hash : user-defined object can have its own hash function via\n[[object-hash]] method.\n- External : No\n- API : [[make-hash-table]], [[hash-table-get]], [[hash-table-put!]],\n[[hash-table-delete!]], [[hash-table-clear!]], [[hash-table-update!]], [[hash-table-push!]], [[hash-table-pop!]],\n[[hash-table-exists?]], [[hash-table?]], [[hash-table-map]],\n[[hash-table-for-each]], [[hash-table-keys]], [[hash-table-values]]\n\n** [[MIT-Scheme]]\n- Compare : user specified\n- Hash : user specified\n- External : ?\n- API : [[make-eq-hash-table]], [[make-eqv-hash-table]],\n[[make-equal-hash-table]], [[make-string-hash-table]],\n[[strong-hash-table-constructor]], [[weak-hash-table-constructor]],\n[[hash-table?]], [[hash-table/put!]], [[hash-table/get]],\n[[hash-table/remove!]], [[hash-table/clear!]], [[hash-table/count]],\n[[hash-table->alist]], [[hash-table/key-list]], [[hash-table/datum-list]],\n[[hash-table/for-each]], [[hash-table/lookup]]\n\n** [[MzScheme]]\n- Compare : [[eq?]] or [[equal?]]\n- Hash : fixed\n- External : Yes\n- API : [[make-hash-table]], [[make-hash-table-weak]],\n[[hash-table?]], [[hash-table-put!]], [[hash-table-get]],\n[[hash-table-remove!]], [[hash-table-map]],\n[[hash-table-for-each]]\n\n** [[Scheme48]]\n- Compare : [[eq?]], [[eqv?]], [[string=?]], [[=]], or user-specified\n- Hash : system default or user specified.\n- External : No\n- API : [[make-table]], [[make-symbol-table]], [[make-string-table]],\n[[make-integer-table]], [[make-table-maker]], [[make-table-immutable!]],\n[[table?]], [[table-ref]], [[table-set!]], [[table-walk]],\n[[default-hash-function]], [[string-hash]]\n\n** [[STk]]\n- Compare : user specified (default [[eq?]])\n- Hash : user specified (default [[hash-table-hash]]).\n- API : [[make-hash-table]], [[hash-table?]], [[hash-table-put!]], [[hash-table-hash]],\n[[hash-table-get]], [[hash-table-remove!]],\n[[hash-table-for-each]], [[hash-table-map]], [[hash-table->list]], [[hash-table-stats]].\n\n** [[SRFI-69]]\n- Compare : user-specified (default [[equal?]])\n- Hash : user-specified (defaults to an appropriate hash function for the given compare function)\n- External : No\n- API : See [[SRFI-69]]\n [http://www.obtenir-rio.info code rio]\n")
("call/cc" . "(:ctime 1014941548 :cuser #f :mtime 1191663441 :muser #f)* [procedure] call/cc ''procedure''\n\n[[R6RS]]: An alias of [[call-with-current-continuation]].\n\nSee also [[call/1cc]]\n")
("test-runner-group-path" . "(:ctime 1151136447 :cuser #f :mtime 1151146280 :muser #f)* [syntax] test-runner-group-path ''runner''\n\n[[SRFI-64]]: returns the list of names of active test groups with outermost first.\n")
("make-thread" . "(:ctime 1015927275 :cuser #f :mtime 1015928074 :muser #f)* [procedure] make-thread ''thunk'' [''name'']\n\n[[SRFI-18]], [[SRFI-21]]\n")
("macro-body" . "(:ctime 1018336987 :cuser #f :mtime 1018336987 :muser #f)* [procedure] macro-body ''macro''\n\n[[STk]]: Returns the body of ''macro''.  See also [[macro]].\n")
("SRFI-7" . "(:ctime 1014882025 :cuser #f :mtime 1122428560 :muser #f)SRFI-7: Feature-based program configuration language\n\nhttp://srfi.schemers.org/srfi-7/srfi-7.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[program]], [[requires]], [[files]], [[code]], [[feature-cond]]\n\n")
("current-column" . "(:ctime 1017989549 :cuser #f :mtime 1017989556 :muser #f)[[$$include current-row]]\n")
("errno/again" . "(:ctime 1015077292 :cuser #f :mtime 1015077292 :muser #f)[[$$include errno/perm]]\n")
("ascii-range" . "(:ctime 1018037912 :cuser #f :mtime 1018037912 :muser #f)* [procedure] ascii-range ''low-char'' ''high-char''\n* [procedure] ascii-ranges ''low-char'' ''high-char'' ...\n\n[[Scheme48]]: character set constructor.\nSee [[set]].\n")
("list-ref" . "(:ctime 1014855712 :cuser #f :mtime 1191314738 :muser #f)* [procedure] list-ref ''list'' ''k''\n\n[[R5RS]], [[R6RS]]\n\n* [procedure] list-ref ''list'' ''k'' [''default'']\n\n[[Gauche]] allows to give a default value when ''k'' is out of range.\n\n")
("test-group-with-cleanup" . "(:ctime 1151049296 :cuser #f :mtime 1151075612 :muser #f)* test-group-with-cleanup ''suite-name'' ''decl-or-expr'' ... ''cleanup-form''\n\n[[SRFI-64]]: equivalent to\n{{{\n(test-group suite-name\n  (dynamic-wind\n      (lambda () #f)\n      (lambda () decl-or-expr ...)\n      (lambda () cleanup)))\n}}}\n\nSee also [[test-group]].\n")
("string-xcopy!" . "(:ctime 1014895749 :cuser #f :mtime 1014895753 :muser #f)* [procedure] string-xcopy! ''target'' ''tstart'' ''s'' ''sfrom'' [''sto'' ''start'' ''end'']\n\n[[SRFI-13]]:  Exactly the same as [[xsubstring]], but the extracted text is \nwritten into the string ''target'' starting at index ''tstart''. \nThis operation is not defined if (eq? ''target'' ''s'')  or these two \narguments share storage -- you cannot copy a string on top of itself.\n\nSee also [[xsubstring]].\n\n\n")
("struct-ref" . "(:ctime 1099725832 :cuser #f :mtime 1099725832 :muser #f)* [procedure] struct-ref ''struct'' ''slot-name''\n\n[[STklos]]: struct accessor.  See [[make-struct]].\n")
("uint-list->blob" . "(:ctime 1144700986 :cuser #f :mtime 1144712570 :muser #f)[[$$include blob->uint-list]]\n")
("open-input-string" . "(:ctime 1014881585 :cuser #f :mtime 1327407361 :muser #f)* [procedure] open-input-string ''string''\n\n[[SRFI-6]]: Takes a string and returns an input port that delivers \ncharacters from the string. The port can be closed by [[close-input-port]], \nthough its storage will be reclaimed by the garbage collector if it becomes\ninaccessible.\n\nAlso in [[Bigloo]],\n[[ChezScheme]], [[Chicken]], [[Gauche]],\n[[LispMe]], [[STk]], [[STklos]]\n\nSee also [[open-output-string]].\n\nSome implementations call this [[make-string-input-port]].\n [http://www.obtenir-rio.info B and You]\n")
("fxnonpositive?" . "(:ctime 1014951151 :cuser #f :mtime 1014951151 :muser #f)* [procedure] fxnonpositive? ''fixnum''\n\n[[ChezScheme]]\n\nSee also [[fixnum?]]\n")
("closure?" . "(:ctime 1018333741 :cuser #f :mtime 1099722593 :muser #f)* [procedure] closure? ''obj''\n\n[[STk]], [[STklos]]: returns #t if ''obj'' is a procedure\ncreated by evaluating a lambda expression.\nSee also [[primitive?]], [[promise?]], [[continuation?]]\n")
("copy" . "(:ctime 1015281391 :cuser #f :mtime 1015281391 :muser #f)* [procedure] copy ''x''\n\n[[Chicken]]: copy ''x'' recursively.  See also [[evict]].\n")
("make-tracking-output-port" . "(:ctime 1017989407 :cuser #f :mtime 1017989407 :muser #f)[[$$include make-tracking-input-port]]\n")
("read-error-span" . "(:ctime 1099273956 :cuser #f :mtime 1099273956 :muser #f)[[$$include read-error?]]\n")
("with-input-from-file" . "(:ctime 1014860828 :cuser #f :mtime 1219473598 :muser #f)* [procedure] with-input-from-file ''string'' ''thunk''\n\n[[R5RS]]\n\nSee also [[call-with-input-file]], [[with-output-to-file]].\n\n* [procedure] with-input-from-file ''string'' ''thunk'' [''mode'']\n\n[[Chicken]] extends R5RS  to take mode argument: #:text, #:binary or #:append.\n\n* [procedure] with-input-from-file ''string'' ''thunk'' [''options'' ...]\n\n[[Gauche]] extends R5RS to take various keyword arguments to customize\nbehavior.\n")
("file-mode" . "(:ctime 1037014789 :cuser #f :mtime 1037014831 :muser #f)* [procedure] file-mode ''fname/fd/port'' [''chase?'']\n\n[[Scsh]]: returns mode bits.  see also [[file-info]].\n\nChicken has [[file-permissions]].\n\n* [procedure] file-mode ''filename'' &keyword follow-link?\n\n[[Gauche]]: returns mode bits.  see also [[sys-stat]].\n")
("make-kmp-restart-vector" . "(:ctime 1014888268 :cuser #f :mtime 1014888268 :muser #f)* [procedure] make-kmp-restart-vector ''s'' [''c='' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[kmp-step]], [[string-kmp-partial-search]].\n")
("record-type-field-names" . "(:ctime 1014948653 :cuser #f :mtime 1017982778 :muser #f)* [procedure] record-type-field-names ''rtd''\n\n[[ChezScheme]], [[Scheme48]]\n\nSee also [[make-record-type]], [[define-record]],\n[[define-record-type]]\n")
("string-start" . "(:ctime 1018082790 :cuser #f :mtime 1018082790 :muser #f)* [procedure] string-start\n* [procedure] string-end\n\n[[Scheme48]]: returns anchor regexp.  See [[Concept:RegularExpression]], [[match]].\n")
("open-input-c-string" . "(:ctime 1039755672 :cuser #f :mtime 1039755672 :muser #f)* [procedure] open-input-c-string ''string''\n\n[[Bigloo]]\n")
("socket-shutdown" . "(:ctime 1018343479 :cuser #f :mtime 1099738488 :muser #f)* [procedure] socket-shutdown ''socket'' [''close'']\n\n[[STk]], [[STklos]]: shutdown the connection.\nSee also [[socket-down?]], [[make-client-socket]],\n[[make-server-socket]].\n")
("string>=" . "(:ctime 1015063983 :cuser #f :mtime 1015063983 :muser #f)[[$$include string=]]\n")
("with-output-to-pipe" . "(:ctime 1015105842 :cuser #f :mtime 1015105842 :muser #f)[[$$include with-input-from-pipe]]\n")
("module-symbols" . "(:ctime 1018336397 :cuser #f :mtime 1099723097 :muser #f)* [procedure] module-symbols ''module''\n\n[[STk]], [[STklos]]: Returns the list of symbols that are\ndefined in ''module''.\n")
("hostname" . "(:ctime 1099742481 :cuser #f :mtime 1099742481 :muser #f)* [procedure] hostname\n\n[[STklos]]: returns the host name of the machine.\n\nOther implementations have [[get-host-name]], [[system-name]], [[sys-gethostname]].\n")
("open-directory-stream" . "(:ctime 1018126324 :cuser #f :mtime 1018126324 :muser #f)* [procedure] open-directory-stream ''name''\n* [procedure] directory-stream? ''x''\n* [procedure] read-directory-stream ''directory-stream''\n* [procedure] close-directory-stream ''directory-stream''\n\n[[Scheme48]]: interface to POSIX opendir, readdir and\nclosedir.  See also [[Concept:FileSystem]],\n[[list-directory]].\n")
("dirname" . "(:ctime 1018337520 :cuser #f :mtime 1099741784 :muser #f)* [procedure] dirname ''string''\n* [procedure] basename ''string''\n\n[[STk]], [[STklos]], [[Bigloo]].\n\nOther implementations call these \n[[file-name-directory]]/[[file-name-non-directory]],\n[[sys-dirname]]/[[sys-basename]], or\n[[pathname-directory]]/[[pathname-strip-directory]].\n\n")
("call-with-values" . "(:ctime 1014839125 :cuser #f :mtime 1191664080 :muser #f)* [procedure] call-with-values ''producer'' ''consumer''\n\n[[R5RS]], [[R6RS]]: Calls its ''producer'' argument with no values and a \ncontinuation that, when passed some values, calls the ''consumer'' procedure \nwith\nthose values as arguments. \nThe continuation for the call to ''consumer'' is the continuation \nof the call to [[call-with-values]].\n\nSee also [[values]], [[receive]], [[let-values]].\n")
("cfl*" . "(:ctime 1014954060 :cuser #f :mtime 1014954060 :muser #f)* [procedure] cfl* ''cflonum'' ...\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[*]], [[fl*]]\n")
("test-runner-on-bad-end-name" . "(:ctime 1151049296 :cuser #f :mtime 1151082978 :muser #f)* [syntax] test-runner-on-bad-end-name ''runner''\n* [syntax] test-runner-on-bad-end-name! ''runner'' ''function''\n\n[[SRFI-64]]: gets or sets the callback function for on-bad-end-name.\n''function'' is called from [[test-end]] (before on-group-end function)\nif ''suite-name'' was supplied to [[test-end]] and does not match the name of corresponding [[test-begin]].\n\nSee also [[test-runner-on-group-end]] and [[test-on-bad-end-name-simple]].\n")
("test-runner-pass-count" . "(:ctime 1151136447 :cuser #f :mtime 1151145322 :muser #f)* [procedure] test-runner-pass-count ''runner''\n\n[[SRFI-64]]: returns the number of tests that passed, and were expected to pass.\n")
("vector-binary-search" . "(:ctime 1099388354 :cuser #f :mtime 1099388354 :muser #f)* [procedure] vector-binary-search ''vec'' ''value'' ''cmp''\n\n[[SRFI-43]]: Searches ''value'' in ''vec'' using binary search.\nReturns the index if found, or #f otherwise.\n''Cmp'' is a two-argument procedure which returns a negative integer,\nzero, or a postive integer, when the first argument is less than,\nequal to, or greater than the second argument, respectively.\n")
("force-output" . "(:ctime 1015882374 :cuser #f :mtime 1018387280 :muser #f)* [procedure] force-output ''port''\n\n[[SCM]], [[Scsh]]: flush buffered data in the output port ''port''.\n\nThis is called [[flush]], [[flush-output]], [[flush-output-port]] in some implementations.\n\nSCM's force-output can take curses window (see [[initscr]]) as well.\n")
("hash-table-put!" . "(:ctime 1015303771 :cuser #f :mtime 1327407175 :muser #f)* [procedure] hash-table-put! ''hash-table'' ''key'' ''value''\n\n[[STk]], [[STklos]], [[MzScheme]], [[Gauche]]: see also [[hash-table-get]].\n\n[[Gauche]]: see also [[hash-table-get]], [[hash-table-push!]], [[hash-table-pop!]].\n\nThis is called [[hash-table-set!]] or [[hashtable-put!]] in some implementations.\n\n [http://www.obtenir-rio.info B and You]\n")
("any" . "(:ctime 1014870360 :cuser #f :mtime 1014870466 :muser #f)* [procedure] any ''pred'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Applies the predicate across the lists, \nreturning true if the predicate returns true on any application. \n\nChezScheme has the same function by the name [[ormap]],\nexcept that the length of lists must be the same in Chez's.\n\nSee also [[every]].\n\n")
("optimize-level" . "(:ctime 1015023730 :cuser #f :mtime 1015023730 :muser #f)* [procedure] optimize-level [''newval'']\n\n[[ChezScheme]]: gets/sets optimization level (0 to 4)\n\nSee also [[compile]].\n")
("SRFI-67" . "(:ctime 1144197855 :cuser #f :mtime 1145787517 :muser #f)SRFI 67: Compare Procedures\n\nhttp://srfi.schemers.org/srfi-67/srfi-67.html\n\n[[$$srfi-implementors]]\n----\n\n[[boolean-compare]],\n[[char-compare]],\n[[char-compare-ci]],\n[[string-compare]],\n[[string-compare-ci]],\n[[symbol-compare]],\n[[integer-compare]],\n[[rational-compare]],\n[[real-compare]],\n[[complex-compare]],\n[[number-compare]]\n\n[[vector-compare]],\n[[vector-compare-as-list]],\n[[list-compare]],\n[[list-compare-as-vector]]\n\n[[pair-compare-car]],\n[[pair-compare-cdr]],\n[[pair-compare]]\n\n[[default-compare]]\n\n[[refine-compare]],\n[[select-compare]],\n[[cond-compare]]\n\n[[if3]],\n[[if=?]],\n[[if<?]],\n[[if>?]],\n[[if<=?]],\n[[if>=?]],\n[[if-not=?]]\n\n[[=?]],\n[[<?]],\n[[>?]],\n[[<=?]],\n[[>=?]],\n[[not=?]]\n\n[[</<?]],\n[[</<=?]],\n[[<=/<?]],\n[[<=/<=?]],\n[[>/>?]],\n[[>/>=?]],\n[[>=/>?]],\n[[>=/>=?]]\n\n[[chain=?]],\n[[chain<?]],\n[[chain>?]],\n[[chain<=?]],\n[[chain>=?]]\n\n[[pairwise-not=?]]\n\n[[min-compare]],\n[[max-compare]],\n[[kth-largest]]\n\n[[compare-by<]],\n[[compare-by>]],\n[[compare-by<=]],\n[[compare-by>=]],\n[[compare-by=/<]],\n[[compare-by=/>]]\n\n[[debug-compare]]\n")
("#:" . "(:ctime 1014946271 :cuser #f :mtime 1292547787 :muser #f)* [reader syntax] #:''symbol''\n\n[[ChezScheme]], [[Gauche]]: uninterned symbol\n\n[[Chicken]], [[Guile]]: keyword; see [[keyword?]] for more about the syntax.\n")
("blob-s32-native-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144719631 :muser #f)* [procedure] blob-s32-native-set! ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: similar to (blob-sint-set! 4 (endianness native) ''blob'' ''k'' ''n''), but works at aligned indices: ''k'' must be a multiple of 4. It is an error to use this at non-aligned indices.\n\nSee also [[blob-sint-set!]] and [[endianness]].\n")
("errno/rofs" . "(:ctime 1015077302 :cuser #f :mtime 1015077302 :muser #f)[[$$include errno/perm]]\n")
("sstats-bytes" . "(:ctime 1015028832 :cuser #f :mtime 1015028832 :muser #f)* [procedure] sstats-bytes ''sstats''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[set-sstats-bytes!]].\n")
("hash-table-merge!" . "(:ctime 1144494246 :cuser #f :mtime 1144495421 :muser #f)* [procedure] hash-table-merge! ''hash-table1'' ''hash-table2''\n\n[[SRFI-69]]: Adds all mappings in ''hash-table2'' into ''hash-table1'' and returns the resulting hash table. This function may modify ''hash-table1'' destructively.\n")
("blob-u8-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144716367 :muser #f)* [procedure] blob-u8-set! ''blob'' ''k'' ''octet''\n\n[[SRFI-74]]: Stores ''octet'' in element ''k'' of ''blob''.\n\nThe return values are unspecified.\n")
("rat" . "(:ctime 1152518355 :cuser #f :mtime 1152525559 :muser #f)* [format descriptor] rat [''n'']\n[[RRRS]], [[R3RS]]: express as a rational fraction. ''n'' specifies the largest denominator to be used in constructing a rational approximation to the number being expressed. If ''n'' is omitted it defaults to infinity.\n\nSee also [[number->string]].\n")
("Index:d" . "(:ctime 1014842703 :cuser #f :mtime 1015014457 :muser #f)[[$$index d]]\n\n")
("bit-or" . "(:ctime 1043984816 :cuser #f :mtime 1099724389 :muser #f)* [procedure] bit-or ''i1'' ''i2''\n* [procedure] bit-xor ''i1'' ''i2''\n* [procedure] bit-and ''i1'' ''i2''\n\n[[Bigloo]], [[STklos]]: bitwise operations.  See also [[bit-not]],\n[[bit-lsh]], [[bit-rsh]].\n\nThis is called [[logior]] etc, or [[bitwise-ior]] etc,\nin some implementations.\n")
("file-position" . "(:ctime 1014956821 :cuser #f :mtime 1039776848 :muser #f)* [procedure] file-position ''port'' [''n'']\n\n[[ChezScheme]]: gets/sets the position of the port in the\nfile which the port refers.\n\nSee also [[file-length]].\n\nScsh has [[seek]] and [[tell]].  Guile has [[seek]] and [[ftell]]. \nBigloo has [[input-port-position]] and \n[[output-port-position]].\nGauche has [[port-tell]] and [[port-seek]].\n\n* [procedure] file-position ''port-or-fd''\n\n[[Chicken]]: gets the current file position.\n\nSee also [[file-size]], [[set-file-position!]].\n\nScsh and Guile have [[seek]].  \nBigloo has [[input-port-position]] and \n[[output-port-position]].\n\n\n")
("socket-port-number" . "(:ctime 1017993353 :cuser #f :mtime 1099738334 :muser #f)* [procedure] socket-port-number ''socket''\n\n[[Scheme48]]: returns port number of ''socket''.\nSee [[open-socket]].\n\n[[STk]], [[STklos]] also have this.  See [[make-client-socket]],\n[[make-server-socket]].\n")
("char-name" . "(:ctime 1014961540 :cuser #f :mtime 1015051861 :muser #f)* [procedure] char-name ''obj''\n* [procedure] char-name ''name'' ''char''\n\n[[ChezScheme]], [[Chicken]]: gets/sets associated name of a character.\n")
("ucs2-string-fill!" . "(:ctime 1039428298 :cuser #f :mtime 1039428298 :muser #f)* [procedure] ucs2-string-fill! ''ucs2str'' ''char''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("current-country" . "(:ctime 1036934868 :cuser #f :mtime 1036934868 :muser #f)* [procedure] current-country\n* [procedure] current-country ''symbol''\n\n[[SRFI-29]]: gets/sets the current ISO 3166-1 country code as a symbol.  See also [[current-language]], [[current-locale-details]].\n")
("flush" . "(:ctime 1014957132 :cuser #f :mtime 1099727586 :muser #f)* [procedure] flush [''port'']\n\n[[STk]], [[Gauche]]: flush output port.\n\nSTklos renamed this to [[flush-output-port]].\n\nOther Scheme implementations call this procedure\n[[flush-output-port]], [[flush-output]], [[force-output]].\n\n")
("mutex-name" . "(:ctime 1015927513 :cuser #f :mtime 1015963596 :muser #f)* [procedure] mutex-name ''mutex''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("read-of-strings" . "(:ctime 1039756138 :cuser #f :mtime 1039756138 :muser #f)* [procedure] read-of-string [''iport'']\n\n[[Bigloo]]: reads a sequence of non-space characters\nfrom ''iport''.\n")
("string-copy" . "(:ctime 1014859466 :cuser #f :mtime 1191568476 :muser #f)* [procedure] string-copy ''string''\n\n[[R5RS]], [[R6RS]]: Returns a newly allocated copy of the given ''string''.\n\n* [procedure] string-copy ''string'' [''start'' ''end'']\n\n[[SRFI-13]] extends R5RS to take optional arguments.\n\nSee also [[substring/shared]].\n\n\n")
("fx<" . "(:ctime 1014950608 :cuser #f :mtime 1015067635 :muser #f)[[$$include fx=]]\n\n")
("#(" . "(:ctime 1014846634 :cuser #f :mtime 1014846634 :muser #f)* [reader syntax] #(''obj'' ...)\n\n[[R5RS]] Literal vector.\n")
("let-id-macro" . "(:ctime 1015044946 :cuser #f :mtime 1020284817 :muser #f)* [syntax] let-id-macro ((''name'' ''exp'') ...) ''body'' ...\n\n[[Chicken]], [[MzScheme]]: locally binds identifier macros; every occurrence of ''name''\nin ''body'' is substituted for ''exp''.  See also [[define-id-macro]].\n")
("#<#" . "(:ctime 1015042211 :cuser #f :mtime 1015042211 :muser #f)* [reader syntax] #<# ''TAG''\n\n[[Chicken]]: starts multiline string constant, with substituting\nembedded Scheme expression.  Embedded Scheme expression is \nrepersented by #''expr'' or #{''expr''}.\n\nGauche has non-multiline string interpolation notation: [[#`]].\n")
("string<?" . "(:ctime 1015063521 :cuser #f :mtime 1015063521 :muser #f)[[$$include string=?]]\n")
("a:floq128d" . "(:ctime 1144527545 :cuser #f :mtime 1144529079 :muser #f)* [procedure] a:floq128d [''z'']\n[[SRFI-63]]:\nReturns an exact 128.bit decimal flonum rational uniform-array prototype.\n")
("table?" . "(:ctime 1017984900 :cuser #f :mtime 1017984900 :muser #f)* [procedure] table? ''table''\n\n[[Scheme48]]: See also [[make-table]], [[Concept:HashTable]].\n")
("vector-fold" . "(:ctime 1099365269 :cuser #f :mtime 1201692071 :muser #f)* [procedure] vector-fold ''kons'' ''knil'' ''vec1'' ''vec2'' ...\n* [procedure] vector-fold-right ''kons'' ''knil'' ''vec1'' ''vec2'' ...\n\n[[SRFI-43]]: Iterate over given vectors, much like [[fold]] and [[string-fold]]\ndoes over lists and strings.  Iteration ends by the shortest vector.\n\nThe procedure ''kons'' is called as (kons ''index'' ''seed'' ''e1'' ''e2'' ...),\nwhere ''index'' is the current index into the vector(s),\n''e1'' ... are (vector-ref ''vec1'' ''index'') ....\n")
("vector-unfold-right" . "(:ctime 1099360584 :cuser #f :mtime 1099360584 :muser #f)[[$$include vector-unfold]]\n")
("stream" . "(:ctime 1099279910 :cuser #f :mtime 1099279910 :muser #f)* [procedure] stream ''obj'' ...\n\n[[SRFI-40]]: Returns a newly allocated finite stream of its arguments.\nSee also [[stream-cons]].\n\nExamples:\n{{{\n(stream 'a (+ 3 4) 'c)                      => (stream 'a 7 'c)\n(stream)                                    => stream-null\n}}}\n")
("cdar" . "(:ctime 1201704117 :cuser #f :mtime 1201704117 :muser #f)[[$$include caar]]\n")
("*fx" . "(:ctime 1040351466 :cuser #f :mtime 1040351466 :muser #f)[[$$include +fx]]\n")
("write-line" . "(:ctime 1015073320 :cuser #f :mtime 1015073320 :muser #f)* [procedure] write-line ''string'' [''output-port'']\n\n[[Chicken]]\n\nSee also [[read-line]].\n")
("asin" . "(:ctime 1014838202 :cuser #f :mtime 1191312219 :muser #f)* [procedure] asin ''z''\n\n[[R5RS]], [[R6RS]]: arcsine.\n\nSee also [[sin]], [[acos]], [[atan]].\n")
("condition-type?" . "(:ctime 1063369204 :cuser #f :mtime 1063369204 :muser #f)* [procedure] condition-type? ''obj''\n\n[[SRFI-35]]: returns #t iff ''obj'' is a condition type.\nSee [[make-condition-type]].\n")
("s32vector->byte-vector" . "(:ctime 1015075628 :cuser #f :mtime 1015075628 :muser #f)[[$$include u8vector->byte-vector]]\n")
("hashtable-size" . "(:ctime 1045571977 :cuser #f :mtime 1191359382 :muser #f)* [procedure] hashtable-size ''table''\n\n[[R6RS]], [[Bigloo]]: Returns the number of entries in ''table''.\nSee also [[make-hashtable]], [[Concept:HashTable]].\n\n")
("ref" . "(:ctime 1164526623 :cuser #f :mtime 1164526946 :muser #f)* [generic function] ref ''obj'' ''spec'' [''fallback'']\n\n[[Gauche]]: Convenient generic accessor.\n{{{\n(ref <object> <symbol>) == slot-ref\n(ref <list> <integer>) == list-ref\n(ref <string> <integer>) == string-ref\n(ref <vector> <integer>) == vector-ref\netc.\n}}}\n\n")
("blob-u16-native-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144717526 :muser #f)* [procedure] blob-u16-native-ref ''blob'' ''k''\n\n[[SRFI-74]]: equivalent to (blob-uint-ref 2 (endianness native) ''blob'' ''k'').\n\nSee also [[blob-uint-ref]] and [[endianness]].\n")
("blob-sint-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144716858 :muser #f)* [procedure] blob-sint-ref ''size'' ''endianness'' ''blob'' ''k''\n\n[[SRFI-74]]: Returns the exact integer corresponding to the two's\ncomplement representation of size ''size'' and specified by ''endianness'' at\nindices {k, ..., k + size - 1}.\n\nSee also [[endianness]].\n")
("hashtable->vector" . "(:ctime 1106766164 :cuser #f :mtime 1106766164 :muser #f)* [procedure] hashtable->vector ''hash-table''\n\n[[Bigloo]]: returns a new vector containing all values (in order of keys)\n")
("SRFI-26" . "(:ctime 1036934392 :cuser #f :mtime 1122428694 :muser #f)SRFI-26: Notation for Specializing Parameters without Currying\n\nhttp://srfi.schemers.org/srfi-26/srfi-26.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[cut]], [[cute]]\n")
("perm/iwusr" . "(:ctime 1015099772 :cuser #f :mtime 1015099772 :muser #f)[[$$include perm/irusr]]\n")
("fluid-set!" . "(:ctime 1014929460 :cuser #f :mtime 1014929513 :muser #f)* [procedure] fluid-set! ''fluid'' ''value''\n\n[[Guile]]: sets the value associated to ''fluid'' to ''value'' \nin the current dynamic root.\n\nSee also [[make-fluid]], [[fluid-ref]]. [[with-fluids*]]\n\n")
("make-input/output-port" . "(:ctime 1014955872 :cuser #f :mtime 1015022078 :muser #f)* [procedure] make-input-port ''handler'' ''input-buffer''\n\n[[ChezScheme]]: creates a generic port for input/output\n\nSee also [[make-output-port]], [[make-input-port]],\n[[mark-port-closed!]], [[port?]], [[close-port]], [[port-closed?]]\n")
("rational-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499830 :muser #f)[[$$include integer-compare]]\n")
("match-submatches" . "(:ctime 1018083755 :cuser #f :mtime 1018083755 :muser #f)* [procedure] match-submatches ''match''\n\n[[Scheme48]]: returns an alist of submatches in\nthe match object.\nSee [[Concept:RegularExpression]], [[match]],\n[[match-start]], [[match-end]].\n\n")
("SRFI-134" . "(:ctime 1474476457 :cuser #f :mtime 1474476457 :muser #f)SRFI-134:  Immutable Deques \n\nhttp://srfi.schemers.org/srfi-134/srfi-134.html\n\n[[$$srfi-implementors]]\n")
("program-name" . "(:ctime 1099742688 :cuser #f :mtime 1099742688 :muser #f)* [procedure] program-name\n\n[[STklos]]: returns the name of current running program.\n\nSee also [[*program-name*]].\n")
("list" . "(:ctime 1014855504 :cuser #f :mtime 1014855504 :muser #f)* [procedure] list ''obj'' ...\n\n[[R5RS]]\n\nSee also [[cons*]], [[list*]].\n")
("blob=?" . "(:ctime 1144700986 :cuser #f :mtime 1144711874 :muser #f)* [procedure] blob=? ''blob-1'' ''blob-2''\n\n[[SRFI-74]]: Returns #t if ''blob-1'' and ''blob-2'' are equal---that is, if they have the same\nlength and equal octets at all valid indices.\n")
("make-hash-table-weak" . "(:ctime 1020285056 :cuser #f :mtime 1020285056 :muser #f)* [procedure] make-hash-table-weak\n\n[[MzScheme]]: makes weak hash table.  See also [[make-hash-table]].\n")
("time-utc->time-monotonic!" . "(:ctime 1099301556 :cuser #f :mtime 1099301556 :muser #f)[[$$include time-utc->date]]\n")
("SRFI-8" . "(:ctime 1014882503 :cuser #f :mtime 1122428569 :muser #f)SRFI 8: receive: Binding to multiple values\n\nhttp://srfi.schemers.org/srfi-8/srfi-8.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[receive]]\n\n\n")
("*syntax-rules*" . "(:ctime 1015883464 :cuser #f :mtime 1015883464 :muser #f)* [variable] *syntax-rules*\n\n[[SCM]]: a flag to indicate whether syntax-rules macro is supported or not.\n")
("file-is-directory?" . "(:ctime 1015197529 :cuser #f :mtime 1099741342 :muser #f)* [procedure] file-is-directory? ''pathname''\n\n[[STk]], [[STklos]], [[Gauche]]: see if ''pathname'' is a directory.\n\nSee also [[Concept:FileSystem]].\n\nThis is called [[directory?]] or [[file-directory?]]\nin some implementations.\n")
("Cross-Implementation Libraries" . "(:ctime 1191264760 :cuser #f :mtime 1191264761 :muser #f)To add a cross-implementation library, create a link to it as Library:Foo here.\n\n\n- [[Library:Fmt]]: Alex Shinn's combinator formatting library.\n")
("condition-has-type?" . "(:ctime 1099263851 :cuser #f :mtime 1099263851 :muser #f)* [procedure] condition-has-type? ''condition'' ''type''\n\n[[SRFI-35]]: Returns true if ''condition'' has a condition type ''type''.\nA condition may belong to multiple types (by inheritance, and/or composition).\nSee [[make-condition]], [[make-condition-type]], [[make-compound-condition]].\n")
("fx-" . "(:ctime 1014950538 :cuser #f :mtime 1191224195 :muser #f)* [procedure] fx- ''fixnum1'' ''fixnum2'' ...\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[-]]\n\n* [procedure] fx- ''fixnum1'' ''fixnum2''\n\n[[Chicken]]: only binary operator is provided.\n\n* [procedure] fx- ''fixnum1''\n* [procedure] fx- ''fixnum1'' ''fixnum2''\n\n[[R6RS]]: unary and binary operators are provided.\n")
("get-groups" . "(:ctime 1015139135 :cuser #f :mtime 1015139156 :muser #f)* [procedure] get-groups\n\n[[Scheme48]]: POSIX getgroups.\n\nGauche has [[sys-getgroups]]\n")
("port->fdes" . "(:ctime 1018390890 :cuser #f :mtime 1018390890 :muser #f)* [procedure] port->fdes ''port''\n\n[[Scsh]]: returns a file descriptor underlying the ''port''.\n\nThis function can be found in other Scheme implementations\nas [[port->fileno]] or [[port-file-number]].\nHowever, Scsh keeps track of ''revealed count'' of the\nport.\n")
("subucs2-string" . "(:ctime 1039428165 :cuser #f :mtime 1039428165 :muser #f)* [procedure] subucs2-string ''s'' ''start'' ''end''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("char-foldcase" . "(:ctime 1192066397 :cuser #f :mtime 1192066397 :muser #f)* [procedure] char-foldcase ''char''\n\n[[R6RS]]\n\nSee the note in [[char-upcase]].\n")
("ashr" . "(:ctime 1039637974 :cuser #f :mtime 1039637974 :muser #f)[[$$include ashl]]\n")
("char->ucs" . "(:ctime 1039429906 :cuser #f :mtime 1039429906 :muser #f)* [procedure] char->ucs ''char''\n* [procedure] ucs->char ''integer''\n\n[[Gauche]]: converts a character and Unicode (UCS4) codepoint\nin integer.\n(NB: in Gauche, [[char->integer]] and [[integer->char]]\ndeals with ''internal character encoding'').\n\nBigloo has [[ucs2->integer]] and [[integer->ucs2]],\nwhich work like these.  Note that Bigloo has distinct\ntype for UCS2 character, and ''ucs2'' refers to that\ntype rather than UCS2 codepoint.\n")
("errno/perm" . "(:ctime 1015077065 :cuser #f :mtime 1015077065 :muser #f)* [variable] errno/perm\n* [variable] errno/noent\n* [variable] errno/srch\n* [variable] errno/intr\n* [variable] errno/io\n* [variable] errno/noexec\n* [variable] errno/badf\n* [variable] errno/child\n* [variable] errno/nomem\n* [variable] errno/acces\n* [variable] errno/fault\n* [variable] errno/busy\n* [variable] errno/notdir\n* [variable] errno/isdir\n* [variable] errno/inval\n* [variable] errno/mfile\n* [variable] errno/nospc\n* [variable] errno/spipe\n* [variable] errno/pipe\n* [variable] errno/again\n* [variable] errno/rofs\n\n[[Chicken]]: error codes.\n\n")
("amapc" . "(:ctime 1152535011 :cuser #f :mtime 1152535996 :muser #f)* [syntactic extension] amapc ''f'' ''list1'' ''list2'' ...\n[[RRS]]: the same as [[for-each]] in [[R5RS]].\n")
("byte-vector->s32vector" . "(:ctime 1015075810 :cuser #f :mtime 1015075810 :muser #f)[[$$include byte-vector->u8vector]]\n")
("sys-kill" . "(:ctime 1020374542 :cuser #f :mtime 1020374551 :muser #f)* [procedure] sys-kill ''pid'' ''signal''\n\n[[Gauche]]: POSIX kill().\n\nGauche also has high-level API [[process-send-signal]].\n\nOther implementations have [[process-signal]] and\n[[signal-process]].\n")
("set-sstats-gc-bytes!" . "(:ctime 1015029071 :cuser #f :mtime 1015029083 :muser #f)* [procedure] set-sstats-gc-bytes! ''sstats'' ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[sstats-gc-bytes]].\n")
("macro-expand-1" . "(:ctime 1018336866 :cuser #f :mtime 1018336866 :muser #f)[[$$include macro-expand]]\n")
("fold3-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144539174 :muser #f)[[$$include fold-ec]]\n")
("signal/tstp" . "(:ctime 1015076661 :cuser #f :mtime 1015076661 :muser #f)[[$$include signal/hup]]\n")
("fxsra" . "(:ctime 1014951017 :cuser #f :mtime 1191225471 :muser #f)[[$$include fxsll]]\n")
(":parallel" . "(:ctime 1144527545 :cuser #f :mtime 1144538253 :muser #f)* [syntax] :parallel ''generator'' ...\n[[SRFI-42]]:\nRuns several generators in parallel. This means that the next binding in\nthe sequence is obtained by advancing each generator in ''generator'' ... by one\nstep. The parallel generator terminates when any of its component\ngenerators terminates. The generators share a common scope for the\nvariables they introduce. This implies that the names of the variables\nintroduced by the various generators must be distinct.\n")
("signal-name" . "(:ctime 1020374227 :cuser #f :mtime 1020374227 :muser #f)* [procedure] signal-name ''signal''\n\n[[Scheme48]]: accessor of a signal object.\nThis is a reverse function of [[name->signal]].\nSee also [[signal?]].\n")
("continuation?" . "(:ctime 1018333888 :cuser #f :mtime 1018333888 :muser #f)* [procedure] continuation? ''obj''\n\n[[STk]]: returns #t if ''obj'' is a continuation\nobtained by [[call-with-current-continuation]].\nSee also [[closure?]], [[primitive?]].\n")
("vector-skip-right" . "(:ctime 1099388032 :cuser #f :mtime 1099388032 :muser #f)[[$$include vector-index]]\n")
("string->char-set!" . "(:ctime 1018084421 :cuser #f :mtime 1018084421 :muser #f)[[$$include string->char-set]]\n")
("ucs2-string" . "(:ctime 1039427752 :cuser #f :mtime 1039427752 :muser #f)* [procedure] ucs2-string ''k'' ...\n\n[[Bigloo]]: make ucs2 string.  see [[ucs2-string?]].\n")
("&i/o-write-error" . "(:ctime 1099273380 :cuser #f :mtime 1099273380 :muser #f)* [condition-type] &i/o-write-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-write-error &i/o-port-error\n  i/o-write-error?)\n}}}\n\nSee [[&condition]], [[&i/o-port-error]].\n")
("array-end" . "(:ctime 1036934017 :cuser #f :mtime 1036934017 :muser #f)[[$$include array-start]]\n")
("array-dimensions" . "(:ctime 1017981898 :cuser #f :mtime 1144487772 :muser #f)* [procedure] array-dimensions ''array''\n\n[[SRFI-47]], [[SRFI-63]], [[Scheme48]]: Returns list of dimensions of the array.\n\nSee also [[make-array]].\n")
("time->seconds" . "(:ctime 1015210234 :cuser #f :mtime 1015318279 :muser #f)* [procedure] time->seconds ''time''\n* [procedure] seconds->time ''integer''\n\n[[SRFI-18]], [[SRFI-21]]: converts a time structure and a real number of elapsed \nseconds from the certain time point (implementation dependent).\nSee [[current-time]].\n\nSee also [[time-second]] in SRFI-19, and [[time-seconds]] of Scheme48.\n\n")
("leaveok" . "(:ctime 1015877025 :cuser #f :mtime 1015877025 :muser #f)[[$$include clearok]]\n")
("module-exports" . "(:ctime 1015772604 :cuser #f :mtime 1099723082 :muser #f)* [procedure] module-exports ''module''\n\n[[STk]], [[STklos]], [[Gauche]]: see also [[module-imports]], [[module-name]].\n")
("source-directories" . "(:ctime 1015023127 :cuser #f :mtime 1015023127 :muser #f)* [procedure] source-directories [''newval'']\n\n[[ChezScheme]]: gets/sets a list of directory names searched for source\nfiles.\n\n")
("ucs2-ci>=?" . "(:ctime 1039428850 :cuser #f :mtime 1039428850 :muser #f)[[$$include ucs2-ci=?]]\n")
("<=/<?" . "(:ctime 1144494246 :cuser #f :mtime 1144503600 :muser #f)[[$$include </<?]]\n")
("fifth" . "(:ctime 1014862670 :cuser #f :mtime 1014862670 :muser #f)* [procedure] fifth ''pair''\n\n[[SRFI-1]]\n\n")
("hash-table-clear!" . "(:ctime 1191360672 :cuser #f :mtime 1191360672 :muser #f)* [procedure] hash-table-clear! ''hashtable''\n\n[[Gauche]]: Empties the hashtable.\n\nSee also [[Concept:HashTable]].\n\nR6RS has [[hashtable-clear!]].\n")
("include" . "(:ctime 1014963232 :cuser #f :mtime 1262127791 :muser #f)* [syntax] include ''filename''\n\n[[ChezScheme]]: Expands into a [[begin]]\nform containing the Scheme forms found in ''filename''.  Can be used\nother than toplevel.\n\nIf ''filename'' is not an absolute path, it is searched in the directories\nin a parameter [[source-directories]].\n\n[[Chicken]]: Inserts the contents of ''filename'' as the toplevel\ndefinitions.\n\nIf ''filename'' is not an absolute path, it is searched first in the\ncurrent directory, then in the directories given by the command-line\nargument -include-path.  The extension of the filename can be\nomitted if it is \".scm\".\n\n* [syntax] include ''path-spec''\n\n[[PLT-Scheme]]: Inlines the syntax in the file desginated by ''path-spec''\nin place of this form.  ''path-spec'' can be just a string, or \n(file ''string''), or (lib ''string'' ...).\n\nIf ''path-spec'' is not an absolute, path, it is resolved as follows.\n- If the source that contains the include form has complete path string,\nuse it as a base.\n- Otherwise, if ([[current-load-relative-directory]]) is not #f, use it as a base.\n- Otherwise, use ([[current-directory]]) as a base.\n\nPLT has some other variations of includes: [[include-at/relative-to]],\n[[include/reader]], [[include-at/relative-to/reader]].\n\n")
("stream-cdr" . "(:ctime 1099280033 :cuser #f :mtime 1099280033 :muser #f)[[$$include stream-car]]\n")
("option" . "(:ctime 1099274273 :cuser #f :mtime 1099274479 :muser #f)* [procedure] option ''names'' ''required-arg?'' ''optional-arg?'' ''option-proc''\n\n[[SRFI-37]]: Creates an option structure used by [[args-fold]].\n''Names'' is a list of short (character) and long (string) option names. \n''Required-arg?'' specifies if this options requires an option-argument (boolean). \n''Optional-arg?'' specifies if this option can accept an option-argument (boolean). ''Option-proc'' is a procedure used to process this option.\n\nAccessors of this structures are: [[option-names]], [[option-required-arg?]],\n[[option-optional-arg?]] and [[option-processor]].\n")
("match-end" . "(:ctime 1018083703 :cuser #f :mtime 1018083703 :muser #f)[[$$include match-start]]\n")
("vector?" . "(:ctime 1014860766 :cuser #f :mtime 1191568561 :muser #f)* [procedure] vector? ''obj''\n\n[[R5RS]], [[R6RS]]: Returns #t if ''obj'' is a vector, otherwise returns #f. \n")
("blob->uint-list" . "(:ctime 1144700986 :cuser #f :mtime 1144712482 :muser #f)* [procedure] blob->uint-list ''size'' ''endianness'' ''blob''\n* [procedure] blob->sint-list ''size'' ''endianness'' ''blob''\n* [procedure] uint-list->blob ''size'' ''endianness'' ''list''\n* [procedure] sint-list->blob ''size'' ''endianness'' ''list''\n\n[[SRFI-74]]: ''Size'' must be a positive exact integer. ''Endianness'' must be an endianness object (See [[endianness]]).\n\nThese convert between lists of integers and their consecutive\nrepresentations according to ''size'' and ''endianness'' in blobs in the same way\nas [[blob->u8-list]], [[blob->s8-list]], [[u8-list->blob]], and [[s8-list->blob]] do for\none-octet representations.\n")
("tenth" . "(:ctime 1014863242 :cuser #f :mtime 1014863242 :muser #f)* [procedure] tenth ''pair''\n\n[[SRFI-1]]\n")
("remove!" . "(:ctime 1014869408 :cuser #f :mtime 1014944696 :muser #f)* [procedure] remove! ''pred'' ''list''\n\n[[SRFI-1]]: linear-update variant of [[remove]].\n\n* [procedure] remove! ''obj'' ''list''\n\n[[ChezScheme]]: linear-update variant of [[remove]].\nThis is equivalent to [[SRFI-1]]'s [[delete!]].\n\nSee also [[remq!]], [[remv!]].\n\n")
("reset" . "(:ctime 1015024547 :cuser #f :mtime 1015052825 :muser #f)* [procedure] reset\n\n[[ChezScheme]]: calls current [[reset-handler]].\nResets to the current cafe (repl) by default.\n\n[[Chicken]]: calls current [[reset-handler]].\n\nSee also [[abort]], [[exit]].\n")
("make-directories" . "(:ctime 1039754983 :cuser #f :mtime 1039754983 :muser #f)* [procedure] make-directories ''path''\n\n[[Bigloo]]: make directory ''path'', including intermediate\ndirectories.  See also [[make-directory]].\n\n\nGauche has [[make-directory*]], which does the same thing.\n")
("user-option-pass" . "(:ctime 1015041243 :cuser #f :mtime 1015041243 :muser #f)* [procedure] user-option-pass [''newval'']\n\n[[Chicken]]: compiler parameter.\n\nSee also [[user-read-pass]], [[user-preprocessor-pass]], [[user-pass]]\n")
("real-sqrt" . "(:ctime 1170264990 :cuser #f :mtime 1170267878 :muser #f)* real-sqrt ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[sqrt]], but signals error if the argument is negative.\n")
("->string" . "(:ctime 1383068345 :cuser #f :mtime 1383068345 :muser #f)* [generic] ->string ''obj''\n\n[[Sagittarius]]: generic function to convert ''obj'' to a string.\nSee also [[->number]], [[->integer]], [[write-object]].\n")
("a:fixn32b" . "(:ctime 1144485145 :cuser #f :mtime 1144529332 :muser #f)* [procedure] a:fixn32b [''k'']\n[[SRFI-63]]: Returns an exact non-negative binary fixnum uniform-array prototype with at least 32 bits of precision.\n")
("interpret" . "(:ctime 1014965243 :cuser #f :mtime 1014965243 :muser #f)* [procedure] interpret ''obj'' [''env-spec'']\n\n[[ChezScheme]]\n\nSee also [[compile]]\n")
("temporary-file-name" . "(:ctime 1018338077 :cuser #f :mtime 1099741082 :muser #f)* [procedure] temporary-file-name ''string''\n\n[[STk]], [[STklos]]: generates a unique temporary file name.\n\nSimilar function is found in other implementations with\nthe name [[create-temporary-file]],\n[[create-temp-file]] or [[sys-tmpnam]].\n")
("char-set-diff+intersection!" . "(:ctime 1099288869 :cuser #f :mtime 1099288869 :muser #f)[[$$include char-set-diff+intersection]]\n")
("thread-priority-boost" . "(:ctime 1015928189 :cuser #f :mtime 1015928189 :muser #f)* [procedure] thread-priority-boost ''thread''\n* [procedure] thread-priority-boost-set! ''thread'' ''boost''\n\n[[SRFI-21]]\n")
("bit-shift" . "(:ctime 1099724497 :cuser #f :mtime 1099724526 :muser #f)* [procedure] bit-shift ''n'' ''bits''\n\n[[STklos]]: shifts ''n' left for ''bits'' bits.  Bigloo's [[bit-lsh]].\nSee also [[bit-and]] etc.\n\nSome implementations have [[arithmetic-shift]] or\n[[ash]].\n")
("vector->array" . "(:ctime 1144485145 :cuser #f :mtime 1144488552 :muser #f)* [procedure] vector->array ''vect'' ''proto'' ''dim1'' ...\n[[SRFI-63]]: Returns an array of type ''proto'' consisting of all the elements, in row-major order, of ''vect''. In the case of a rank-0 array, ''vect'' has a single element.\n\n''vect'' must be a vector of length equal to the product of exact nonnegative integers ''dim1'', ....\n\n")
("a:floq32d" . "(:ctime 1144527545 :cuser #f :mtime 1144529126 :muser #f)* [procedure] a:floq32d [''z'']\n[[SRFI-63]]:\nReturns an exact 32.bit decimal flonum rational uniform-array prototype.\n")
("finite?" . "(:ctime 1191210492 :cuser #f :mtime 1191210492 :muser #f)* [procedure] finite? ''x''\n\n[[R6RS]]: ''x'' must be a number object.  Returns #t if ''x'' is neither\ninfinite nor NaN.\n\nSee also [[infinite?]], [[nan?]], [[inf.0]], [[nan.0]].\n")
("byte-vector->s16vector" . "(:ctime 1015075795 :cuser #f :mtime 1015075795 :muser #f)[[$$include byte-vector->u8vector]]\n")
("file-options-on?" . "(:ctime 1020397300 :cuser #f :mtime 1020397300 :muser #f)* [procedure] file-options-on? ''file-options1'' ''file-options2''\n\n[[Scheme48]]: true if file option set ''file-options1'' \nincludes all options of ''file-options2''.\nSee [[file-options]].\n")
("symbol-prefix-proc" . "(:ctime 1014928853 :cuser #f :mtime 1014928853 :muser #f)* [procedure] symbol-prefix-proc ''prefix''\n\n[[Guile]]: utility procedure to create a procedure that renames\na symbol by adding ''prefix'' before its name.\n\nSee also [[use-modules]].\n")
("Concept:FileSystem" . "(:ctime 1015188700 :cuser #f :mtime 1327406926 :muser #f)File system API falls in the following categories:\n\n- File attributes, or stat.  APIs to retrieve various informations\nabout files, directories, and other filesystem entries.  Most\nimplementations have one or more of the following:\n-- Gets/sets attributes by pathname.\n-- Gets/sets attributes via port or opened file descriptor.\n-- Gets/sets attributes via ''stat'' object, i.e. POSIX way.\n- Directory API: read contents, create/remove directory,\nremove/rename file, get/set current directory.\n- Symbolic link API: symlink and readlink.\n\nSee also [[Concept:FileDescriptorAccess]] for low-level\nAPI dealing with file descriptors.\n\n----\n** [[ChezScheme]]\n:Attributes: [[file-length]]\n:Directory: [[current-directory]], [[delete-file]],\n[[file-exists?]]\n:Symlink:\n\n** [[Chicken]]\n:Attributes: via pathname.\n[[file-owner]], [[file-permissions]], [[file-read-access?]],\n[[file-write-access?]], [[file-execute-access?]],\n[[change-file-mode]], [[change-file-owner]], [[file-modification-time]],\n[[file-size]], [[directory?]]\n\n:Directory:[[change-directory]], [[current-directory]],\n[[create-directory]], [[delete-directory]], [[directory]],\n[[glob]], [[delete-file]], [[file-exists?]]\n:Symlink: [[create-symbolic-link]], [[read-symbolic-link]].\n:Other: [[create-fifo]], [[fifo?]]\n\n\n** [[Gauche]]\n:Attributes: via pathname.\n[[sys-stat]], [[sys-lstat]], [[sys-fstat]],\n[[file-type]], [[file-perm]], [[file-mode]],\n[[file-ino]], [[file-dev]], [[file-nlink]], [[file-uid]],\n[[file-gid]], [[file-size]], [[file-atime]], [[file-mtime]],\n[[file-ctime]], [[file-is-readable?]],\n[[file-is-writable?]], [[file-is-executable?]],\n[[sys-chmod]], [[sys-chown]], [[sys-utime]], [[sys-access]]\n:Directory: [[sys-chdir]], [[sys-getcwd]], \n[[sys-mkdir]], [[sys-rmdir]], [[sys-readdir]],\n[[current-directory]], [[home-directory]],\n[[directory-list]], [[directory-list2]], [[directory-fold]],\n[[make-directory*]], [[create-directory*]],\n[[remove-directory*]], [[delete-directory*]]\n:Symlink: [[sys-symlink]], [[sys-readlink]]\n:Other:\n\n** [[Scheme48]]\n:Attributes: \n- via pathname:\n[[accessible?]], [[get-file-info]], [[get-file/link-info]],\n- via port: [[get-port-info]]\n- accessors: [[file-info?]], [[file-info-name]],\n[[file-info-type]], [[file-type?]], [[file-type-name]],\n[[file-type]], [[file-info-device]], [[file-info-inode]],\n[[file-info-link-count]], [[file-info-size]], \n[[file-info-owner]], [[file-info-group]], [[file-info-mode]],\n[[file-info-last-access]], [[file-info-last-modification]],\n[[file-info-last-info-change]], [[file-mode]],\n[[file-mode?]], [[file-mode+]], [[file-mode-]],\n[[file-mode=?]], [[file-mode<=?]], [[file-mode>=?]],\n[[file-mode->integer]], [[integer->file-mode]]\n:Directory: \n[[open-directory-stream]], [[directory-stream?]],\n[[read-directory-stream]], [[close-directory-stream]],\n[[list-directory]], [[working-directory]],\n[[set-working-directory!]], [[link]], [[unlink]],\n[[remove-directory]], [[rename]], [[make-directory]]\n:Symlink:\n:Other:\n[[make-fifo]]\n\n\n** [[STk]]\n:Attributes: via pathname.  [[file-is-readable?]], [[file-is-writable?]],\n[[file-is-executable?]], [[file-is-directory?]]\n:Directory: [[file-exists?]], [[glob]],\n[[remove-file]], [[rename-file]], [[temporary-file-name]],\n[[getcwd]], [[chdir]]\n:Symlink:\n [http://www.obtenir-rio.info rio orange]\n")
("min-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535904 :muser #f)* [syntax] min-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe minimum of all values of ''expression''. The sequence of\nvalues must be non-empty. Think of it as\n([[apply]] [[min]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n\n")
("directory->list" . "(:ctime 1023697244 :cuser #f :mtime 1039755167 :muser #f)* [procedure] directory->list ''dir''\n\n[[Bigloo]]: returns list of files in the directory.\nSee also [[Concept:FileSystem]].\n\nLots of variations in other implementations:\n[[directory]], [[directory-list]], [[directory-files]],\n[[list-directory]], [[sys-readdir]].\n")
("string-tokenize" . "(:ctime 1014895059 :cuser #f :mtime 1327407138 :muser #f)* [procedure] string-tokenize ''s'' [''token-set'' ''start'' ''end'']\n\n[[SRFI-13]]\n\n* [procedure] string-tokenize ''s'' ''token-set''\n\n[[LispMe]]\n\n''token-set'' means something very different for [[LispMe]] than for [[SRFI-13]]\n\n(For [[LispMe]] ''token-set'' is string with delimiters)\n [http://www.obtenir-rio.info rio orange]\n")
("IronScheme" . "(:ctime 1230189405 :cuser #f :mtime 1230189406 :muser #f)IronScheme will aim to be a [[R6RS]] conforming Scheme implementation based on the Microsoft DLR.\n\nIronScheme will be a complete rewrite of IronLisp incorporating lessons learnt while developing IronLisp.\n\nIronScheme might support ERR5RS in the future.\n\nhttp://www.codeplex.com/IronScheme\n")
("current-date" . "(:ctime 1015209243 :cuser #f :mtime 1015209243 :muser #f)* [procedure] current-date [''tz-offset'']\n\n[[SRFI-19]]: date corresponding to the current UTC time.\nSee also [[current-julian-day]], [[current-modified-julian-day]],\n[[current-time]].\n")
("date-nanosecond" . "(:ctime 1023886154 :cuser #f :mtime 1023886154 :muser #f)* [procedure] date-nanosecond ''date''\n* [procedure] date-second ''date''\n* [procedure] date-minute ''date''\n* [procedure] date-hour ''date''\n* [procedure] date-day ''date''\n* [procedure] date-month ''date''\n* [procedure] date-year ''date''\n* [procedure] date-zone-offset ''date''\n* [procedure] date-year-day ''date''\n* [procedure] date-week-day ''date''\n* [procedure] date-week-number ''date''\n\n[[SRFI-19]]: accessor for date record.  See [[make-date]].\n\nSRFI-19's date record differs from POSIX struct tm\nin the following points:\n- has nanosecond resolution\n- month is an integer between 1 and 12, instead of 0 and 11.\n- year is the year; no 1900 offset.\n\n")
("u32vector->byte-vector" . "(:ctime 1015075620 :cuser #f :mtime 1015075620 :muser #f)[[$$include u8vector->byte-vector]]\n")
("angle" . "(:ctime 1014838009 :cuser #f :mtime 1191312972 :muser #f)* [procedure] angle ''z''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[magnitude]], [[imag-part]], [[real-part]].\n")
("pair-for-each" . "(:ctime 1014868783 :cuser #f :mtime 1014868783 :muser #f)* [procedure] pair-for-each ''f'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Like [[for-each]], but ''f'' is applied to successive sublists \nof the argument lists. That is, ''f'' is applied to the cons cells of the\n''lists'', rather than the ''lists''' elements. These applications occur in \nleft-to-right order. \n\nSee also [[for-each]].\n")
("ucs2-string>=?" . "(:ctime 1039428087 :cuser #f :mtime 1039428087 :muser #f)[[$$include ucs2-string=?]]\n")
("SRFI-36" . "(:ctime 1099268500 :cuser #f :mtime 1122428777 :muser #f)SRFI-36: I/O Conditions\n\nhttp://srfi.schemers.org/srfi-36/srfi-36.html\n\n[[$$srfi-implementors]]\n\n\n----\n[[&i/o-error]], [[i/o-error?]]\n\n[[&i/o-port-error]], [[i/o-port-error?]], [[i/o-error-port]]\n\n\n[[&i/o-read-error]], [[i/o-read-error?]],\n[[&i/o-write-error]], [[i/o-write-error?]],\n[[&i/o-closed-error]], [[i/o-closed-error?]]\n\n[[&i/o-filename-error]], [[i/o-filename-error?]], [[i/o-error-filename]],\n[[&i/o-malformed-filename-error]], [[i/o-malformed-filename-error?]],\n[[&i/o-file-protection-error]], [[i/o-file-protection-error?]],\n[[&i/o-file-is-read-only-error]], [[i/o-file-is-read-only-error?]],\n[[&i/o-file-already-exists-error]], [[i/o-file-already-exists-error?]],\n[[&i/o-no-such-file-error]], [[i/o-no-such-file-error?]]\n\n[[&read-error]], [[read-error?]], [[read-error-line]], [[read-error-column]],\n[[read-error-position]], [[read-error-span]].\n")
("set-port-buffering" . "(:ctime 1018387329 :cuser #f :mtime 1018387329 :muser #f)* [procedure] set-port-buffering ''port'' ''policy'' [''size'']\n\n[[Scsh]]: Sets port buffering policy.\n")
("remove-file" . "(:ctime 1018337850 :cuser #f :mtime 1099741272 :muser #f)* [procedure] remove-file ''string''\n\n[[STk]], [[STklos]]:\n\nThis is called [[delete-file]], [[unlink]] or [[sys-unlink]]\nin some implementations.\n")
("span!" . "(:ctime 1014870006 :cuser #f :mtime 1014870006 :muser #f)* [procedure] span! ''pred'' ''list''\n\n[[SRFI-1]]: linear-update variant of [[span]].\n")
("*load-pathname*" . "(:ctime 1015889364 :cuser #f :mtime 1015889364 :muser #f)* [variable] *load-pathname*\n\n[[SCM]]: keeps the pathname of the file currently being loaded.\n\nIn Gauche, the information can be obtained by\n  (port-name (current-load-port))\n\n")
("time-tai" . "(:ctime 1015208882 :cuser #f :mtime 1015208882 :muser #f)[[$$include time-duration]]\n")
("make-table-maker" . "(:ctime 1017984834 :cuser #f :mtime 1017984834 :muser #f)* [procedure] make-table-maker ''compare-proc'' ''hash-proc''\n\n[[Scheme48]]: creates a hash-table constructor with\nuser-specified comparison and hash procedures.\nSee also [[make-table]], [[Concept:HashTable]].\n")
("list->queue" . "(:ctime 1015071480 :cuser #f :mtime 1017980818 :muser #f)* [procedure] list->queue ''list''\n\n[[Chicken]], [[Scheme48]]: creates a queue from ''list''.  the queue shares the\nstructure of ''list''.  See also [[make-queue]].\n")
("fx>=?" . "(:ctime 1191225962 :cuser #f :mtime 1191225962 :muser #f)[[$$include fx=?]]\n")
("blob-s32-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144718958 :muser #f)* [procedure] blob-s32-ref ''endianness'' ''blob'' ''k''\n\n[[SRFI-74]]: equivalent to (blob-sint-ref 4 ''endianness'' ''blob'' ''k'').\n\nSee also [[blob-sint-ref]].\n")
("modified-julian-day->time-tai" . "(:ctime 1099301087 :cuser #f :mtime 1099301088 :muser #f)[[$$include modified-julian-day->date]]\n")
("process-error" . "(:ctime 1018342321 :cuser #f :mtime 1018342321 :muser #f)[[$$include process-pid]]\n")
("&condition" . "(:ctime 1099267327 :cuser #f :mtime 1099268029 :muser #f)* [condition-type] &condition\n\n[[SRFI-35]]: The root of the condition type.\n\nThe following chart is a condition hierarchy defined in SRFI so far\n([[SRFI-35]], [[SRFI-36]]).\n\n- [[&condition]]\n-- [[&message]]\n-- [[&serious]]\n--- [[&error]]\n---- [[&i/o-error]]\n----- [[&i/o-port-error]]\n------ [[&i/o-read-error]]\n------ [[&i/o-write-error]]\n------ [[&i/o-closed-error]]\n----- [[&i/o-filename-error]]\n------ [[&i/o-malformed-filename-error]]\n------ [[&i/o-file-protection-error]]\n------- [[&i/o-file-is-read-only-error]]\n------ [[&i/o-file-already-exists-error]]\n------ [[&i/o-no-such-file-error]]\n---- [[&read-error]]\n")
("file-separator" . "(:ctime 1099741907 :cuser #f :mtime 1099741907 :muser #f)* [procedure] file-separator\n\n[[STklos]]: returns OS path separator (e.g. #\\/ on Unix and #\\\\ on Windows).\n\nChicken has [[pathname-directory-separator]].\n")
("group-info-members" . "(:ctime 1018125311 :cuser #f :mtime 1018125311 :muser #f)[[$$include group-info?]]\n")
("reverse-list->vector" . "(:ctime 1099388985 :cuser #f :mtime 1099388986 :muser #f)* [procedure] reverse-list->vector ''list''\n\n[[SRFI-43]]: Like [[list->vector]], but puts elements in reverse order.\n")
("string->symbol" . "(:ctime 1014859118 :cuser #f :mtime 1191565354 :muser #f)* [procedure] string->symbol ''string''\n\n[[R5RS]], [[R6RS]]: Returns the symbol whose name is ''string''. \n\nIn R5RS, this is the way to create a case-senstive named symbols, for\n[[read]] folds the case of literal symbols.\n\nSee also [[symbol->string]].\n")
("SCM" . "(:ctime 1014942609 :cuser #f :mtime 1194061205 :muser #f)Aubrey Jaffer's Scheme implementation\n\nhttp://swiss.csail.mit.edu/~jaffer/SCM\n\n[[$$srfis 0 1 2 8 9 47 58 59 60 63 70]]\n----\nThe following list is based on the version 5d5 (February 20, 2002).\nSee also [[SLIB]].\n\n** Operational features\n[[*argv*]], [[*syntax-rules*]], [[*interactive*]],\n[[quit]], [[exit]], [[boot-tail]], [[program-arguments]],\n[[vms-debug]], [[ed]], [[trace]], [[untrace]], [[print]], [[print-args]],\n[[errobj]], [[errno]], [[perror]], [[warn]], [[error]], [[stack-trace]],\n[[abort]], [[restart]], [[exec-self]], [[verbose]], [[gc]], [[room]],\n[[*scm-version*]], [[execpath]], [[#!]], [[*script*]]\n\n** The Language\n[[try-load]], [[*load-pathname*]], [[line-number]], [[port-filename]],\n[[port-line]], [[port-column]], [[eval]], [[eval-string]], [[load-string]],\n[[vector-set-length!]], [[copy-tree]], [[@copy-tree]], [[acons]], [[terms]],\n[[list-file]]\n\n[[internal-time-units-per-second]], [[get-internal-run-time]], [[get-internal-real-time]],\n[[current-time]]\n\n[[ticks]], [[ticks-interrupt]], [[alarm]], [[multi-alarm]], [[virtual-alarm]],\n[[profile-alarm]], [[user-interrupt]], [[alarm-interrupt]], [[virtual-alarm-interrupt]],\n[[profile-alarm-interrupt]], [[out-of-storage]], [[could-not-open]],\n[[end-of-program]], [[hang-up]], [[arithmetic-error]], [[gc-hook]],\n[[add-finalizer]]\n\n[[make-exchanger]], [[make-arbiter]], [[try-arbiter]], [[release-arbiter]]\n\n[[open-file]], [[try-open-file]], [[open_read]], [[open_write]], [[open_both]],\n[[_ionbf]], [[_tracked]], [[_exclusive]], [[port-closed?]],\n[[port-type]], [[close-port]], [[current-error-port]], [[with-error-to-file]],\n[[with-input-from-port]], [[with-output-to-port]], [[with-error-to-port]],\n[[call-with-outputs]], [[char-ready?]], [[wait-for-input]], [[isatty?]],\n[[freshline]], [[open-ports]]\n\n[[try-load]], [[read-numbered]], [[integer->line-number]], [[line-number->integer]],\n[[line-number?]], [[*load-reader*]], [[*slib-load-reader*]]\n\n[[make-soft-port]]\n\n[[procedure-documentation]], [[comment]], [[#;]], [[#.]], [[#+]], [[#-]],\n[[#']], [[#|]], [[#\\]], [[defined?]], [[defvar]], [[defconst]], [[set!]],\n[[qase]]\n\n[[read:sharp]], [[read:sharp-char]], [[procedure->syntax]], [[procedure->macro]],\n[[procedure->memoizing-macro]], [[procedure->identifier-macro]], [[defsyntax]],\n[[@apply]]\n\n[[identifier?]], [[renamed-identifier]], [[identifier->symbol]],\n[[identifier-equal?]], [[@macroexpand1]], [[extended-environment]],\n[[syntax-quote]], [[the-macro]], [[renaming-transformer]]\n\n** Packages\n[[compile-file]], [[link-named-scm]]\n\n[[require]], [[usr:lib]], [[x:lib]], [[load]], [[dyn:link]], [[dyn:call]],\n[[dyn:main-call]], [[dyn:unlink]]\n\n[[dump]]\n\n[[most-positive-fixnum]], [[most-negative-fixnum]], [[$pi]], [[pi]],\n[[pi*]], [[pi/]], [[sinh]], [[cosh]], [[tanh]], [[asinh]], [[acosh]], [[atanh]],\n\n[[array?]], [[make-array]], [[array-ref]], [[array-in-bounds?]],\n[[array-set!]], [[make-shared-array]], [[transpose-array]], [[enclose-array]],\n[[array-shape]], [[array-dimensions]], [[array-rank]], [[array->list]],\n[[array-copy!]], [[serial-array-copy!]], [[array-fill!]], [[array-equal?]],\n[[array-contents]], [[array-map!]], [[serial-array-map!]], [[array-for-each]],\n[[array-index-map!]], [[scalar->array]], [[array-prototype]], [[list->uniform-array]],\n[[uniform-vector-fill!]], [[dimensions->uniform-array]], [[uniform-array-read!]],\n[[uniform-array-write]], [[logaref]], [[logaset!]], [[bit-count]], \n[[bit-position]], [[bit-invert!]], [[bit-set*!]], [[bit-count*]]\n\n[[record-printer-set!]]\n\n[[stat]], [[getpid]], [[file-position]], [[file-set-position]],\n[[try-create-file]], [[reopen-file]], [[duplicate-port]], [[redirect-port!]],\n[[opendir]], [[readdir]], [[rewinddir]], [[closedir]], [[directory-for-each]],\n[[mkdir]], [[rmdir]], [[chdir]], [[getcwd]], [[rename-file]], [[chmod]],\n[[utime]], [[umask]], [[fileno]], [[access]], [[execl]], [[execlp]],\n[[execv]], [[execvp]], [[putenv]]\n\n[[open-pipe]], [[open-input-pipe]], [[open-output-pipe]], [[broken-pipe]],\n[[close-port]], [[pipe]], [[fork]], [[getppid]], [[getlogin]],\n[[getuid]], [[getgid]], [[geteuid]], [[getegid]], [[setuid]], [[setgid]],\n[[seteuid]], [[setegid]], [[kill]], [[waitpid]], [[uname]],\n[[getpw]], [[setpwent]], [[getgr]], [[setgrent]], [[getgroups]],\n[[link]], [[chown]], [[ttyname]]\n\n[[symlink]], [[readlink]], [[lstat]], [[nice]], [[acct]], [[mknod]], [[sync]]\n\n[[regcomp]], [[regerror]], [[regexec]], [[regmatch?]], [[regsearch]], \n[[regsearchv]], [[regmatch]], [[regmatchv]], [[string-split]], \n[[string-edit]]\n\n[[default-input-port]], [[default-output-port]], [[make-edited-line-port]],\n[[line-editing]]\n\n[[initscr]], [[endwin]], [[clearok]], [[idlok]], [[leaveok]], [[scrollok]],\n[[nodelay]], [[cbreak]], [[nocbreak]], [[raw]], [[noraw]], [[echo]], [[noecho]],\n[[nl]], [[nonl]], [[resetty]], [[savetty]], [[newwin]], [[subwin]], [[close-port]],\n[[refresh]], [[force-output]], [[mvwin]], [[overlay]], [[overwrite]],[[touchwin]],\n[[touchline]], [[wmove]], [[display]], [[wadd]], [[werase]], [[wclear]],\n[[wclrtobot]], [[wclrtoeol]], [[wdelch]], [[wdeleteln]], \n[[winsch]], [[winsertln]], [[scroll]], [[read-char]], [[winch]],\n[[getyx]], [[wstandout]], [[wstandend]], [[box]], [[unctrl]]\n\n[[af_inet]], [[af_unix]], [[gethost]], [[sethostent]], [[getnet]],\n[[setnetent]], [[getproto]], [[setprotoent]], [[getserv]], [[setservent]],\n[[inet:address->string]], [[inet:string->address]], [[inet:network]],\n[[inet:local-network-address]], [[inet:make-address]], [[getsockname]],\n[[getpeername]], [[socket-name:family]], [[socket-name:port-number]],\n[[socket-name:address]], [[make-stream-socket]], [[make-stream-socketpair]],\n[[socket:shutdown]], [[socket:connect]], [[socket:bind]], [[socket:listen]],\n[[char-ready?]], [[socket:accept]], \n\n\n")
("make-ucs2-string" . "(:ctime 1039427722 :cuser #f :mtime 1039427722 :muser #f)* [procedure] make-ucs2-string ''len'' [''char'']\n\n[[Bigloo]]: make ucs2 string.  see [[ucs2-string?]].\n")
("waiter-prompt-string" . "(:ctime 1015024296 :cuser #f :mtime 1015024296 :muser #f)* [procedure] waiter-prompt-string [''newval'']\n\n[[ChezScheme]]: gets/sets prompt of repl.\n\nSee also [[new-cafe]]\n")
("char-set-xor!" . "(:ctime 1099288734 :cuser #f :mtime 1099288734 :muser #f)[[$$include char-set-xor]]\n")
("make-string-output-port" . "(:ctime 1017989133 :cuser #f :mtime 1017989133 :muser #f)[[$$include make-string-input-port]]\n")
("string-prefix?" . "(:ctime 1014893089 :cuser #f :mtime 1014893089 :muser #f)* [procedure] string-prefix? ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-prefix-length]], [[string-suffix?]]\n\n")
("hash-table?" . "(:ctime 1015071037 :cuser #f :mtime 1144493486 :muser #f)* [procedure] hash-table? ''obj''\n\n[[SRFI-69]]: A predicate to test whether a given object ''obj'' is a hash table.\nThe hash table type should be disjoint from all other types, if possible.\n\n[[Chicken]], [[STk]], [[STklos]], [[Gauche]], [[MzScheme]]: see [[make-hash-table]].\n\n[[Bigloo]]: Also has this, but deprecated it.  See [[hashtable?]].\n")
("resetty" . "(:ctime 1015877324 :cuser #f :mtime 1015877324 :muser #f)* [procedure] resetty\n* [procedure] savetty\n\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("stdio->stdports" . "(:ctime 1018382290 :cuser #f :mtime 1018382290 :muser #f)[[$$include stdports->stdio]]\n")
("f64vector->byte-vector" . "(:ctime 1015075647 :cuser #f :mtime 1015075647 :muser #f)[[$$include u8vector->byte-vector]]\n")
("display" . "(:ctime 1014847598 :cuser #f :mtime 1015882705 :muser #f)* [procedure] display ''obj'' [''port'']\n\n[[R5RS]]\n\nSee also [[write]].\n\n[[SCM]]'s display can take a curses window as a port.  see [[initscr]].\n")
("wclrtobot" . "(:ctime 1015882822 :cuser #f :mtime 1015882822 :muser #f)* [procedure] wclrtobot ''win''\n* [procedure] wclrtoeol ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("string<=?" . "(:ctime 1015063536 :cuser #f :mtime 1015063536 :muser #f)[[$$include string=?]]\n")
("define-integrable" . "(:ctime 1015044768 :cuser #f :mtime 1015044768 :muser #f)* [syntax] define-integrable ''name'' ''exp''\n* [syntax] define-integrable (''name'' ''formals'') ''body'' ...\n\n[[Chicken]]: synomym of [[define-inline]].\n")
("gcd" . "(:ctime 1014854185 :cuser #f :mtime 1191219675 :muser #f)* [procedure] gcd ''n1'' ...\n\n[[R5RS]], [[R6RS]]\n\nSee also [[lcm]].\n")
("flip" . "(:ctime 1015075334 :cuser #f :mtime 1015075334 :muser #f)* [procedure] flip ''proc''\n\n[[Chicken]]:\n (flip PROC) <=> (lambda (x y) (PROC y x))\n\n")
("sub1" . "(:ctime 1014954855 :cuser #f :mtime 1018692562 :muser #f)* [procedure] sub1 ''num''\n\n[[ChezScheme]], [[Chicken]], [[MzScheme]]\n\nSee also [[1-]], [[add1]]\n\n")
("string-concatenate-reverse" . "(:ctime 1014894599 :cuser #f :mtime 1014894599 :muser #f)* [procedure] string-concatenate-reverse ''string-list'' [''final-string'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-concatenate]], [[string-concatenate-reverse/shared]]\n")
("terminated-thread-exception?" . "(:ctime 1015927925 :cuser #f :mtime 1015927931 :muser #f)[[$$include join-timeout-exception?]]\n")
("call-with-string-io" . "(:ctime 1018084102 :cuser #f :mtime 1018084102 :muser #f)* [procedure] call-with-string-io ''string'' ''proc''\n\n[[Gauche]]: calls ''proc'' with two ports.  The first\none is an input string port from ''string'', and the\nsecond one is an output string port whose content\nat the time ''proc'' returns will be the result\nof call-with-string-io.\n\nSee also [[call-with-input-string]], [[call-with-output-string]],\n[[call-with-process-io]]\n")
("standard-input-port" . "(:ctime 1015806759 :cuser #f :mtime 1015806759 :muser #f)* [procedure] standard-input-port\n* [procedure] standard-output-port\n* [procedure] standard-error-port\n\n[[Gauche]]: returns ports associated to stdin, stdout, and stderr.\n")
("process?" . "(:ctime 1018342172 :cuser #f :mtime 1099737906 :muser #f)* [procedure] process? ''obj''\n\n[[STk]], [[STklos]], [[Gauche]]: see [[run-process]].\n")
("signal/term" . "(:ctime 1015076508 :cuser #f :mtime 1015076508 :muser #f)[[$$include signal/hup]]\n")
("<?" . "(:ctime 1144494246 :cuser #f :mtime 1144501829 :muser #f)[[$$include =?]]\n")
("SRFI-87" . "(:ctime 1161447437 :cuser #f :mtime 1191209172 :muser #f)SRFI 87: => in case clauses\n\nhttp://srfi.schemers.org/srfi-87/srfi-87.html\n\n[[$$srfi-implementors]]\n----\n\n[[case]]\n")
("blob-u32-native-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144719562 :muser #f)* [procedure] blob-u32-native-set! ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: Similar to (blob-sint-set! 4 (endianness native) ''blob'' ''k'' ''n''), but works at aligned indices: ''k'' must be a multiple of 4. It is an error to use this at non-aligned indices.\n\nSee also [[blob-uint-set!]] and [[endianness]].\n")
("get-internal-run-time" . "(:ctime 1038091940 :cuser #f :mtime 1038091940 :muser #f)* [procedure] get-internal-run-time\n\n[[SCM]]: returns run time of the process from\nunspecified start time, in the unit of [[internal-time-units-per-second]].\nSee also [[get-internal-real-time]].\n\nSee also [[SRFI-19]].\n")
("random-seed" . "(:ctime 1014954506 :cuser #f :mtime 1019619394 :muser #f)* [procedure] random-seed [''newval'']\n\n[[ChezScheme]]: sets/gets seed of the random number generator.\n\nSee also [[random]].\n\n* [procedure] random-seed ''k''\n\n[[MzScheme]]: sets random seed to ''k'', which must be\nan exact integer between 0 and 2^31-1, inclusive.\n\nOther implementations have [[randomize]] or [[set-random-seed!]].\n")
("thread?" . "(:ctime 1015927255 :cuser #f :mtime 1020749768 :muser #f)* [procedure] thread? ''obj''\n\n[[SRFI-18]], [[SRFI-21]]\n\nAlso in [[Scsh]], [[MzScheme]].\n\n")
("SRFI-116" . "(:ctime 1474475345 :cuser #f :mtime 1474475345 :muser #f)SRFI-116: Immutable List Library \n\nhttp://srfi.schemers.org/srfi-116/srfi-116.html\n\n[[$$srfi-implementors]]\n")
("share-array" . "(:ctime 1036934339 :cuser #f :mtime 1099397861 :muser #f)* [procedure] share-array ''array'' ''shape'' ''proc''\n\n[[SRFI-25]]: creates a new array that shares the\nbacking storage of ''array''.  ''proc'' is an affine-mapping\nprocedure.  See also [[make-array]].\n\nSRFI-47 and Scheme48 have [[make-shared-array]] which has slightly different API.\n")
("fxnegative?" . "(:ctime 1014951135 :cuser #f :mtime 1191226031 :muser #f)[[$$include fxpositive?]]\n")
("condition" . "(:ctime 1099267250 :cuser #f :mtime 1099267286 :muser #f)* [syntax] condition (''type'' (''field'' ''value'') ...) ...\n\n[[SRFI-35]]: A convenience macro to create a condition.\nSee [[make-condition]].\n\n (make-compound-condition\n   (make-condition ''type'' ' ''field'' ''value'' ...)\n   ...)\n\n")
("define-record-printer" . "(:ctime 1015045239 :cuser #f :mtime 1015045249 :muser #f)* [procedure] define-record-printer ''name'' ''procedure''\n* [procedure] define-record-printer (''name'' ''recordvar'' ''portvar'') ''body'' ...\n\n[[Chicken]]: defines a printer procedure of the named record.  See also [[define-record]].\n")
("define-const-structure" . "(:ctime 1015101544 :cuser #f :mtime 1015101544 :muser #f)* [syntax] define-const-structure (''id0'' ''id1'' ... ''idN'')\n\n[[Chicken]]: used in the Andrew Wright's pattern matching package.\nSee [[match]].  See also [[define-structure]].\n")
("visit" . "(:ctime 1014965400 :cuser #f :mtime 1014965400 :muser #f)* [procedure] visit ''filename''\n\n[[ChezScheme]]: loads ''filename'' but not execute; just recognizes\ncompile-time constructs.\n\nSee also [[load]]\n")
("fl>" . "(:ctime 1014952354 :cuser #f :mtime 1014952354 :muser #f)* [procedure] fl> ''flonum'' ...\n\n[[ChezScheme]]\n\nSee also [[flonum?]], [[>]], [[fx>]]\n")
("split-string" . "(:ctime 1018333534 :cuser #f :mtime 1099724847 :muser #f)* [procedure] split-string ''string'' ''delimiters''\n\n[[STk]]: ''delimiters'' is a string.  Splits ''string''\nby the charcters that appears in ''delimiters''.\n\nThis is renamed to [[string-split]] in STklos.\n\nSRFI-13 defines [[string-tokenize]] which is similar to\nthis.\n")
("Index:u" . "(:ctime 1014864880 :cuser #f :mtime 1015014778 :muser #f)[[$$index u]]\n\n")
("file-info-device" . "(:ctime 1040727298 :cuser #f :mtime 1040727298 :muser #f)[[$$include file-info-name]]\n")
("fluidset'" . "(:ctime 1152518355 :cuser #f :mtime 1152533952 :muser #f)* [magic form] fluidset' ''identifier'' ''form''\n[[RRS]]: assigns the value of ''form'' to the ''identifier''  in the current dynamic environment.\n\nSee also [[fluidbind]].\n")
("key-set!" . "(:ctime 1038030879 :cuser #f :mtime 1038030879 :muser #f)* [procedure] key-set! ''kv-list'' ''key'' ''value''\n\n[[STklos]]: returns a key-value list in which ''key''-''value'' association is added to the original ''kv-list''.\nThe original list may be modified.\nSee also [[key-get]], [[key-delete]], [[key-delete!]].\n")
("real-expt" . "(:ctime 1170264990 :cuser #f :mtime 1170268286 :muser #f)* real-expt ''x1'' ''x2''\n\n[[SRFI-94]]: returns ''x1'' raised to the power ''x2'' if that result is a real number; otherwise signals an error.\n\n(real-expt 0.0 ''x2'') returns 1.0 for ''x2'' equal to 0.0; returns 0.0 for positive real ''x2''; signals an error otherwise.\n")
("char-set-unfold" . "(:ctime 1039168926 :cuser #f :mtime 1039168926 :muser #f)* [procedure] char-set-unfold ''f'' ''p'' ''g'' ''seed'' [''base-cs'']\n* [procedure] char-set-unfold! ''f'' ''p'' ''g'' ''seed'' ''base-cs''\n\n[[SRFI-14]]: A fundamental character set generator.\nBetter explained by the following definitions.\n\n{{{\n(define (char-set-unfold p f g seed base-cs) \n  (char-set-unfold! p f g seed (char-set-copy base-cs)))\n\n(define (char-set-unfold! p f g seed base-cs)\n  (let lp ((seed seed) (cs base-cs))\n        (if (p seed) cs                                 ; P says we are done.\n            (lp (g seed)                                ; Loop on (G SEED).\n                (char-set-adjoin! cs (f seed))))))      ; Add (F SEED) to set.\n}}}\n\nSee also [[char-set-fold]].\n")
("while" . "(:ctime 1018333046 :cuser #f :mtime 1308106929 :muser #f)* [syntax] while ''test'' ''expr1'' ''expr2'' ...\n* [syntax] until ''test'' ''expr1'' ''expr2'' ...\n\n[[STk]], [[STklos]]: evaluates the expression(s) while/until ''test''\nevaluates true.\n\n* [syntax] while ''test'' => ''var'' ''expr1'' ''expr2'' ...\n* [syntax] while ''test'' ''guard'' => ''var'' ''expr1'' ''expr2'' ...\n* [syntax] until ''test'' ''guard'' => ''var'' ''expr1'' ''expr2'' ...\n\n[[Gauche]] supports some variations besides the basic syntax as [[STklos]].\n\n:while ''test'' => ''var'':\nBinds the result of ''test'' to ''var'' for each iteration\nand evaluates expressions as far as ''test'' evaluates to a true value.\n:while ''test'' ''guard'' => ''var'':\nEvaluates ''test'' and applies ''guard'' to the result, and repeat\nonly if ''guard'' returns a true value.  ''var'' is bound to the\nresult of ''test'.\n:until ''test'' ''guard'' => ''var'':\nEvaluates ''test'' and applies ''guard'' to the result, and repeat\nonly if ''guard'' returns #f.  ''var'' is bound to the\nresult of ''test'.\n\n* [syntax] while* ''test'' ''expr1'' ''expr2'' ...\n\n[[Chicken]]: Third-party library '''[http://wiki.call-cc.org/eggref/4/miscmacros eggs:miscmacros]''' supports the basic syntax as STklos, and anaphoric variation while*.\n:while* ''test'' ''expr'' ...:\nEvaluates ''expr'' ... with variable '''it''' bound to the evaluation of ''test''.\n")
("Mosh" . "(:ctime 1230189504 :cuser #f :mtime 1327513531 :muser #f)A Fast [[R6RS]] Scheme interpreter.\n\nhttp://code.google.com/p/mosh-scheme/\n----\n[[$$srfis 0 1 2 6 8 9 11 13 14 16 19 23 26 27 31 37 38 39 41 42 43 48 61 67 78 97 98]]\n\n")
("if<?" . "(:ctime 1144494246 :cuser #f :mtime 1144502874 :muser #f)[[$$include if=?]]\n")
("R6RS:CompatibilityNotes" . "(:ctime 1191567494 :cuser #f :mtime 1233284667 :muser #f)This space is for memorandum about the parts in R6RS which are incompatible to R5RS or existing SRFIs.  Intended to be a check list for implementors who wish to\nsupport compatibility mode, or a programmers who wish to write code that may work in R6RS and R5RS+SRFIs for the least effort.\n\n* Lexical syntax\n\n- [[#,]] - R6RS uses this for abbreviation of [[unsyntax]].  It conflicts\nto [[SRFI-10]].\n\n* Base library\n\n- [[string-for-each]] - conflicts to [[SRFI-13]] when more than one string is\ngiven (srfi-13 takes optional start and end arguments).  Though an implementation\nmay support both, switching by looking at the type of the optional arguments.\n\n- [[error]] - conflicts to [[SRFI-23]] by requiring the ''who'' argument\nas the first argument.  An implementation cannot support both [[error]]\nprocedures simultaneously, since if the first and second arguments are\nboth strings it cannot distinguish whether it is R6RS-call\n(error ''who'' ''message'') or SRFI-23-call (error ''message'' ''obj'').\n\n* Standard library\n\n- [[condition]] - conflicts to [[SRFI-35]]: R6RS defines this as a procedure,\nwhile SRFI-35 defines this as a macro that takes arguments in the following form:\n{{{\n  (condition (<condition-type1> (<field1> <exp1>) ...)\n             (<condition-type2> (<field2> <exp2>) ...) ...)\n}}}\nThe two versions can't be distinguished from the source.  Too bad.\n")
("letrec" . "(:ctime 1014855390 :cuser #f :mtime 1191209340 :muser #f)* [syntax] letrec ((''variable'' ''expression'') ...) ''body''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[let]], [[let*]], [[letrec*]].\n\n")
("substv" . "(:ctime 1014945139 :cuser #f :mtime 1014945139 :muser #f)* [procedure] substv ''new'' ''old'' ''tree''\n\n[[ChezScheme]]: traverses ''tree'', replacing all objects equivalent\n([[eqv?]]) to ''obj'' with the object ''new''.\n\nSee also [[substq]], [[subst]], [[substv!]]\n")
("find" . "(:ctime 1014869526 :cuser #f :mtime 1018072316 :muser #f)* [procedure] find ''pred'' ''clist''\n\n[[SRFI-1]]: Return the first element of ''clist'' \nthat satisfies predicate ''pred''; false if no element does. \n\nSee also [[find-tail]], [[any]].\n\n* [generic] find ''pred'' ''coll''\n\n[[Gauche]] extends this to take arbitrary collection\n(with gauche.collection module).\n")
("regexp-match" . "(:ctime 1099777743 :cuser #f :mtime 1099777743 :muser #f)* [procedure] regexp-match ''pattern'' ''str''\n* [procedure] regexp-match-positions ''pattern'' ''str''\n\n[[STklos]]: match regexp ''pattern'' to string ''str''.\n[[regexp-match]] returns a list of matched (sub)strings,\nand [[regexp-match-positions]] returns a list of lists of start and\nend positions.  See [[string->regexp]], [[Concept:RegularExpression]].\n\nThis feature is called [[rxmatch]], [[string-match]], etc. in other\nimplementations.\n")
("guard" . "(:ctime 1063320955 :cuser #f :mtime 1063320955 :muser #f)* [syntax] guard (''var'' ''clause1'' ''clause2'' ...) ''body'' ...\n\n[[SRFI-34]]: \nEach ''clause'' should have the same form as a [[cond]] clause.\n\nEvaluating a guard form evaluates ''body'' with an exception handler that binds\nthe raised object to ''var'' and within the scope of that binding evaluates the clauses as \nif they were the clauses of a cond expression. That implicit cond expression is evaluated \nwith the continuation and dynamic environment of the guard expression. \nIf every ''clause'''s test evaluates to false and there is no else clause, \nthen raise is re-invoked on the raised object within the dynamic environment of the \noriginal call to raise except that the current exception handler is that of the guard expression.\n\n  (guard (condition\n           ((assq 'a condition) => cdr)\n           ((assq 'b condition)))\n    (raise (list (cons 'a 42))))\n\nSee also [[with-exception-handler]], [[raise]].\n")
("string->number" . "(:ctime 1014857004 :cuser #f :mtime 1191313673 :muser #f)* [procedure] string->number ''string'' [''radix'']\n\n[[R5RS]], [[R6RS]].\n\nSee also [[number->string]].\n")
("sys-getgid" . "(:ctime 1038189964 :cuser #f :mtime 1038189964 :muser #f)* [procedure] sys-getgid\n* [procedure] sys-getegid\n\n[[Gauche]]: POSIX getgid() and getegid() interface.\nSee also [[sys-setgid]], [[Concept:UserGroup]]\n\n")
("make-shared-array" . "(:ctime 1017982016 :cuser #f :mtime 1099397885 :muser #f)* [procedure] make-shared-array ''array'' ''linear-map'' ''dimension0'' ...\n\n[[SRFI-47]], [[Scheme48]]: create a new array that shares the same storage\nof ''array''.  ''linear-map'' is a procedure that maps\nnew array's indices into a list of indices of ''array''.\nSee also [[make-array]].\n\nSRFI-25 has [[share-array]], which has slightly different API.\n\n")
("test-runner-xfail-count" . "(:ctime 1151136447 :cuser #f :mtime 1151145603 :muser #f)* [procedure] test-runner-xfail-count ''runner''\n\n[[SRFI-64]]: returns the number of tests that failed, and were expected to fail.\n")
(">=/>=?" . "(:ctime 1144494246 :cuser #f :mtime 1144503660 :muser #f)[[$$include </<?]]\n")
("Scheme48:ModuleSystem" . "(:ctime 1063413350 :cuser #f :mtime 1063413350 :muser #f)* Configuration Language\n\n{{{\n<configuration> \t-> <definition>*\n<definition> \t->  (define-structure <name> <interface> <clause>*)\n\t->  (define-structures ((<name> <interface>)*) <clause>*)\n\t->  (define-interface <name> <interface>)\n\t->  (define-syntax <name> <transformer-spec>)\n<clause> \t->  (open <structure>*)\n\t->  (access <name>*)\n\t->  (begin <program>)\n\t->  (files <filespec>*)\n\t->  (optimize <optimize-spec>*)\n\t->  (for-syntax <clause>*)\n<interface> \t->  (export <item>*)\n\t->  <name>\n\t->  (compound-interface <interface>*)\n<item> \t->  <name>\n\t->  (<name> <type>)\n\t->  ((<name>*) <type>)\n<structure> \t->  <name>\n\t->  (modify <structure> <modifier>*)\n\t->  (subset <structure> (<name>*))\n\t->  (with-prefix <structure> <name>)\n<modifier> \t->  (expose <name>*)\n\t->  (hide <name>*)\n\t->  (rename (<name>0 <name>1)*)\n\t->  (alias (<name>0 <name>1)*)\n\t->  (prefix <name>)\n}}}\n\n* See also\n\n[[Concept:Module]]\n\n[[define-structure]], [[define-structures]], [[define-interface]], [[define-syntax]],\n[[open]], [[access]], [[begin]], [[files]], [[optimize]], [[for-syntax]],\n[[export]], [[compound-interface]], [[modify]], [[subset]], [[with-prefix]],\n[[expose]], [[hide]], [[rename]], [[alias]], [[prefix]].\n")
("char-set:graphic" . "(:ctime 1018082669 :cuser #f :mtime 1018082669 :muser #f)[[$$include char-set:lower-case]]\n")
("au64" . "(:ctime 1099398093 :cuser #f :mtime 1099398093 :muser #f)[[$$include ac64]]\n")
("output-port-position" . "(:ctime 1039755886 :cuser #f :mtime 1039755886 :muser #f)[[$$include input-port-position]]\n")
("ascii->char" . "(:ctime 1017981352 :cuser #f :mtime 1017981352 :muser #f)[[$$include char->ascii]]\n")
("rxmatch-substring" . "(:ctime 1015899725 :cuser #f :mtime 1015899725 :muser #f)[[$$include rxmatch-start]]\n")
("pathname-replace-extension" . "(:ctime 1015100645 :cuser #f :mtime 1015100832 :muser #f)* [procedure] pathname-replace-extension ''pathname'' ''extension''\n\n[[Chicken]]: see also [[pathname-extension]], [[pathname-replace-file]],\n[[pathname-replace-directory]], [[pathname-strip-extension]]\n \n")
("regexp-replace-all" . "(:ctime 1015905291 :cuser #f :mtime 1015905291 :muser #f)[[$$include regexp-replace]]\n")
("real-asin" . "(:ctime 1170264990 :cuser #f :mtime 1170267490 :muser #f)* real-asin ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[asin]], but signals error if the argument is not real  or the result is not real.\n")
("read-string!/partial" . "(:ctime 1018387096 :cuser #f :mtime 1018387096 :muser #f)* [procedure] read-string!/partial ''str'' [[''fd/port'' ''start'' ''end'']\n\n[[Scsh]]: atomic best-effort/forward-progress version of\n[[read-string!]].  See also [[read-string/partial]].\n")
("open-output-virtual" . "(:ctime 1018334570 :cuser #f :mtime 1018334570 :muser #f)* [procedure] open-output-virtual ''wrtc'' ''wrts'' ''flush'' ''close''\n\n[[STk]]: creates a virtual (procedural) port.\nSee also [[open-input-virtual]].\n\nSome implementations have [[make-output-port]] \nto create customized output port.\n")
("ac64" . "(:ctime 1099398022 :cuser #f :mtime 1099398022 :muser #f)* [procedure] ac64 [''z'']\n* [procedure] ac32 [''z'']\n* [procedure] ar64 [''x'']\n* [procedure] ar32 [''x'']\n* [procedure] au64 [''n'']\n* [procedure] au32 [''n'']\n* [procedure] au16 [''n'']\n* [procedure] au8 [''n'']\n* [procedure] as64 [''n'']\n* [procedure] as32 [''n'']\n* [procedure] as16 [''n'']\n* [procedure] as8 [''n'']\n* [procedure] at1 [''bool'']\n\n[[SRFI-47]]: Returns an uniform array of designated type, to be used\nas a prototype of [[make-array]].\n")
("blob-uint-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144716894 :muser #f)* [procedure] blob-uint-ref ''size'' ''endianness'' ''blob'' ''k''\n\n[[SRFI-74]]: Returns the exact integer corresponding to the unsigned\nrepresentation of size ''size'' and specified by ''endianness'' at indices {k, ...,\nk + size - 1}.\n\nSee also [[endianness]].\n")
("write-to-string" . "(:ctime 1099727181 :cuser #f :mtime 1143091096 :muser #f)* [procedure] write-to-string ''obj'' [''writer'']\n\n[[Gauche]]: equivalent to\n{{{\n(with-output-to-string (lambda () (writer obj)))\n}}}\n\n* [procedure] write-to-string ''obj'' [''maxchars'']\n\n[[MIT-Scheme]]: when ''maxchars'' is given, the length of output\nis limited up to ''maxchars'' characters.\n")
("ucs2-alphabetic?" . "(:ctime 1039429451 :cuser #f :mtime 1039429451 :muser #f)* [procedure] ucs2-alphabetic? ''ucs2''\n* [procedure] ucs2-numeric? ''ucs2''\n* [procedure] ucs2-whitespace? ''ucs2''\n* [procedure] ucs2-upper-case? ''ucs2''\n* [procedure] ucs2-lower-case? ''ucs2''\n\n[[Bigloo]]: UCS2 counterparts of\n[[char-alphabetic?]], [[char-numeric?]],\n[[char-whitespace?]], [[char-upper-case?]], and\n[[char-lower-case?]].\n\nSee [[ucs2?]].\n")
("eval-syntax-expanders-when" . "(:ctime 1014966043 :cuser #f :mtime 1014966043 :muser #f)* [syntax] eval-syntax-expanders-when\n\n[[ChezScheme]]\n")
("SRFI-46" . "(:ctime 1122429162 :cuser #f :mtime 1145787239 :muser #f)SRFI-46: Basic Syntax-rules Extensions\n\nhttp://srfi.schemers.org/srfi-46/srfi-46.html\n\n[[$$srfi-implementors]]\n")
("subset-mode" . "(:ctime 1015030154 :cuser #f :mtime 1015030154 :muser #f)* [procedure] subset-mode [''newval'']\n\n[[ChezScheme]]\n")
("length+" . "(:ctime 1014864164 :cuser #f :mtime 1014864164 :muser #f)* [procedure] length+ ''clist''\n\n[[SRFI-1]]: returns the length of list ''clist''.\nIf ''clist'' is circular, returns #f (while R5RS [[length]]\nmay diverge in such a case).\n")
("set-port-output-size!" . "(:ctime 1014956625 :cuser #f :mtime 1014956625 :muser #f)* [procedure] set-port-output-size! ''port'' ''n''\n\n[[ChezScheme]]\n\nSee also [[port-output-size]]\n")
("check" . "(:ctime 1144485145 :cuser #f :mtime 1144491404 :muser #f)* [syntax] check ''expr'' (=> ''equal'') ''expected'')\n* [syntax] check ''expr'' => ''expected'')\n\n[[SRFI-78]]: evaluates ''expr'' and compares the value to the value of\n''expected'' using the predicate ''equal'', which is [[equal?]] when omitted.\nThen a report is printed according to the current mode setting\n(see [[check-set-mode!]])\nand the outcome is recorded in a global state to be used in [[check-report]].\nThe precise order of evaluation is that first ''equal''\nand ''expected'' are evaluated (in unspecified order) and then ''expr''\nis evaluated.\n")
("make-record-type" . "(:ctime 1014947730 :cuser #f :mtime 1017982460 :muser #f)* [procedure] make-record-type ''type-name'' ''fields'' [''print-method'']\n\n[[ChezScheme]]: procedural interface for record.  Creates a\nrecord type descriptor.\nSee [[define-record]].\n\nSee also \n[[record-type-descriptor?]],\n[[record-constructor]], [[record-predicate]], [[record-field-accessor]],\n[[record-field-accessible?]], [[record-field-mutator]],\n[[record-field-mutable?]], [[record-type-name]],\n[[record-type-field-names]], [[record?]], [[record-type-descriptor]],\n[[record-reader]]\n\n* [procedure] make-record-type ''type-name'' ''field-names''\n\n[[SLIB]], [[Scheme48]]: creates a record type descriptor.  Provides similar\ninterface to Chez's.\n\nSee also [[record-constructor]], [[record-predicate]], \n[[record-accessor]], [[record-modifier]], and [[record-printer-set!]].\n\n")
("echo" . "(:ctime 1015877260 :cuser #f :mtime 1015877260 :muser #f)* [procedure] echo\n* [procedure] noecho\n\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("pathname-extension-separator" . "(:ctime 1015051173 :cuser #f :mtime 1015051173 :muser #f)* [variable] pathname-extension-separator\n\n[[Chicken]]\n")
("port-filename" . "(:ctime 1015889447 :cuser #f :mtime 1099726909 :muser #f)* [procedure] port-filename ''port''\n\n[[SCM]]: returns the filename associated with ''port''.  If ''port'' is not a\nfile port, the result is unspecified.\n\nSome implementations have [[port-name]] which does the similar thing.\nSTklos has [[port-file-name]].\nBigloo has [[input-port-name]].\n")
("take-while" . "(:ctime 1014869749 :cuser #f :mtime 1014869749 :muser #f)* [procedure] take-while ''pred'' ''clist''\n\n[[SRFI-1]]: Returns the longest initial prefix of ''clist'' \nwhose elements all satisfy the predicate ''pred''. \n\nSee also [[take-while!]], [[drop-while]], [[span]].\n")
("test-on-group-begin-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151083735 :muser #f)* [procedure] test-on-group-begin-simple ''runner'' ''suite-name'' ''count''\n\n[[SRFI-64]]: (test-runner-on-group-begin (test-runner-simple)).\n\nSee also [[test-runner-simple]] and [[test-runner-on-group-begin]].\n")
("group-id->group-info" . "(:ctime 1018125053 :cuser #f :mtime 1018125053 :muser #f)* [procedure] group-id->group-info\n* [procedure] name->group-info\n\n[[Scheme48]]: obtain group information.\nSee [[Concept:UserGroup]], [[integer->group-id]].\n")
("mutex-specific" . "(:ctime 1015927539 :cuser #f :mtime 1015963610 :muser #f)* [procedure] mutex-specific ''mutex''\n* [procedure] mutex-specific-set! ''mutex'' ''obj''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("real-sin" . "(:ctime 1170264990 :cuser #f :mtime 1170267391 :muser #f)* real-sin ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[sin]], but signals error if the argument is not real  or the result is not real.\n")
("sys-getcwd" . "(:ctime 1018339633 :cuser #f :mtime 1018339633 :muser #f)* [procedure] sys-getcwd\n\n[[Gauche]]: getcwd.  To change cwd, use [[sys-chdir]].\n\nThis is called [[getcwd]] or [[current-directory]]\nin some implementations.\n")
("unwrap-syntax" . "(:ctime 1015805116 :cuser #f :mtime 1015805116 :muser #f)* [procedure] unwrap-syntax ''obj''\n\n[[Gauche]]: remove syntactic structures in ''obj''; used to print macro expanded\nform.\n")
("char-set-delete" . "(:ctime 1099288220 :cuser #f :mtime 1099288220 :muser #f)* [procedure] char-set-delete ''cset'' ''char1'' ...\n* [procedure] char-set-delete! ''cset'' ''char1'' ...\n\n[[SRFI-14]]: Returns a character set that contains all characters\nin ''cset'' except the characters given as ''char1'' ....\n[[char-set-delete]] always creates a new character set.\n[[char-set-delete!]] may modify ''cset''.\n\nSee also [[char-set-adjoin]], [[char-set-adjoin!]].\n")
("i/o-read-error?" . "(:ctime 1099273432 :cuser #f :mtime 1099273432 :muser #f)* [procedure] i/o-read-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-read-error]].\n")
("random-source-state-ref" . "(:ctime 1038273262 :cuser #f :mtime 1038273262 :muser #f)* [procedure] random-source-state-ref ''source''\n\n[[SRFI-27]]: returns a opaque state object that\nrepresents the current state of the random source ''source''.\nThe state can be reinstalled by [[random-source-state-set!]].\n")
("is-a?" . "(:ctime 1201752467 :cuser #f :mtime 1201752467 :muser #f)* [procedure] is-a? ''obj'' ''class''\n\n[[Gauche]]: Test if ''obj'' is an instance of ''class''.\n\nSee also: [[class-of]].\n")
("char-ci>=?" . "(:ctime 1015063427 :cuser #f :mtime 1015063427 :muser #f)[[$$include char-ci=?]]\n")
("ucs2-string?" . "(:ctime 1039427611 :cuser #f :mtime 1039428081 :muser #f)* [procedure] ucs2-string? ''obj''\n\n[[Bigloo]]: true if ''obj'' is a ucs2 string.\n\nBigloo has distinct types for ucs2 and ascii (byte) strings.\nUcs2 string can't be read.  But utf8 string can be read\nwith syntax #u\"...\" (see [[#u]]),\nand can be converted to ucs2 string or vice versa\n(see [[ucs2-string->utf8-string]], [[utf8-string->ucs2-string]]).\n\nUCS2 string has specialized operations reflecting standard\nstring operations: [[make-ucs2-string]], [[ucs2-string]],\n[[ucs2-string-length]], [[ucs2-string-ref]],\n[[ucs2-string-set!]], [[ucs2-string=?]], [[ucs2-string-ci=?]],\n[[ucs2-string<?]], [[ucs2-string-ci<?]], [[ucs2-string<=?]],\n[[ucs2-string-ci<=?]], [[ucs2-string>?]], \n[[ucs2-string-ci>?]], [[ucs2-string>=?]],\n[[ucs2-string-ci>=?]],\n[[subucs2-string]], [[ucs2-string-append]],\n[[ucs2-string->list]], [[list->ucs2-string]],\n[[ucs2-string-copy]], [[ucs2-string-fill!]],\n[[ucs2-string-downcase]], [[ucs2-string-downcase!]],\n[[ucs2-string-upcase]], [[ucs2-string-upcase!]].\n\nSee also [[ucs2?]] for ucs2 character routines.\n\n\n\n")
("macro-expand" . "(:ctime 1018336924 :cuser #f :mtime 1099722751 :muser #f)* [procedure] macro-expand ''form''\n* [procedure] macro-expand-1 ''form''\n\n[[STk]], [[STklos]]: expands a macro in ''form''.  See also [[macro]].\n\nThese are called [[macroexpand]] and [[macroexpand-1]]\nin some implementations.\n")
("date->time-utc" . "(:ctime 1099300880 :cuser #f :mtime 1099300880 :muser #f)[[$$include date->julian-day]]\n")
("SRFI-9" . "(:ctime 1014882852 :cuser #f :mtime 1122428577 :muser #f)SRFI-9: Defining Record Types\n\nhttp://srfi.schemers.org/srfi-9/srfi-9.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[define-record-type]]\n\n")
("map-file-to-memory" . "(:ctime 1015200060 :cuser #f :mtime 1015200060 :muser #f)* [procedure] map-file-to-memory ''address'' ''len'' ''protection'' ''flag'' ''fileno'' [''offset'']\n* [procedure] unmap-file-from-memory ''mmap'' [''len'']\n\n[[Chicken]]: mmap and munmap interface.\n")
("SRFI-111" . "(:ctime 1381734976 :cuser #f :mtime 1381734976 :muser #f)SRFI-111: SRFI Libraries\n\nhttp://srfi.schemers.org/srfi-111/srfi-111.html\n\n[[$$srfi-implementors]]\n")
("basename" . "(:ctime 1018337613 :cuser #f :mtime 1018337613 :muser #f)[[$$include dirname]]\n")
("implementation-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074714 :muser #f)* [procedure] implementation-vicinity\n\n[[SRFI-59]]: Returns the vicinity of the underlying Scheme implementation.\n")
("symbol-value*" . "(:ctime 1099723034 :cuser #f :mtime 1099723034 :muser #f)[[$$include symbol-value]]\n")
("process-wait" . "(:ctime 1015185358 :cuser #f :mtime 1099737957 :muser #f)* [procedure] process-wait [''pid'' ''nohang'']\n\n[[Chicken]]: wait() or waitpid().  See [[process-fork]], [[process-run]].\n\n* [procedure] process-wait ''process''\n\n[[STk]], [[STklos]], [[Gauche]]: wait termination of the\nchild process returned form [[run-process]].\n\n[[Gauche]] also has the direct interface of\nwait() and waitpid() by [[sys-wait]] and [[sys-waitpid]].\n")
("process-alive?" . "(:ctime 1018342194 :cuser #f :mtime 1099737919 :muser #f)* [procedure] process-alive? ''obj''\n\n[[STk]], [[STklos]], [[Gauche]]: see [[run-process]]\n")
("i/o-filename-error?" . "(:ctime 1099273476 :cuser #f :mtime 1099273476 :muser #f)* [procedure] i/o-filename-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-filename-error]].\n")
("make-string" . "(:ctime 1014856229 :cuser #f :mtime 1191566612 :muser #f)* [procedure] make-string ''k'' [''char'']\n\n[[R5RS]], [[R6RS]]: Make a string of length ''k'', initialized by ''char''.\n\nSee also [[string]].\n")
("getpid" . "(:ctime 1018339922 :cuser #f :mtime 1099743481 :muser #f)* [procedure] getpid\n\n[[SCM]], [[STk]], [[STklos]]: getpid.\nSee [[Concept:Process]].\n\nOther implementations call this\n[[current-process-id]], [[sys-getpid]], [[get-process-id]].\n")
("test-runner-on-test-begin!" . "(:ctime 1151049296 :cuser #f :mtime 1151083207 :muser #f)[[$$include test-runner-on-test-begin]]\n")
("hashtable-ref" . "(:ctime 1191359782 :cuser #f :mtime 1191359782 :muser #f)* [procedure] hashtable-ref ''hashtable'' ''key'' ''default''\n\n[[R6RS]]: Returns the value associated to the ''key'' in ''hashtable''.\nIf there's no entry for ''key'', ''default'' is returned.\n\nSee also [[Concept:HashTable]].\n\nCuriously, R6RS makes ''default'' argument mandatory, while many other existing\nimplementations make it optional or lack it.\nSee [[hash-table-ref]], [[hash-table-get]], [[hashtable-get]], [[table-ref]] for these variations.  (IMHO, it is wise for R6RS to choose the name that doesn't\nconflict those existing names --shiro).\n")
("export" . "(:ctime 1014928045 :cuser #f :mtime 1063413445 :muser #f)* [syntax] export ''variable'' ...\n\n[[STk]], [[STklos]], [[Guile]], [[Gauche]]:\nExports bindings of ''variables'' in the current module\nto be visible from other modules that import the current module.\n\n[[Chicken]]: the same semantics, but can only be used inside clauses of\n[[define-module]].\n\nSee also [[define-module]], [[import]], [[export-all]].\n\n[[Scheme48]] uses ''export'' in its configuration language.  See [[Scheme48:ModuleSystem]].\n")
("file-modification-time" . "(:ctime 1015184857 :cuser #f :mtime 1023696807 :muser #f)* [procedure] file-modification-time ''filename''\n\n[[Bigloo]], [[Chicken]]: returns the last modification time of ''filename''.\nSee [[Concept:FileSystem]].\n\n")
("ucs2->integer" . "(:ctime 1039429760 :cuser #f :mtime 1039429760 :muser #f)* [procedure] ucs2->integer ''ucs2''\n* [procedure] integer->ucs2 ''integer''\n\n[[Bigloo]]: UCS2 counterparts of [[char->integer]] and\n[[integer->char]].  See [[ucs2?]].\n\nNote: Gauche has [[char->ucs]] and [[ucs->char]],\nwhich corresponds to Bigloo's [[ucs2->integer]] and\n[[integer->ucs2]].  (Bigloo uses ''ucs2'' as ''UCS2 character'', while Gauche uses ''ucs'' as\n''UCS2 codepoint'', hence these confusing names.\nIn Gauche there's no distinction\nbetween ascii characters and wide (multibyte) characters.).\n")
("current-process-id" . "(:ctime 1015184942 :cuser #f :mtime 1015284759 :muser #f)* [procedure] current-process-id\n* [procedure] parent-process-id\n\n[[Chicken]]: POSIX getpid() and getppid().\n\nScheme48 has [[get-process-id]] and [[get-parent-process-id]],\nwhich return ''process-id'' object rather than an integer process id.\n\nGauche calls them [[sys-getpid]] and [[sys-getppid]].\n")
("exec" . "(:ctime 1015285291 :cuser #f :mtime 1099773098 :muser #f)* [procedure] exec ''program-name'' ''arg1'' ...  \n* [procedure] exec-with-environment ''program-name'' ''env'' ''arg1'' ...\n* [procedure] exec-file ''filename'' ''arg1'' ...\n* [procedure] exec-file-with-environment ''filename'' ''env'' ''arg1'' ...\n* [procedure] exec-with-alias ''name'' ''lookup?'' ''maybe-env'' ''arguments''\n\n[[Scheme48]]: Exec family.   Exec and exec-with-environment use\nsearch path (so they're like POSIX execlp()), while exec-file and\nexec-file-with-envionment use absolute path to the executable\n(so they're like POSIX execl()).  ''program-name'' or ''filename''\nis used as argv[0], except ''exec-with-alias''.\n\nSee also [[fork]], [[Concept:Process]].\n\nNames in other implementations: [[process-execute]], [[sys-exec]],\n[[posix-exec]], etc.\n\n* [procedure] exec ''string''\n\n[[STk]], [[STklos]]: STk's exec is not the same as exec(2).\nIt executes the specified command, redirecting its\noutput to a string, and returns it.\n\nTo get exec(2) behavior in STk, use [[posix-exec]].\n\nFor STklos, see also [[exec-list]].\n\nGauche has similar function with the name\n[[process-output->string]].\n")
("write-byte" . "(:ctime 1038882528 :cuser #f :mtime 1038882528 :muser #f)* [procedure] write-byte ''byte'' [''port'']\n\n[[Gauche]]: write one byte ''byte'' to ''port''.\nSee also [[write-block]].\n\n")
("errno-error" . "(:ctime 1036969741 :cuser #f :mtime 1036969741 :muser #f)* [procedure] errno-error ''errno'' ''syscall'' . ''data''\n\n[[Scsh]]: raises an error with unix error number ''errno''.\nOther arguments are put in the exception packet.\nSee also [[with-errno-handler]], [[with-errno-handler*]],\n[[error]].\n")
("take!" . "(:ctime 1014863539 :cuser #f :mtime 1014863539 :muser #f)* [procedure] take! ''list'' ''k''\n\n[[SRFI-1]]: linear update variant of [[take]].\n\nSee also [[take]].\n")
("real?" . "(:ctime 1014854780 :cuser #f :mtime 1191210873 :muser #f)* [procedure] real? ''obj''\n\n[[R5RS]], [[R6RS]]\n\nNote: in R6RS, (real? +inf.0), (real? -inf.0) and (real? +nan.0) are all #t.\n\nSee also [[number?]], [[complex?]], [[rational?]], [[integer?]].\n")
("flonum?" . "(:ctime 1014952069 :cuser #f :mtime 1191227864 :muser #f)* [procedure] flonum? ''obj''\n\n[[R6RS]], [[ChezScheme]], [[Chicken]], [[Bigloo]], [[Gauche]]:\nReturns #t iff ''obj'' is a flonum.\n\nSee also [[fixnum?]], [[bignum?]], [[ratnum?]], [[cflonum?]].\n\nDifferent implementaions provide different set of flonum-specific\noperations:\n\n:[[R6RS]]:\n[[real->flonum]], \n[[fl=?]], [[fl<?]], [[fl>?]], [[fl<=?]], [[fl>=?]],\n[[flinteger?]], [[flzero?]], [[flpositive?]], [[flnegative?]], [[flodd?]],\n[[fleven?]], [[flfinite?]], [[flinfinite?]], [[flnan?]],\n[[flmax]], [[flmin]], [[fl+]], [[fl*]], [[fl-]], [[fl/]], [[flabs]],\n[[fldiv-and-mod]], [[fldiv]], [[flmod]], [[fldiv0-and-mod0]],\n[[fldiv0]], [[flmod0]], [[flnumerator]], [[fldenominator]],\n[[flfloor]], [[flceiling]], [[fltruncate]], [[flround]],\n[[flexp]], [[fllog]], [[flsin]], [[flcos]], [[fltan]], [[flasin]],\n[[flacos]], [[flatan]], [[flsqrt]], [[flexpt]], \n[[&no-infinities]], [[make-no-infinities-violation]],\n[[no-infinities-violation?]], [[&no-nans]], [[make-no-nans-violation]],\n[[no-nans-violation?]], [[fixnum->flonum]]\n:[[ChezScheme]]:\n[[fl=]], [[fl<]], [[fl<=]], [[fl>]], \n[[fl>=]], [[fl+]], [[fl-]], [[fl*]], [[fl/]],\n[[flabs]], [[decode-float]], [[fllp]], \n[[flonum->fixnum]].\n:[[Chicken]]:\n[[fp=]], [[fp<]], [[fp<=]], [[fp>]], \n[[fp>=]], [[fp+]], [[fp-]], [[fp*]], [[fp/]],\n[[fpneg]], [[fpmin]], [[fpmax]]\n:[[Bigloo]]:\n[[=fl]], [[>fl]], [[<fl]],\n[[>=fl]], [[<=fl]], [[+fl]], [[*fl]], [[-fl]], [[/fl]],\n[[negfl]].\n:[[Gauche]]:\n\n")
("output-obj" . "(:ctime 1063240586 :cuser #f :mtime 1063240586 :muser #f)[[$$include input-obj]]\n")
("char-alphabetic?" . "(:ctime 1014839255 :cuser #f :mtime 1014839255 :muser #f)* [procedure] char-alphabetic? ''char''\n\n[[R5RS]]\n")
(">?" . "(:ctime 1144494246 :cuser #f :mtime 1144501849 :muser #f)[[$$include =?]]\n")
("current-load-next" . "(:ctime 1015807085 :cuser #f :mtime 1015807100 :muser #f)[[$$include current-load-port]]\n")
("SRFI-97" . "(:ctime 1327513290 :cuser #f :mtime 1327513290 :muser #f)SRFI-97: SRFI Libraries\n\nhttp://srfi.schemers.org/srfi-97/srfi-97.html\n\n[[$$srfi-implementors]]\n\n----\n\nThis SRFI only specifies a naming convention. \n")
("record-type-name" . "(:ctime 1014948622 :cuser #f :mtime 1014948622 :muser #f)* [procedure] record-type-name ''rtd''\n\n[[ChezScheme]]\n\nSee also [[make-record-type]], [[define-record]]\n")
("datum->syntax-object" . "(:ctime 1014963092 :cuser #f :mtime 1014963092 :muser #f)* [procedure] datum->syntax-object ''template-identifier'' ''obj''\n\n[[ChezScheme]]\n\nSee [[syntax-case]], [[syntax-object->datum]]\n")
("test-runner-on-group-begin!" . "(:ctime 1151049296 :cuser #f :mtime 1151083234 :muser #f)[[$$include test-runner-on-group-begin]]\n")
("read-error-line" . "(:ctime 1099273921 :cuser #f :mtime 1099273933 :muser #f)[[$$include read-error?]]\n")
("sort" . "(:ctime 1014942447 :cuser #f :mtime 1099725200 :muser #f)Sorting feature comes with various APIs.\nSee ''sorting'' entry of [[SLIB]] manual for discussion.\n\n* [procedure] sort ''sequence'' ''predicate''\n\n[[SLIB]], [[Chicken]]: ''sequence'' may be a list or a vector.  Expects ''predicate'' \nto behave like <.   Stable.\n\n[[Bigloo]]: ''sequence'' may be a list or a vector.\nExpects ''predicate'' to behave like <.\nThe document doesn't mention about stability.\n\n[[STk]], [[STklos]]: ''sequence'' may be a list or a vector.  Expects ''predicate'' \nto behave like <.   Stable.  Doesn't have sort!, merge, merge!.\n\n* [procedure] sort ''sequence'' [''predicate'']\n\n[[Gauche]]: ''sequence'' may be a list or a vector.\nExpects ''predicate'' to behave like <.  Predicate\ncan be omitted.  Unstable.\n\n\n* [procedure] sort ''predicate'' ''sequence''\n\n[[ChezScheme]]: ''sequence'' must be a list.  Expects ''predicate''\nto behaves like <.\n\nSee also [[sort!]], [[merge]]\n")
("sync-file-system" . "(:ctime 1023685510 :cuser #f :mtime 1023685510 :muser #f)[[$$include sync-file]]\n")
("get-keyword" . "(:ctime 1015051668 :cuser #f :mtime 1038030717 :muser #f)* [procedure] get-keyword ''keyword'' ''arglist'' [''thunk'']\n\n[[Chicken]]: searches ''arglist'' for ''keyword'' and returns\nthe corresponding value.  If ''keyword'' is not found, \ncall ''thunk'' and uses its return value, or #f if ''thunk''\nis not provided.\n\n* [procedure] get-keyword ''keyword'' ''arglist'' [''default'']\n\n[[STk]], [[Gauche]]: searches ''arglist'' for ''keyword'' and returns\nthe corresponding value.  If ''keyword'' is not found, ''default''\nis returned if provided, otherwise signals an error.\n\nGauche's [[get-keyword*]] allows not to evaluate ''default''\nunless necessary.\n\nSTklos has [[key-get]], with different argument order.\n\nSee also [[let-keywords]], [[let-keywords*]].\n\n")
("thread-specific-set!" . "(:ctime 1015927336 :cuser #f :mtime 1015927336 :muser #f)[[$$include thread-specific]]\n")
("byte-vector->f32vector" . "(:ctime 1015075817 :cuser #f :mtime 1015075817 :muser #f)[[$$include byte-vector->u8vector]]\n")
("byte-vector-length" . "(:ctime 1015275602 :cuser #f :mtime 1017981592 :muser #f)* [procedure] byte-vector-length ''byte-vector''\n\n[[Chicken]], [[Scheme48]]: length of the byte vector.  See [[byte-vector]].\n")
("last-pair" . "(:ctime 1014864047 :cuser #f :mtime 1152528764 :muser #f)* [procedure] last-pair ''pair''\n\n[[SRFI-1]]:  returns the last pair in the non-empty, finite\nlist ''pair''. \n\nAlso in [[RRRS]], [[R3RS]], [[ChezScheme]], [[Gauche]], [[STk]], [[STklos]], [[Bigloo]], [[SLIB]]\n\nSee also [[last]].\n")
(":vector" . "(:ctime 1144527545 :cuser #f :mtime 1144537422 :muser #f)[[$$include :list]]\n")
("pair-compare-cdr" . "(:ctime 1144494246 :cuser #f :mtime 1144500114 :muser #f)* [procedure] pair-compare-cdr ''compare''\n[[SRFI-67]]: Construct a compare procedure on pairs which only uses the cdr, and ignores the other.\n")
("time-tai->time-utc!" . "(:ctime 1099301435 :cuser #f :mtime 1099301436 :muser #f)[[$$include time-tai->date]]\n")
("circular-list" . "(:ctime 1014862010 :cuser #f :mtime 1014862010 :muser #f)* [procedure] circular-list ''elt1'' ''elt2'' ...\n\n[[SRFI-1]]: Constructs a circular list of the elements. \n")
("cflonum?" . "(:ctime 1014952970 :cuser #f :mtime 1014952970 :muser #f)* [procedure] cflonum? ''obj''\n\n[[ChezScheme]]: Chez provides predicate to inspect internal\nrepresentation of numbers, and procedures that work specifically\nfor one type of representation.\n\nFor cflonums (inexact complexnums), such operations are:\n[[fl-make-rectangular]], [[cfl-real-part]], [[cfl-imag-part]],\n[[cfl=]], [[cfl+]], [[cfl-]], [[cfl*]], [[cfl/]], \n[[cfl-conjugate]], [[cfl-magnitude-squared]].\n\nSee also [[fixnum?]], [[bignum?]], [[ratnum?]], [[flonum?]].\n")
("unfold-right" . "(:ctime 1014867936 :cuser #f :mtime 1014867936 :muser #f)* [procedure] unfold-right ''p'' ''f'' ''g'' ''seed'' [''tail'']\n\n[[SRFI-1]]:\n\n    (let lp ((seed seed) (lis tail))\n      (if (p seed) lis\n        (lp (g seed)\n          (cons (f seed) lis))))\n\nSee also [[unfold]], [[fold]].\n")
("atom?" . "(:ctime 1014941921 :cuser #f :mtime 1014941921 :muser #f)* [procedure] atom? ''obj''\n\n[[ChezScheme]]: == (lambda (x) (not (pair? x)))\n\nSee also [[pair?]].\n")
("warn" . "(:ctime 1015883846 :cuser #f :mtime 1015883846 :muser #f)* [procedure] warn ''arg1'' ''arg2'' ''arg3'' ...\n\n[[SCM]]: see also [[error]].\n")
("pattern->regexp" . "(:ctime 1015102234 :cuser #f :mtime 1015102258 :muser #f)* [procedure] pattern->regexp ''pattern''\n\n[[Chicken]]: converts glob-like ''pattern'' into regular expression string.\n\nSee [[Concept:RegularExpression]]\n\n")
("call-with-current-continuation" . "(:ctime 1014839006 :cuser #f :mtime 1191663421 :muser #f)* [procedure] call-with-current-continuation ''proc''\n\n[[R5RS]], [[R6RS]]: Calls ''proc'' with the current continuation.\n\nR6RS formally adopts the abbreviated name [[call/cc]] as well.\n\n")
("call-with-input-string" . "(:ctime 1015070361 :cuser #f :mtime 1099726035 :muser #f)* [procedure] call-with-input-string ''string'' ''proc''\n* [procedure] call-with-output-string ''proc''\n\n[[Chicken]], [[Gauche]], [[STk]]. [[STklos]]\n\nSee also [[open-input-string]], [[open-output-string]],\n[[with-input-from-string]], [[with-output-to-string]].\n\nCall-with-output-string is called\n[[call-with-string-output-port]] in some implementations.\n")
("fp+" . "(:ctime 1191226905 :cuser #f :mtime 1191226906 :muser #f)* [procedure] fp+ ''flonum1'' ''flonum2''\n* [procedure] fp- ''flonum1'' ''flonum2''\n* [procedure] fp* ''flonum1'' ''flonum2''\n* [procedure] fp/ ''flonum1'' ''flonum2''\n\n[[Chicken]]: flonum-specific arithmetics.  See [[flonum?]] for\nother flonum operations.\n\nR6RS has [[fl+]] etc.\n\n")
("cxr" . "(:ctime 1170794282 :cuser #f :mtime 1170797626 :muser #f)* [notation] cxr refers to combinations of [[car]] and [[cdr]]\n\n[[R4RS]] and [[R5RS]] stipulate that implementations should support combinations of up to four a's and d's\n\ne.g.: (caddr obj) => (car (cdr (cdr obj)))\n\nSee also: [[car]], [[cdr]].\n")
("Index:l" . "(:ctime 1014842974 :cuser #f :mtime 1015014600 :muser #f)[[$$index l]]\n\n")
("hashtable-put!" . "(:ctime 1046487928 :cuser #f :mtime 1046488009 :muser #f)* [procedure] hashtable-put! ''table'' ''key'' ''obj''\n\n[[Bigloo]]: puts ''obj'' in a hash table ''table'' with ''key''.\nSee [[make-hashtable]], [[Concept:HashTable]].\n\nOther implementaions call this [[hash-table-put!]], \n[[hash-table-set!]] etc.\n\n\n\n")
("copy-vector" . "(:ctime 1039430348 :cuser #f :mtime 1039430348 :muser #f)* [procedure] copy-vector ''vector'' ''len''\n\n[[Bigloo]]: creates a new vector of length ''len'' and\nfills the first ''len'' elements with the content\nof ''vector''.  See also [[vector-copy]].\n")
("list-tail" . "(:ctime 1014855757 :cuser #f :mtime 1191314703 :muser #f)* [procedure] list-tail ''list'' ''k''\n\n[[R5RS]], [[R6RS]]\n\n")
("get" . "(:ctime 1015070911 :cuser #f :mtime 1015070911 :muser #f)* [procedure] get ''hash-table'' ''key'' ''prop''\n\n[[Chicken]]: returns the value of property ''prop'' of the item ''key''\nin the hash table ''hash-table''.  See also [[put!]], [[make-hash-table]].\n\n")
("&i/o-file-protection-error" . "(:ctime 1099273712 :cuser #f :mtime 1099273712 :muser #f)* [condition-type] &i/o-file-protection-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-file-protection-error &i/o-filename-error\n  i/o-file-protection-error?)\n}}}\n\nSee [[&condition]], [[&i/o-filename-error]].\n")
("substring=?" . "(:ctime 1039430154 :cuser #f :mtime 1039430154 :muser #f)* [procedure] substring=? ''str1'' ''str2'' ''len''\n\n[[Bigloo]]: compares first ''len'' chars of two strings.\n\nThis can be represented by\nSRFI-13's [[string-prefix?]] as:\n\n  (string-prefix? ''str1'' ''str2'' 0 ''len'')\n")
("rxmatch-end" . "(:ctime 1015899739 :cuser #f :mtime 1015899747 :muser #f)[[$$include rxmatch-start]]\n")
("Index:c" . "(:ctime 1014838955 :cuser #f :mtime 1015014425 :muser #f)[[$$index c]]\n\n")
("address->pointer" . "(:ctime 1015273898 :cuser #f :mtime 1015273898 :muser #f)* [procedure] address->pointer ''address''\n* [procedure] pointer->address ''pointer''\n\n[[Chicken]]: creates a foreign pointer object from integer ''address'',\nor convertes a ''pointer'' back to integer address.\nSee also [[null-pointer]], [[pointer?]].\n\n")
("localized-template" . "(:ctime 1099300416 :cuser #f :mtime 1099300432 :muser #f)* [procedure] localized-template ''package'' ''message-template-key''\n\n[[SRFI-29]]: Returns a message template string associated to the\npackage ''package'' and key ''message-template-key'', in the\ncurrent locale settings (e.g. [[current-language]], [[current-country]],\nand [[current-locale-details]]).\nSee [[declare-bundle!]] for the details.\n")
("time-duration" . "(:ctime 1015208846 :cuser #f :mtime 1015208846 :muser #f)* [constant] time-duration\n* [constant] time-monotonic\n* [constant] time-process\n* [constant] time-tai\n* [constant] time-thread\n* [constant] time-utc\n\n[[SRFI-19]]: these variables are bound to the symbol itself.\n")
("let-optionals*" . "(:ctime 1015044003 :cuser #f :mtime 1459596785 :muser #f)* [syntax] let-optionals* ''args'' ((''var'' ''default'') ... [''restarg'']) ''body'' ...\n\n[[Chicken]], [[Gauche]], [[SigScheme]], [[Sagittarius]]: binds optional arguments.  See also [[let-optionals]].\n\nNote: [[Gauche]] lacks [[let-optionals]].\n\nSee also [[get-optional]]\n\n")
("ucs2<?" . "(:ctime 1039428785 :cuser #f :mtime 1039428785 :muser #f)[[$$include ucs2=?]]\n")
("condition-message" . "(:ctime 1099267629 :cuser #f :mtime 1099267629 :muser #f)* [procedure] condition-message ''obj''\n\n[[SRFI-35]]: See [[&message]].\n")
("string-substitute" . "(:ctime 1015105019 :cuser #f :mtime 1015905238 :muser #f)* [procedure] string-substitute ''regexp'' ''subst'' ''string'' [''index'']\n\n[[Chicken]]: see [[Concept:RegularExpression]].\n\nSome implementations have [[regexp-replace]].\n\n")
("perm/isvtx" . "(:ctime 1015099880 :cuser #f :mtime 1015099880 :muser #f)[[$$include perm/irusr]]\n")
("open/write" . "(:ctime 1015106338 :cuser #f :mtime 1015106347 :muser #f)[[$$include open/rdonly]]\n")
("string-downcase" . "(:ctime 1014894434 :cuser #f :mtime 1015074229 :muser #f)[[$$include string-upcase]]\n\n")
("'" . "(:ctime 1191205108 :cuser #f :mtime 1191205125 :muser #f)* [reader syntax]  ' ''datum''\n\n[[R5RS]], [[R6RS]]: Abbreviation of ([[quote]] ''datum''). \n\nSee also [[`]], [[,]], [[,@]], [[#']].\n")
("signal/chld" . "(:ctime 1015076632 :cuser #f :mtime 1015076632 :muser #f)[[$$include signal/hup]]\n")
("release-port-handle" . "(:ctime 1018391064 :cuser #f :mtime 1018391064 :muser #f)* [procedure] release-port-handle ''port''\n\n[[Scsh]]: decrements the port's reveal count.\nSee [[port-revealed]].\n")
("fxmax" . "(:ctime 1014950709 :cuser #f :mtime 1191226124 :muser #f)* [procedure] fxmax ''fixnum1'' ''fixnum2'' ...\n* [procedure] fxmin ''fixnum1'' ''fixnum2'' ...\n\n[[R6RS]], [[ChezScheme]]\n\nSee also [[fixnum?]], [[max]], [[min]]\n\n* [procedure] fxmax ''fixnum1'' ''fixnum2''\n* [procedure] fxmin ''fixnum1'' ''fixnum2''\n\n[[Chicken]]: only binary operator is provided.\n\n")
("table-walk" . "(:ctime 1017985037 :cuser #f :mtime 1017985037 :muser #f)* [procedure] table-walk ''procedure'' ''table''\n\n[[Scheme48]]: applies ''procedure'' to each entries\nin ''table''.  See also [[make-table]], [[Concept:HashTable]].\n")
("cond-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144501314 :muser #f)* [syntax] cond-compare ''clause1'' ...)\n[[SRFI-67]]: Each ''clause'', with the possible exception of the last, is of the form\n((''t1'' ''t2'') ''c1'' ...) where ''t1'' and ''t2'' are expressions evaluating\nto booleans, and ''c[i]'' are expressions evaluating to an exact integer in\n{-1, 0, 1}. The last <clause> may be an ''else clause'', which has the form (else ''c1'' ...).\n\nCond-compare is another conditional for defining hierarchical\nextensions and refinements of compare procedures.\n\nCond-compare evaluates each expression at most once.\n\nSee also [[select-compare]].\n")
("gensym-prefix" . "(:ctime 1014946782 :cuser #f :mtime 1014946782 :muser #f)* [procedure] gensym-prefix [''newvalue'']\n\n[[ChezScheme]]: this parameter used to detemine prefix of\nthe name of symbols generated by [[gensym]].\n")
("#e" . "(:ctime 1014848131 :cuser #f :mtime 1014848131 :muser #f)* [reader syntax] #e''nnn...''\n\n[[R5RS]] denotes exact number literal.\n\nSee also [[#i]].\n")
("string-pad-right" . "(:ctime 1014889286 :cuser #f :mtime 1014889286 :muser #f)* [procedure] string-pad-right ''s'' ''len'' [''char'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-pad]]\n")
("args-fold" . "(:ctime 1099274720 :cuser #f :mtime 1099274720 :muser #f)* [procedure] args-fold ''args'' ''options'' ''unrecognized-option-proc'' ''operand-proc'' ''seeds'' ...\n\n[[SRFI-37]]: Process command-line arguments (''args'', a list of strings)\naccording to the list of ''options'' (a list of option structures, see\n[[option]]).  \n\n''Unrecognized-option-proc'' is a procedure called when unrecognized option\nis found in ''args''.\n\n''Operand-proc'' is called for non-option arguments in ''args''.\n\n''Seeds'' are the initial value of states that are folded during\nexecution of [[args-fold]] (like the ''knil'' value of [[fold]]).\n")
("fl/" . "(:ctime 1014952286 :cuser #f :mtime 1191227228 :muser #f)[[$$include fl+]]\n")
("exit" . "(:ctime 1015024588 :cuser #f :mtime 1191232986 :muser #f)* [procedure] exit [''obj'']\n\n[[R6RS]]: Exits the running program and passes ''obj'' to the operating system.\nIf ''obj'' is #f, it indicates abnormal exit.  If ''obj'' is omitted,\nit indicates normal exit.\n\n* [procedure] exit ''obj'' ...\n\n[[ChezScheme]]: calls current [[exit-handler]].\nExits from the current cafe (repl) by default.\n\nSee also [[reset]], [[abort]].\n\n* [procedure] exit [''code'']\n\n[[Chicken]], [[SCM]], [[STk]], [[STklos]], [[Gauche]]: ''code'' is an integer, which defaults to 0.\n\nSee also [[abort]], [[restart]], [[quit]], [[_exit]], [[sys-exit]].\n\n* [procedure] exit ''code''\n\n[[Scheme48]]: exits the current process.\n\n* [procedure] exit ''code''\n\n[[Bigloo]]: exits the current process.  An exit function registered by\n[[register-exit-function!]] is called before termination.\n\n* [procedure] exit [''v'']\n\n[[MzScheme]]: calls current exit handler.  The default exit handler terminates\nthe process.  ''v'' may be an aribtrary value.   The default handler uses ''v'' as\nthe exit status if its an integer within the range between 1 to 255, or exits with 0\nstatus otherwise.  User-defined exit handler may return, in which case ''exit'' returns.\n")
("set-finalizer!" . "(:ctime 1015069346 :cuser #f :mtime 1015069346 :muser #f)* [procedure] set-finalizer! ''x'' ''proc''\n\n[[Chicken]]: arranges ''proc'' to be called when ''x'' is about to\nbe garbage collected.\n\n")
("append-reverse!" . "(:ctime 1014864633 :cuser #f :mtime 1014864633 :muser #f)* [procedure] append-reverse! ''rev-head'' ''tail''\n\n[[SRFI-1]]: linear update variant of [[append-reverse]].\n")
("signal=?" . "(:ctime 1020374308 :cuser #f :mtime 1020374308 :muser #f)* [procedure] signal=? ''signal0'' ''signal1''\n\n[[Scheme48]]: compares two signal objects.\nSee also [[integer->signal]], [[name->signal]], [[signal?]], \n[[signal-name]], [[signal-os-number]],\n[[signal-process]], [[make-signal-queue]].\n")
("kmp-step" . "(:ctime 1014895413 :cuser #f :mtime 1014895413 :muser #f)* [procedure] kmp-step ''pat'' ''rv'' ''c'' ''i'' ''c='' ''p-start''\n\n[[SRFI-13]]\n\nSee also [[make-kmp-restart-vector]], [[string-kmp-partial-search]]\n")
("string->list" . "(:ctime 1014855561 :cuser #f :mtime 1191568434 :muser #f)* [procedure] string->list ''string''\n\n[[R5RS]], [[R6RS]]: \n\nSee also [[list->string]].\n\n* [procedure] string->list ''string'' [''start'' ''end'']\n\n[[SRFI-13]] extends R5RS to take optional arguments.\n\n")
("perm/ixoth" . "(:ctime 1015099836 :cuser #f :mtime 1015099836 :muser #f)[[$$include perm/irusr]]\n")
("string-any" . "(:ctime 1014888398 :cuser #f :mtime 1015073872 :muser #f)* [procedure] string-any ''char/char-set/pred'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]:  Checks to see if the given criteria is true of any character in\n''s'', proceeding from left (index ''start'') to right (index ''end'').\n\nSee also [[string-every]].\n\n* [procedure] string-any ''proc'' ''string1'' ''string2'' ...\n\n[[Chicken]] implements different functionality.\n\n")
("test-runner-get" . "(:ctime 1151049296 :cuser #f :mtime 1151077973 :muser #f)* [syntax] test-runner-get\n\n[[SRFI-64]]: returns the current test runner. An error is signaled if there is no current test runner.\n\nSee also [[test-runner-current]].\n")
("R3RS" . "(:ctime 1152474763 :cuser #f :mtime 1346013485 :muser #f)Revised^3 Report on the Algorithmic Language Scheme. (1986)\n\nhttp://www.swiss.csail.mit.edu/~jaffer/r3rs_toc.html\n\n----\n\n* Expressions\n\n[[quote]], [[lambda]], [[if]], [[set!]], [[cond]], [[case]], [[and]], [[or]], [[let]], [[let*]], [[letrec]], [[begin]], [[do]], [[delay]], [[quasiquote]]\n\n* Program structure\n[[define]]\n\n* Standard Procedures\n** Booleans\n[[not]], [[boolean?]], [[nil]], [[t]]\n\n** Equivalence predicates\n[[eqv?]], [[eq?]], [[equal?]]\n\n** Pairs and Lists\n[[pair?]], [[cons]], [[car]], [[cdr]], [[set-car!]], [[set-cdr!]], [[null?]], [[list]], [[length]], [[append]], [[reverse]], [[list-tail]], [[list-ref]], [[last-pair]], [[memq]], [[memv]], [[member]], [[assq]], [[assv]], [[assoc]]\n\n** Symbols\n[[symbol?]], [[string->symbol]], [[symbol->string]]\n\n** Numbers\n[[number?]], [[complex?]], [[real?]], [[rational?]], [[integer?]], [[zero?]], [[positive?]], [[negative?]], [[odd?]], [[even?]], [[exact?]], [[inexact?]], [[=]], [[<]], [[>]], [[<=]], [[>=]], [[max]], [[min]], [[+]], [[*]], [[-]], [[/]], [[abs]], [[quotient]], [[remainder]], [[modulo]], [[numerator]], [[denominator]], [[gcd]], [[lcm]], [[floor]], [[ceiling]], [[truncate]], [[round]], [[rationalize]], [[exp]], [[log]], [[sin]], [[cos]], [[tan]], [[asin]], [[acos]], [[atan]], [[sqrt]], [[expt]], [[make-rectangular]], [[make-polar]], [[real-part]], [[imag-part]], [[magnitude]], [[angle]], [[exact->inexact]], [[inexact->exact]], [[number->string]], [[string->number]]\n[[int]], [[rat]], [[fix]], [[flo]], [[sci]], [[rect]], [[polar]], [[heur]], [[exactness]], [[radix]]\n\n** Characters\n[[char?]], [[char=?]], [[char<?]], [[char>?]], [[char<=?]], [[char>=?]], [[char-ci=?]], [[char-ci<?]], [[char-ci>?]], [[char-ci<=?]], [[char-ci>=?]], [[char-alphabetic?]], [[char-numeric?]], [[char-whitespace?]], [[char-upper-case?]], [[char-lower-case?]], [[char->integer]], [[integer->char]], [[char-upcase]], [[char-downcase]]\n\n** Strings\n[[string?]], [[make-string]], [[string-length]], [[string-ref]], [[string-set!]], [[string=?]], [[string-ci=?]], [[string<?]], [[string>?]], [[string<=?]], [[string>=?]], [[string-ci<?]], [[string-ci>?]], [[string-ci<=?]], [[string-ci>=?]], [[substring]], [[string-append]], [[string->list]], [[list->string]], [[string-copy]], [[string-fill!]]\n\n** Vectors\n[[vector?]], [[make-vector]], [[vector]], [[vector-length]], [[vector-ref]], [[vector-set!]], [[vector->list]], [[list->vector]], [[vector-fill!]]\n\n** Control features\n[[procedure?]], [[apply]], [[map]], [[for-each]], [[force]], [[call-with-current-continuation]]\n\n[[call-with-input-file]], [[call-with-output-file]], [[input-port?]], [[output-port?]], [[current-input-port]], [[current-output-port]], [[with-input-from-file]], [[with-output-to-file]], [[open-input-file]], [[open-output-file]], [[close-input-port]], [[close-output-port]],  [[read]], [[read-char]], [[char-ready?]], [[eof-object?]], [[write]], [[display]], [[newline]], [[write-char]], [[load]], [[transcript-on]], [[transcript-off]]\n")
("compare-by<" . "(:ctime 1144494246 :cuser #f :mtime 1144504928 :muser #f)* [procedure] compare-by< ''lt-pred'' [''x'' ''y'']\n* [procedure] compare-by> ''gt-pred'' [''x'' ''y'']\n* [procedure] compare-by<= ''le-pred'' [''x'' ''y'']\n* [procedure] compare-by>= ''ge-pred'' [''x'' ''y'']\n* [procedure] compare-by=/< ''eq-pred'' ''lt-pred'' [''x'' ''y'']\n* [procedure] compare-by=/> ''eq-pred'' ''gt-pred'' [''x'' ''y'']\n[[SRFI-67]]: If optional arguments ''x'' and ''y'' are present then these are compared with respect\nto the total order defined by the predicate(s) given; the result is in\n{-1, 0, 1}. If ''x'' and ''y'' are not present then a procedure comparing its two arguments using the predicate(s) given is constructed and returned.\n\nThe predicate procedures mean the following: (''lt-pred'' ''x'' ''y'') tests if ''x'' < ''y'',\n''le-pred'' tests for <, ''gt-pred'' for >, ''ge-pred'' for >, and ''eq-pred'' tests if ''x'' and ''y''\nare equivalent. The result returned by a predicate procedure is interpreted as\na Scheme truth value (i.e. #f is false and non-#f is true).\n")
("fxeven?" . "(:ctime 1014951186 :cuser #f :mtime 1191226070 :muser #f)* [procedure] fxeven? ''fixnum''\n\n[[R6RS]], [[ChezScheme]]\n\nSee also [[fixnum?]], [[even?]]\n")
("div-and-mod" . "(:ctime 1191219596 :cuser #f :mtime 1191219596 :muser #f)* [procedure] div-and-mod ''x1'' ''x2''\n\n[[R6RS]]: Calculates and returns ''x1'' [[div]] ''x2'' and ''x1'' [[mod]] ''x2''.\n")
("socket-accept" . "(:ctime 1017993497 :cuser #f :mtime 1099740565 :muser #f)* [procedure] socket-accept ''socket''\n\n[[Scheme48]]: Accept connection to the server socket\n''socket'', and returns input port and output port\nconnected to the socket.\nSee also [[open-socket]].\n\n* [procedure] socket-accept ''socket'' [''line-buffered'']\n\n[[STklos]]: takes optional argument.  See [[make-server-socket]].\n")
("signal/ill" . "(:ctime 1015076553 :cuser #f :mtime 1015076553 :muser #f)[[$$include signal/hup]]\n")
("string->obj" . "(:ctime 1063240230 :cuser #f :mtime 1063240230 :muser #f)* [procedure] string->obj ''string''\n* [procedure] obj->string ''obj''\n\n[[Bigloo]]: converts Bigloo object (except procedure) to a string representation\nand vice versa.\n\n  (equal? ''obj'' (string->obj (obj->string ''obj''))) => #t\n")
("sys-gethostname" . "(:ctime 1038278085 :cuser #f :mtime 1099742506 :muser #f)* [procedure] sys-gethostname\n\n[[Gauche]]: gethostname.\n\nOther implementations have [[get-host-name]], [[hostname]], [[system-name]].\n")
("a:fixn8b" . "(:ctime 1144485145 :cuser #f :mtime 1144529348 :muser #f)* [procedure] a:fixn8b [''k'']\n[[SRFI-63]]: Returns an exact non-negative binary fixnum uniform-array prototype with at least 8 bits of precision.\n")
("expand" . "(:ctime 1014965736 :cuser #f :mtime 1014965736 :muser #f)* [procedure] expand ''obj'' [''env-spec'']\n\n[[ChezScheme]]\n\nSee also [[current-expand]].\n\n")
("find-tail" . "(:ctime 1014869575 :cuser #f :mtime 1014869575 :muser #f)* [procedure] find-tail ''pred'' ''clist''\n\n[[SRFI-1]]: Return the first pair of ''clist'' whose car satisfies ''pred''. \nIf no pair does, return false. \n\nSee also [[find]], [[take-while]].\n")
("string-skip" . "(:ctime 1014894068 :cuser #f :mtime 1014894068 :muser #f)* [procedure] string-skip ''s'' ''char/char-set/pred'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-skip-right]].\n")
("bitwise-ior" . "(:ctime 1015049118 :cuser #f :mtime 1015318775 :muser #f)[[$$include bitwise-and]]\n\n")
("#/" . "(:ctime 1015202463 :cuser #f :mtime 1015202471 :muser #f)* [reader syntax] #/''regexp''/\n\n[[Gauche]]: literal regular expression.   See [[Concept:RegularExpression]].\n")
("every" . "(:ctime 1014870578 :cuser #f :mtime 1195815123 :muser #f)* [procedure] every ''pred'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Applies the predicate across the lists, \nreturning true if the predicate returns true on every application. \n\nChezScheme has the same function by the name [[andmap]],\nexcept that the lists must have the same length in Chez's.\n\nSee also [[any]], [[for-all]].\n")
("sys-dirname" . "(:ctime 1099395273 :cuser #f :mtime 1099395273 :muser #f)* [procedure] sys-dirname ''string''\n* [procedure] sys-basename ''string''\n\n[[Gauche]]: dirname(3) and basename(3) interface.\n\nOther implementations have [[dirname]]/[[basename]],\n[[file-name-directory]]/[[file-name-non-directory]],\n[[pathname-directory]]/[[pathname-strip-directory]].\n")
("peek-char" . "(:ctime 1014857721 :cuser #f :mtime 1014857782 :muser #f)* [procedure] peek-char [''port'']\n\n[[R5RS]]: Returns the next character available from the input port,\nwithout updating the port to point to the following character. If no\nmore characters are available, an end of file object is returned. \nPort may be omitted, in which case it defaults to the value\nreturned by current-input-port.\n\nSee also [[read-char]], [[eof-object?]], [[current-input-port]].\n")
("resolve-path" . "(:ctime 1020225244 :cuser #f :mtime 1020581407 :muser #f)* [procedure] resolve-path ''path''\n* [procedure] expand-path ''path''\n\n[[MzScheme]], [[Gauche]]: expands pathname (including tilde expansion).\nresolve-path also resolves symlinks.\nSee also [[simplify-path]].\n\nSTk has similar functions, [[canonical-path]] and\n[[expand-file-name]].\n")
("string-compare" . "(:ctime 1014889682 :cuser #f :mtime 1144499338 :muser #f)* [procedure] string-compare ''s1'' ''s2'' ''proc<'' ''proc='' ''proc>'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]: Apply ''proc<'', ''proc='', or ''proc>''  to the mismatch index, \ndepending upon whether ''s1'' is less than, equal to, or greater than ''s2''. \nThe \"mismatch index\" is the largest index ''i'' such that for every\n0 <= ''j'' < ''i'', ''s1''[''j''] = ''s2''[''j''] -- that is, ''i'' is the first \nposition that doesn't match.\n\nSee also [[string-compare-ci]].\n\n* [procedure] string-compare string1 string2\n[[SRFI-67]]: Compare strings as [[string<=?]].\n\nNote:   compare-string could be defined as\n{{{\n(define (string-compare string1 string2)\n  (vector-compare-as-list char-compare\n                          string1 string2\n                          string-length string-ref))\n}}}\n")
("char<?" . "(:ctime 1015062030 :cuser #f :mtime 1015062030 :muser #f)[[$$include char=?]]\n")
("remainder" . "(:ctime 1014856605 :cuser #f :mtime 1191220138 :muser #f)* [procedure] remainder ''n1'' ''n2''\n\n[[R5RS]]\n\n[[SRFI-94]]: If ''n1'' is not an exact integer, or if ''n2'' is not an exact non-zero integer, an error is signaled.\n\nIn [[R6RS]] this procedure is in R5RS compatibility library.  You may want to use [[mod]] or [[mod0]] instead.\n\nSee also [[modulo]], [[quotient]], [[quotient/remainder]], [[quotient&remainder]].\n")
("control" . "(:ctime 1018071909 :cuser #f :mtime 1018071909 :muser #f)[[$$include lower-case]]\n")
("&i/o-port-error" . "(:ctime 1099273226 :cuser #f :mtime 1099273226 :muser #f)* [condition-type] &i/o-port-error\n\n[[SRFI-36]]:\n{{{\n(define-condition-type &i/o-port-error &i/o-error\n  i/o-port-error?\n  (port i/o-error-port))\n}}}\n\nSee [[&condition]].\n")
("a:bool" . "(:ctime 1144485145 :cuser #f :mtime 1144529360 :muser #f)* [procedure] a:bool [''bool'']\n[[SRFI-63]]: Returns a boolean uniform-array prototype.\n")
("test-match-name" . "(:ctime 1151049296 :cuser #f :mtime 1151075777 :muser #f)* [syntax] test-match-name ''name''\n\n[[SRFI-64]]: returns the specifier matches if the current test name is [[equal?]] to ''name''.\n\nSee also [[test-skip]] and [[test-expect-fail]].\n")
("current-output-port" . "(:ctime 1014841179 :cuser #f :mtime 1036927514 :muser #f)* [procedure] current-output-port\n\n[[R5RS]]\n\nSee also [[current-input-port]], [[current-error-port]].\n\n* [procedure] current-output-port [''newport'']\n\n[[ChezScheme]] and [[Chicken]] extends R5RS to allow to change the current output\nport by providing an optional argument.\n\n\n\nSome implementations have [[set-current-output-port!]] to do so.\n")
("#1#" . "(:ctime 1099277349 :cuser #f :mtime 1416209995 :muser #f)* [reader syntax] #''digits''#\n\n[[SRFI-38]]: Shared structure reference.  Refer to the object\ndefined by [[#0#]](,[[#1#]],[[#2#]]...[[#n#]].)\n")
("Gauche:ModuleSystem" . "(:ctime 1063421391 :cuser #f :mtime 1063421391 :muser #f)Gauche has a first class module (namespace), and requre/provide-based library management\nmechanism.  Both are extension of the mechanisms of [[STk]].\nOn top of them there's a convenience macro ([[use]]) that is similar to Perl's\nuse or Python's import.\n\n* Namespaces\n\nA module can be created declaratively ([[define-module]]), or procedurally ([[make-module]]).\nA module is basically just a global symbol table.  It also keeps the visibility\ncontrol information.\n\nGlobal bindings can be made visible from other modules by [[export]] and [[export-all]] syntax.\nThe user of the module can import such bindings by [[import]] syntax.\nAdvanced features such as renaming import or selective import are not supported (yet).\n\nBesides using other modules by [[import]], a module can inherit other modules,\nto extend the original modules ([[extend]]).   A module can inherit from multiple\nmodules, exactly like Gauche's class can inherit from multiple classes.\n\n* Libraries\n\nA basic [[require]]/[[provide]] mechanism is used to manage loading library files.\nIt is orthogonal to module systems.\n\n* Use form\n\nA special form [[use]] just combines [[require]] and [[import]] for convenience.\n\n  (use srfi-1)   ;; loads library \"srfi-1\" and imports module srfi-1\n")
("array->list" . "(:ctime 1144485145 :cuser #f :mtime 1144488383 :muser #f)* [procedure] array->list array\n\n[[SRFI-63]]: Returns a rank-nested list consisting of all the elements, in row-major order, of ''array''. In the case of a rank-0 array, array->list returns the single element.\n")
("print-level" . "(:ctime 1014960344 :cuser #f :mtime 1014960359 :muser #f)* [procedure] print-level [''newval'']\n\n[[ChezScheme]]: a parameter for [[write]] and [[pretty-print]]\n")
("i/o-port-error?" . "(:ctime 1099273258 :cuser #f :mtime 1099273258 :muser #f)* [procedure] i/o-port-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-port-error]].\n")
("file-is-writable?" . "(:ctime 1015197299 :cuser #f :mtime 1015197299 :muser #f)[[$$include file-is-readable?]]\n")
("char-" . "(:ctime 1014945630 :cuser #f :mtime 1014945630 :muser #f)* [procedure] char- ''char1'' ''char2''\n\n[[ChezScheme]]: (lambda (c1 c2) (- (char->integer c1) (char->integer c2)))\n\n")
("pretty-one-line-limit" . "(:ctime 1014960051 :cuser #f :mtime 1014960051 :muser #f)* [procedure] pretty-one-line-limit [''newval'']\n\n[[ChezScheme]]: a parameter for [[pretty-print]]\n")
("blob-s32-native-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144719277 :muser #f)* [procedure] blob-s32-native-ref ''blob'' ''k''\n\n[[SRFI-74]]: similar to (blob-sint-ref 4 (endianness native) ''blob'' ''k''), but works at aligned indices: ''k'' must be a multiple of 4. It is an error to use this at non-aligned indices.\n\nSee also [[blob-sint-ref]] and [[endianness]].\n")
("file-info-owner" . "(:ctime 1040727325 :cuser #f :mtime 1040727325 :muser #f)[[$$include file-info-name]]\n")
("SRFI-129" . "(:ctime 1474475642 :cuser #f :mtime 1474475642 :muser #f)SRFI-129:  Titlecase procedures \n\nhttp://srfi.schemers.org/srfi-129/srfi-129.html\n\n[[$$srfi-implementors]]\n")
("bitwise-if" . "(:ctime 1191715556 :cuser #f :mtime 1191715557 :muser #f)* [procedure] bitwise-if ''e1'' ''e2'' ''e3''\n\n[[R6RS]]:\n{{{\n(bitwise-ior (bitwise-and e1 e2)\n             (bitwise-and (bitwise-not e1) e3))\n}}}\n\nSee also [[bitwise-and]] etc.\n")
("property-list" . "(:ctime 1014947162 :cuser #f :mtime 1039345497 :muser #f)* [procedure] property-list ''symbol''\n\n[[ChezScheme]]: returns a copy of internal property list of ''symbol''.\n\nSee also [[putprop]], [[getprop]], [[remprop]].\n\nBigloo calls this [[symbol-plist]].\n\n")
("use-modules" . "(:ctime 1014928700 :cuser #f :mtime 1099655596 :muser #f)* [syntax] use-modules ''spec'' ...\n\n[[Guile]]:  Resolve each interface specification ''spec'' into an interface and\narrange for these to be accessible by the current module.\n\nYou can selectively import symbols, and rename imported symbols.\n\nSee also [[symbol-prefix-proc]], [[use-syntax]], [[define-module]].\n\nSee also [[require-extension]] (SRFI-55).\n\n")
("close-output-pipe" . "(:ctime 1015105939 :cuser #f :mtime 1015105939 :muser #f)[[$$include close-input-pipe]]\n")
("time-tai->modified-julian-day" . "(:ctime 1099301392 :cuser #f :mtime 1099301402 :muser #f)[[$$include time-tai->date]]\n")
("vector-set!" . "(:ctime 1014860722 :cuser #f :mtime 1191570147 :muser #f)* [procedure] vector-set! ''vector'' ''k'' ''obj''\n\n[[R5RS]], [[R6RS]]: ''k'' must be a valid index of ''vector''. \nVector-set! stores ''obj'' in element ''k'' of ''vector''. \nThe value returned by vector-set! is\nunspecified. \n\nSee also [[vector-ref]].\n")
("filter-map" . "(:ctime 1014868882 :cuser #f :mtime 1014868882 :muser #f)* [procedure] filter-map ''f'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Like [[map]], but only true values are saved. \n")
("winch" . "(:ctime 1015883001 :cuser #f :mtime 1015883001 :muser #f)* [procedure] winch ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("sys-exit" . "(:ctime 1015904626 :cuser #f :mtime 1015904626 :muser #f)* [procedure] sys-exit [''code'']\n\n[[Gauche]]: calls POSIX _exit().  See also [[exit]].\n\nSome implementations have [[_exit]].\n")
("feature-cond" . "(:ctime 1014882464 :cuser #f :mtime 1014882464 :muser #f)* [configuration language] feature-cond ''feature-cond-clause'' ...\n\n[[SRFI-7]]\n\nSee also [[program]], [[requires]], [[files]], [[code]].\n")
("winsch" . "(:ctime 1015882908 :cuser #f :mtime 1015882908 :muser #f)* [procedure] winsch ''win'' ''ch''\n* [procedure] winsertln ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("signal/abrt" . "(:ctime 1015076569 :cuser #f :mtime 1015076569 :muser #f)[[$$include signal/hup]]\n")
("substring-index-ci" . "(:ctime 1015075099 :cuser #f :mtime 1015075099 :muser #f)[[$$include substring-index]]\n")
("string-drop" . "(:ctime 1014889221 :cuser #f :mtime 1014889221 :muser #f)* [procedure] string-drop ''s'' ''nchars''\n\n[[SRFI-13]]\n\nSee also [[string-take]], [[string-drop-right]].\n")
("unmap-file-from-memory" . "(:ctime 1015200076 :cuser #f :mtime 1015200076 :muser #f)[[$$include map-file-to-memory]]\n")
("take-while!" . "(:ctime 1014869784 :cuser #f :mtime 1014869818 :muser #f)* [procedure] take-while! ''pred'' ''clist''\n\n[[SRFI-1]]: linear update variant of [[take-while]].\n")
("string->widget" . "(:ctime 1018335754 :cuser #f :mtime 1018335754 :muser #f)[[$$include widget->string]]\n")
("inc!" . "(:ctime 1015311732 :cuser #f :mtime 1015311732 :muser #f)* [syntax] inc! ''place'' [''num'']\n* [syntax] dec! ''place'' [''num'']\n\n[[Gauche]]: a macro like CL's incf and decf.  Expanded to\nthe form using generalized set! ([[SRFI-17]]).  See also [[set!]],\n[[push!]], [[pop!]].\n")
("test-runner-create" . "(:ctime 1151049296 :cuser #f :mtime 1151078293 :muser #f)* [syntax] test-runner-create\n\n[[SRFI-64]]: equivalent to\n{{{\n((test-runner-factory))\n}}}\n\nSee also [[test-runner-factory]].\n")
("open-fdes" . "(:ctime 1018386583 :cuser #f :mtime 1018386583 :muser #f)* [procedure] open-fdes ''fname'' ''flags'' [''perms'']\n\n[[Scsh]]: returns a file descriptor.\nSee also [[fdes->inport]], [[fdes->outport]],\n[[fdes-flags]], [[fdes-status]].\n")
("SRFI-66" . "(:ctime 1144170496 :cuser #f :mtime 1145787487 :muser #f)SRFI 66: Octet Vectors\n\nhttp://srfi.schemers.org/srfi-66/srfi-66.html\n\n[[$$srfi-implementors]]\n----\n\n[[make-u8vector]], [[u8vector?]], [[u8vector]],\n[[u8vector->list]],\n[[list->u8vector]],\n[[u8vector-length]],\n[[u8vector-ref]],\n[[u8vector-set!]],\n[[u8vector=?]],\n[[u8vector-compare]],\n[[u8vector-copy!]],\n[[u8vector-copy]]\n")
("test-runner-on-group-end" . "(:ctime 1151049296 :cuser #f :mtime 1151081828 :muser #f)* [syntax] test-runner-on-group-end ''runner''\n* [syntax] test-runner-on-group-end! ''runner'' ''function''\n\n[[SRFI-64]]: gets or sets the callback function for on-group-end.\n''function'' is called by a [[test-end]].\n\nSee also [[test-on-group-end-simple]].\n")
("drop-right" . "(:ctime 1014863720 :cuser #f :mtime 1014863738 :muser #f)* [procedure] drop-right ''flist'' ''k''\n\n[[SRFI-1]]: returns all but the last ''k'' elements of ''flist''.\n\nSee also [[drop]], [[take-right]], [[drop-right!]].\n")
("char->integer" . "(:ctime 1014842449 :cuser #f :mtime 1191565964 :muser #f)* [procedure] char->integer ''char''\n\n[[R5RS]]: Returns an exact integer representation of a character ''char''.\nImplementation can choose their preferred mappings between chars and\nintegers as far as the round-trip conversion is guaranteed and\nthe order of chars by char<=? and the order of resulting integer are\nconsistent.\n\n[[R6RS]]: Returns a Unicode scalar value corresponds to a character ''char''.\nParticularly, this means the returned value falls in a range between\n[0, #xd7ff] or [#xe000, #x10ffff].\n\nSee also [[integer->char]].\n")
("gc" . "(:ctime 1015052520 :cuser #f :mtime 1015212061 :muser #f)* [procedure] gc [''flag'']\n\n[[Chicken]]: invokes GC.  ''flag'' specifies if the GC is minor or major one.\n\nChezScheme has [[collect]].\n\n* [procedure] gc\n\nIn [[STk]], [[STklos]], [[Gauche]], [[SCM]] it takes no arguments.\n")
("#&" . "(:ctime 1014945953 :cuser #f :mtime 1018692653 :muser #f)* [reader syntax] #&''obj''\n\n[[ChezScheme]], [[SISC]], [[MzScheme]]: a box containing ''obj''.  See [[box]].\n")
("time?" . "(:ctime 1015209700 :cuser #f :mtime 1015318352 :muser #f)* [procedure] time? ''obj''\n\n[[SRFI-18]], [[SRFI-19]], [[SRFI-21]], [[Scheme48]]:\nsee also [[make-time]], [[current-time]].\n")
("fileno/stdout" . "(:ctime 1015106203 :cuser #f :mtime 1015106212 :muser #f)[[$$include fileno/stdin]]\n")
("sys-stat" . "(:ctime 1020404125 :cuser #f :mtime 1036979389 :muser #f)* [procedure] sys-stat ''path''\n* [procedure] sys-lstat ''path''\n\n[[Gauche]]: gets file attribute information.\nsys-stat follows symlinks, while sys-lstat not.\nReturns [[<sys-stat>]] object.  See also [[sys-fstat]].\n\nScheme48 has [[get-file-info]] and [[get-file/link-info]],\nwhich are conceptually equivalent to these procedures.\n\nScsh has [[file-info]].\n")
("fl*" . "(:ctime 1014952383 :cuser #f :mtime 1191227217 :muser #f)[[$$include fl+]]\n")
("ucs2->char" . "(:ctime 1039428683 :cuser #f :mtime 1039428683 :muser #f)* [procedure] ucs2->char ''ucs2''\n* [procedure] char->ucs2 ''char''\n\n[[Bigloo]]: conversion between UCS2 character and\nstandard character.  See [[ucs2?]]\n")
("sys-gmtime" . "(:ctime 1099743420 :cuser #f :mtime 1099743420 :muser #f)[[$$include sys-localtime]]\n")
("string-upper" . "(:ctime 1018333631 :cuser #f :mtime 1018333631 :muser #f)[[$$include string-lower]]\n")
("string-find" . "(:ctime 1099724956 :cuser #f :mtime 1099724956 :muser #f)* [procedure] string-find ''s1'' ''s2''\n\n[[STklos]]: Returns #t iff ''s1'' appears somewhere in ''s2''.\nSee also [[string-index]].\n")
("max-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144504514 :muser #f)* [procedure] max-compare ''compare'' ''x1'' ''x2'' ...\n[[SRFI-67]]: returns a maximum of the values ''x1'' ''x2'' ...(one or more values) with respect to the compare procedure ''compare''.\n")
("waiter-prompt-and-read" . "(:ctime 1015024368 :cuser #f :mtime 1015024368 :muser #f)* [procedure] waiter-prompt-and-read [''newval'']\n\n[[ChezScheme]]: gets/sets a procedure to print a prompt then to read\nan expression in repl.\n\nSee also [[new-cafe]]\n")
("Scheme48" . "(:ctime 1015107339 :cuser #f :mtime 1166946536 :muser #f)Byte-code interpreter.  The VM is written in a subset of Scheme, which is compiled to C.\n\nhttp://www.s48.org/\n\nRelated: [[Scheme48:ModuleSystem]]\n\n[[$$srfis 1 2 4 5 6 7 8 9 11 13 14 16 17 22 23 25 26 27 28 31 34 35 36 37 39 40 42 43 45 60 61 63 66 67 71 78]]\n\n----\nThe following list is based on version 0.57 (July 15, 2001)\n\n** Command Processor\n[[##]]\n\n** Module system\n[[define-structure]], [[define-structures]], [[define-interface]],\n[[define-syntax]], [[open]], [[access]], [[begin]], [[files]],\n[[optimize]], [[for-syntax]], [[export]], [[compound-interface]],\n[[modify]], [[subset]], [[with-prefix]], [[expose]], [[hide]],\n[[rename]], [[alias]], [[prefix]]\n\n** Libraries\n[[char->ascii]], [[ascii->char]], [[ascii-limit]], [[ascii-whitespaces]]\n\n[[bitwise-and]], [[bitwise-ior]], [[bitwise-xor]], [[bitwise-not]],\n[[arithmetic-shift]], [[bit-count]]\n\n[[byte-vector?]], [[make-byte-vector]], [[byte-vector]],\n[[byte-vector-length]], [[byte-vector-ref]], [[byte-vector-set!]]\n\n[[cell?]], [[make-cell]], [[cell-ref]], [[cell-set!]]\n\n[[make-queue]], [[queue?]], [[queue-empty?]], [[enqueue!]], [[dequeue!]],\n[[queue-length]], [[queue->list]], [[list->queue]], [[delete-from-queue!]]\n\n[[make-array]], [[array]], [[copy-array]], [[array?]], [[array-ref]],\n[[array-set!]], [[array->vector]], [[array-dimensions]],\n[[make-shared-array]]\n\n[[define-record-type]], [[define-record-discloser]],\n[[make-record]], [[record]], [[record?]], [[record-length]],\n[[record-type]], [[record-ref]], [[record-set!]],\n[[make-record-type]], [[record-type?]], [[record-type-name]],\n[[record-type-field-names]], [[record-constructor]],\n[[record-predicate]], [[record-accessor]], [[record-modifier]],\n[[define-record-resumer]]\n\n[[define-enumerated-type]], [[define-finite-type]]\n\n[[make-table]], [[make-symbol-table]], [[make-string-table]],\n[[make-integer-table]], [[make-table-maker]], [[make-table-immutable!]],\n[[table?]], [[table-ref]], [[table-set!]], [[table-walk]],\n[[default-hash-function]], [[string-hash]]\n\n[[make-string-input-port]], [[make-string-output-port]],\n[[string-output-port-output]], [[limit-output]],\n[[make-tracking-input-port]],\n[[make-tracking-output-port]], [[current-row]], [[current-column]],\n[[fresh-line]]\n\n[[make-fluid]], [[fluid]], [[let-fluid]], [[let-fluids]]\n\n[[have-system?]], [[system]]\n\n[[open-socket]], [[socket-port-number]], [[close-socket]], [[socket-accept]],\n[[get-host-name]], [[socket-client]]\n\n[[iterate]], [[reduce]]\n\n[[set]], [[range]], [[ranges]], [[ascii-range]], [[ascii-ranges]],\n[[negate]], [[intersection]], [[union]], [[subtract]], [[lower-case]],\n[[upper-case]], [[alphabetic]], [[numeric]], [[alphanumeric]],\n[[punctuation]], [[graphic]], [[printing]], [[control]], [[blank]],\n[[whitespace]], [[hexdigit]], [[string-start]], [[string-end]],\n[[sequence]], [[one-of]], [[text]], [[repeat]], [[ignore-case]],\n[[use-case]], [[submatch]], [[no-submatches]], [[any-match?]],\n[[exact-match?]], [[match]], [[match-start]], [[match-end]],\n[[match-submatches]]\n\n** Mixing Scheme 48 and C\n[[define-exported-binding]], [[lookup-imported-binding]],\n[[shared-binding-ref]], [[import-definition]], [[shared-binding?]],\n[[shared-binding-name]], [[shared-binding-is-import?]],\n[[shared-binding-set!]], [[define-imported-binding]],\n[[lookup-exported-binding]], [[undefine-imported-binding]],\n[[undefine-exported-binding]]\n\n[[call-imported-binding]], [[call-external]], [[call-external-value]],\n[[import-lambda-definition]]\n\n[[dynamic-load]], [[get-external]], [[external?]], [[external-name]],\n[[external-value]], [[lookup-external]], [[lookup-all-externals]],\n[[call-external]]\n\n** Access to POSIX\n[[fork]], [[fork-and-forget]], [[process-id?]], [[process-id=?]],\n[[process-id->integer]], [[integer->process-id]],\n[[process-id-exit-status]], [[process-id-terminating-signal]],\n[[wait-for-child-process]], [[exit]], [[exec]],\n[[exec-with-environment]], [[exec-file]], [[exec-file-with-environment]],\n[[exec-with-alias]]\n\n[[name->signal]], [[integer->signal]], [[signal?]],\n[[signal-name]], [[signal-os-number]], [[signal=?]],\n[[signal-process]], [[make-signal-queue]], [[signal-queue?]],\n[[signal-queue-monitored-signals]], [[dequeue-signal!]],\n[[maybe-dequeue-signal!]],\n[[add-signal-queue-signal!]], [[remove-signal-queue-signal!]]\n\n[[get-process-id]], [[get-parent-process-id]],\n[[get-user-id]], [[get-effective-user-id]],\n[[set-user-id!]], [[get-group-id]], [[get-effective-group-id]],\n[[set-group-id!]], [[get-groups]], [[get-login-name]],\n[[lookup-environment-variable]], [[environment-alist]]\n\n[[user-id?]], [[user-id=?]], [[user-id->integer]], [[integer->user-id]],\n[[group-id?]], [[group-id=?]], [[group-id->integer]], [[integer->group-id]],\n[[user-id->user-info]], [[name->user-info]], [[user-info?]],\n[[user-info-name]], [[user-info-id]], [[user-info-group]],\n[[user-info-home-directory]], [[user-info-shell]],\n[[group-id->group-info]], [[name->group-info]], [[group-info?]],\n[[group-info-name]], [[group-info-id]], [[group-info-members]],\n\n[[os-name]], [[os-node-name]], [[os-release-name]],\n[[os-version-name]], [[machine-name]]\n\n[[open-directory-stream]], [[directory-stream?]],\n[[read-directory-stream]], [[close-directory-stream]],\n[[list-directory]], [[working-directory]], [[set-working-directory!]]\n\n[[open-file]], [[file-options]],\n[[file-options-on?]], [[set-file-creation-mask!]], [[link]],  \n[[make-directory]], [[make-fifo]], [[unlink]], [[remove-directory]],  \n[[rename]], [[accessible?]], [[access-mode]],\n[[get-file-info]], [[get-file/link-info]], [[get-port-info]],\n[[file-info?]], [[file-info-name]], [[file-info-type]],\n[[file-type?]], [[file-type-name]], [[file-type]],\n[[file-info-device]], [[file-info-inode]], [[file-info-link-count]],\n[[file-info-size]], [[file-info-owner]], [[file-info-group]],\n[[file-info-mode]], [[file-info-last-access]],\n[[file-info-last-access]]\n[[file-info-last-modification]], [[file-info-last-info-change]],\n[[file-mode]], [[file-mode?]], [[file-mode+]], [[file-mode-]],\n[[file-mode=?]], [[file-mode<=?]], [[file-mode>=?]],\n[[file-mode->integer]], [[integer->file-mode]],\n\n[[make-time]], [[current-time]], [[time?]], [[time-seconds]],\n\n[[time=?]], [[time<?]], [[time<=?]], [[time>?]], [[time>=?]],\n[[time->string]],\n\n[[open-pipe]], [[fd-port?]], [[port->fd]],\n[[remap-file-descriptors]], [[dup]], [[dup-switching-mode]],\n[[dup2]], [[close-all-but]], [[close-on-exec?]],\n[[set-close-on-exec?!]], [[i/o-flags]],\n[[set-i/o-flags!]], [[port-is-a-terminal?]],\n[[port-terminal-name]],\n\n[[make-regexp]], [[regexp-option]], [[regexp?]], [[regexp-match]],\n[[match?]], [[match-start]], [[match-end]],\n")
(">/>=?" . "(:ctime 1144494246 :cuser #f :mtime 1144503638 :muser #f)[[$$include </<?]]\n")
("timer-interrupt-handler" . "(:ctime 1014964606 :cuser #f :mtime 1014964606 :muser #f)* [procedure] timer-interrupt-handler [''newval'']\n\n[[ChezScheme]]: gets/sets the current timer interrupt handler.\n\nSee also [[set-timer]], [[disable-interrupt]], [[enable-interrupt]],\n[[critical-section]], [[keyboard-interrupt-handler]]\n")
("all-modules" . "(:ctime 1015772525 :cuser #f :mtime 1099723110 :muser #f)* [procedure] all-modules\n\n[[STk]], [[STklos]], [[Gauche]]: returns a list of all modules.\nSee also [[find-module]].\n")
("string-fold-right" . "(:ctime 1014894872 :cuser #f :mtime 1014894872 :muser #f)* [procedure] string-fold-right ''kons'' ''knil'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-fold]], [[string-unfold-right]]\n")
("current-modified-julian-day" . "(:ctime 1015209293 :cuser #f :mtime 1015209293 :muser #f)[[$$include current-julian-day]]\n")
("blob-u32-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144718891 :muser #f)* [procedure] blob-u32-ref ''endianness'' ''blob'' ''k''\n\n[[SRFI-74]]: equivalent to (blob-uint-ref 4 ''endianness'' ''blob'' ''k'').\n\nSee also [[blob-uint-ref]].\n")
("i/o-write-error?" . "(:ctime 1099273445 :cuser #f :mtime 1099273445 :muser #f)* [procedure] i/o-write-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-write-error]].\n")
("string-append-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535627 :muser #f)* [syntax] string-append-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe string obtained by appending all values of ''expression'', which must all\nbe strings.\nThink of it as ([[apply]] [[string-append]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n")
("char-compare-ci" . "(:ctime 1144494246 :cuser #f :mtime 1144499210 :muser #f)* [procedure] char-compare-ci c1 c2\n[[SRFI-67]]: Compare characters as [[char-ci<=?]].\nThe suffix -ci means ``case insensitive.''\n")
("bound-identifier=?" . "(:ctime 1014962706 :cuser #f :mtime 1014962706 :muser #f)* [procedure] bound-identifier=? ''id1'' ''id2''\n\n[[ChezScheme]]\n\nSee [[syntax-case]]\n")
("fprintf" . "(:ctime 1014961153 :cuser #f :mtime 1015070657 :muser #f)* [procedure] fprintf ''port'' ''format-spec'' ''obj'' ...\n\n[[ChezScheme]]: formats ''obj''s by ''format-spec'' and writes out to\n''port''.   The ''format-spec'' is of [[format]].\n\n[[Chicken]]: formats ''obj''s by ''format-spec'' and writes out to\n''port''.  Recognizes \"~%\", \"~S\", \"~A\", \"~\\n\", \"~B\", \"~O\", \"~X\", \"~C\",\n\"~~\", \"~!\", \"~?\".\n\nSee also [[printf]], [[format]]\n\n* [procedure] fprintf ''port'' ''format-spec'' ''obj'' ...\n\n[[SLIB]]: this works more like C's fprintf.  C's format specification\nis used.  See also [[printf]], [[sprintf]].\n")
("let-fluid" . "(:ctime 1017989831 :cuser #f :mtime 1017989863 :muser #f)* [procedure] let-fluid ''fluid'' ''value'' ''thunk''\n* [procedure] let-fluids ''fluid0'' ''value0'' ''fluid1'' ''value1'' ... ''thunk''\n\n[[Scheme48]]: dynamically binds fluid(s) to the given\nvalue(s) and executes ''thunk''.\nSee also [[make-fluid]], [[fluid]].\n\nGuile has [[with-fluids*]].\n")
("clamp" . "(:ctime 1015725285 :cuser #f :mtime 1015725285 :muser #f)* [procedure] clamp ''x'' [''min'' ''max'']\n\n[[Gauche]]: clamps ''x'' between ''min'' and ''max''.\n")
("string-contains" . "(:ctime 1014894217 :cuser #f :mtime 1014894217 :muser #f)* [procedure] string-contains ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-contains-ci]], [[string-index]].\n")
("unsyntax" . "(:ctime 1191208682 :cuser #f :mtime 1191208693 :muser #f)* [auxiliary syntax] unsyntax ''template'' ...\n* [auxiliary syntax] unsyntax-splicing ''template'' ...\n\n[[R6RS]]: When appears in the template of ''quasisyntax'', evaluates ''template''\nand inserts the result into the outer template.\n\nSee also [[quasisyntax]], [[#,]], [[#,@]].\n")
("internal-time-units-per-second" . "(:ctime 1038091853 :cuser #f :mtime 1038091853 :muser #f)* [constant] internal-time-units-per-second\n\n[[SCM]]: the integer of internal time units in a second. \n[[get-internal-run-time]] and [[get-internal-real-time]]\nuses this unit.\n\nSee also [[SRFI-19]].\n")
("imag-part" . "(:ctime 1014854364 :cuser #f :mtime 1191312992 :muser #f)* [procedure] imag-part ''z''\n\n[[R5RS]], [[R6RS]]:  Imaginary part of a complex number ''z''.\n\nSee also [[real-part]].\n")
("for-each" . "(:ctime 1014854062 :cuser #f :mtime 1429284461 :muser #f)* [procedure] for-each ''proc'' ''list1'' ''list2'' ...\n\n[[R5RS]]: The arguments to for-each are like the arguments to [[map]], \nbut for-each calls ''proc'' for its side effects rather than for its\nvalues. Unlike [[map]], for-each is guaranteed to call ''proc'' on the \nelements of the ''lists'' in order from the first element(s) to the last,\nand the value returned by for-each is unspecified.\n\n[[SRFI-1]] extends R5RS to allow the arguments to be of unequal length; \nit terminates when the shortest list runs out. \n\n[[R6RS]]: The implementation ''should'' check the lists have\nthe same length.  It is a recommendation.\n\nSee also [[map]], [[pair-for-each]].\n\n* [generic] for-each ''proc'' ''coll1'' ''coll2'' ...\n\n[[Gauche]] extends this to take arbitrary collections\n(with gauche.collection module).\n")
("negfx" . "(:ctime 1191227959 :cuser #f :mtime 1191227959 :muser #f)* [procedure] negfx ''fixnum''\n\n[[Bigloo]]: fixnum-specific version of (- ''fixnum'').  See [[fixnum?]]\nfor other fixnum operations.\n\nIn R6RS you can use [[fx-]].\n")
("SRFI-25" . "(:ctime 1036933520 :cuser #f :mtime 1122428686 :muser #f)SRFI-25: Multi-dimensional Array Primitives\n\nhttp://srfi.schemers.org/srfi-25/srfi-25.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[array?]], [[make-array]], [[shape]], [[array]],\n[[array-rank]], [[array-start]], [[array-end]],\n[[array-ref]], [[array-set!]], [[share-array]]\n\n----\n[[SRFI-47]] defines another array APIs.\n\n")
("vector-compare-as-list" . "(:ctime 1144494246 :cuser #f :mtime 1144505870 :muser #f)[[$$include vector-compare]]\n")
("maybe-dequeue-signal!" . "(:ctime 1020374925 :cuser #f :mtime 1020374925 :muser #f)[[$$include dequeue-signal!]]\n")
("match-let*" . "(:ctime 1015101912 :cuser #f :mtime 1015101912 :muser #f)[[$$include match-let]]\n")
("&error" . "(:ctime 1099267751 :cuser #f :mtime 1099267752 :muser #f)* [condition-type] &error\n\n[[SRFI-35]]: \n{{{\n(define-condition-type &error &serious\n  error?)\n}}}\n\nSee also [[&serious]], [[&condition]], [[error?]].\n")
("int" . "(:ctime 1152518355 :cuser #f :mtime 1152524981 :muser #f)* [format descriptor] int\n[[RRRS]], [[R3RS]]: express as integer.\n")
("bit-lsh" . "(:ctime 1043985133 :cuser #f :mtime 1099724517 :muser #f)* [procedure] bit-lsh ''i1'' ''count''\n* [procedure] bit-rsh ''i1'' ''count''\n\n[[Bigloo]]: arithmetic shift of exact integer.\nSee also [[bit-or]] etc., for bitwise operations.\n\nSTklos has [[bit-shift]].\n\nSome implementations have [[arithmetic-shift]] or\n[[ash]].\n")
("every-pred" . "(:ctime 1201783533 :cuser #f :mtime 1201783533 :muser #f)[[$$include any-pred]]\n")
("stream?" . "(:ctime 1099279935 :cuser #f :mtime 1099279935 :muser #f)* [procedure] stream? ''obj''\n\n[[SRFI-40]]: Returns #t iff ''obj'' is a stream object.\n")
("string-for-each-index" . "(:ctime 1014894797 :cuser #f :mtime 1014894797 :muser #f)* [procedure] string-for-each-index ''proc'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]] \n\nSee also [[string-for-each]], [[string-map]], [[string-fold]]\n")
("call-with-output-string" . "(:ctime 1015070426 :cuser #f :mtime 1015070426 :muser #f)[[$$include call-with-input-string]]\n")
("hexdigit" . "(:ctime 1018071948 :cuser #f :mtime 1018071948 :muser #f)[[$$include lower-case]]\n")
("errno/spipe" . "(:ctime 1015077274 :cuser #f :mtime 1015077274 :muser #f)[[$$include errno/perm]]\n")
("interaction-environment" . "(:ctime 1014854865 :cuser #f :mtime 1014854865 :muser #f)* [procedure] interaction-environment\n\n[[R5RS]]\n\nSee also [[eval]], [[scheme-report-environment]], [[null-environment]].\n")
("input-port-name" . "(:ctime 1039754816 :cuser #f :mtime 1099726894 :muser #f)* [procedure] input-port-name ''iport''\n\n[[Bigloo]]: returns the file name associated to ''iport''.\n\nSome implementations have [[port-name]], [[port-filename]], or [[port-file-name]].\n")
("decompose-pathname" . "(:ctime 1015100156 :cuser #f :mtime 1020325851 :muser #f)* [procedure] decompose-pathname ''pathname''\n\n[[Chicken]]: Returns three values: the directory, filename and extension of\n''pathname''.  See also [[pathname-directory]], [[pathname-file]],\n[[pathname-extension]], [[make-pathname]],\n[[pathname-directory-separator]], [[pathname-extension-separator]]\n\nMzScheme has [[split-path]] that has similar function.\n")
("Concept:UserGroup" . "(:ctime 1015198501 :cuser #f :mtime 1245540839 :muser #f)APIs to obtain current user id and group id, and/or obtain\nmore information from the given user id and group id.\n\n- Interface to get current [effective] uid/gid, and/or login name.\n- Interface to access user/group database.\n-- Directly obtain information from user/group id/name.\n-- Obtain information via user/group structure, as in Unix.\n- Ability to change uid/gid.\n\n----\n** [[ChezScheme]]\n\n** [[Chicken]]\n:getuid etc.: [[current-user-id]], [[current-effective-user-id]],\n[[current-group-id]], [[current-effective-group-id]], [[set-user-id!]].\n:user/group db: \n\n** [[Gauche]]\n\n:getuid etc.: [[sys-getuid]], [[sys-geteuid]], [[sys-getgid]],\n[[sys-getegid]], [[sys-setuid]], [[sys-setgid]]\n:user/group db: [[sys-getpwnam]], [[sys-getpwuid]], [[sys-getgrnam]], [[sys-getgrid]]\n\n** [[Scheme48]]\n\n:getuid etc.: [[get-user-id]], [[get-effective-user-id]],\n[[get-group-id]], [[get-effective-group-id]], [[set-user-id!]],\n[[set-group-id!]]\n:user/group db lookup: [[user-id->user-info]], [[name->user-info]],\n[[group-id->group-info]], [[name->group-info]]\n:user/group db entry: [[user-info?]], [[user-info-name]],\n[[user-info-id]], [[user-info-group]], [[user-info-home-directory]], [[user-info-shell]],\n[[group-info?]], [[group-info-name]], [[group-info-id]],\n[[group-info-members]]\n\nUser-ids and group-ids are \"boxed\" in Scheme48.\nSee [[user-id->integer]], [[integer->user-id]],\n[[group-id->integer]], [[integer->group-id]].\n\n** [[STk]]\n\n")
("time-monotonic" . "(:ctime 1015208861 :cuser #f :mtime 1015208861 :muser #f)[[$$include time-duration]]\n")
("cond" . "(:ctime 1014841953 :cuser #f :mtime 1191209056 :muser #f)* [syntax] cond ''clause1'' ''clause2'' ...\n\n[[R5RS]], [[R6RS]]:\n\n[[SRFI-61]]: extends cond to allow user-defined guards and multiple [[values]].\n\nSee also [[if]].\n")
("get-effective-group-id" . "(:ctime 1015138939 :cuser #f :mtime 1015138939 :muser #f)[[$$include get-group-id]]\n")
("read-string" . "(:ctime 1015073616 :cuser #f :mtime 1039756225 :muser #f)* [procedure] read-string ''num'' [''port'']\n\n[[Chicken]]: reads up to ''num'' characters or to encounter EOF from ''port''.\n\n[[Gauche]] has the same function in module text.parse.\n\n[[Scsh]] allows a file descriptor in place of a port.\nSee also [[read-string!]], [[read-string/partial]]\n\n* [procedure] read-string [''port'']\n\n[[Bigloo]]: lacks ''num'' argument.  Reads everything upto EOF.\nThis version has similar functionality as [[port->string]]\nwhich can be found in several implementations.\n")
("current-error-port" . "(:ctime 1015050860 :cuser #f :mtime 1039755417 :muser #f)* [procedure] current-error-port\n\n[[Bigloo]], [[Chicken]], [[STk]], [[STklos]], [[Gauche]], [[SCM]]\n\nSee also [[current-input-port]], [[current-output-port]]\n\nThis is called [[error-output-port]] in some implementations.\n\n* [procedure] current-error-port ''port''\n\n[[Chicken]]: if optional ''port'' argument is given,\nit is set to the current error port.\n\nSome implementations have [[set-error-output-port!]],\n[[set-current-error-port]].\n")
("char-set?" . "(:ctime 1015198981 :cuser #f :mtime 1015773238 :muser #f)* [procedure] char-set? ''obj''\n\n[[SRFI-14]]: see also [[char-set]] etc.\n\nAlso in [[Gauche]].  See [[#[]] as well.\n\n")
("import-excluding" . "(:ctime 1015048456 :cuser #f :mtime 1015048647 :muser #f)* [module clause] import-excluding (''module'' ''exclude'') ...\n\n[[Chicken]]: can only appear in module clauses of [[define-module]].\nImports exported symbols from ''module'' except the ones listed in ''exclude''.\nSee also [[import]].\n")
("time-monotonic->date" . "(:ctime 1099301203 :cuser #f :mtime 1099301239 :muser #f)* [procedure] time-monotonic->date ''time'' [''tz-offset'']\n* [procedure] time-monotonic->julian-day ''time''\n* [procedure] time-monotonic->modified-julian-day ''time''\n* [procedure] time-monotonic->time-tai ''time''\n* [procedure] time-monotonic->time-tai! ''time''\n* [procedure] time-monotonic->time-utc ''time''\n* [procedure] time-monotonic->time-utc! ''time''\n\n[[SRFI-19]]: Conversion procedures.\n")
("Guile" . "(:ctime 1014837531 :cuser #f :mtime 1384695436 :muser #f)GNU's extension scripting language.\n\nhttp://www.gnu.org/software/guile/guile.html\n\n[[$$srfis 0 1 2 4 6 8 9 10 11 13 14 16 17 18 19 23 26 27 30 31 34 35 37 38 39 41 42 45 55 60 61 67 69 88 98 105]]\n----\n\nThis list is from the manual of Guile 1.8.\n\n* API Overview\n** Simple Generic Data Types\n\n[[log10]], [[sinh]], [[cosh]], [[tanh]],\n[[asinh]], [[acosh]], [[atanh]],\n[[logand]], [[logior]], [[logxor]], [[lognot]],\n[[logtest]], [[logbit?]], [[ash]], [[logcount]],\n[[integer-length]], [[integer-expt]], [[bit-extract]],\n[[copy-random-state]],\n[[random]], [[random:exp]], [[random:hollow-sphere!]],\n[[random:normal]], [[random:normal-vector!]],\n[[random:solid-sphere]], [[random:uniform]],\n[[seed->random-state]]\n\n[[char-is-both?]], \n\n[[string-null?]], [[string-split]], [[substring]],\n[[substring-fill!]], [[substring-move!]],\n[[string-index]], [[string-rindex]],\n[[string-upcase]], [[string-upcase!]],\n[[string-downcase]], [[string-downcase!]],\n[[string-capitalize]], [[string-capitalize!]],\n")
("abort" . "(:ctime 1015024439 :cuser #f :mtime 1015212034 :muser #f)* [procedure] abort\n\n[[ChezScheme]]: calls current [[abort-handler]].  Exits from Scheme by default.\n\n[[SCM]]: resumes the toplevel repl.\n\nSee also [[reset]], [[restart]], [[exit]].\n")
("build-path" . "(:ctime 1020222581 :cuser #f :mtime 1099741997 :muser #f)* [procedure] build-path ''base-path'' ''sub-path'' ...\n\n[[MzScheme]], [[Gauche]]: build a pathname with given components.\n\nSome implementations have [[make-path]].\n")
("lambda" . "(:ctime 1014848196 :cuser #f :mtime 1191208839 :muser #f)* [syntax] lambda ''formals'' ''body'' ...\n\n[[R5RS]], [[R6RS]]:\n\nSee also [[case-lambda]], [[lambda*]].\n\n* [syntax] lambda ''formals'' ''body'' ...\n\n[[STklos]]: extends [[lambda]] to allow optional, keyword and\nrest arguments (a la CL).\n\n{{{\n(define f \n  (lambda (a :optional b :rest c :key d e) \n    (list a b c d e)))\n}}}\n\n[[MIT-Scheme]]: extends [[lambda]] to allow optional and rest arguments,\nusing named constant [[#!optional]] and [[#!rest]].\n\n{{{\n(define f\n  (lambda (a b #!optional c d #!rest e)\n     (list a b c d e)))\n}}}\n")
("make-cell" . "(:ctime 1017981068 :cuser #f :mtime 1017981068 :muser #f)* [procedure] make-cell ''value''\n\n[[Scheme48]]: ''Cell'' is an object that holds a value,\nand is useful for indirection.\n\nSee also [[cell?]], [[cell-ref]], [[cell-set!]].\n\nChezScheme has an object ''box'' which is similar to\n''cell''.  See [[box]].\n")
("+fl" . "(:ctime 1040351554 :cuser #f :mtime 1040351554 :muser #f)* [procedure] +fl ''i1'' ''i2''\n* [procedure] -fl ''i1'' ''i2''\n* [procedure] *fl ''i1'' ''i2''\n* [procedure] /fl ''i1'' ''i2''\n\n[[Bigloo]]: flonum-specialized numeric ops.\nSee also [[=fl]] etc.  Fixnum versions are [[+fx]] etc.\n\nChezScheme has [[fl+]] etc.\n")
("test-match-all" . "(:ctime 1151049296 :cuser #f :mtime 1151076941 :muser #f)* [syntax] test-match-all ''specifier'' ...\n\n[[SRFI-64]]: returns the specifier matches the test case which all ''specifier'' match.\nEach ''specifier'' is always applied even if former ''specifier'' results false.\n\nSee also [[test-skip]] and [[test-expect-fail]].\n")
("bignum?" . "(:ctime 1014954368 :cuser #f :mtime 1138264379 :muser #f)* [procedure] bignum? ''obj''\n\n[[ChezScheme]], [[STklos]], [[Gauche]]\n\nSee also [[fixnum?]], [[flonum?]], [[ratnum?]], [[cflonum?]]\n")
("string->elong" . "(:ctime 1039409380 :cuser #f :mtime 1039409380 :muser #f)* [procedure] string->elong ''string'' ''radix''\n* [procedure] string->llong ''string'' ''radix''\n\n[[Bigloo]]: convert string to integer.  the result must\nfit in elong or llong, respectively.\nSee [[elong?]] and [[llong?]].\n")
("string-rindex" . "(:ctime 1039752689 :cuser #f :mtime 1039752689 :muser #f)* [procedure] string-rindex ''str'' ''char'' [''start'' ''end'']\n\n[[Guile]]: search for ''char'' in ''str'' from right,\nand returns the index if found, #f otherwise.\n\nSRFI-13 has a generalized version, [[string-index-right]].\n")
("string-find?" . "(:ctime 1018333290 :cuser #f :mtime 1018333454 :muser #f)* [procedure] string-find? ''string1'' ''string2''\n\n[[STk]]: returns #t if ''string1'' appears in ''string2''.\nSee also [[string-index]].\n")
("transcript-off" . "(:ctime 1014860189 :cuser #f :mtime 1014860189 :muser #f)* [procedure] transcript-off\n\n[[R5RS]]: Turn offf the transcript.\n\nSee also [[transcript-on]].\n")
("logtest" . "(:ctime 1015772928 :cuser #f :mtime 1039750745 :muser #f)* [procedure] logtest ''n1'' ''n2''\n\n[[SLIB]], [[Guile]]: (not (zero? (logand ''n1'' ''n2'')))\n\nSee also [[logand]]\n\n* [procedure] logtest ''n1'' ''n2'' ...\n\n[[Gauche]] allows more than two arguments.\n")
("condition-ref" . "(:ctime 1099263973 :cuser #f :mtime 1099263973 :muser #f)* [procedure] condition-ref ''condition'' ''field-name''\n\n[[SRFI-35]]: Returns the value of ''field-name'' of ''condition''.\nSee [[make-condition]], [[make-condition-type]].\n")
("ucs2-ci<?" . "(:ctime 1039428829 :cuser #f :mtime 1039428829 :muser #f)[[$$include ucs2-ci=?]]\n")
("put!" . "(:ctime 1015070964 :cuser #f :mtime 1015070964 :muser #f)* [procedure] put! ''hash-table'' ''key'' ''prop'' ''value''\n\n[[Chicken]]: stores ''value'' as property ''prop'' of the item ''key''\nin the hash table ''hash-table''.  See also [[get]], [[make-hash-table]].\n")
("identity" . "(:ctime 1201704572 :cuser #f :mtime 1201704582 :muser #f)* [procedure] identity ''obj''\n\nReturns ''obj''.\n\nArguably, [[values]] should be suffice for this purpose.\n")
("string-trim-right" . "(:ctime 1014889385 :cuser #f :mtime 1014889385 :muser #f)* [procedure] string-trim-right ''s'' [''char/char-set/pred'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-trim]], [[string-trim-both]].\n")
("test-on-bad-end-name-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151084059 :muser #f)* [procedure] test-on-bad-end-name-simple ''runner'' ''begin-name'' ''end-name''\n\n[[SRFI-64]]: (test-runner-on-bad-end-name (test-runner-simple)).\n\nSee also [[test-runner-simple]] and [[test-runner-on-bad-end-name]].\n")
("with-syntax" . "(:ctime 1014962978 :cuser #f :mtime 1014962978 :muser #f)* [syntax] with-syntax ((''pattern'' ''val'') ...) ''exp1'' ''exp2'' ...\n\n[[ChezScheme]]\n\nSee [[syntax-case]]\n")
("fix" . "(:ctime 1152518355 :cuser #f :mtime 1152525495 :muser #f)* [format descriptor] fix [''n'']\n[[RRRS]], [[R3RS]]: express with a fixed radix point. ''n'' specifies the number of places to the right of the radix point. ''n'' defaults to the size of a single-precision flonum.\n\nSee also [[number->string]].\n")
("perror" . "(:ctime 1015883812 :cuser #f :mtime 1015883812 :muser #f)* [procedure] perror ''string''\n\n[[SCM]]: perror().\n")
("string-ci>" . "(:ctime 1015066218 :cuser #f :mtime 1015066218 :muser #f)[[$$include string-ci=]]\n")
("touchwin" . "(:ctime 1015882615 :cuser #f :mtime 1015882615 :muser #f)* [procedure] touchwin ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("signal/fpe" . "(:ctime 1015076546 :cuser #f :mtime 1015076546 :muser #f)[[$$include signal/hup]]\n")
("lset-adjoin" . "(:ctime 1014874583 :cuser #f :mtime 1014874583 :muser #f)* [procedure] lset-adjoin ''elt='' ''list'' ''elt1'' ...\n\n[[SRFI-1]]: Adds the ''elti'' elements not already in the ''list'' parameter to \nthe result list. \n\n")
("expand-file-name" . "(:ctime 1018337319 :cuser #f :mtime 1099741494 :muser #f)* [procedure] expand-file-name ''string''\n\n[[STk]], [[STklos]]: Makes given string to absolute path.\nThis function understands the tilde convention.\nSee also [[canonical-path]].\n\nSimilar functionality is provided under different names\nin other implementations.  See [[sys-normalize-pathname]], [[expand-path]].\n\nSee also [[canonical-file-name]].\n")
("+" . "(:ctime 1014847075 :cuser #f :mtime 1191218597 :muser #f)* + ''z'' ...\n\n[[R5RS]], [[R6RS]]\n\nSee also [[+.]], [[*]], [[-]], [[/]].\n\n")
("sys-nanosleep" . "(:ctime 1038486440 :cuser #f :mtime 1038486440 :muser #f)* [procedure] sys-nanosleep ''nanoseconds''\n\n[[Gauche]]: POSIX nanosleep().\n''nanoseconds'' can be either a real number or\n[[<time>]] object.\nSee also [[sys-sleep]].\n\n\n")
("procp" . "(:ctime 1152535011 :cuser #f :mtime 1152537100 :muser #f)* [procedure] procp ''thing''\n\n[[RRS]]: returns true iff ''thing'' is procedure.\n")
("obj->0..255" . "(:ctime 1045088988 :cuser #f :mtime 1045088988 :muser #f)[[$$include string->0..255]]\n")
("whitespace" . "(:ctime 1018071930 :cuser #f :mtime 1018071930 :muser #f)[[$$include lower-case]]\n")
("define-struct" . "(:ctime 1063240067 :cuser #f :mtime 1365076938 :muser #f)* [syntax] define-struct ''name'' ''field'' ...\n\n[[Bigloo]], [[STklos]]: defines a structure with ''field''s.\nThe following related procedures are defined by this macro.\n- Constructor: make-''name''\n- Predicate: ''name''?\n- Field accessor: ''name''-''field''\n- Field modifier: ''name''-''field''-set!  (STklos doesn't define this; you\ncan use set! with accessor to set the field value).\n\nIn STklos, struct instance can also be created by [[make-struct]].\n\nSee also [[struct?]], [[define-record-type]].\n\n* [syntax] define-struct ''name'' (''field'' ...) [''inspector-expr'']\n* [syntax] define-struct (''name'' ''parent'') (''field'' ...) [''inspector-expr'']\n\n[[MzScheme]]: defines a structure ''name'' with ''fields''.\nThe following related objects are defined by this macro.\n- Type destriptor: struct:''name''\n- Constructor: make-''name''\n- Predicate: ''name''?\n- Field accessor: ''name''-''field''\n- Field modifier: set-''name''-''field''!\n- Syntax (to be used in [[match]] form): ''name''\n\nThe second form allows to make a structure ''name'' as a subtype of ''parent''.\n\nMzScheme also has [[let-struct]] to create local structures, [[make-struct-type]] to\ncreate structures procedurally.\n\n [http://www.nuc.berkeley.edu/node/4285 berkeley]\n")
("symbol-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499504 :muser #f)* [procedure] symbol-compare ''symbol1'' ''symbol2''\n[[SRFI-67]]: Compares symbols as [[string<=?]] on the names returned by [[symbol->string]].\n")
("port->string" . "(:ctime 1016068662 :cuser #f :mtime 1099727213 :muser #f)* [procedure] port->string ''port''\n\n[[Scsh]], [[Gauche]], [[STk]], [[STklos]]: reads all charactes until EOF from\n''port'' and returns a string that consists of those characters.\nSee also [[port->string-list]], [[port->sexp-list]].\n\nBigloo's [[read-string]] has similar functionality.\n")
("stack-trace" . "(:ctime 1015888089 :cuser #f :mtime 1015888089 :muser #f)* [procedure] stack-trace\n\n[[SCM]]: prints executing stack information.\n")
("odd?" . "(:ctime 1014857167 :cuser #f :mtime 1191216294 :muser #f)* [procedure] odd? ''n''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[even?]].\n")
("cut" . "(:ctime 1036934467 :cuser #f :mtime 1036934467 :muser #f)* [syntax] cut ''slot-or-expr'' ''slot-or-expr2'' ...\n* [syntax] cute ''slot-or-expr'' ''slot-or-expr2'' ...\n\n[[SRFI-26]]:\n\n (cut cons (+ a 1) <>) is the same as (lambda (x2) (cons (+ a 1) x2))\n (cut list 1 <> 3 <> 5) is the same as (lambda (x2 x4) (list 1 x2 3 x4 5))\n (cut list) is the same as (lambda () (list))\n (cut list 1 <> 3 <...>) is the same as (lambda (x2 . xs) (apply list 1 x2 3 xs))\n (cut <> a b) is the same as (lambda (f) (f a b))\n\n")
("output-char" . "(:ctime 1063240662 :cuser #f :mtime 1063240662 :muser #f)[[$$include input-char]]\n")
("not" . "(:ctime 1014856912 :cuser #f :mtime 1191313869 :muser #f)* [procedure] not ''obj''\n\n[[R5RS]], [[R6RS]]\n\n\n")
("get-widget-data" . "(:ctime 1018335817 :cuser #f :mtime 1018335817 :muser #f)[[$$include set-widget-data!]]\n")
("fluidbind" . "(:ctime 1152535011 :cuser #f :mtime 1152542445 :muser #f)* [magic form] fluidbind ((''identifier'' ''form'') ...) ''body''\n[[RRS]]: evaluates ''body'' with a dynamic environment to which dynamic bindings of the ''identifier''s have been added.\n")
("file-readable?" . "(:ctime 1015905660 :cuser #f :mtime 1015905660 :muser #f)* [procedure] file-readable? ''pathname''\n* [procedure] file-writable? ''pathname''\n* [procedure] file-executable? ''pathname''\n\n[[Scsh]]: file accessibility query.\n\nThese functions are called [[file-is-readable?]], [[file-is-writable?]],\n[[file-is-executable?]], or [[file-read-access?]], [[file-write-access?]],\n[[file-execute-access?]] in some implementations.\n\nSome implementations also have POSIX access() interface; see [[sys-access]].\n")
("free-identifier=?" . "(:ctime 1014962665 :cuser #f :mtime 1014962665 :muser #f)* [procedure] free-identifier=? ''id1'' ''id2''\n\n[[ChezScheme]]\n\nSee [[syntax-case]]\n")
("profile-clear" . "(:ctime 1015023908 :cuser #f :mtime 1015023908 :muser #f)* [procedure] profile-clear\n\n[[ChezScheme]]: clear profile information.\n")
("print-vector-length" . "(:ctime 1014960394 :cuser #f :mtime 1014960394 :muser #f)* [procedure] print-vector-length [''newval'']\n\n[[ChezScheme]]: a parameter for [[write]] and [[pretty-print]]\n")
("Concept:Process" . "(:ctime 1015190527 :cuser #f :mtime 1245540933 :muser #f)Interface to the host OS's processes.\n\n- Query the current pid and ppid.\n- Ability to run a command as a subprocess, either synchronously \n(a.k.a. system()) or asynchronously.\n- Ability to fork and other low-level interface.\n- Means of inter-process communication.\n\n----\n** [[ChezScheme]]\n:Query:\n:System: [[system]], [[process]]\n:Fork&Exec:\n:IPC:\n\n** [[Chicken]]\n:Query: [[current-process-id]], [[parent-process-id]]\n:System: [[process-run]], [[open-input-pipe]], [[open-output-pipe]],\n[[call-with-input-pipe]], [[call-with-output-pipe]], \n[[with-input-from-pipe]], [[with-output-to-pipe]].\n:Fork&Exec: [[process-fork]], [[process-execute]], [[process-wait]],\n[[create-pipe]]\n:IPC: [[process-signal]]\n\n** [[Gauche]]\n:Query: [[sys-getpid]], [[sys-getppid]]\n:System: [[sys-system]].  In gauche.process module, [[run-process]],\n[[open-input-process]], [[open-output-process]], [[call-with-input-process]],\n[[call-with-output-process]], [[with-input-from-process]],\n[[with-output-to-process]]\n:Fork&Exec: [[sys-fork]], [[sys-exec]], [[sys-wait]], [[sys-waitpid]].\n:IPC: [[sys-kill]]\n\n** [[Scheme48]]\n:Query: [[get-process-id]], [[get-parent-process-id]]\n:System:\n:Fork&Exec: [[fork]], [[exec]], [[exec-with-environment]],\n[[exec-file]], [[exec-file-with-environment]], [[exec-with-alias]],\n[[wait-for-child-process]].\n:IPC:\n\n** [[STk]]\n\n:Query: [[getpid]]\n:System: [[system]], [[exec]]\n:Fork&Exec: [[posix-fork]],\n[[run-process]].\n:IPC:\n\n")
("every?-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144536079 :muser #f)* [syntax] every?-ec ''qualifier'' ... ''test''\n[[SRFI-42]]:\nTests whether all values of ''test'' are non-#f. If this is the case, #t is\nreturned, otherwise #f. If the sequence is empty the result is #t.\nEnumeration stops after the first #f.\n")
("SRFI-35" . "(:ctime 1063364280 :cuser #f :mtime 1122428761 :muser #f)SRFI-35: Conditions\n\nhttp://srfi.schemers.org/srfi-35/srfi-35.html\n\n[[$$srfi-implementors]]\n\n----\n[[make-condition-type]], [[condition-type?]], \n[[make-condition]], [[condition?]], [[condition-has-type?]],\n[[condition-ref]], [[make-compound-condition]], [[extract-condition]],\n[[define-condition-type]], [[condition]]\n\n[[&condition]], [[&message]], [[&serious]], [[&error]]\n[[message-condition?]], [[condition-message]],\n[[serious-condition?]], [[error?]]\n\n----\n\n** Integration of srfi-35 condition hierarchy and CLOS-style object system\n\nIf the implementation supports CLOS-style object system, it may be\nnatural to map each condition type to each class.\nThen ''(condition-has-type? cond type)'' is just a ''(is-a? cond type)''.\nHowever, this might cause a problem with compound conditions.\n\nIf we want to keep condition-has-type? vs is-a? equivalence,\n''(make-compound-condition cond0 cond1 ...)'' has to create a subclass\nthat inherits all of ''(class-of condN)''.\nThis means:\n- make-compound-condition can fail if it can't find a consistent\nclass precedence list (srfi-35 itself only allows single inheritance\nfor condition types, and there's no way to access the implicit multiple \ninheritance created by make-compound-condition; but the user may use\nhis/her own mixin classes for conditions).\n- creating compound condition may be very heavy, for it may go through\nwhole class definition protocol (although this may be alleviated by\ncaching)\n\nDifferent implementations seem to approach this differently.\n\n- [[STklos]] supports srfi-35 since 0.58.  It maps condition types\nto built-in struct types ([[make-struct-type]]), and uses hard-wired\nmultiple inheritance mechanism for compound condition types.\nIt only deals with simple slot inheritance and doesn't go through\nclass linearization.\n\n- [[Guile]] appears to have a distinct compound-condition class.\n")
("unsetenv" . "(:ctime 1015199834 :cuser #f :mtime 1015199834 :muser #f)* [procedure] unsetenv ''variable''\n\n[[Chicken]]: unset the environment variable.  See also\n[[setenv]], [[current-environment]].\n")
("thread-join!" . "(:ctime 1015927454 :cuser #f :mtime 1015928297 :muser #f)* [procedure] thread-join! ''thread'' [''timeout'' ''timeout-val'']\n\n[[SRFI-18]], [[SRFI-21]]\n")
("string-fill!" . "(:ctime 1014859521 :cuser #f :mtime 1191220982 :muser #f)* [procedure] string-fill! ''string'' ''char''\n\n[[R5RS]]: Stores ''char'' in every element of the given ''string'' \nand returns an unspecified value. \n\n[[R6RS]]: In R6RS, this procedure is moved to a library \n'''(rnrs mutable-strings (6))''', which is ''not'' included \nin the composite library '''(rnrs (6))'''.\n\n\n* [procedure] string-fill! ''string'' ''char'' [''start'' ''end'']\n\n[[SRFI-13]] extends R5RS to take optional arguments.\n\n")
("sys-lstat" . "(:ctime 1040727372 :cuser #f :mtime 1040727372 :muser #f)[[$$include sys-stat]]\n")
("string->integer" . "(:ctime 1039409309 :cuser #f :mtime 1039409309 :muser #f)* [procedure] string->integer ''string'' [''radix'']\n\n[[Bigloo]]: convert string to integer.\nSee also [[integer->string]], [[string->elong]],\n[[string->llong]].\n\n")
("SRFI-124" . "(:ctime 1474475491 :cuser #f :mtime 1474475491 :muser #f)SRFI-124: Ephemerons\n\nhttp://srfi.schemers.org/srfi-124/srfi-124.html\n\n[[$$srfi-implementors]]\n")
("quasisyntax" . "(:ctime 1191206967 :cuser #f :mtime 1380958513 :muser #f)* [syntax] quasisyntax ''template''\n\n[[R6RS]]: Similar to [[syntax]], but it allows parts of the quoted text\nto be evaluated like [[quasiquote]].\nWithin ''template'', subforms of [[unsyntax]] and [[unsyntax-splicing]]\nare evaluated, while everything else is treated as in [[syntax]].\n\nSee also [[#`]], [[unsyntax]], [[unsyntax-splicing]], [[syntax]].\n\n")
("set-alarm!" . "(:ctime 1015199445 :cuser #f :mtime 1015199510 :muser #f)* [procedure] set-alarm! ''seconds''\n\n[[Chicken]]: set alarm timer so that [[signal/alrm]] is delivered after\n''seconds''.  See also [[set-signal-handler!]].\n\nThis procedure is called [[set-timer]] or [[sys-alarm]] \nin other implementations.\n")
("putprop!" . "(:ctime 1039345589 :cuser #f :mtime 1039345589 :muser #f)* [procedure] putprop! ''symbol-or-keyword'' ''key'' ''val''\n\n[[Bigloo]]: stores ''val'' using ''key'' on\n''symbol-or-keyword'' 's property list.\n\nSee also [[getprop]], [[symbol-plist]], [[remprop!]].\n\nChezScheme calls this [[putprop]].\n")
("char-set:digit" . "(:ctime 1018082656 :cuser #f :mtime 1018082656 :muser #f)[[$$include char-set:lower-case]]\n")
("lognot" . "(:ctime 1014951581 :cuser #f :mtime 1043985013 :muser #f)* [procedure] lognot ''n''\n\n[[SLIB]], [[Gauche]], [[SISC]], [[Guile]]: bitwise not of integer ''n''.\n\nNote that SISC has range limitation in ''n'' (as of 1.6.4).\n\nSee also [[logand]], [[logor]], [[logior]], [[logxor]].\n\nThis is called [[bitwise-not]] \nor [[bit-not]] in some implementations.\n\nChez has [[fxlognot]] that works for fixnum range.\n")
("have-system?" . "(:ctime 1017989953 :cuser #f :mtime 1017989953 :muser #f)* [procedure] have-system?\n\n[[Scheme48]]: returns a boolean value to indicate\nwhether the system implements [[system]] procedure.\n")
("fl<?" . "(:ctime 1191226768 :cuser #f :mtime 1191226768 :muser #f)[[$$include fl=?]]\n")
("file-info-name" . "(:ctime 1040727276 :cuser #f :mtime 1040727276 :muser #f)* [procedure] file-info-name ''file-info''\n* [procedure] file-info-type ''file-info''\n* [procedure] file-info-device ''file-info''\n* [procedure] file-info-inode ''file-info''\n* [procedure] file-info-link-count ''file-info''\n* [procedure] file-info-size ''file-info''\n* [procedure] file-info-owner ''file-info''\n* [procedure] file-info-group ''file-info''\n* [procedure] file-info-mode ''file-info''\n* [procedure] file-info-last-access ''file-info''\n* [procedure] file-info-last-modification ''file-info''\n* [procedure] file-info-last-info-change ''file-info''\n\n[[Scheme48]]: accessors of ''file-info'' object\nreturned by [[get-file-info]] or [[get-file/link-info]].\nSee also [[Concept:FileSystem]].\n")
("substring-fill!" . "(:ctime 1014945537 :cuser #f :mtime 1039752274 :muser #f)* [procedure] substring-fill! ''string'' ''start'' ''end'' ''char''\n\n[[ChezScheme]], [[Guile]]\n\nEquivalent to [[SRFI-13]]'s [[string-fill!]] with optional arguments.\n")
("ChezScheme" . "(:ctime 1014837298 :cuser #f :mtime 1122431150 :muser #f)Chez Scheme is a commercial Scheme implementation with incremental\nnative-code compiler.  The interpreter version, Petite Chez Scheme,\nis freely available.\n\nhttp://www.scheme.com/\n\n[[$$srfis 62]]\n\n----\n** Debugging\n\n[[trace-lambda]], [[trace-let]], [[trace]], [[untrace]],\n[[trace-output-port]], [[trace-print]], [[trace-define]]\n\n[[debug]], [[inspect]], [[source-directories]],\n[[inspect/object]]\n\n** Foreign interface\n\n[[system]], [[process]]\n\n[[foreign-procedure]], [[foreign-entry?]], [[load-shared-object]],\n[[provide-foreign-entries]], [[load-foreign]], [[default-foreign-libraries]],\n[[remove-foreign-entry]]\n\n** Binding forms\n\n[[case-lambda]], [[rec]], [[fluid-let]],\n[[define-top-level-value]], [[set-top-level-value!]], \n[[top-level-value]], [[top-level-bound?]]\n\n** Control Structures\n\n[[record-case]], [[when]], [[unless]], [[ormap]], [[andmap]]\n\n[[call/1cc]]\n\n[[make-engine]], [[engine-block]], [[engine-return]]\n\n** Operations on Objects\n\n[[atom?]], [[last-pair]], [[list-copy]], [[list*]], [[make-list]],\n[[sort]], [[sort!]], [[merge]], [[merge!]],\n[[remq]], [[remv]], [[remove]], [[remq!]], [[remv!]], [[remove!]],\n[[subst]], [[substq]], [[substv]], [[subst!]], [[substq!]], [[substv!]],\n[[reverse!]], [[append!]]\n\n[[substring-fill!]]\n\n[[char-]]\n\n[[vector-copy]]\n\n[[box?]], [[box]], [[unbox]], [[set-box!]], [[#&]]\n\n[[string->uninterned-symbol]], [[gensym]], [[gensym-prefix]], [[gensym-count]],\n[[uninterned-symbol?]], [[putprop]], [[getprop]], [[remprop]],\n[[property-list]], [[oblist]]\n\n[[void]]\n\n[[define-record]], [[make-record-type]], [[record-type-descriptor?]],\n[[record-constructor]], [[record-predicate]], [[record-field-accessor]],\n[[record-field-accessible?]], [[record-field-mutator]], \n[[record-field-mutable?]], [[record-type-name]], [[record-type-field-names]],\n[[record?]], [[record-type-descriptor]], [[record-reader]],\n[[define-structure]]\n\n\n** Numeric Operations\n\n[[fixnum?]], [[bignum?]], [[ratnum?]], [[flonum?]], [[cflonum?]]\n\n[[most-positive-fixnum]], [[most-negative-fixnum]],\n[[fx=]], [[fx<]], [[fx>]], [[fx<=]], [[fx>=]], [[fxzero?]],\n[[fxpositive?]], [[fxnegative?]], [[fxnonpositive?]], [[fxnonnegative?]],\n[[fxeven?]], [[fxodd?]], [[fx+]], [[fx-]], [[fx*]], [[fx/]],\n[[fx1+]], [[fx1-]], [[fxquotient]], [[fxremainder]], [[fxmodulo]],\n[[fxabs]], [[fxmax]], [[fxmin]], [[fxlogand]], [[fxlogor]], [[fxlogxor]],\n[[fxlognot]], [[fxsll]], [[fxsrl]], [[fxsra]]\n\n[[fixnum->flonum]], [[flonum->fixnum]], [[fl=]], [[fl<]], [[fl<=]],\n[[fl>]], [[fl>=]], [[fl+]], [[fl-]], [[fl*]], [[fl/]],\n[[flabs]], [[decode-float]], [[fllp]]\n\n[[fl-make-rectangular]], [[cfl-real-part]], [[cfl-imag-part]],\n[[cfl=]], [[cfl+]], [[cfl-]], [[cfl*]], [[cfl/]],\n[[cfl-conjugate]], [[cfl-magnitude-squared]]\n\n[[random]], [[random-seed]]\n\n[[1+]], [[add1]], [[1-]], [[sub1]], [[expt-mod]], [[isqrt]],\n[[integer-length]], [[ash]], [[nonpositive?]], [[nonnegative?]],\n[[conjugate]], [[magnitude-squared]], [[sinh]], [[cosh]], [[tanh]],\n[[asinh]], [[acosh]], [[atanh]]\n\n\n** Input/output operations\n\n[[make-input-port]], [[make-output-port]], [[make-input/output-port]],\n[[port-handler]], [[port-input-buffer]], [[port-input-size]], \n[[port-input-index]], [[set-port-input-size!]], [[set-port-input-index!]],\n[[port-output-buffer]], [[port-output-size]], [[port-output-index]],\n[[set-port-output-size!]], [[set-port-output-index!]],\n[[mark-port-closed!]], [[port?]], [[close-port]], [[port-closed?]],\n[[port-name]], [[file-length]], [[file-position]], [[clear-input-port]],\n[[clear-output-port]], [[flush-output-port]],\n[[open-input-string]], [[open-output-string]], [[get-output-string]],\n\n[[console-input-port]], [[current-input-port]], [[unread-char]],\n[[block-read]], [[read-token]]\n\n[[console-output-port]], [[current-output-port]],\n[[open-output-file]], [[call-with-output-file]], [[with-output-to-file]],\n[[block-write]], [[pretty-print]], [[pretty-file]],\n[[format]], [[printf]], [[fprintf]]\n\n[[char-name]], [[case-sensitive]], [[print-graph]], [[print-level]],\n[[print-length]], [[print-radix]], [[print-gensym]], \n[[print-brackets]], [[print-vector-length]], [[pretty-line-length]],\n[[pretty-one-line-limit]], [[pretty-initial-indent]], \n[[pretty-standard-indent]], [[pretty-maximum-lines]]\n\n[[fasl-write]], [[fasl-file]]\n\n[[current-directory]], [[file-exists?]], [[delete-file]]\n\n** Syntactic Extension\n\n[[fluid-let-syntax]], [[syntax-case]], [[syntax]],\n[[identifier?]], [[identifier-syntax]], \n[[bound-identifier=?]], [[free-identifier=?]], [[literal-identifier=?]],\n[[with-syntax]], [[syntax-object->datum]], [[datum->syntax-object]],\n[[include]], [[generate-temporaries]]\n\n[[module]], [[import]], [[import-only]],\n[[scheme]], [[r5rs]], [[r5rs-syntax]], [[ieee]]\n\n** System Operations\n\n[[error]], [[error-handler]], [[warning]], [[warning-handler]],\n[[break]], [[break-handler]], [[keyboard-interrupt-handler]],\n[[set-timer]], [[timer-interrupt-handler]], [[disable-interrupts]],\n[[enable-interrupts]], [[critical-section]], [[register-signal-handler]]\n\n[[eval]], [[ieee-environment]], [[current-eval]],\n[[compile]], [[interpret]], [[load]], [[visit]],\n[[compile-file]], [[compile-port]], [[machine-type]],\n[[expand]], [[current-expand]], [[sc-expand]], [[eps-expand]],\n[[eval-when]], [[eval-syntax-expanders-when]]\n\n[[optimize-level]], [[generate-interrupt-trap]],\n[[compile-interpret-simple]], [[generate-inspector-information]],\n[[compile-profile]], [[profile-clear]],\n[[run-cp0]], [[cp0-effort-limit]], [[cp0-score-limit]], [[cp0-outer-unroll-limit]],\n\n[[new-cafe]], [[transcript-cafe]], [[waiter-prompt-string]],\n[[waiter-prompt-and-read]], [[waiter-write]],\n[[abort]], [[abort-handler]], [[reset]], [[reset-handler]]\n[[exit]], [[exit-handler]]\n\n[[scheme-start]], [[suppress-greeting]]\n\n[[time]], [[display-statistics]], [[cpu-time]], [[real-time]],\n[[bytes-allocated]], [[statistics]], [[make-sstats]],\n[[sstats?]], [[sstats-cpu]], [[sstats-real]], [[sstats-bytes]],\n[[sstats-gc-count]], [[sstats-gc-cpu]], [[sstats-gc-real]],\n[[sstats-gc-bytes]], [[set-sstats-cpu!]], [[set-sstats-real!]],\n[[set-sstats-bytes!]], [[set-sstats-gc-count!]], \n[[set-sstats-gc-cpu!]], [[set-sstats-gc-real!]], [[set-sstats-gc-bytes!]]\n[[sstats-difference]] [[sstats-print]]\n\n[[make-parameter]], [[parameterize]]\n\n[[date-and-time]], [[getenv]]\n\n[[subset-mode]]\n\n** Storage Management\n\n[[collect]], [[collect-maximum-generation]], [[collect-notify]],\n[[collect-request-handler]], [[collect-trip-bytes]]\n\n[[weak-cons]], [[weak-pair?]], [[bwp-object?]], [[make-guardian]]\n\n[[lock-object]], [[unlock-object]]\n\n** Compatibility Features\n\n[[install-expander]], [[define-syntax-expander]],\n[[extend-syntax]], [[with]]\n")
("ucs2<=?" . "(:ctime 1039428795 :cuser #f :mtime 1039428795 :muser #f)[[$$include ucs2=?]]\n")
("-fl" . "(:ctime 1040351602 :cuser #f :mtime 1040351602 :muser #f)[[$$include +fl]]\n")
("a:fixz16b" . "(:ctime 1144485145 :cuser #f :mtime 1144529294 :muser #f)* [procedure] a:fixz16b [''n'']\n[[SRFI-63]]: Returns an exact binary fixnum uniform-array prototype with at least 16 bits of precision.\n")
("test-runner?" . "(:ctime 1151049296 :cuser #f :mtime 1151077778 :muser #f)* [syntax] test-runner? ''obj''\n\n[[SRFI-64]]: return true iff obj is test-runner.\n")
("signal/int" . "(:ctime 1015076538 :cuser #f :mtime 1015076538 :muser #f)[[$$include signal/hup]]\n")
("string->uninterned-symbol" . "(:ctime 1014946199 :cuser #f :mtime 1099724701 :muser #f)* [procedure] string->uninterned-symbol ''string''\n\n[[ChezScheme]]: returns a new, uninterned symbol whose name is ''string''.\nChez uses a reader syntax [[#:]] to denote uninterned symbol (like CommonLisp).\n\n[[STk]], [[STklos]], [[Chicken]], [[MzScheme]], [[SISC]]: \nreturns a new, uninterned symbol whose name is ''string''.\nNo special external representation for uninterned symbols.\n\n\nSee also [[gensym]].\n")
("detail" . "(:ctime 1018344594 :cuser #f :mtime 1018344594 :muser #f)* [procedure] detail ''obj''\n\n[[STk]]: invokes a graphical viewer to inspect\n''obj'' in detail.  See [[inspect]], [[view]].\n")
("char-set-intersection" . "(:ctime 1099288531 :cuser #f :mtime 1099288532 :muser #f)* [procedure] char-set-intersection ''cset'' ...\n* [procedure] char-set-intersection! ''cset0'' ''cset1'' ...\n\n[[SRFI-14]]: Returns intersection of all the character sets.\n")
("normal-case-path" . "(:ctime 1020225405 :cuser #f :mtime 1020225405 :muser #f)* [procedure] normal-case-path ''string''\n\n[[MzScheme]]: normalize ''string'' to the pathnames\nappropriate on the platform.\n")
("make-static-byte-vector" . "(:ctime 1015280147 :cuser #f :mtime 1015280234 :muser #f)* [procedure] make-static-byte-vector ''size'' [''init'']\n\n[[Chicken]]: Allocates a byte vector which is not garbage-collected.\nUse [[release]] to free the memory.\nSee also [[byte-vector]], [[static-byte-vector->pointer]].\n")
("blob-u32-native-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144719294 :muser #f)* [procedure] blob-u32-native-ref ''blob'' ''k''\n\n[[SRFI-74]]: similar to (blob-uint-ref 4 (endianness native) ''blob'' ''k''),\nbut works at aligned indices: ''k'' must be a multiple of 4. It is an error to\nuse this at non-aligned indices.\n\nSee also [[blob-uint-ref]] and [[endianness]].\n")
("char-set:iso-control" . "(:ctime 1018082686 :cuser #f :mtime 1018082686 :muser #f)[[$$include char-set:lower-case]]\n")
("filter" . "(:ctime 1014869063 :cuser #f :mtime 1018072332 :muser #f)* [procedure] filter ''pred'' ''list''\n\n[[SRFI-1]]: Return all the elements of ''list'' \nthat satisfy predicate ''pred''. The list is not disordered -- \nelements that appear in the result list\noccur in the same order as they occur in the argument ''list''.\nThe returned list may share a common tail with the argument\n''list''. The dynamic order in which the various applications of ''pred'' \nare made is not specified. \n\nSee also [[partition]], [[remove]], [[filter!]].\n\n* [generic] filter ''pred'' ''coll''\n\n[[Gauche]] extends this to take arbitrary collection\n(with gauche.collection module).\n")
("mu" . "(:ctime 1170059543 :cuser #f :mtime 1170063507 :muser #f)* [syntax] mu ''expression'' ...\n\n[[SRFI-86]]:\n{{{\n(define-syntax mu\n  (syntax-rules ()\n    ((mu argument ...)\n     (lambda (f) (f argument ...)))))\n}}}\n")
("wdeleteln" . "(:ctime 1015882883 :cuser #f :mtime 1015882883 :muser #f)[[$$include wdelch]]\n")
("file-select" . "(:ctime 1015184459 :cuser #f :mtime 1015184459 :muser #f)* [procedure] file-select ''readfdlist'' ''writefdlist'' [''timeout'']\n\n[[Chicken]]: select(2) interface.  See also [[port->fileno]],\n[[file-open]].\n\nGauche has [[sys-select]].\n")
("drop-right!" . "(:ctime 1014863775 :cuser #f :mtime 1014863775 :muser #f)* [procedure] drop-right! ''flist'' ''k''\n\n[[SRFI-1]]: linear update version of [[drop-right]].\n")
("queue->list" . "(:ctime 1015071773 :cuser #f :mtime 1017980803 :muser #f)* [procedure] queue->list ''queue''\n\n[[Chicken]], [[Scheme48]]: see [[make-queue]], [[list->queue]].\n")
("disable-interrupts" . "(:ctime 1014964709 :cuser #f :mtime 1015052254 :muser #f)* [procedure] disable-interrupts\n\n[[ChezScheme]], [[Chicken]]\n\nSee also [[enable-interrupts]], [[critical-section]],\n[[keyboard-interrupt-handler]], [[timer-interrupt-handler]]\n")
("integer-log" . "(:ctime 1170264990 :cuser #f :mtime 1170268062 :muser #f)* integer-log ''k1'' ''k2''\n\n[[SRFI-94]]: returns the largest exact integer whose power of ''k1'' is less than or equal to ''k2''. If ''k1'' or ''k2'' is not a positive exact integer, then integer-log signals an error.\n")
("rect" . "(:ctime 1152518355 :cuser #f :mtime 1152525783 :muser #f)* [format descriptor] rect [''r'' [''i'']]\n[[RRRS]], [[R3RS]]: express as a rectangular form complex number. ''r'' and ''i'' are formats for the real and imaginary parts respectively. They default to (heur).\n\nSee also [[heur]] and [[number->string]].\n")
("date->modified-julian-day" . "(:ctime 1099300856 :cuser #f :mtime 1099300856 :muser #f)[[$$include date->julian-day]]\n")
("<=" . "(:ctime 1014954664 :cuser #f :mtime 1015145490 :muser #f)[[$$include =]]\n\n")
("SRFI-86" . "(:ctime 1169984909 :cuser #f :mtime 1170004845 :muser #f)SRFI 86: MU and NU simulating VALUES & CALL-WITH-VALUES, and their related LET-syntax\n\nhttp://srfi.schemers.org/srfi-86/srfi-86.html\n\n[[$$srfi-implementors]]\n----\n[[mu]], [[nu]], [[alet]], [[alet*]]\n")
("mvwin" . "(:ctime 1015882545 :cuser #f :mtime 1015882545 :muser #f)* [procedure] mvwin ''win'' ''y'' ''x''\n\n[[SCM]]: curses interface.  see [[initscr]]\n")
("with" . "(:ctime 1015033973 :cuser #f :mtime 1015033973 :muser #f)* [syntax] with ((''pat'' ''exp'') ...) ''template''\n\n[[ChezScheme]]: sub syntax used within [[extend-syntax]] macro.\n")
("sync-file" . "(:ctime 1023685494 :cuser #f :mtime 1023685494 :muser #f)* [procedure] sync-file ''fd/port''\n* [procedure] sync-file-system\n\n[[Scsh]]: synchronize buffered file to disk, by sync(2).\n[[sync-file]] flushes ''fd/port'' before that.\n")
("port-current-position" . "(:ctime 1099726468 :cuser #f :mtime 1099726608 :muser #f)* [procedure] port-current-position [''port'']\n\n[[STklos]]: returns the current position (i.e. number of characters\nfrom the beginning of the port).  See also [[port-current-line]].\n\nSome implementation provides [[port-tell]], [[tell]], [[ftell]], [[file-position]];\nthough some of these only work on file-associated ports.\n\n")
("main" . "(:ctime 1015066440 :cuser #f :mtime 1015201156 :muser #f)* [procedure] main ''args''\n\n[[SRFI-22]]: entry point of Scheme script.  ''args'' is a list \nof command line arguments, including the script name as the first element.\nShould return an exact nonnegative integer which will be used\nas the exit status.\n\nSome Scheme implementations provide another way to obtain command line\narguments.  See [[*argv*]], [[argv]], [[command-line-arguments]].\n\n")
("letrec-values" . "(:ctime 1015044247 :cuser #f :mtime 1018676176 :muser #f)* [syntax] letrec-values ((''formals'' ''expression'') ...) ''body''\n\n[[Chicken]], [[MzScheme]]\n\nSee also [[let-values]], [[let*-values]], [[receive]].\n")
("open/read" . "(:ctime 1015106322 :cuser #f :mtime 1015106322 :muser #f)[[$$include open/rdonly]]\n")
("SRFI-106" . "(:ctime 1381734854 :cuser #f :mtime 1381734854 :muser #f)SRFI-106: SRFI Libraries\n\nhttp://srfi.schemers.org/srfi-106/srfi-106.html\n\n[[$$srfi-implementors]]\n")
("char-set-copy" . "(:ctime 1015773334 :cuser #f :mtime 1015773334 :muser #f)* [procedure] char-set-copy ''char-set''\n\n[[SRFI-14]], and also in [[Gauche]].\n")
("read-eval-print-loop" . "(:ctime 1015069729 :cuser #f :mtime 1015069729 :muser #f)* [procedure] read-eval-print-loop\n\n[[Chicken]]\n\nChezScheme has [[new-cafe]].\n\n")
("compile" . "(:ctime 1014965201 :cuser #f :mtime 1014965201 :muser #f)* [procedure] compile ''obj'' [''env-spec'']\n\n[[ChezScheme]]: compile and execute Scheme expression.\n\nSee also [[interpret]]\n")
("#n#" . "(:ctime 1416210018 :cuser #f :mtime 1416210018 :muser #f)* [reader syntax] #''digits''#\n\n[[SRFI-38]]: Shared structure reference.  Refer to the object\ndefined by [[#0#]](,[[#1#]],[[#2#]]...[[#n#]].)\n")
("ashl" . "(:ctime 1039637910 :cuser #f :mtime 1105451345 :muser #f)* [procedure] ashl ''integer'' ''bits''\n* [procedure] ashr ''integer'' ''bits''\n\n[[SISC]]: integer bitshift operators.\nSee also [[logand]], [[logor]], [[logxor]], [[lognot]].\n\nOther implementations have [[ash]] or [[arithmetic-shift]].\n")
("Index:t" . "(:ctime 1014846359 :cuser #f :mtime 1015014764 :muser #f)[[$$index t]]\n\n")
("alphanumeric" . "(:ctime 1018071862 :cuser #f :mtime 1018071862 :muser #f)[[$$include lower-case]]\n")
("define*" . "(:ctime 1203984208 :cuser #f :mtime 1327407145 :muser #f)* [macro] define* ''variable'' ''expression''\n* [macro] define* (''variable'' . ''extended-def-formals'') ''body''\n\n[[SRFI-89]]: The first form is the same as [[define]].   The second\nform is a shorthand notation of:\n\n  (define ''variable'' (lambda* ''extended-def-formals'' ''body'')\n\nSee [[lambda*]].\n\n\n[[Guile]]: Same semantics, although the spec of the extended formals\ndiffers from SRFI-89.   See [[lambda*]].\n [http://www.obtenir-rio.info rio orange]\n")
("-" . "(:ctime 1014847037 :cuser #f :mtime 1191218810 :muser #f)* - ''z''\n* - ''z1'' ''z2'' ...\n\n[[R5RS]], [[R6RS]]\n\nSee also [[+]], [[*]], [[/]], [[-.]]\n\n")
("string-output-port-output" . "(:ctime 1017989180 :cuser #f :mtime 1017989180 :muser #f)[[$$include make-string-input-port]]\n")
("user-id?" . "(:ctime 1018124127 :cuser #f :mtime 1018124127 :muser #f)* [procedure] user-id? ''x''\n* [procedure] user-id=? ''user-id0'' ''user-id1''\n* [procedure] user-id->integer ''user-id''\n* [procedure] integer->user-id ''integer''\n\n[[Scheme48]]: operates on user-id type.\nSee [[Concept:UserGroup]], [[user-id->user-info]].\n")
("compress" . "(:ctime 1015070246 :cuser #f :mtime 1015070246 :muser #f)* [procedure] compress ''blist'' ''list''\n\n[[Chicken]]\n\n (define nums '(99 100 110 401 1234))\n (compress (map odd? nums) nums)      ==> (99 401)\n\n")
("newline" . "(:ctime 1014856738 :cuser #f :mtime 1014856738 :muser #f)* [procedure] newline [''port'']\n\n[[R5RS]]\n\nSee also [[write]], [[display]].\n")
("socket?" . "(:ctime 1018342965 :cuser #f :mtime 1099738258 :muser #f)* [procedure] socket? ''obj''\n\n[[STk]], [[STklos]]: see [[make-client-socket]], [[make-server-socket]].\n")
("fx=" . "(:ctime 1014950586 :cuser #f :mtime 1191225794 :muser #f)* [procedure] fx= ''fixnum1'' ''fixnum2'' ...\n* [procedure] fx< ''fixnum1'' ''fixnum2'' ...\n* [procedure] fx<= ''fixnum1'' ''fixnum2'' ...\n* [procedure] fx> ''fixnum1'' ''fixnum2'' ...\n* [procedure] fx>= ''fixnum1'' ''fixnum2'' ...\n\n[[ChezScheme]]\n\nSee also [[fixnum?]]\n\n* [procedure] fx= ''fixnum1'' ''fixnum2''\n* [procedure] fx< ''fixnum1'' ''fixnum2''\n* [procedure] fx<= ''fixnum1'' ''fixnum2''\n* [procedure] fx> ''fixnum1'' ''fixnum2''\n* [procedure] fx>= ''fixnum1'' ''fixnum2''\n\n[[Chicken]]: only binary operators are provided.\n\nBigloo has [[=fx]], [[>fx]], [[<fx]], [[>=fx]], and [[<=fx]].\nThese are also binary ops.\n\nR6RS has [[fx=?]] etc.\n")
("vector-ref" . "(:ctime 1014860640 :cuser #f :mtime 1394455570 :muser #f)* [procedure] vector-ref ''vector'' ''k''\n\n[[R5RS]], [[R6RS]]: ''k'' must be a valid index of ''vector''. \nVector-ref returns the contents of element ''k'' of ''vector''.\n\n\n\nCuriously, the only reference about vector access time in\nR6RS is that \"the average time needed to access\na randomly chosen element is typically less for the vector\nthan for the list.\"   So this doesn't seem to discourage\nan implementation to use non-flat structure such as trees,\nor use sparse vectors.  Which itself is OK, but seems\nstrange that R6RS explicitly mentions a constant-time\naccess in [[string-ref]].\n\nSee also [[vector-set!]].\n")
("random" . "(:ctime 1014954477 :cuser #f :mtime 1039751221 :muser #f)* [procedure] random ''real''\n\n[[ChezScheme]]: returns a nonnegative pseudo-random number less than\n''real'', which must be a positive integer or positive inexact real number.\n\nSee also [[random-seed]]\n\n* [procedure] random ''N''\n\n[[Chicken]], [[STk]]: returns an exact random integer between 0 to ''n''-1.\n\n[[MzScheme]]: the same, except the range of ''N'' is limited \nbetween 0 and 2^31-1 inclusive.\n\nSee also [[randomize]], [[random-seed]], [[set-random-seed!]].\n\n* [procedure] random ''n'' [''state'']\n\n[[Guile]]: ''n'' can be a positive integer or a real number,\nand returns the same type of random number.\n\nSee also [[random:exp]], [[random:hollow-sphere!]],\n[[random:normal]], [[random:normal-vector!]],\n[[random:solid-sphere!]], [[random:uniform]],\n[[seed->random-state]], [[copy-random-state]].\n")
("time-monotonic->time-tai" . "(:ctime 1099301284 :cuser #f :mtime 1099301284 :muser #f)[[$$include time-monotonic->date]]\n")
("compose" . "(:ctime 1015075297 :cuser #f :mtime 1040258639 :muser #f)* [procedure] compose ''f1'' ''f2'' ...\n\n[[Chicken]], [[SISC]], [[Gauche]]:\n (compose F G) <=> (lambda args (call-with-values (lambda () (apply G args)) F))\n\n")
("environment->list" . "(:ctime 1018336602 :cuser #f :mtime 1018336602 :muser #f)* [procedure] environment->list ''environment''\n\n[[STk]]: returns a list of a-lists, representing\nthe bingings in ''environment''.\nSee [[the-environment]].\n")
("split-path" . "(:ctime 1020225621 :cuser #f :mtime 1020326278 :muser #f)* [procedure] split-path ''path''\n\n[[MzScheme]]: decompose pathname and returns three values,\n''base'', ''name'' and ''must-be-dir?''.\n- ''base'' may be:\n-- a string pathname\n-- 'relative\n-- #f (if ''path'' is a root dir)\n- ''name'' may be:\n-- a string dir name\n-- a string file name\n-- 'up if the last component is up-directory (..)\n-- 'same if the last component is same-directory (.)\n- ''must-be-dir?''\n-- #t if ''path'' explicitly specifies a directory\n-- #f otherwise\n\nChicken has [[decompose-pathname]], which is somewhat similar\nto this function.\n")
("compare-by>" . "(:ctime 1144494246 :cuser #f :mtime 1144504959 :muser #f)[[$$include compare-by<]]\n")
("record-accessor" . "(:ctime 1014949575 :cuser #f :mtime 1017982936 :muser #f)* [procedure] record-accessor ''rtd'' ''field-name''\n\n[[SLIB]], [[Scheme48]]\n\nEquivalent to Chez's [[record-field-accessor]].\n\nSee also [[make-record-type]], [[define-record-type]]\n")
("list=" . "(:ctime 1014862576 :cuser #f :mtime 1014862576 :muser #f)* [procedure] list= ''elt='' ''list1'' ...\n\n[[SRFI-1]]: Determines list equality, given an element-equality procedure. \n")
("string-prefix-length-ci" . "(:ctime 1014893377 :cuser #f :mtime 1014893377 :muser #f)* [procedure] string-prefix-length-ci ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-prefix-length]], [[string-prefix-ci?]]\n")
("foreign-entry?" . "(:ctime 1014925376 :cuser #f :mtime 1014925376 :muser #f)* [procedure] foreign-entry? ''entry-name''\n\n[[ChezScheme]]: Checks if ''entry-name'' exists for a foreign procedure.\n\nSee also [[foreign-procedure]].\n")
("socket-input" . "(:ctime 1018343400 :cuser #f :mtime 1099738357 :muser #f)* [procedure] socket-input ''socket''\n* [procedure] socket-output ''socket''\n\n[[STk]], [[STklos]]: returns input and output port associated\nto the socket.  See also [[make-client-socket]],\n[[make-server-socket]].\n\nSome implementations calls these\n[[socket-input-port]] and [[socket-output-port]].\n")
("port-line" . "(:ctime 1038091372 :cuser #f :mtime 1038310118 :muser #f)* [procedure] port-line ''port''\n\n[[SCM]]: If ''port'' is a tracked port, returns the \ncurrent line number.   See also [[port-column]], \n[[port-filename]].\n\nSome implementations have [[port-current-line]],\n[[current-row]].\n\n")
("char<=?" . "(:ctime 1015062438 :cuser #f :mtime 1015062438 :muser #f)[[$$include char=?]]\n")
("test-end" . "(:ctime 1151049296 :cuser #f :mtime 1151075175 :muser #f)* [syntax] test-end [''suite-name'']\n\n[[SRFI-64]]: leaves current test group.\nAn error is signaled if optional ''suite-name'' does not match current test group name.\n")
("as64" . "(:ctime 1099398063 :cuser #f :mtime 1099398063 :muser #f)[[$$include ac64]]\n")
("Sagittarius" . "(:ctime 1346001737 :cuser #f :mtime 1474474651 :muser #f)R6RS/R7RS Scheme system. \n\nhttp://code.google.com/p/sagittarius-scheme/\n\n*** Features\n- Builtin CLOS.\n- Common Lisp like reader macro.\n- Cryptographic libraries.\n- Customisable cipher and hash algorithm.\n- Custom codec mechanism.\n- Extended lambda syntax (taken from [[Gauche]]).\n- Constant definition form. (define-constant form).\n- Builtin regular expression mostly works O(n) \n\n[[$$srfis 0 1 2 4 6 8 13 14 17 18 19 22 23 25 26 27 29 31 37 38 39 41 42 43 45 49 57 60 61 64 69 78 86 87 98 99 100 105 106 110 111 112 113 114 115 116 117 120 121 123 124 125 126 127 128 129 130 131 132 133 134]]\n\n----\n** Object System (CLOS)\n[[add-method]], [[compute-getters-and-setters]], [[define-class]], [[define-generic]], [[define-method]], [[is-a?]], [[make]], [[object-equal?]], [[slot-definition-name]], [[slot-definition-option]], [[slot-definition-options]], [[slot-ref]], [[slot-ref-using-accessor]], [[slot-set!]], [[slot-set-using-accessor!]], [[write-object]]\n\n** Common Lisp like reader macro.\n** Cryptographic libraries.\n** Customisable cipher and hash algorithm.\n** Custom codec mechanism.\n** Extended lambda syntax (taken from [[Gauche]]).\n[[^]], [[^_]], [[^_*]], [[^a]], [[^a*]], [[^b]], [[^b*]], [[^c]], [[^c*]], [[^d]], [[^d*]], [[^e]], [[^e*]], [[^f]], [[^f*]], [[^g]], [[^g*]], [[^h]], [[^h*]], [[^i]], [[^i*]], [[^j]], [[^j*]], [[^k]], [[^k*]], [[^l]], [[^l*]], [[^m]], [[^m*]], [[^n]], [[^n*]], [[^o]], [[^o*]], [[^p]], [[^p*]], [[^q]], [[^q*]], [[^r]], [[^r*]], [[^s]], [[^s*]], [[^t]], [[^t*]], [[^u]], [[^u*]], [[^v]], [[^v*]], [[^w]], [[^w*]], [[^x]], [[^x*]], [[^y]], [[^y*]], [[^z]], [[^z*]]\n** Constant definition form. (define-constant form).\n[[define-constant]]\n** Regular expression\n** Debugging aid\n[[disasm]]\n")
("define-external" . "(:ctime 1015047369 :cuser #f :mtime 1327407095 :muser #f)* [syntax] define-external ''qualifiers'' (''name'' (''argtype'' ''var'') ...)  ''rettype'' ''body'' ...)\n* [syntax] define-external ''name'' ''type'' [''init'']\n\n[[Chicken]]: define a Scheme procedure/variable that is visible from C.\nSee also [[foreign-callback-wrapper]].\n\n* [syntax] define-external ''name'' ''parameters'' ''options''\n\n[[STk]]: binds foreign procedore to ''name''.\nSee also [[external-exists?]], [[c-string->string]].\n [http://www.obtenir-rio.info B and You]\n")
("ucs2-string-downcase" . "(:ctime 1039428338 :cuser #f :mtime 1039428338 :muser #f)* [procedure] ucs2-string-downcase ''ucs2str''\n* [procedure] ucs2-string-downcase! ''ucs2str''\n* [procedure] ucs2-string-upcase ''ucs2str''\n* [procedure] ucs2-string-upcase! ''ucs2str''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("stream-car" . "(:ctime 1099280021 :cuser #f :mtime 1099280021 :muser #f)* [procedure] stream-car ''stream''\n* [procedure] stream-cdr ''stream''\n\n[[SRFI-40]]: Returns car/cdr field of a stream pair ''stream''.\nSee also [[stream-cons]].\n\nExamples:\n{{{\n(stream-car (stream 'a 'b 'c))              => a\n(stream-car stream-null)                    => error\n(stream-car 3)                              => error\n\n(stream-cdr (stream 'a 'b 'c))              => (stream 'b 'c)\n(stream-cdr stream-null)                    => error\n(stream-cdr 3)                              => error\n}}}\n")
("#u" . "(:ctime 1014876218 :cuser #f :mtime 1039427664 :muser #f)* [reader syntax] #u''N''(''number'' ...)\n\n[[SRFI-4]]: Denotes homogeneous numeric vector.\n''N'' should be either one of 8, 16, 32, or 64.\n\nSee also [[#s]], [[#f]].\n\n* [reader syntax] #u\"...\"\n\n[[Bigloo]]: denotes UTF8 string.\nSee [[ucs2-string?]] for wide character string handling.\n")
("ucs2-string>?" . "(:ctime 1039428042 :cuser #f :mtime 1039428042 :muser #f)[[$$include ucs2-string=?]]\n")
("SRFI-45" . "(:ctime 1099393944 :cuser #f :mtime 1122428845 :muser #f)SRFI-45:  Primitives for Expressing Iterative Lazy Algorithms\n\nhttp://srfi.schemers.org/srfi-45/srfi-45.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[delay]], [[lazy]], [[force]], [[eager]].\n")
("with-output-to-port" . "(:ctime 1015073775 :cuser #f :mtime 1099726326 :muser #f)* [procedure] with-output-to-port ''port'' ''thunk''\n\n[[Chicken]], [[Gauche]], [[SCM]], [[STk]], [[STklos]]\n\nSee also [[with-input-from-port]], [[with-output-to-port]].\n")
("check-set-mode!" . "(:ctime 1144485145 :cuser #f :mtime 1144492049 :muser #f)* [procedure] check-set-mode! ''mode''\n[[SRFI-78]]: sets the current mode to ''mode'', which must be a symbol in\n'(off summary report-failed report), default is 'report.\nNote that you can change the mode at any time,\nand that [[check]], [[check-ec]] and [[check-report]] use the current value.\n\nThe mode symbols have the following meaning:\n- off: do not execute any of the checks,\n- summary: print only summary in (check-report) and nothing else,\n- report-failed: report failed checks when they happen, and in summary,\n- report: report every example executed.\n")
("make-eq-hashtable" . "(:ctime 1191358979 :cuser #f :mtime 1191358980 :muser #f)* [procedure] make-eq-hashtable [''initial-size'']\n* [procedure] make-eqv-hashtable [''initial-size'']\n\n[[R6RS]]: Creates a mutable hashtable using [[eq?]] or [[eqv?]] as \na comparison procedure, respectively.\n\nNote: The hash functions for eq and eqv-hashtables are intentionally hidden\nin R6RS (See R6RS Rationale document).  Even [[hashtable-hash-function]]\ncannot access them.  Applying hashtable-hash-function on eq or eqv-hashtables\nyields #f.\n\nSee also [[make-hashtable]].\n")
("string-lower" . "(:ctime 1018333603 :cuser #f :mtime 1018333603 :muser #f)* [procedure] string-lower ''string''\n* [procedure] string-upper ''string''\n\n[[STk]]\n\nThese are called [[string-downcase]] and [[string-upcase]]\nin SRFI-13 and some other implementations.\n")
("get-internal-real-time" . "(:ctime 1038091957 :cuser #f :mtime 1038091957 :muser #f)* [procedure] get-internal-real-time\n\n[[SCM]]: returns elapsed time of the process from\nunspecified start time, in the unit of [[internal-time-units-per-second]].\nSee also [[get-internal-run-time]].\n\nSee also [[SRFI-19]].\n")
("time-type" . "(:ctime 1015209745 :cuser #f :mtime 1015209745 :muser #f)* [procedure] time-type ''time''\n* [procedure] set-time-type! ''time'' ''time-type''\n\n[[SRFI-19]]: Getter and setter of ''type'' field of a time structure ''time''.\nSee also [[make-time]].\n")
("isqrt" . "(:ctime 1014955004 :cuser #f :mtime 1014955004 :muser #f)* [procedure] isqrt ''n''\n\n[[ChezScheme]]: integer square root\n\nSee also [[sqrt]]\n")
("flmin" . "(:ctime 1191227877 :cuser #f :mtime 1191227878 :muser #f)[[$$include flmax]]\n")
("define-record" . "(:ctime 1014947590 :cuser #f :mtime 1015045264 :muser #f)* [syntax] define-record ''name'' (''fld1'' ...) ((''fld2'' ''init'') ...) (''opt'' ...)\n\n[[ChezScheme]]: defines a record type.  Appropriate\nconstructor, predicate, field accessors and mutators are\nimplicitly defined.\n\nChez also has an older mechanism that uses vectors as structures\nby [[define-structure]].\n\nSee also [[make-record-type]], [[record-type-descriptor?]],\n[[record-constructor]], [[record-predicate]], [[record-field-accessor]],\n[[record-field-accessible?]], [[record-field-mutator]],\n[[record-field-mutable?]], [[record-type-name]],\n[[record-type-field-names]], [[record?]], [[record-type-descriptor]],\n[[record-reader]]\n\n[[SRFI-9]] provides a similar structure, but with\nexplicit naming of constructor, predicate and accessors,\nby [[define-record-type]].\n\n* [syntax] define-record ''name'' ''slotname'' ...\n\n[[Chicken]]: defines a record type.  Constructor make-''name'',\npredicate ''name''?, accessor ''name''-''slotname'', modifier ''name''-''slotname''-set! are defined.\nSee also [[define-record-printer]], [[record-case]].\n")
("llong->string" . "(:ctime 1039409147 :cuser #f :mtime 1039409147 :muser #f)[[$$include elong->string]]\n")
("eval" . "(:ctime 1014847877 :cuser #f :mtime 1191221154 :muser #f)* [procedure] eval ''expression'' ''environment-specifier''\n\n[[R5RS]]\n\nSee also [[interaction-environment]], [[scheme-report-environment]], [[null-environment]].\n\n* [procedure] eval ''expression'' ''environment''\n\n[[R6RS]]: ''Environment'' is an object created by [[environment]].\n\nIn R6RS, this procedure is moved to a library \n'''(rnrs eval (6))''', which is ''not'' included \nin the composite library '''(rnrs (6))'''.\n\n\n* [procedure] eval ''expression'' [''environment-specifier'']\n\n[[ChezScheme]], [[Chicken]], [[STk]], [[STklos]] allows to omit the second argument.\n\n[[Chicken]] actually ignores the second argument.\n\nIn [[STk]], ''environment'' can be a first-class environment\nobject.  See [[the-environment]].\n\nChez also has [[ieee-environment]]\n\n* [procedure] eval ''obj''\n\n[[SCM]]: doesn't take the second argument.\n\n")
("string-concatenate" . "(:ctime 1014888585 :cuser #f :mtime 1327407241 :muser #f)* [procedure] string-concatenate ''string-list''\n\n[[SRFI-13]]: (lambda (l) (apply string-append l))\n\nSee also [[string-append]].\n\n* [procedure] string-concatenate ''list'' [''string'']\n\n[[Chicken]]: This is [[string-join]] of SRFI-13, with null-string\nfor default ''string'' and grammer fixed to infix.\n\n [http://www.obtenir-rio.info rio orange]\n")
("char-ci<?" . "(:ctime 1015062537 :cuser #f :mtime 1015062537 :muser #f)[[$$include char-ci=?]]\n")
("test-runner-skip-count" . "(:ctime 1151136447 :cuser #f :mtime 1151145656 :muser #f)* [procedure] test-runner-skip-count ''runner''\n\n[[SRFI-64]]: returns the number of tests that were skipped.\n")
("provide" . "(:ctime 1018083924 :cuser #f :mtime 1018083924 :muser #f)[[$$include require]]\n")
("test-runner-test-name" . "(:ctime 1151136447 :cuser #f :mtime 1151145987 :muser #f)* [procedure] test-runner-test-name ''runner''\n\n[[SRFI-64]]: returns the name of the current test or test group.\nDuring the execution of [[test-begin]], returns the name of the group;\nduring the exectuion of test case, returns the name of the test.\nIf no name is specified, the name is empty string.\n")
("Bigloo" . "(:ctime 1023696868 :cuser #f :mtime 1193215654 :muser #f)Bigloo (version 2.5c; current version: 3.0b)\n\nhttp://www-sop.inria.fr/mimosa/fp/Bigloo/\n\n[[$$srfis 0 1 2 6 8 9 14 18 22 28]]\n----\n\n* Modules\n[[module]], [[define-inline]]\n\n* Core Language\n[[and-let*]], [[labels]]\n\n* Standard Library\n** Scheme Library\n[[pair-or-null?]], [[append!]], [[reverse!]],\n[[last-pair]], [[remq]], [[remq!]], [[delete]],\n[[delete!]], [[cons*]], [[every]], [[any]],\n[[string->symbol-ci]], [[symbol-append]],\n[[gensym]], [[symbol-plist]], [[getprop]], [[putprop!]],\n[[remprop!]], [[keyword?]], [[keyword->string]], \n[[string->keyword]], [[fixnum?]], [[flonum?]],\n[[elong?]], [[llong?]], [[=fx]], [[=fl]], [[<fx]], [[<fl]],\n[[>fx]], [[>fl]], [[<=fx]], [[<=fl]], [[>=fx]], [[>=fl]],\n[[+fx]], [[+fl]], [[*fx]], [[*fl]], [[-fx]], [[-fl]],\n[[negfx]], [[negfl]], [[/fx]], [[/fl]], [[integer->string]],\n[[elong->string]], [[llong->string]], [[real->string]],\n[[string->integer]], [[string->real]], [[fixnum->flonum]],\n[[flonum->fixnum]], [[elong->flonum]], [[flonum->elong]],\n[[llong->flonum]], [[flonum->llong]],\n[[ucs2?]], [[ucs2=?]], [[ucs2<?]], [[ucs2>?]], [[ucs2<=?]],\n[[ucs2>=?]], [[ucs2-ci=?]], [[ucs2-ci<?]], [[ucs2-ci>?]],\n[[ucs2-ci<=?]], [[ucs2-ci>=?]],\n[[ucs2-alphabetic?]], [[ucs2-numeric?]],\n[[ucs2-whitespace?]], [[ucs2-upper-case?]],\n[[ucs2-lower-case?]], [[ucs2->integer]], [[integer->ucs2]],\n[[ucs2->char]], [[char->ucs2]], [[ucs2-upcase]],\n[[ucs2-downcase]],\n[[substring=?]], [[string-fill!]], [[string-downcase]],\n[[string-upcase]], [[string-capitalize]], [[string-downcase!]],\n[[string-upcase!]], [[string-capitalize!]], \n[[string-for-read]], [[blit-string!]],\n[[ucs2-string?]], [[make-ucs2-string]], [[ucs2-string]],\n[[ucs2-string-length]], [[ucs2-string-ref]],\n[[ucs2-string-set!]], [[ucs2-string=?]], [[ucs2-string-ci=?]],\n[[ucs2-string<?]], [[ucs2-string-ci<?]],\n[[ucs2-string<=?]], [[ucs2-string-ci<=?]],\n[[ucs2-string>?]], [[ucs2-string-ci>?]],\n[[ucs2-string>=?]], [[ucs2-string-ci>=?]],\n[[subucs2-string]], [[ucs2-string-append]],\n[[ucs2-string->list]], [[list->ucs2-string]],\n[[ucs2-string-copy]], [[ucs2-string-fill!]],\n[[ucs2-string-downcase]], [[ucs2-string-downcase!]],\n[[ucs2-string-upcase]], [[ucs2-string-upcase!]],\n[[ucs2-string->utf8-string]],\n[[utf8-string->ucs2-string]],\n[[copy-vector]], [[vector-copy]],\n[[sort]], [[call/cc]], [[bind-exit]],\n[[unwind-protect]], [[unspecified]], [[try]], \n[[multiple-value-bind]], [[receive]]\n\n** Input and output\n[[input-port-name]], [[input-port-reopen!]], [[file-exists?]],\n[[delete-file]], [[rename-file]], [[directory?]],\n[[make-directory]], [[make-directories]], \n[[delete-directory]], [[directory->list]], \n[[file-modification-time]], [[file-size]], [[chmod]],\n[[current-error-port]], [[with-input-from-string]],\n[[with-error-to-file]],\n[[with-output-to-string]], [[with-error-to-string]],\n[[open-input-file]], [[open-input-string]], \n[[open-input-c-string]], [[open-output-file]],\n[[append-output-file]], [[open-output-string]],\n[[get-output-string]], [[input-port-position]],\n[[output-port-position]], [[set-input-port-position!]],\n[[set-output-port-position!]], [[read/case]],\n[[read-case-sensitive]], [[read-case-insensitive]],\n[[read-line]], [[read-lines]], [[read-of-strings]],\n[[read-string]], [[print]], [[display*]], [[fprint]],\n[[flush-output-port]], [[set-write-length!]],\n[[get-write-length]], [[set-printer!]], [[native-printer]],\n[[current-printer]], [[pp]], [[*pp-case*]], [[*pp-width*]],\n[[write-circle]], [[display-circle]]\n\n** Structures and Records\n\n[[define-struct]], [[struct?]], [[define-record-type]]\n\n** Serialization\n\n[[string->obj]], [[obj->string]], [[binary-port?]],\n[[open-output-binary-file]], [[append-output-binary-file]],\n[[open-input-binary-file]], [[close-binary-port]],\n[[input-obj]], [[output-obj]], [[input-char]], [[output-char]],\n[[register-procedure-serialization]],\n[[get-procedure-serialization]],\n[[register-process-serialization]],\n[[get-process-serialization]]\n\n** Bit manipulation\n\n[[bit-or]], [[bit-xor]], [[bit-and]],\n[[bit-not]], [[bit-lsh]], [[bit-rsh]]\n\n** Hash Tables\n[[make-hashtable]], [[hashtable?]], [[hashtable-size]],\n[[hashtable-get]], [[hashtable-put!]], [[hashtable-remove!]],\n[[hashtable-update!]], [[hashtable->vector]], [[hashtable->list]],\n[[hashtable-for-each]], [[object-hashnumber]]\n\ndeprecated API:\n[[make-hash-table]], [[hash-table?]], [[hash-table-nb-entry]],\n[[get-hash]], [[put-hash!]], [[rem-obj-hash!]], [[rem-key-hash!]],\n[[for-each-hash]], [[string->0..255]], [[string->0..2^x-1]],\n[[int->0..255]], [[int->0..2^x-1]], [[obj->0..255]], [[obj->0..2^x-1]]\n\n** System programming\n\n[[register-exit-function!]], [[exit]], [[signal]], [[get-signal-handler]],\n[[system]], [[system->string]], [[getenv]], [[putenv]], [[date]],\n[[command-line]], [[executable-name]], [[os-class]], [[os-name]],\n[[os-arch]], [[os-version]], [[os-tmp]], [[file-separator]],\n[[path-separator]], [[unix-path->list]]\n\n[[basename]], [[prefix]], [[suffix]], [[dirname]], [[pwd]],\n[[chdir]], [[make-file-name]], [[make-file-path]], [[find-file/path]],\n[[make-static-library-name]], [[make-shared-library-name]],\n[[file-exists?]], [[delete-file]], [[rename-file]],\n[[directory?]], [[delete-directory]], [[directory->list]],\n[[file-modification-time]], [[file-size]]\n\n** Process support\n\n** Socket support\n\n** Posix Regular Expressions\n\n* Pattern Matching\n[[match-case]], [[match-lambda]]\n\n* Object system\n\n\n\n... more to come ...\n\n\n\n\n")
("SRFI-101" . "(:ctime 1381734745 :cuser #f :mtime 1381734746 :muser #f)SRFI 101: Purely Functional Random-Access Pairs and Lists \n\nhttp://srfi.schemers.org/srfi-101/srfi-101.html\n\n[[$$srfi-implementors]]\n\n----\nThis document proposes a library API for purely functional random-access lists consistent with the R6RS base library and list utility standard library. \n")
("vector-copy!" . "(:ctime 1015069482 :cuser #f :mtime 1099388774 :muser #f)* [procedure] vector-copy! ''target'' ''tstart'' ''source'' [''sstart'' ''send'']\n\n[[SRFI-43]]: Copies elements of ''source'' between index ''sstart'' (inclusive)\nand ''send'' (exclusive) into ''target'' beginning from ''tstart''.\n\nThe argument is similar to [[string-copy!]].\n\nSee also [[vector-copy]].\n\n\n* [procedure] vector-copy! ''vector1'' ''vector2'' [''count'']\n\n[[Chicken]]: takes different arguments.\n\n")
("set-working-directory!" . "(:ctime 1018126560 :cuser #f :mtime 1018126560 :muser #f)[[$$include working-directory]]\n")
("memv" . "(:ctime 1014856514 :cuser #f :mtime 1014856514 :muser #f)* [procedure] memv ''obj'' ''list''\n\n[[R5RS]]\n\nSee also [[memq]], [[member]].\n")
("string-append" . "(:ctime 1014859279 :cuser #f :mtime 1191568402 :muser #f)* [procedure] string-append ''string'' ...\n\n[[R5RS]], [[R6RS]]: Returns a newly allocated string whose characters form the \nconcatenation of the given strings.\n")
("/fl" . "(:ctime 1040351621 :cuser #f :mtime 1040351621 :muser #f)[[$$include +fl]]\n")
("vector-unfold" . "(:ctime 1099360561 :cuser #f :mtime 1099360562 :muser #f)* [procedure] vector-unfold ''f'' ''length'' ''seed'' ...\n* [procedure] vector-unfold-right ''f'' ''length'' ''seed'' ...\n\n[[SRFI-43]]: Create a vector of length ''length''.\nIts elements are generated by calling ''f'' with the index and\nseed value(s); ''f'' should return 1 + number-of-seeds values;\nthe first value is used for initializing the vector, and the rest\nis used for the seed values of the next call to ''f''.\n\n[[vector-unfold]] calls ''f'' to generate elements from index 0 to ''length''-1.\n[[vector-unfold-right]] calls ''f'' to generate elements from ''length''-1 to 0.\n\n{{{\n(vector-unfold (lambda (i x) (values x (- x 1))) 10 0) \n  =>  #(0 -1 -2 -3 -4 -5 -6 -7 -8 -9) \n\n(vector-unfold-right (lambda (i x) (values x (+ x 1))) 10 0) \n  =>  #(9 8 7 6 5 4 3 2 1 0)\n}}}\n\nSee also [[unfold]], [[unfold-right]].\n")
("port-handler" . "(:ctime 1014956124 :cuser #f :mtime 1014956124 :muser #f)* [procedure] port-handler ''port''\n\n[[ChezScheme]]: returns a procedure that handles port requests.\n\nSee also [[make-input-port]], [[make-output-port]], [[make-input/output-port]]\n")
("standard-error-port" . "(:ctime 1015806793 :cuser #f :mtime 1015806793 :muser #f)[[$$include standard-input-port]]\n")
("ieee-environment" . "(:ctime 1014965016 :cuser #f :mtime 1014965016 :muser #f)* [procedure] ieee-environment\n\n[[ChezScheme]]\n\nSee also [[eval]]\n")
("fx1+" . "(:ctime 1014951220 :cuser #f :mtime 1014951220 :muser #f)* [procedure] fx1+ ''fixnum''\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[1+]]\n")
("when-port-writable" . "(:ctime 1018334725 :cuser #f :mtime 1018334725 :muser #f)[[$$include when-port-readable]]\n")
("logxor" . "(:ctime 1014951540 :cuser #f :mtime 1043984906 :muser #f)* [procedure] logxor ''n1'' ''n2''\n\n[[SLIB]], [[Guile]]: bitwise exclusive or of two integers.\n\nThis is called [[bitwise-xor]] or\n[[bit-xor]] in some implementations.\n\nChez has [[fxlogxor]] that works for fixnum range.\n\n* [procedure] logxor ''n1'' ...\n\n[[Gauche]], [[SISC]]:\nallows arbitrary number of integer arguments.\n\nNote that SISC has range limitation in ''n1''...\n(as of 1.6.4).\n\nSee also [[logand]], [[logor]], [[logior]], [[lognot]], [[ash]]\n")
("T" . "(:ctime 1354546433 :cuser #f :mtime 1454952626 :muser #f)The T Manual Fourth Edition ~%\n(10 September 1988)\n\nhttp://repository.readscheme.org/ftp/papers/t_manual.pdf\n----\n** Literals\n[[quote]]\n** Procedures\n[[lambda]]\n** Object identity\n[[eq?]], [[neq?]]\n** Symbols\n[[symbol?]]\n** Predicates and truth values\n[[nil]], [[t]]\n** Types\n----\n* Environments\n** Local variables\n[[let]], [[let*]], [[labels]]\n** Locales\n[[locale]], [[declare]], [[define]], [[lset]], [[make-locale]], [[make-empty-locale]], [[locale?]]\n** Non-local reference\n[[*value]], [[*define]], [[*lset]], [[import]]\n----\n* Control\n** Conditionals\n[[cond]], [[xcond]], [[else]], [[if]], [[case]], [[xcase]], [[select]], [[xselect]], [[not]], [[false?]], [[and]], [[or]], [[*and]], [[*or]], [[*if]]\n** Iteration\n[[do]], [[iterate]]\n** Procedure application\n[[procedure?]], [[apply]]\n** Sequencing\n[[block]], [[block0]]\n** Non-local exits\n[[catch]]\n** Lazy evaluation\n[[delay]], [[force]]\n* Side effects\n** Assignment\n[[set]], [[setter]], [[swap]], [[exchange]], [[modify]], [[modify-location]]\n** Locatives\n[[locative]], [[contents]], [[locative?]]\n** Dynamic state\n[[bind]], [[unwind-protect]]\n----\n* Operations\n** Fundamental forms\n[[object]], [[operation]], [[operation?]]\n** Defining operations\n[[define-operation]], [[define-settable-operation]], [[define-predicate]]\n** Joined objects\n[[join]]\n** Synonyms\n[[synonym]]\n----\n* Numbers\n** Predicates\n[[number?]], [[rational?]], [[integer?]], [[float?]], [[ratio?]], [[odd?]], [[even?]]\n** Arithmetic\n[[+]], [[add]], [[-]], [[*]], [[quotient]], [[remainder]], [[mod]], [[expt]], [[abs]], [[gcd]], [[add1]], [[1+]], [[-1+]], [[min]], [[max]], [[truncate]]\n** Comparison\n[[=]], [[equal?]], [[<]], [[less?]], [[>]], [[greater?]], [[n=]], [[>=]], [[not-less?]], [[<=]], [[not-greater?]]\n** Sign predicates\n[[zero?]], [[=0?]], [[negative?]], [[<0?]], [[positive?]], [[>0?]], [[not-zero?]], [[n=0?]], [[not-negative?]], [[>=0?]], [[not-positive?]], [[<=0?]]\n** Transcendental functions\n[[exp]], [[log]], [[sqrt]], [[cos]], [[sin]], [[tan]], [[acos]], [[asin]], [[atan2]]\n** Bitwise logical operators\n[[logand]], [[logior]], [[logxor]], [[lognot]], [[ash]], [[bit-field]], [[set-bit-field]]\n** Coercion\n[[->integer]], [[->float]]\n** Assignment\n[[increment]], [[decrement]]\n----\n* Lists\n** Predicates\n[[null?]], [[pair?]], [[atom?]], [[list?]], [[proper-list?]], [[null-list?]]\n** Constructors\n[[cons]], [[list]], [[cons*]], [[copy-list]]\n** List access\n[[car]], [[cdr]], [[nth]], [[nthcdr]], [[last]], [[lastcdr]]\n** Lists as sequences\n[[length]], [[append]], [[append!]], [[reverse]], [[reverse!]], [[sublist]]\n** Lists as sets\n[[memq?]], [[mem?]], [[any?]], [[every?]], [[delq]], [[del]], [[delq!]], [[del!]]\n** Mapping Procedures\n[[map]], [[mapcdr]], [[map!]], [[walk]], [[walkcdr]]\n** Lists as associations\n[[assq]], [[ass]]\n** Lists as stacks\n[[push]], [[pop]]\n----\n* Trees\n** Comparison\n[[equiv?]], [[alike?]], [[alikeq?]], [[alikev?]]\n** Tree utilities\n[[subst]], [[substq]], [[substv]], [[copy-tree]], [[tree-hash]]\n** Destructuring\n[[destructure]], [[destructure*]]\n----\n* Structures\n** Defining structure types\n[[define-structure-type]]\n** Manipulating structure types\n[[make-stype]], [[stype-id]], [[stype-constructor]], [[stype-master]], [[stype-predicator]], [[stype-selector]], [[stype-selectors]], [[selector-id]], [[stype-handler]]\n** Manipulating structures\n[[structure?]], [[copy-structure]], [[copy-structure!]]\n----\n* Characters and strings\n** Predicates\n[[char?]], [[string?]], [[graphic?]], [[whitespace?]], [[alphabetic?]], [[uppercase?]], [[lowercase?]], [[digit?]]\n** Comparison\n[[char=]], [[char<]], [[char>]], [[charn=]], [[char>=]], [[char<=]], [[string-equal?]]\n** String constructors\n[[make-string]], [[string-append]], [[copy-string]], [[char->string]], [[list->string]], [[string->list]]\n** String access\n[[string-length]], [[string-empty?]], [[string-elt]], [[nthchar]], [[string-head]], [[char]], [[string-tail]], [[chdr]], [[string-nthtail]], [[nthchdr]], [[substring]], [[string-slice]]\n** String manipulation\n[[string-posq]], [[string-replace]], [[map-string]], [[map-string!]], [[walk-string]]\n** String header manipulation\n[[chopy]], [[chopy!]], [[string-tail!]], [[chdr!]], [[string-nthtail!]], [[nthchdr!]]\n** Case conversion\n[[char-upcase]], [[char-downcase]], [[string-upcase]], [[string-downcase]], [[string-upcase!]], [[string-downcase!]]\n** Digit conversion\n[[char->digit]], [[digit->char]], [[digit]]\n** ASCII conversion\n[[char->ascii]], [[ascii->char]], [[number-of-char-codes]]\n** Symbols\n[[string->symbol]], [[symbol->string]]\n----\n* Miscellaneous features\n** Comments and declarations\n[[comment]], [[ignore]], [[ignorable]]\n** Errors and dead ends\n[[error]], [[syntax-error]], [[read-error]], [[check-arg]], [[proclaim]], [[assert]], [[undefined-value]], [[undefined-effect]]\n** Early binding\n[[define-constant]], [[define-integrable]]\n** Symbol generators\n[[generate-symbol]], [[concatenate-symbol]]\n** Combinators\n[[always]], [[identity]], [[projn]], [[proj0]], [[proj1]], [[proj2]], [[proj3]], [[conjoin]], [[disjoin]], [[complement]], [[compose]], [[true]], [[false]], [[true?]], [[boolean?]]\n** Vectors\n[[make-vector]], [[list->vector]], [[vector->list]], [[vector-elt]], [[vref]], [[vset]], [[copy-vector]], [[vector-fill]], [[vector-replace]], [[vector-length]], [[vector-pos]], [[vector-posq]], [[walk-vector]]\n** Pools\n[[make-pool]], [[obtain-from-pool]], [[return-to-pool]]\n** Weak pointers\n[[object-hash]], [[object-unhash]], [[make-weak-set]], [[add-to-weak-set]], [[remove-from-weak-set]], [[weak-set->list]], [[walk-weak-set]], [[weak-set-member?]], [[weak-set-empty?]]\n----\n* Syntax\n** The reader                 \n[[read-object]]\n** Read tables and read macros\n[[standard-read-table]], [[vanilla-read-table]], [[read-table-entry]], [[nothing-read]], [[delimiting-read-macro?]], [[make-list-reader]], [[list-terminator]]\n** Standard compiler\n[[eval]], [[standard-compiler]], [[run-compiled-code]]\n** Syntax tables\n[[env-syntax-table]], [[make-syntax-table]], [[standard-syntax-table]], [[syntax-table-entry]]\n** Defining syntax\n[[define-syntax]]\n** Local syntax\n[[let-syntax]], [[define-local-syntax]]\n** Macro expanders\n[[macro-expander]], [[macro-expander?]], [[invoke-macro-expander]], [[macro-expand]]\n----\n* Ports\n** General\n[[port?]], [[input-port?]], [[output-port?]], [[interactive-port?]], [[eof?]], [[eof]], [[with-open-streams]], [[close]], [[string->input-port]], [[with-input-from-string]], [[with-output-to-string]]\n** Port switches\n[[terminal-input]], [[terminal-output]], [[standard-input]], [[standard-output]], [[error-output]], [[debug-output]]\n** Input\n[[read-char]], [[readc]], [[unread-char]], [[unreadc]], [[peek-char]], [[peekc]], [[read-line]], [[read]], [[read-refusing-eof]], [[read-objects-from-string]], [[clear-input]]\n** Output\n[[print]], [[write]], [[write-char]], [[writec]], [[write-string]], [[writes]], [[write-line]], [[write-spaces]], [[display]], [[pretty-print]], [[newline]], [[fresh-line]], [[space]], [[force-output]]\n** Formatted output\n[[format]]\n** Miscellaneous\n[[port-read-table]], [[line-length]], [[hpos]], [[vpos]], [[with-output-width-stream]], [[printwidth]], [[displaywidth]], [[make-broadcast-port]]\n----\n* Files\n** File systems\n[[local-fs]], [[aegis-fs?]], [[unix-fs?]], [[vms-fs?]]\n** Filenames\n[[make-filename]], [[->filename]], [[filename?]], [[filename-fs]], [[filename-dir]], [[filename-name]], [[filename-type]], [[filename-generation]], [[filename->string]]\n** Files\n[[maybe-open]], [[port-name]], [[file-exists?]], [[file-move]], [[file-delete]]\n----\n* Program structure\n** Environment structure\n[[standard-env]], [[user-env]]\n** File syntax\n[[herald]], [[read-table]], [[syntax-table]], [[env]]\n** Loading files\n[[load]]\n** File compilation\n[[comfile]], [[tc-syntax-table]], [[tc-macro-definition-env]]\n----\n* User interface\n** Invoking Tau\n[[stop]], [[exit]], [[command-line]]\n** Read-eval-print loops\n[[##]], [[++]], [[repl-env]]\n** Command levels\n[[reset]], [[ret]], [[breakpoint]]\n** Transcripts\n[[transcript-on]], [[transcript-off]]\n** Customization\n[[repl-read]], [[repl-eval]], [[repl-print]], [[repl-prompt]], [[load-noisily?]], [[repl-wont-print?]], [[repl-wont-print]]\n----\n* Debugging\n** Debugging utilities\n[[trace]], [[untrace]], [[pp]], [[backtrace]]\n** The inspector\n[[debug]], [[crawl]]\n** Debugging primitives\n[[where-defined]], [[identification]], [[argspectrum]], [[disclose]], [[get-environment]], [[structure-type]], [[walk-symbols]]\n** Miscellaneous\n[[enforce]], [[t-version-number]], [[t-implementation-env]], [[tc-env]], [[gc]], [[gc-stats]], [[gc-noisily?]]\n\n")
("bit-count" . "(:ctime 1017981456 :cuser #f :mtime 1017981456 :muser #f)* [procedure] bit-count ''integer''\n\n[[Scheme48]]: # of bits set in the integer ''integer''.\n")
("values" . "(:ctime 1014860319 :cuser #f :mtime 1191663985 :muser #f)* [procedure] values ''obj'' ...\n\n[[R5RS]], [[R6RS]]: Delivers all of its arguments to its continuation. \n\nIn R5RS, all continuations take exactly one value, except\nfor continuations created by the [[call-with-values]] procedure.\nHowever, the effect to pass the different number of values from\nwhat the continuation expects is undefined; some implementations\nmay raise an exception, or some may simply ignores the excess\nvalues, etc.\n\nR6RS mentions that (a) continuations of the non-final expressions\n(i.e. the expression whose value is discarded) takes any number\nof values, and (b) continuations of an expression evaluates to\nan argument of a procedure takes exactly one value.\nIt also says that an exception is raised when different number\nof values are passed to the continuation.\n\nSee also [[call-with-values]], [[receive]].\n")
("input-file-port?" . "(:ctime 1018334075 :cuser #f :mtime 1018334075 :muser #f)* [procedure] input-file-port? ''obj''\n* [procedure] output-file-port? ''obj''\n\n[[STk]]: see also [[input-string-port?]], [[input-virtual-port?]], etc.\n\n")
("read-char" . "(:ctime 1014857764 :cuser #f :mtime 1015882966 :muser #f)* [procedure] read-char [''port'']\n\n[[R5RS]]: Returns the next character available from the input port, updating the port to point to the following character. If no more\ncharacters are available, an end of file object is returned. Port may be omitted, in which case it defaults to the value returned by\ncurrent-input-port.\n\nSee also [[peek-char]], [[eof-object?]], [[current-input-port]].\n\n[[SCM]]'s read-char can take a curses window as a port.  See [[initscr]].\n\n")
("upper-case" . "(:ctime 1018071823 :cuser #f :mtime 1018071823 :muser #f)[[$$include lower-case]]\n")
("simple-return-primitive?" . "(:ctime 1019625248 :cuser #f :mtime 1019625248 :muser #f)* [procedure] simple-return-primitive? ''prim-proc''\n\n[[MzScheme]]: \n")
("process-input" . "(:ctime 1018342289 :cuser #f :mtime 1018342289 :muser #f)[[$$include process-pid]]\n")
(">=" . "(:ctime 1014954692 :cuser #f :mtime 1015066026 :muser #f)[[$$include =]]\n\n")
("partition" . "(:ctime 1014869241 :cuser #f :mtime 1018072388 :muser #f)* [procedure] partition ''pred'' ''list''\n\n[[SRFI-1]]: Partitions the elements of ''list'' with predicate ''pred'', \nand returns two values: the list of in-elements and the list of\nout-elements. The list is not disordered -- elements occur in the \nresult lists in the same order as they occur in the\nargument list. The dynamic order in which the various applications of \n''pred'' are made is not specified. One of the returned\nlists may share a common tail with the argument list.\n\nSee also [[partition!]], [[filter]], [[remove]].\n\n\n* [generic] partition ''pred'' ''coll''\n\n[[Gauche]] extends this to take arbitrary collection\n(with gauche.collection module).\n")
("SRFI-96" . "(:ctime 1327511869 :cuser #f :mtime 1327512039 :muser #f)SRFI-96: SLIB Prerequisites\n\nhttp://srfi.schemers.org/srfi-96/srfi-96.html\n\n[[$$srfi-implementors]]\n\n----\n\n** Configuration\n\n[[software-type]], [[scheme-implementation-type]], [[scheme-implementation-version]], [[scheme-implementation-home-page]], [[scheme-file-suffix]], [[slib:features]]\n\n** File-System\n[[with-load-pathname]], [[tmpnam]], [[file-exists?]], [[delete-file]]\n\n** Input/Output\n[[open-file]], [[port?]], [[close-port]], [[call-with-open-ports]], [[call-with-open-ports]], [[current-error-port]], [[force-output]], [[force-output]], [[file-position]], [[file-position]], [[output-port-width]], [[output-port-width]], [[output-port-height]], [[output-port-height]]\n\n** Defmacro\n[[defmacro]], [[gentemp]], [[defmacro:eval]], [[defmacro:load]], [[macroexpand]], [[defmacro:expand*]]\n\n** R5RS Macros\n[[macro:expand]], [[macro:eval]], [[macro:load]]\n\n** System\n[[slib:load-source]], [[slib:load-compiled]], [[slib:load]], [[slib:eval]], [[slib:eval-load]], [[slib:warn]], [[slib:error]], [[slib:exit]], [[getenv]], [[system]], [[program-arguments]]\n\n** Miscellany\n[[identity]], [[slib:tab]], [[slib:form-feed]]\n\n** Mutual Exclusion\n[[make-exchanger]]\n\n** Legacy\n[[t]], [[nil]], [[last-pair]]\n")
("polar" . "(:ctime 1152518355 :cuser #f :mtime 1152525765 :muser #f)* [format descriptor] polar [''m'' [''a'']]\n[[RRRS]], [[R3RS]]: express as a polar form complex number. ''m'' and ''a'' are formats for the magnitude and angle respectively. ''m'' and ''a'' default to (heur).\n\nSee also [[heur]] and [[number->string]].\n")
("load" . "(:ctime 1014856023 :cuser #f :mtime 1018334790 :muser #f)* [procedure] load ''filename''\n\n[[R5RS]]\n\n* [procedure] load ''filename'' [''eval-proc'']\n\n[[ChezScheme]], [[Chicken]] extend R5RS to allow to give an evaluation procedure.\n\nSee also [[eval]], [[compile]], [[interpret]]\n\n* [procedure] load ''filename'' [''module'']\n\n[[STk]]: you can give a module in which \nthe forms in ''filename'' are evaluated.\n\n* [procedure] load ''filename'' &keyword ''paths'' ''error-if-not-found''\n\n[[Gauche]] takes optional keyword arguments.\nSee also [[*load-path*]], [[add-load-path]], [[load-from-port]],\n[[current-load-port]], [[current-load-history]], [[current-load-next]].\n\n")
("test-eq" . "(:ctime 1151049296 :cuser #f :mtime 1151074058 :muser #f)* [syntax] test-eq [''test-name''] ''expected'' ''test-expr''\n\n[[SRFI-64]]: equivalent to\n (test-assert [''test-name''] (eq? ''expected'' ''test-expr''))\n\nSee also [[test-assert]].\n")
("char-set-every" . "(:ctime 1039169173 :cuser #f :mtime 1039169173 :muser #f)* [procedure] char-set-every ''pred'' ''char-set''\n\n[[SRFI-14]]: returns true if predicate pred  returns true of \nevery character in the character set ''char-set''.\nSee also [[char-set-any]].\n")
("sys-mkfifo" . "(:ctime 1018128066 :cuser #f :mtime 1018128066 :muser #f)* [procedure] sys-mkfifo ''path'' ''mode''\n\n[[Gauche]]: POSIX mkfifo().   See [[Concept:FileSystem]].\n\nThis is called [[make-fifo]] or [[create-fifo]]\nin some implementations.\n")
("remq" . "(:ctime 1014944845 :cuser #f :mtime 1039345212 :muser #f)* [procedure] remq ''obj'' ''list''\n\n[[ChezScheme]], [[STk]], [[Bigloo]]: remove ''obj'' from ''list'', using [[eq?]] to compare.\nEquivalent to [[SRFI-1]]'s [[delete]] with passing [[eq?]] for\ncomparison predicate.\n\nSee also [[remove]], [[remv]], [[remq!]].\n")
("submatch" . "(:ctime 1018083340 :cuser #f :mtime 1018083340 :muser #f)* [procedure] submatch ''key'' ''regexp''\n\n[[Scheme48]]: creates a regexp that matches ''regexp''\nand keeps the submatch information with ''key''.\nSee [[Concept:RegularExpression]], [[match]].\n")
("system" . "(:ctime 1014896511 :cuser #f :mtime 1116584417 :muser #f)* [procedure] system ''command''\n\n[[ChezScheme]]: Run ''command'' in separate process, waiting for it to terminate.  See [[Concept:Process]]\n\nSee also [[process]], [[run-process]], [[sys-system]]\n\n[[Scheme48]] also has this.  See [[have-system?]].\n\n[[Guile]], [[STk]], [[STklos]] also have this.\n\n* [procedure] system ''command'' ...\n\n[[Bigloo]]: appends all arguments, then runs it in separate process.\nReturns an integer.  See also [[system->string]]\n\n\n")
("ticks-interrupt" . "(:ctime 1038310393 :cuser #f :mtime 1038310393 :muser #f)* [procedure] ticks-interrupt\n\n[[SCM]]: callback procedure.  Called when ticks set by\n[[ticks]] expires.\n")
("string<=" . "(:ctime 1015063946 :cuser #f :mtime 1015063969 :muser #f)[[$$include string=]]\n")
("s8vector->byte-vector" . "(:ctime 1015075581 :cuser #f :mtime 1015075581 :muser #f)[[$$include u8vector->byte-vector]]\n")
("/" . "(:ctime 1014848766 :cuser #f :mtime 1191216830 :muser #f)* [procedure] / ''z''\n* [procedure] / ''z1'' ''z2'' ...\n\n[[R5RS]], [[R6RS]]\n\nSee also [[+]], [[*]], [[-]], [[/.]]\n\n\n")
("vector-for-each" . "(:ctime 1099387464 :cuser #f :mtime 1191570345 :muser #f)* [procedure] vector-for-each ''proc'' ''vec1'' ''vec2'' ...\n\n[[R6RS]], [[SRFI-43]]: Like [[for-each]], but applies ''proc'' on elements of\nvectors, instead of lists.\nUnlike [[vector-map]], ''proc'' is applied to the elements of\nvectors from left to right.\n\nR6RS requires all the vectors are the same length.  SRFI-43 allows varied lengths,\nand stops when the all elements of the shortest vector are visited.\n")
("exec-self" . "(:ctime 1015888180 :cuser #f :mtime 1015888180 :muser #f)* [procedure] exec-self\n\n[[SCM]]: exits the current process and re-executes the same executable with\nthe same arguments.\n")
("string->object" . "(:ctime 1170794282 :cuser #f :mtime 1170799751 :muser #f)* [procedure] string->symbol ''string''\n\n[[LispMe]]: Equivalent to ([[read]] ([[open-input-string]] ''string''))\n")
("time-seconds" . "(:ctime 1015318171 :cuser #f :mtime 1015318171 :muser #f)* [procedure] time-seconds ''time''\n\n[[Scheme48]]: get # of seconds in integer from a time record.\nSee [[make-time]].\n\nSRFI-19 calls this [[time-second]].\n")
("verbose" . "(:ctime 1015888199 :cuser #f :mtime 1015888199 :muser #f)* [procedure] verbose ''n''\n\n[[SCM]]: sets verbosity level.\n")
("arg" . "(:ctime 1038277763 :cuser #f :mtime 1038277763 :muser #f)* [procedure] arg ''arglist'' ''n'' [''default'']\n* [procedure] arg* ''arglist'' ''n'' [''default-thunk'']\n\n[[Scsh]]: returns ''n''-th element of ''arglist'',\nwhere the index is 1-based.  If ''arglist'' is shorter\nthan ''n'', ''default'' is returned\n(or ''default-thunk'' is called).\nConvenient to\naccess the command line arguments.  See [[command-line]],\n[[command-line-arguments]]. \n")
("statistics" . "(:ctime 1015027815 :cuser #f :mtime 1015029257 :muser #f)* [procedure] statistics\n\n[[ChezScheme]]: returns sstats structure.\nSee [[make-sstats]], [[sstats?]], [[sstats-cpu]],\n[[sstats-real]], [[sstats-bytes]], [[sstats-gc-count]],\n[[sstats-gc-cpu]], [[sstats-gc-real]], [[sstats-gc-bytes]],\n[[set-sstats-cpu!]], [[set-sstats-real!]], [[set-sstats-bytes!]],\n[[set-sstats-gc-count!]], [[set-sstats-gc-cpu!]], [[set-sstats-gc-real!]],\n[[set-sstats-gc-bytes!]]\n")
("symbol-append" . "(:ctime 1039408781 :cuser #f :mtime 1039408794 :muser #f)* [procedure] symbol-append ''symbol'' ...\n\n[[Bigloo]]:\n  (string->symbol (apply string-append (map symbol->string (list ''symbol'' ...))))\n")
("define-structure" . "(:ctime 1014949108 :cuser #f :mtime 1327407153 :muser #f)* [syntax] define-structure (''name'' ''id1'' ...) ((''id2'' ''val'') ...)\n\n[[ChezScheme]]: older mechanism similar to records.  it is actually a\nwrapper to treat vectors as if structures, by defining\nconstructors, accessors, etc.\n\nSee [[define-record]] for Chez's newer mechanism.\n\n[[SRFI-9]] defines a portable record mechansim [[define-record-type]].\n\n* [syntax] define-structure (''id0'' ''id1'' ... ''idN'')\n\n[[Chicken]]: used in the Andrew Wright's pattern matching package.\nSee [[match]].  See also [[define-const-structure]].\n\n* [configuration language] define-structure ''name'' ''interface'' ''clause'' ...\n\n[[Scheme48]], [[Scsh]]: one of the special forms of configuration language,\nwhich manages namespaces and libraries.  A sort of module system.\nSee [[Scheme48:ModuleSystem]] for details.\n [http://www.obtenir-rio.info rio orange]\n")
("#!bwp" . "(:ctime 1015030760 :cuser #f :mtime 1015030760 :muser #f)* [reader syntax] #!bwp\n\n[[ChezScheme]]: denotes ''broken weak pointer''.\nSee [[bwp-object?]], [[weak-cons]].\n")
("a:floc16b" . "(:ctime 1144485145 :cuser #f :mtime 1144529224 :muser #f)* [procedure] a:floc16b [''z'']\n[[SRFI-63]]: Returns an inexact 16.bit flonum complex uniform-array prototype.\n")
("time-difference!" . "(:ctime 1015409022 :cuser #f :mtime 1015409033 :muser #f)[[$$include time-difference]]\n")
("alarm" . "(:ctime 1038310454 :cuser #f :mtime 1038310454 :muser #f)* [procedure] alarm ''sec''\n\n[[SCM]]: arrange [[alarm-interrupt]] to be called after\n''sec''.  If ''sec'' is zero, the alarm settings is\ncancelled.\n\nGauche has [[sys-alarm]].\n")
(":dispatched" . "(:ctime 1144527545 :cuser #f :mtime 1144538710 :muser #f)* [syntax] :dispatched ''vars'' ''dispatch'' ''arg1'' ''arg'' ...\n[[SRFI-42]]:\nRuns the variables through a sequence defined by ''dispatch'' and ''arg1''\n''arg'' .... The purpose of :dispatched is implementing dispatched generators,\nin particular the predefined dispatching generator [[:]].\n")
("gauche-architecture-directory" . "(:ctime 1015904903 :cuser #f :mtime 1015904903 :muser #f)[[$$include gauche-architecture]]\n")
("bytes-allocated" . "(:ctime 1015028579 :cuser #f :mtime 1015028579 :muser #f)* [procedure] bytes-allocated\n\n[[ChezScheme]]: statistics\n\n")
("sum-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535695 :muser #f)* [syntax] sum-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe sum of all values of ''expression''.\nThink of it as ([[apply]] [[+]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n")
("alist-delete!" . "(:ctime 1014874129 :cuser #f :mtime 1014874129 :muser #f)* [procedure] alist-delete! ''key'' ''alist'' [''='']\n\n[[SRFI-1]]: linear-update variant of [[alist-delete]].\n\n")
("Index:k" . "(:ctime 1014895365 :cuser #f :mtime 1015014574 :muser #f)[[$$index k]]\n\n")
("rxmatch-before" . "(:ctime 1015899772 :cuser #f :mtime 1015899779 :muser #f)[[$$include rxmatch-start]]\n")
("eval-when" . "(:ctime 1014965995 :cuser #f :mtime 1108624178 :muser #f)* [syntax] eval-when ''situations'' ''form1'' ''form2'' ...\n\n[[ChezScheme]], [[Chicken]]: ''situations'' may be a list of\nfollowing symbols: compile, load, and eval.  Compilation of ''form1'' ...\nis controlled by ''situations'' as the following table, which is from\nChicken's manual:\n\n||       ||''in compiled code''     ||''in interpreted code''||\n||eval   ||ignored                  ||evaluated||\n||compile||evaluated at compile time||ignored  ||\n||load   ||compiled as normal       ||ignored  ||\n\nNotes:\n\nThere was a [http://lists.gnu.org/archive/html/guile-devel/2001-05/msg00534.html discussion]\nin guile-devel to incorprate eval-when into it (possibly CLtL2 style), but \nthe current Guile manual doesn't have an entry for it.\n\n")
("file-info?" . "(:ctime 1040727096 :cuser #f :mtime 1040727096 :muser #f)* [procedure] file-info? ''obj''\n\n[[Scheme48]]: returns true iff ''obj'' is a file-info\nrecord returned by [[get-file-info]] or [[get-file/link-info]].\nSee also [[file-info-name]] etc for accessors.\nSee also [[Concept:FileSystem]].\n")
("cdr" . "(:ctime 1014839190 :cuser #f :mtime 1191314089 :muser #f)* [procedure] cdr ''obj''\n\n[[RRS]],\n[[RRRS]],\n[[R3RS]],\n[[R4RS]],\n[[R5RS]], [[R6RS]]\n\nIn R6RS, (cdr ''obj'') raises &assertion exception.\n")
("vector-reverse!" . "(:ctime 1099388582 :cuser #f :mtime 1099388582 :muser #f)* [procedure] vector-reverse! ''vector'' [''start'' ''end'']\n\n[[SRFI-43]]: reverses the elements of the given vector.\n\n\n")
("record-constructor" . "(:ctime 1014947978 :cuser #f :mtime 1017982876 :muser #f)* [procedure] record-constructor ''rtd''\n\n[[ChezScheme]]\n\nSee also [[make-record-type]], [[define-record]]\n\n* [procedure] record-constructor ''rtd'' [''field-names'']\n\n[[SLIB]] allows to customize arguments of constructor by the optional \narguments.\n\nSee also [[make-record-type]].\n\n* [procedure] record-constructor ''rtd'' ''field-names''\n\n[[Scheme48]]: ''field-names'' is mandatory.\nSee also [[define-record-type]].\n")
("ucs->char" . "(:ctime 1138263996 :cuser #f :mtime 1138264617 :muser #f)[[$$include char->ucs]]\n")
("user-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074727 :muser #f)* [procedure] user-vicinity\n\n[[SRFI-59]]: Returns the vicinity of the current directory of the user. On most systems this is `\"\"' (the empty string).\n")
("blob-s64-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144711737 :muser #f)[[$$include blob-u64-ref]]\n")
("rename" . "(:ctime 1018128451 :cuser #f :mtime 1063413397 :muser #f)* [procedure] rename ''old'' ''new''\n\n[[Scheme48]]: rename file.  See [[Concept:FileSystem]].\n\nThis is called [[rename-file]], [[rename-file-or-directory]] or [[sys-rename]]\nin some implementations.\n\n''Note'': [[Scheme48]] also uses ''rename'' in its configuration language.\nSee [[Scheme48:ModuleSystem]].\n")
("untrace-var" . "(:ctime 1018344665 :cuser #f :mtime 1018344665 :muser #f)[[$$include trace-var]]\n")
("date-month" . "(:ctime 1023886228 :cuser #f :mtime 1023886228 :muser #f)[[$$include date-nanosecond]]\n")
("set-widget-data!" . "(:ctime 1018335803 :cuser #f :mtime 1018335803 :muser #f)* [procedure] set-widget-data! ''widget'' ''expr''\n* [procedure] get-widget-data ''widget''\n\n[[STk]]\n")
("Index:b" . "(:ctime 1014838594 :cuser #f :mtime 1015014237 :muser #f)[[$$index b]]\n\n\n")
("sys-link" . "(:ctime 1020375420 :cuser #f :mtime 1020375441 :muser #f)* [procedure] sys-link ''existing'' ''new''\n\n[[Gauche]]: POSIX link().\nSee also [[sys-symlink]], [[sys-unlink]], [[Concept:FileSystem]].\n\nThis is called [[link]] or [[create-hard-link]]\nin some implementations.\n")
("max" . "(:ctime 1014856383 :cuser #f :mtime 1191216728 :muser #f)* [procedure] max ''x1'' ''x2'' ...\n* [procedure] min ''x1'' ''x2'' ...\n\n[[R5RS]], [[R6RS]]\n\nNote: R6RS states that, for any real number object ''x'',\n\n (max +inf.0 ''x'') => +inf.0\n (min -inf.0 ''x'') => -inf.0\n\nTherefore, (max +inf.0 +nan.0) => +inf.0.\n\n\n")
("SRFI-55" . "(:ctime 1099655294 :cuser #f :mtime 1122428886 :muser #f)SRFI-55: require-extension\n\nhttp://srfi.schemers.org/srfi-55/srfi-55.html\n\n[[$$srfi-implementors]]\n\n----\n[[require-extension]]\n")
("sys-getenv" . "(:ctime 1015904752 :cuser #f :mtime 1015904752 :muser #f)* [procedure] sys-getenv ''name''\n* [procedure] sys-putenv ''name'' ''value''\n\n[[Gauche]]: gets/sets the value of the environment variable.\n\nsys-getenv is called [[getenv]] or [[lookup-environment-variable]] on some\nimplementations.  sys-putenv is called [[setenv]] or [[setenv!]] on some\nimplementations.\n")
("trace-lambda" . "(:ctime 1014895948 :cuser #f :mtime 1014895965 :muser #f)* [syntax] trace-lambda ''name'' ''formals'' ''exp1'' ''exp2'' ...\n\n[[ChezScheme]]\n\nSee also [[trace]]\n\n")
("test-runner-group-stack" . "(:ctime 1151136447 :cuser #f :mtime 1151146398 :muser #f)* [syntax] test-runner-group-stack ''runner''\n\n[[SRFI-64]]: returns the list of names of active test groups with innermost first.\n")
("if<=?" . "(:ctime 1144494246 :cuser #f :mtime 1144502916 :muser #f)[[$$include if=?]]\n")
("group-id->integer" . "(:ctime 1018124416 :cuser #f :mtime 1018124416 :muser #f)[[$$include group-id?]]\n")
("delay" . "(:ctime 1014847498 :cuser #f :mtime 1191228077 :muser #f)* [syntax] delay ''expression''\n\n[[R5RS]]\n\nIn [[R6RS]] this is moved to the R5RS compatibility library '''(rnrs r5rs (6))'''.\n\nSee also [[force]].\n")
("@copy-tree" . "(:ctime 1038091664 :cuser #f :mtime 1038091664 :muser #f)* [procedure] @copy-tree ''obj''\n\n[[SCM]]: copies pairs and vectors recursively.\nan alias of [[copy-tree]].\n")
("key-get" . "(:ctime 1038030790 :cuser #f :mtime 1038030790 :muser #f)* [procedure] key-get ''kv-list'' ''key'' [''default'']\n\n[[STklos]]: returns a value associated with ''key''\nin the keyword-value list ''kv-list''.\nSee also [[key-set!]], [[key-delete]], [[key-delete!]].\n\nSome implementations have [[get-keyword]].\n")
("string-titlecase" . "(:ctime 1014894316 :cuser #f :mtime 1014894316 :muser #f)* [procedure] string-titlecase ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-titlecase!]], [[string-upcase]], [[string-downcase]]\n")
("char-set:letter" . "(:ctime 1018082648 :cuser #f :mtime 1018082648 :muser #f)[[$$include char-set:lower-case]]\n")
("sci" . "(:ctime 1152518355 :cuser #f :mtime 1152525586 :muser #f)* [format descriptor] sci [''n'' [''m'']]\n[[RRRS]], [[R3RS]]: express in exponential notation. ''n'' specifies the total number of places to be displayed. ''n'' defaults to the size of a single-precision flonum. ''m'' specifies the number of places to the right of the radix point. ''m'' defaults to ''n''-1. (sci h) does heuristic expression.\n\nSee also [[number->string]].\n")
("test-runner-on-test-begin" . "(:ctime 1151049296 :cuser #f :mtime 1151081544 :muser #f)* [syntax] test-runner-on-test-begin ''runner''\n* [syntax] test-runner-on-test-begin! ''runner'' ''function''\n\n[[SRFI-64]]: gets or sets the callback function for on-test-begin.\n''function'' is called at the start of the individual test case before the test expression is evaluated.\n\nSee also [[test-on-test-begin-simple]].\n")
("errno/badf" . "(:ctime 1015077170 :cuser #f :mtime 1015077170 :muser #f)[[$$include errno/perm]]\n")
("multiple-value-bind" . "(:ctime 1045088397 :cuser #f :mtime 1045088397 :muser #f)* [syntax] multiple-value-bind (''var'' ...) ''producer'' ''exp'' ...\n\n[[Bigloo]]: the same as [[receive]].\n")
("dup->inport" . "(:ctime 1036970045 :cuser #f :mtime 1036970045 :muser #f)* [procedure] dup->inport ''fd/port'' [''newfd'']\n* [procedure] dup->outport ''fd/port'' [''newfd'']\n* [procedure] dup->fdes ''fd/port'' [''newfd'']\n\n[[Scsh]]: dup(2) or dup2(2).  see also [[dup]].\n")
("get-file-info" . "(:ctime 1020403942 :cuser #f :mtime 1036979372 :muser #f)* [procedure] get-file-info ''path''\n* [procedure] get-file/link-info ''path''\n\n[[Scheme48]]: returns a file-info structure, which is\nequivalent to a struct stat.\n[[get-file-info]] corresponds to stat(2), and\n[[get-file/link-info]] corresponds to lstat(2).\nSee also [[get-port-info]].\n\nPredicates and accessors: [[file-info?]],\n[[file-info-name]], [[file-info-type]], [[file-info-device]],\n[[file-info-inode]], [[file-info-link-count]],\n[[file-info-size]], [[file-info-owner]],\n[[file-info-group]], [[file-info-mode]],\n[[file-info-last-access]], [[file-info-last-modification]],\n[[file-info-last-info-change]].\n\nGauche has [[sys-stat]] and [[sys-lstat]].  Scsh has [[file-info]].\n\n")
("subtract" . "(:ctime 1018038057 :cuser #f :mtime 1018039014 :muser #f)* [procedure] subtract ''char-set'' ''char-set''\n\n[[Scheme48]]: character set operation.  see [[set]].\n\n\nSRFI-14 calls this [[char-set-difference]].\n")
("signal/stop" . "(:ctime 1015076651 :cuser #f :mtime 1015076651 :muser #f)[[$$include signal/hup]]\n")
("condition-variable-signal!" . "(:ctime 1015927745 :cuser #f :mtime 1015963709 :muser #f)* [procedure] condition-variable-signal! ''cv''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("port-terminal-name" . "(:ctime 1015725904 :cuser #f :mtime 1015725942 :muser #f)* [procedure] port-terminal-name ''port''\n\n[[Scheme48]]: POSIX ttyname().\n\nThis is called [[sys-ttyname]], [[terminal-name]] in some implementations.\n")
("perm/iwoth" . "(:ctime 1015099827 :cuser #f :mtime 1015099827 :muser #f)[[$$include perm/irusr]]\n")
("sys-symlink" . "(:ctime 1020375508 :cuser #f :mtime 1020375508 :muser #f)* [procedure] sys-symlink ''existing'' ''new''\n\n[[Gauche]]: POSIX symlink().\nSee also [[sys-link]], [[sys-unlink]], [[Concept:FileSystem]].\n\nThis is called [[create-symlink]] or [[create-symbolic-link]]\non some implementations.\n")
("pair-mutable?" . "(:ctime 1099724577 :cuser #f :mtime 1099725164 :muser #f)* [procedure] pair-mutable? ''obj''\n\n[[STklos]]: returns #t iff ''obj'' is a mutable pair.\n\nSee also [[string-mutable?]], [[vector-mutable?]].\n")
("fxlogor" . "(:ctime 1014950907 :cuser #f :mtime 1191224789 :muser #f)[[$$include fxlogand]]\n")
("user-id=?" . "(:ctime 1018124289 :cuser #f :mtime 1018124289 :muser #f)[[$$include user-id?]]\n")
("struct-is-a?" . "(:ctime 1099725938 :cuser #f :mtime 1099725938 :muser #f)* [procedure] struct-is-a? ''obj'' ''structtype''\n\n[[STklos]]: returns #t iff ''obj'' is of type ''structtype''.\n\nSee also [[is-a?]], [[make-struct]].\n")
("delete-from-queue!" . "(:ctime 1017980912 :cuser #f :mtime 1017980912 :muser #f)* [procedure] delete-from-queue! ''queue'' ''value''\n\n[[Scheme48]]: removes the first occurrence of ''value'' from ''queue''.\nValues are compared by [[eq?]].  Returns a boolean value\nindicating if ''value'' is found or not.\nSee also [[make-queue]].\n")
("close-after" . "(:ctime 1018381415 :cuser #f :mtime 1018381415 :muser #f)* [procedure] close-after ''port'' ''consumer''\n\n[[Scsh]]: returns (''consumer'' ''port''), but closes\n''port'' on return.\n")
("syntax-rules" . "(:ctime 1014860079 :cuser #f :mtime 1191845112 :muser #f)* [transformer spec] syntax-rules ''literals'' (''pattern'' ''template'') ...\n\n[[R5RS]], [[R6RS]]\n\nChanges in R6RS:\n- ''pattern'' may have '_', which can match anything.  '_' can appear in a ''pattern'' more than once.\n- In ''template'', a form '''(... <template>)''' is '''<template>''' except a symbol '''...''' is treated as an ordinary symbol rather than an ellipsis.  This allows the macro to insert an ellipsis into the expanded result by writing '''(... ...)'''.\n\n\n\nSee also [[define-syntax]], [[let-syntax]], [[letrec-syntax]].\n")
("call-with-input-file" . "(:ctime 1014839056 :cuser #f :mtime 1015043041 :muser #f)* [procedure] call-with-input-file ''string'' ''proc''\n\n[[R5RS]]\n\n* [procedure] call-with-input-file ''string'' ''proc'' [''mode'']\n\n[[Chicken]] extends R5RS to take mode argument: #:text, #:binary or #:append.\n\n* [procedure] call-with-input-file ''string'' ''proc'' [''options'' ...]\n\n[[Gauche]] extends R5RS to take various keyword arguments to customize\nbehavior.\n\n")
("SRFI-14" . "(:ctime 1015017723 :cuser #f :mtime 1122428612 :muser #f)SRFI-14: Character-set Library\n\nhttp://srfi.schemers.org/srfi-14/srfi-14.html\n\n[[$$srfi-implementors]]\n\n----\n\n** Predicates & comparison\n\n[[char-set?]], [[char-set=]], [[char-set<=]], [[char-set-hash]]\n\n** Iterating over character sets\n\n[[char-set-cursor]], [[char-set-ref]], [[char-set-cursor-next]], \n[[end-of-char-set?]], [[char-set-fold]], [[char-set-unfold]], \n[[char-set-unfold!]],\n[[char-set-for-each]], [[char-set-map]]\n\n** Creating character sets\n\n[[char-set-copy]], [[char-set]],\n\n[[list->char-set]], [[string->char-set]],\n[[list->char-set!]], [[string->char-set!]],\n[[char-set-filter]], [[ucs-range->char-set]], \n[[char-set-filter!]], [[ucs-range->char-set!]],\n\n[[->char-set]]\n\n** Querying character sets\n\n[[char-set->list]], [[char-set->string]],\n[[char-set-size]], [[char-set-count]], [[char-set-contains?]],\n[[char-set-every]], [[char-set-any]]\n\n** Character-set algebra\n\n[[char-set-adjoin]], [[char-set-delete]],\n[[char-set-adjoin!]], [[char-set-delete!]],\n\n[[char-set-complement]], [[char-set-union]], [[char-set-intersection]],\n[[char-set-complement!]], [[char-set-union!]], [[char-set-intersection!]],\n\n[[char-set-difference]], [[char-set-xor]], [[char-set-diff+intersection]],\n[[char-set-difference!]], [[char-set-xor!]], [[char-set-diff+intersection!]]\n\n** Standard character sets\n\n[[char-set:lower-case]], [[char-set:upper-case]], [[char-set:title-case]],\n[[char-set:letter]], [[char-set:digit]], [[char-set:letter+digit]],\n[[char-set:graphic]], [[char-set:printing]], [[char-set:whitespace]],\n[[char-set:iso-control]], [[char-set:punctuation]], [[char-set:symbol]],\n[[char-set:hex-digit]], [[char-set:blank]], [[char-set:ascii]],\n[[char-set:empty]], [[char-set:full]]\n")
("ranges" . "(:ctime 1018037879 :cuser #f :mtime 1018037879 :muser #f)* [procedure] ranges ''low-char'' ''high-char'' ...\n\n[[Scheme48]]: character set constructor.\nSee [[set]].\n")
("bwp-object?" . "(:ctime 1015030797 :cuser #f :mtime 1015030797 :muser #f)* [procedure] bwp-object? ''obj''\n\n[[ChezScheme]]: checks if ''obj'' is a broken weak pointer, [[#!bwp]].\nSee also [[weak-cons]].\n")
("eof-object?" . "(:ctime 1014847714 :cuser #f :mtime 1014847714 :muser #f)* [procedure] eof-object? ''obj''\n\n[[R5RS]]\n")
("time-tai->julian-day" . "(:ctime 1099301376 :cuser #f :mtime 1099301384 :muser #f)[[$$include time-tai->date]]\n")
("hash-table-update!/default" . "(:ctime 1144494246 :cuser #f :mtime 1144494674 :muser #f)* [procedure] hash-table-update!/default ''hash-table'' ''key'' ''function'' ''default''\n[[SRFI-69]]:\nBehaves as if it evaluates to ([[hash-table-update!]] ''hash-table'' ''key'' ''function'' (lambda () ''default'')).\n")
("program-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074691 :muser #f)* [procedure] program-vicinity\n\n[[SRFI-59]]: Returns the vicinity of the currently loading Scheme code.\n")
("string-immutable?" . "(:ctime 1015805724 :cuser #f :mtime 1015805724 :muser #f)* [procedure] string-immutable? ''string''\n\n[[Gauche]]: returns #t if ''string'' is immutable.\n")
("file-close" . "(:ctime 1015183851 :cuser #f :mtime 1015183874 :muser #f)* [procedure] file-close ''fileno''\n\n[[Chicken]]: low-level close routine.  See also [[file-open]], [[port->fileno]].\n")
("case" . "(:ctime 1014841924 :cuser #f :mtime 1191209244 :muser #f)* [syntax] case ''key'' ''clause1'' ''clause2'' ...\n\n[[R5RS]], [[R6RS]]:\n\n[[SRFI-87]]: Extends [[case]] to allow the following forms in ''clause''s.\n\n- ((''datum1'' ...) => ''expression'')\n- (else => ''expression'')\n\n\n\n")
("u8-list->blob" . "(:ctime 1144700986 :cuser #f :mtime 1144712281 :muser #f)* [procedure] u8-list->blob ''octets''\n\n[[SRFI-74]]: Returns a newly allocated blob whose elements are the\nelements of list ''octets'', which must all be octets, in the same order.\nAnalogous to [[list->vector]].\n\n")
("group-info?" . "(:ctime 1018125215 :cuser #f :mtime 1018125215 :muser #f)* [procedure] group-info? ''x''\n* [procedure] group-info-name ''group-info''\n* [procedure] group-info-id ''group-info''\n* [procedure] group-info-mambers ''group-info''\n\n[[Scheme48]]: accessors to group information.\nSee [[Concept:UserGroup]], [[group-id->group-info]],\n[[name->group-info]].\n")
("file-lock" . "(:ctime 1015199113 :cuser #f :mtime 1015199276 :muser #f)* [procedure] file-lock ''port'' [''start'' ''len'']\n\n[[Chicken]]: lock a file.  See also [[file-test-lock]], [[file-unlock]].\n\nGauche has direct fcntl() interface.  See [[sys-fcntl]].\n")
("string-suffix-ci?" . "(:ctime 1014893251 :cuser #f :mtime 1014893251 :muser #f)* [procedure] string-suffix-ci? ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-suffix?]], [[string-suffix-length-ci]]\n")
("map-to" . "(:ctime 1099609715 :cuser #f :mtime 1099651291 :muser #f)* [generic] map-to ''class'' ''proc'' ''coll1'' ''coll2'' ...\n\n[[Gauche]]: generalized map.  Apply ''proc'' to collections, and\nreturns a collection whose class is specified by ''class''.\n\n{{{\n(map-to <vector> + '(1 2 3) '#(4 5 6)) => #(5 7 9)\n}}}\n\nSee also [[map]], [[coerce-to]].\n")
("os-version-name" . "(:ctime 1020375208 :cuser #f :mtime 1020375208 :muser #f)[[$$include os-name]]\n")
("sys-basename" . "(:ctime 1099395290 :cuser #f :mtime 1099395290 :muser #f)[[$$include sys-dirname]]\n")
("array-ref" . "(:ctime 1017981829 :cuser #f :mtime 1144488868 :muser #f)* [procedure] array-ref ''array'' ''index0'' ...\n* [procedure] array-ref ''array'' ''index-obj''\n\n[[SRFI-25]]: array accessor.   See [[make-array]],\n[[array-set!]].  ''index-obj'' can be a vector or\na 0-based 1-dimensional array.\n\n* [procedure] array-ref ''array'' ''index0'' ...\n\n[[SRFI-47]], [[SRFI-63]], [[Scheme48]]: array accessor.  See [[make-array]],\n[[array-set!]].\n\n")
("u8vector->byte-vector" . "(:ctime 1015075555 :cuser #f :mtime 1015075555 :muser #f)* [procedure] u8vector->byte-vector ''u8vector''\n* [procedure] s8vector->byte-vector ''s8vector''\n* [procedure] u16vector->byte-vector ''u16vector''\n* [procedure] s16vector->byte-vector ''s16vector''\n* [procedure] u32vector->byte-vector ''u32vector''\n* [procedure] s32vector->byte-vector ''s32vector''\n* [procedure] f32vector->byte-vector ''f32vector''\n* [procedure] f64vector->byte-vector ''f64vector''\n\n[[Chicken]]\n\nSee also [[byte-vector->u8vector]],\n[[byte-vector->s8vector]],\n[[byte-vector->u16vector]],\n[[byte-vector->s16vector]],\n[[byte-vector->u32vector]],\n[[byte-vector->s32vector]],\n[[byte-vector->f32vector]],\n[[byte-vector->f64vector]]\n\n\n\n")
("link-named-scm" . "(:ctime 1015883280 :cuser #f :mtime 1015883280 :muser #f)* [procedure] link-named-scm ''name'' ''module1'' ...\n\n[[SCM]]: creates a new scm executable with ''name'', including compiled modules.\nSee also [[compile-file]].\n")
("with-errno-handler" . "(:ctime 1036969824 :cuser #f :mtime 1036969824 :muser #f)* [syntax] with-errno-handler ''handler-spec'' . ''body''\n\n[[Scsh]]: sets unix syscall error handlers according\nto ''handler-spec'' and evaluates ''body''.\nSee also [[with-errno-handler*]], [[errno-error]].\n")
("pipe/buf" . "(:ctime 1015105992 :cuser #f :mtime 1015105992 :muser #f)* [variable] pipe/buf\n\n[[Chicken]]: maximum number of bytes that can be written atomically to\na pipe port.\n")
("pretty-print-width" . "(:ctime 1015073078 :cuser #f :mtime 1015073078 :muser #f)* [procedure] pretty-print-width [''newval'']\n\n[[Chicken]]\n\nSee also [[pretty-print]].\n")
("input-char" . "(:ctime 1063240646 :cuser #f :mtime 1063240646 :muser #f)* [procedure] input-char ''bport''\n* [procedure] output-char ''bport'' ''char''\n\n[[Bigloo]]: These are used to do character I/O from/to a binary port.\nSee [[binary-port?]] about binary ports.\n")
("stdports->stdio" . "(:ctime 1018382277 :cuser #f :mtime 1018382277 :muser #f)* [procedure] stdports->stdio\n* [procedure] stdio->stdports\n\n[[Scsh]]: synchronize Unix' standard I/O file\ndescriptors and Scheme's current I/O ports.\nSee also [[with-stdio-ports*]].\n\n")
("getenv" . "(:ctime 1015030133 :cuser #f :mtime 1099742231 :muser #f)* [procedure] getenv ''string''\n\n[[ChezScheme]], [[Chicken]], [[STk]], [[Scsh]], [[Bigloo]]: \nreturns the environment value or #f.\nSee also [[setenv!]], [[setenv]] or [[putenv]].\n\nThis is called [[lookup-environment-variable]] or [[sys-getenv]]\non some implementations.\n\n* [procedure] getenv [''string'']\n\n[[STklos]]: the environment name is optional.  If omitted,\nreturns an alist of all environment names and variables.\n")
("thread-wait" . "(:ctime 1020749901 :cuser #f :mtime 1020750126 :muser #f)* [procedure] thread-wait ''thread''\n\n[[MzScheme]]: blocks until ''thread'' terminates.\n\nSRFI-18 and SRFI-21 have [[thread-join!]]\n")
("sixth" . "(:ctime 1014862993 :cuser #f :mtime 1014862993 :muser #f)* [procedure] sixth ''pair''\n\n[[SRFI-1]]\n")
("match-lambda" . "(:ctime 1015101728 :cuser #f :mtime 1144597713 :muser #f)* [syntax] match-lambda clause ...\n* [syntax] match-lambda* clause ...\n\n[[Chicken]], [[Gauche]]: Andrew Wright's pattern matching package. See [[match]].\n\n[[Bigloo]], [[STk]], and [[STklos]] have [[match-lambda]], but not match-lambda*.\nSee also [[match-case]].\n")
("import" . "(:ctime 1014927639 :cuser #f :mtime 1063421550 :muser #f)* [syntax] import ''name''\n\n[[ChezScheme]], [[STk]], [[STklos]], [[Gauche]]:\nImports bindings exported from module ''name''.\n\nChez's [[import]] affects local bindings, while STklos and Guile's affect\nonly the global bindings.\n\n  Chez:\n  (module m (y) (define y 'm-y))\n  (let ((x 'local-x) (y 'local-y))\n    (import m)\n    (list x y)) ==> (local-x m-y)\n\n  Gauche:\n  (define-module m (export y) (define y 'm-y))\n  (let ((x 'local-x) (y 'local-y))\n    (import m)\n    (list x y)) ==> (local-x local-y)\n\nIn other words, Chez's [[import]] works as if the bindings that are\nexported from the module are inserted where the [[import]] form\nappears.\n\nSee also [[module]], [[define-module]], [[import-only]], [[Gauche:ModuleSystem]],\n[[STklos:ModuleSystem]].\n\n* [module clause] import (''module'' ''import'' ...) ...\n* [module clause] import ''module''\n\n[[Chicken]]:  Can only appear in the module clause of [[define-module]].\nImports symbol from ''module''.  ''import'' can be a symbol\nor (''symbol'' ''rename'').  You can selectively import symbols, optionally\nrenaming, or give no ''import''s to import all exported symbols.  The second\nform is the same as (import (''module'')).  See also [[import-excluding]],\n[[Chicken:ModuleSystem]].\n")
("output-virtual-port?" . "(:ctime 1018334168 :cuser #f :mtime 1018334168 :muser #f)[[$$include input-virtual-port?]]\n")
("bit-not" . "(:ctime 1043985055 :cuser #f :mtime 1099724405 :muser #f)* [procedure] bit-not ''i''\n\n[[Bigloo]], [[STklos]]: bitwise not.  See also [[bit-or]],\n[[bit-and]], [[bit-xor]], [[bit-lsh]], [[bit-rsh]].\n\nThis is called [[bitwise-not]] or [[lognot]] in some\nimplementations.\n")
("set-error-output-port!" . "(:ctime 1018382135 :cuser #f :mtime 1018382135 :muser #f)[[$$include set-current-input-port!]]\n")
("case-sensitive" . "(:ctime 1014961602 :cuser #f :mtime 1039510248 :muser #f)* [procedure] case-sensitive [''newval'']\n\n[[ChezScheme]], [[Chicken]], [[SISC]]: a parameter to control case-sensitivity\nof the reader and the printer.\n\nSee also [[read]], [[write]]\n")
("vector=" . "(:ctime 1099364628 :cuser #f :mtime 1099364628 :muser #f)* [procedure] vector= ''eq'' ''vec'' ...\n\n[[SRFI-43]]: Compares given vectors element-wise, using procedure ''eq''.\n''Eq'' is always called with two arguments, even if more than three vectors\nare given; ''eq'' must be consistent with ''eq?'', e.g. if (''eq'' a b) => #t\nthen (eq? a b) => #t.\n\nIf no vector or only one vector is given, always return #t.\n")
("seventh" . "(:ctime 1014862925 :cuser #f :mtime 1014862925 :muser #f)* [procedure] seventh ''pair''\n\n[[SRFI-1]]\n")
("string-left-trim" . "(:ctime 1015074656 :cuser #f :mtime 1015074656 :muser #f)* [procedure] string-left-trim ''s'' ''trimchars''\n\n[[Chicken]]: ''trimchars'' should be a string, and must be present.\nSee [[string-trim]].\n\n\n")
("any-match?" . "(:ctime 1018083503 :cuser #f :mtime 1018083503 :muser #f)* [procedure] any-match? ''regexp'' ''string''\n\n[[Scheme48]]: regexp matcher.  Returns a boolean value\nindicating whether ''string'' matches ''regexp''.\nSee [[Concept:RegularExpression]], [[match]],\n[[exact-match?]].\n\n")
("open/nonblock" . "(:ctime 1015106385 :cuser #f :mtime 1015106385 :muser #f)[[$$include open/rdonly]]\n")
("sys-rename" . "(:ctime 1018337976 :cuser #f :mtime 1020222392 :muser #f)* [procedure] sys-rename ''old'' ''new''\n\n[[Gauche]]: rename file.\n\nThis is called [[rename]], [[rename-file]]\nor [[rename-file-or-directory]]\nin some implementations.\n")
("test-runner-fail-count" . "(:ctime 1151136447 :cuser #f :mtime 1151145408 :muser #f)* [procedure] test-runner-fail-count ''runner''\n\n[[SRFI-64]]: returns the number of tests that failed, but were expected to pass.\n")
("find-module" . "(:ctime 1015772484 :cuser #f :mtime 1099722895 :muser #f)* [procedure] find-module ''name'' [''default'']\n\n[[STk]], [[STklos]]: returns a module associated to the name ''name''.\nIf such a module does not exist, returns ''default'' if\ngiven, or signals an error.\nSee also [[Concept:Module]], [[define-module]], [[all-modules]].\n\n\n* [procedure] find-module ''name''\n\n[[Gauche]]: returns a module object whose name is a symbol ''name''.\nSee also [[Concept:Module]], [[define-module]], [[all-modules]].\n")
("make-fifo" . "(:ctime 1018127980 :cuser #f :mtime 1018127980 :muser #f)* [procedure] make-fifo ''file-mode''\n\n[[Scheme48]]: create fifo.\nFor ''file-mode'', see [[file-mode]].\nSee also [[Concept:FileSystem]].\n\nThis is called [[create-fifo]] or [[sys-mkfifo]]\nin some implementations.\n")
("perm/irgrp" . "(:ctime 1015099790 :cuser #f :mtime 1015099790 :muser #f)[[$$include perm/irusr]]\n")
("blob->sint-list" . "(:ctime 1144700986 :cuser #f :mtime 1144712553 :muser #f)[[$$include blob->uint-list]]\n")
("file-owner" . "(:ctime 1015188068 :cuser #f :mtime 1037014723 :muser #f)* [procedure] file-owner ''filename''\n\n[[Chicken]]: return the uid of the owner of ''filename''.\nSee [[Concept:FileSystem]].\n\nGauche has [[file-uid]].\n\n* [procedure] file-owner ''fname/fd/port'' [''chase?'']\n\n[[Scsh]]: see also [[file-info]].\n")
("compile-file" . "(:ctime 1014965471 :cuser #f :mtime 1015883208 :muser #f)* [procedure] compile-file ''input-filename'' [''output-filename'' [''machine-type'']]\n\n[[ChezScheme]]\n\nSee also [[compile]], [[compile-port]]\n\n* [procedure] compile-file ''name1'' ''name2'' ...\n\n[[SCM]]\n\n")
("date-year" . "(:ctime 1023886239 :cuser #f :mtime 1023886239 :muser #f)[[$$include date-nanosecond]]\n")
("program-arguments" . "(:ctime 1015211620 :cuser #f :mtime 1015211620 :muser #f)* [procedure] program-arguments\n\n[[SCM]]: returns the command-line arguments.  See also [[*argv*]].\n\nThis is called [[command-line-arguments]] or [[argv]] in some other\nimplementations.\n")
("call-with-output-file" . "(:ctime 1014839081 :cuser #f :mtime 1015043072 :muser #f)* [procedure] call-with-output-file ''string'' ''proc''\n\n[[R5RS]]\n\nSee also [[open-output-file]], [[with-output-to-file]]\n\n* [procedure] call-with-output-file ''string'' ''proc'' [''if-exists'']\n\n[[ChezScheme]] extends R5RS to take optional argument.\n\n* [procedure] call-with-output-file ''string'' ''proc'' [''mode'']\n\n[[Chicken]] extends R5RS to take mode argument: #:text, #:binary or #:append.\n\n* [procedure] call-with-output-file ''string'' ''proc'' [''options'' ...]\n\n[[Gauche]] extends R5RS to take optional keyword arguments.\n\n")
("#!true" . "(:ctime 1152518355 :cuser #f :mtime 1152526729 :muser #f)* [constant] #!true\n[[RRRS]]: boolean true value.\n\nSee also [[#!false]].\n")
("signal/prof" . "(:ctime 1015076608 :cuser #f :mtime 1015076608 :muser #f)[[$$include signal/hup]]\n")
("test-result-ref" . "(:ctime 1151049296 :cuser #f :mtime 1151080626 :muser #f)* [syntax] test-result-ref ''runner'' ''pname'' [''default'']\n\n[[SRFI-64]]: returns the value of the test result property named ''pname''.\nIf there is no property named ''pname'', returns ''default'', or #f if ''default'' is not specified.\n\nStandard test result properties are:\n:result-kind:\nThe result kind, as defined in [[test-result-kind]]. (test-result-kind ''runner'') is equivalent to (test-result-ref ''runner'' 'result-kind).\n:source-file: The Source file of test suite. (if known)\n:source-line: The location of test statement ([[test-assert]] etc.). (if known)\n:source-form: The Source form of expression. (if meaningful and known)\n:expected-value: The expected non-error result. (if meaningful and known)\n:expected-error: ''err-type'' specified in [[test-error]].  (if meaningful and known)\n:actual-value: The actual non-error result. (if meaningful and known)\n:actual-error: The actual error, if an error was signaled and is known. This values is implementation-dependent.\n")
("SRFI-132" . "(:ctime 1474476402 :cuser #f :mtime 1474476402 :muser #f)SRFI-132:  Sort Libraries \n\nhttp://srfi.schemers.org/srfi-132/srfi-132.html\n\n[[$$srfi-implementors]]\n")
("call-with-string-output-port" . "(:ctime 1018382455 :cuser #f :mtime 1018382455 :muser #f)* [procedure] call-with-string-output-port ''procedure''\n\n[[Scsh]]: call ''procedure'' with a string output port,\nand when it returns, return a string accumulated in\nthe port.\n\nThis is called [[call-with-output-string]] in\nsome implementations.\n")
("read-lines" . "(:ctime 1015073437 :cuser #f :mtime 1039756075 :muser #f)* [procedure] read-lines [''port'' ''maxlines'']\n\n[[Chicken]]: read lines up to ''maxlines'' or EOF from ''port''.\n\n* [procedure] read-lines [''port'']\n\n[[Bigloo]]: lacks ''maxlines'' arg.\n\n[[port->string-list]] in some implementations does similar job.\n")
("rxmatch-after" . "(:ctime 1015899760 :cuser #f :mtime 1015899760 :muser #f)[[$$include rxmatch-start]]\n")
("make-mutex" . "(:ctime 1015927499 :cuser #f :mtime 1015963586 :muser #f)* [procedure] make-mutex [''name'']\n\n[[SRFI-18]], [[SRFI-21]]\n")
("ucs2-string-ci<?" . "(:ctime 1039428100 :cuser #f :mtime 1039428100 :muser #f)[[$$include ucs2-string-ci=?]]\n")
("ascii-limit" . "(:ctime 1017981291 :cuser #f :mtime 1017981291 :muser #f)* [variable] ascii-limit\n\n[[Scheme48]]: one more than the largest value\n[[char->ascii]] may return.\n")
("Chicken" . "(:ctime 1014845881 :cuser #f :mtime 1421438465 :muser #f)Scheme to C compiler, inspired by Henry Baker's  \"Cheney on the M.T.A.\" paper.\n\nhttp://www.call-with-current-continuation.org/chicken.html\n\nRelated: [[Chicken:ModuleSystem]]\n\n;; http://wiki.call-cc.org/SRFI-conformance\n[[$$srfis 0 1 2 4 6 7 8 9 10 11 12 13 14 16 17 18 19 23 25 26 27 28 29 30 31 34 37 38 39 40 41 42 43 45 47 48 55 57 58 60 61 62 63 66 69 71 72 78 87 88 89 90 95 99 101 102]]\n----\nversion 4.9.0.1:\n\n[[$$srfis 0 1 2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 23 25 26 27 28 29 30 31 34 37 38 39 40 41 42 45 46 55 60 61 62 63 69 71 78 88 95 98 99 101 102]]\nChicken Eggs:\nsrfi-7 srfi-19 srfi-25 srfi-27 srfi-29 srfi-34 srfi-37 srfi-38 srfi-40 srfi-41 srfi-42 srfi-45 srfi-60 srfi-63 srfi-71 srfi-78 srfi-95 srfi-99 srfi-101 srfi-102\nsrfi-modules (srfi-0 srfi-2 srfi-6 srfi-8 srfi-9 srfi-10 srfi-11 srfi-12 srfi-15 srfi-16 srfi-17 srfi-23 srfi-26 srfi-28 srfi-31 srfi-39 srfi-55 srfi-98)\n----\nThis list is based on the document of Version 0, Build 990.\n\n* Using the Compiler\n** Extending the compiler\n\n[[user-option-pass]], [[user-read-pass]],\n[[user-preprocessor-pass]], [[user-pass]]\n\n* Using the Interpreter\n** Macros and procedures implemented in the interpreter\n\n[[autoload]], [[trace]], [[untrace]], [[&]], $\n\n* Supported Language\n** Deviations from the standard\n[[eval]], [[char-ready?]]\n\n** Extensions to the standard\n\n[[begin]], [[open-input-file]],\n[[open-output-file]], [[with-input-from-file]], [[with-output-to-file]],\n[[call-with-input-file]], [[call-with-output-file]]\n\n** Non standard read syntax\n\n[[#|]], [[#;]], [[#,]], [[#']], [[#:]], [[#<<]], [[#<#]]\n\n** Non-standard macros and special forms\n\n[[:optional]], [[case-lambda]], [[let-optionals]], [[let-optionals*]],\n[[and-let*]], [[define-values]],\n[[fluid-let]], [[let-values]], [[let*-values]],\n[[letrec-values]], [[parameterize]], [[receive]], [[set!-values]],\n[[define-constant]], [[define-id-macro]], [[define-inline]],\n[[define-integrable]], [[define-macro]], [[let-id-macro]],\n[[let-macro]], [[unless]], [[when]]\n\n[[define-record]], [[define-record-printer]], [[record-case]]\n\n[[assert]], [[cond-expand]], [[critical-section]], [[ensure]], \n[[eval-when]], [[include]], [[nth-value]], [[time]]\n\n** Declarations\n\n[[declare]]\n\n** Interface to external functions and variables\n\n[[define-foreign-parameter]], [[define-foreign-type]],\n[[define-foreign-variable]], [[foreign-callback-lambda]],\n[[foreign-callback-lambda*]], [[foreign-lambda]], [[foreign-lambda*]],\n[[define-entry-point]], [[define-external]], [[external-pointer]],\n[[foreign-callback-wrapper]]\n\n** Parameters\n\n[[case-sensitive]], [[command-line-arguments]], [[error-handler]], \n[[exit-handler]], [[eval-handler]], [[implicit-exit-handler]], [[reset-handler]]\n\n** Module System\n\n[[define-module]], [[export]], [[import]], [[import-excluding]], [[files]], \n[[begin]], [[unit]],\n[[define-library-implementation]], [[define-library-interface]]\n\n** Unit:library\n\n[[add1]], [[sub1]], [[bitwise-and]], [[bitwise-ior]],\n[[bitwise-xor]], [[bitwise-not]], [[arithmetic-shift]],\n[[fixnum?]], [[fx+]], [[fx-]], [[fx*]], [[fx/]],\n[[fxmod]], [[fxneg]], [[fxmin]], [[fxmax]], \n[[fx=]], [[fx>]], [[fx<]], [[fx>=]], [[fx<=]], [[signum]]\n\n[[current-error-port]], [[end-of-file]],\n[[flush-output]], [[port-name]], [[port-position]]\n\n[[delete-file]], [[file-exists?]], [[pathname-directory-separator]],\n[[pathname-extension-separator]], [[rename-file]]\n\n[[get-output-string]], [[open-output-string]],\n[[open-input-string]], [[print-to-string]]\n\n[[features]], [[register-feature!]], [[unregister-feature!]]\n\n[[get-keyword]], [[keyword?]], [[keyword->string]],\n[[string->keyword]]\n\n[[argv]], [[char-name]], [[current-milliseconds]], [[current-seconds]], \n[[enable-interrupts]], [[disable-interrupts]], [[errno]],\n[[error]], [[exit]], [[gc]], [[gensym]], [[getenv]], [[machine-type]],\n[[make-parameter]], [[port?]], [[print]], [[print*]], [[reset]],\n[[set-finalizer!]], [[set-gc-report!]], [[software-type]],\n[[string->uninterned-symbol]], [[system]], [[vector-copy!]], [[void]]\n\n** Unit:eval\n\n[[eval]], [[load]], [[load-noisily]], [[load-srfi-7-program]]\n\n[[read-eval-print-loop]]\n\n[[get-line-number]], [[macro?]], [[macroexpand]], [[macroexpand-1]],\n[[undefine-macro!]]\n\n[[define-reader-ctor]]\n\n** Unit:debugger\n\n[[break]]\n\n** Unit:extras\n\n[[butlast]], [[chop]], [[compress]], [[flatten]], [[intersperse]],\n[[tail?]]\n\n[[call-with-input-string]], [[call-with-output-string]],\n[[with-input-from-string]], [[with-output-to-string]]\n\n[[fprintf]], [[printf]], [[sprintf]]\n\n[[clear-hash-table!]], [[get]], [[hash-table?]],\n[[hash-table-count]], [[hash-table-for-each]],\n[[hash-table-ref]], [[hash-table-set!]],\n[[make-hash-table]], [[put!]]\n\n[[list->queue]], [[make-queue]], [[queue?]],\n[[queue->list]], [[queue-add!]], [[queue-empty?]]\n[[queue-first]], [[queue-last]], [[queue-remove!]]\n\n[[merge]], [[merge!]], [[sort]], [[sort!]], [[sorted?]]\n\n[[random]], [[randomize]]\n\n[[make-input-port]], [[make-output-port]],\n[[pretty-print]], [[pretty-print-width]], [[read-file]],\n[[read-line]], [[write-line]], [[read-lines]] [[read-string]],\n[[with-error-output-to-port]], [[with-input-from-port]]\n[[with-output-to-port]]\n\n[[string-any]], [[string-capitalize]], [[string-capitalize!]],\n[[string-concatenate]], [[string-filter]], [[string-downcase]],\n[[string-upcase]], [[string-downcase!]], [[string-upcase!]],\n[[string-every]], [[string-index]], \n[[string-trim]], [[string-left-trim]], [[string-right-trim]],\n[[string-map]], [[string-map!]], [[string-reverse]],\n[[string-reverse!]], [[string-split]], [[string-translate]], \n[[substring-index]], [[substring-index-ci]]\n\n[[constantly]], [[complement]], [[compose]], [[flip]]\n\n** Unit:srfi-4\n\n[[u8vector->byte-vector]], [[s8vector->byte-vector]],\n[[u16vector->byte-vector]], [[s16vector->byte-vector]],\n[[u32vector->byte-vector]], [[s32vector->byte-vector]],\n[[f32vector->byte-vector]], [[f64vector->byte-vector]],\n[[byte-vector->u8vector]], [[byte-vector->s8vector]],\n[[byte-vector->u16vector]], [[byte-vector->s16vector]],\n[[byte-vector->u32vector]], [[byte-vector->s32vector]],\n[[byte-vector->f32vector]], [[byte-vector->f64vector]]\n\n** Unit:match\n\n[[match]], [[match-lambda]], [[match-lambda*]],\n[[match-let]], [[match-let*]], [[match-letrec]], [[match-define]]'\n[[define-structure]], [[define-const-structure]]'\n[[match-error-control]]\n\n** Unit:regex\n\n[[grep]], [[pattern->regexp]],\n[[string-match]], [[string-match-positions]],\n[[string-search]], [[string-search-positions]],\n[[string-split-fields]], [[string-substitute]]\n\n** Unit:syntax-case\n\n[[syntax-case]], [[syntax-rules]]\n\n** Unit:srfi-18\n\n[[thread-quantum]], [[thread-quantum-set!]]\n\n** Unit:format\n\n[[format]]\n\n** Unit:unistd\n\n[[create-temporary-file]], [[absolute-pathname?]], [[decompose-pathname]],\n[[make-pathname]], [[make-absolute-pathname]],\n[[pathname-directory]], [[pathname-file]],\n[[pathname-extension]], [[pathname-strip-directory]], [[pathname-strip-extension]]\n\n[[change-directory]], [[current-directory]],\n[[create-directory]], [[delete-directory]],\n[[directory]], [[directory?]], [[glob]]\n\n[[call-with-input-pipe]], [[call-with-output-pipe]],\n[[close-input-pipe]], [[close-output-pipe]],\n[[create-pipe]], [[open-input-pipe]],\n[[open-output-pipe]], [[pipe/buf]], \n[[with-input-from-pipe]], [[with-output-to-pipe]]\n\n[[create-fifo]], [[fifo?]]\n\n[[duplicate-fileno]], [[file-close]], [[file-open]],\n[[file-read]], [[file-select]], [[file-write]],\n[[fileno/stdin]], [[fileno/stdout]], [[fileno/stderr]],\n[[open/rdonly]], [[open/wronly]], [[open/rdwr]],\n[[open/read]], [[open/write]], [[open/creat]], [[open/append]],\n[[open/excl]], [[open/noctty]], [[open/nonblock]], [[open/trunc]],\n[[open/sync]], [[open-input-file*]], [[open-output-file*]],\n[[port->fileno]]\n\n[[file-modification-time]], [[file-position]], [[file-size]],\n[[set-file-position!]]\n\n[[current-process-id]], [[parent-process-id]],\n[[process-execute]], [[process-fork]], [[process-run]],\n[[process-signal]], [[process-wait]]\n\n[[create-symbolic-link]], [[read-symbolic-link]],\n\n[[file-owner]], [[file-permissions]], [[file-read-access?]],\n[[file-write-access?]], [[file-execute-access?]],\n[[change-file-mode]], [[change-file-owner]],\n[[current-user-id]], [[current-group-id]],\n[[current-effective-user-id]], \n[[current-effective-group-id]],\n[[perm/irusr]], [[perm/iwusr]],[[perm/ixusr]], [[perm/irgrp]], \n[[perm/iwgrp]], [[perm/ixgrp]], [[perm/iroth]], [[perm/iwoth]],\n[[perm/ixoth]], [[perm/irwxu]], [[perm/irwxg]], [[perm/irwxo]],\n[[perm/isvtx]], [[perm/isuid]], [[perm/isgid]], [[set-user-id!]]\n\n[[file-lock]], [[file-test-lock]], [[file-unlock]]\n\n[[set-alarm!]], [[set-signal-handler!]], [[set-signal-mask!]], [[signal/term]],\n[[signal/kill]], [[signal/int]], [[signal/hup]], [[signal/fpe]], \n[[signal/ill]], [[signal/segv]], [[signal/abrt]], [[signal/trap]],\n[[signal/quit]], [[signal/alrm]], [[signal/vtalrm]], [[signal/prof]],\n[[signal/io]], [[signal/urg]], [[signal/chld]], [[signal/cont]],\n[[signal/stop]], [[signal/tstp]], [[signal/pipe]], [[signal/xcpu]],\n[[signal/xfsz]], [[signal/usr1]], [[signal/usr2]], [[signal/winch]]\n\n[[current-environment]], [[setenv]], [[unsetenv]]\n\n[[map-file-to-memory]], [[unmap-file-from-memory]]\n\n[[seconds->local-time]], [[seconds->string]],\n[[seconds->utc-time]], [[time->string]]\n\n[[_exit]]\n\n[[errno/perm]], [[errno/noent]], [[errno/srch]], [[errno/intr]],\n[[errno/io]], [[errno/noexec]], [[errno/badf]], [[errno/child]],\n[[errno/nomem]], [[errno/acces]], [[errno/fault]], [[errno/busy]],\n[[errno/notdir]], [[errno/isdir]], [[errno/inval]], [[errno/mfile]],\n[[errno/nospc]], [[errno/spipe]], [[errno/pipe]], [[errno/again]],\n[[errno/rofs]]\n\n[[file-truncate]], [[get-host-name]], [[set-buffering-mode!]],\n[[terminal-name]], [[terminal-port?]], [[system-information]],\n[[user-information]]\n\n** Unit:lolevel\n\n[[address->pointer]], [[null-pointer]], [[null-pointer?]],\n[[pointer?]], [[pointer->address]]\n\n[[deserialize]], [[serialize]]\n\n[[extend-procedure]], [[extended-procedure?]], [[procedure-data]],\n[[set-procedure-data!]]\n\n[[byte-vector]], [[byte-vector?]], [[byte-vector-fill!]],\n[[byte-vector->list]], [[byte-vector-length]],\n[[byte-vector-ref]], [[byte-vector-set!]],\n[[executable-byte-vector->procedure]],\n[[list->byte-vector]], [[make-byte-vector]],\n[[make-executable-byte-vector]], [[make-static-byte-vector]],\n[[static-byte-vector->pointer]],\n\n[[block-ref]], [[block-set!]], [[copy]], [[evict]],\n[[evicted?]], [[move-memory!]], [[number-of-slots]],\n[[release]]\n\n** Unit:tinyclos\n\n[[define-class]], [[define-generic]], [[define-method]],\n[[add-method]], [[instance?]], [[make]], [[make-class]],\n[[make-generic]], [[make-method]], [[slot-ref]], [[slot-set!]]\n\n[[class-cpl]], [[class-direct-slots]], [[class-direct-supers]],\n[[class-of]], [[class-name]], [[class-slots]], [[generic-methods]],\n[[method-specializers]], [[method-procedure]], [[subclass?]]\n\n[[allocate-instance]], [[compute-apply-generic]],\n[[compute-apply-methods]], [[compute-methods]],\n[[compute-cpl]], [[compute-getter-and-setter]],\n[[compute-method-more-specific?]], [[compute-slots]],\n[[initialize]]\n\n[[describe-object]], [[print-object]], [[initialize-slots]]\n\n[[<top>]], [[<object>]], [[<class>]], [[<procedure-class>]],\n[[<procedure>]], [[<entity-class>]], [[<generic>]], [[<primitive-class>]],\n[[<primitive>]], [[<void>]], [[<boolean>]], [[<symbol>]],\n[[<char>]], [[<vector>]]. [[<pair>]], [[<number>]],\n[[<exact>]], [[<inexact>]], [[<string>]], [[<port>]], [[<input-port>]],\n[[<output-port>]], [[<byte-vector>]], [[<u8vector>]], [[<s8vector>]], \n[[<u16vector>]], [[<s16vector>]], [[<u32vector>]], [[<s32vector>]], \n[[<f32vector>]], [[<f64vector>]], [[<structure>]], [[<environment>]], \n[[<hash-table>]], [[<queue>]], [[<time>]], [[<lock>]], [[<mmap>]],\n[[<condition>]], [[<end-of-file>]]\n\n** Additional files\n\n[[describe]], [[dump]], [[process]], [[report]]\n\n\n\n\n\n\n\n\n")
("set-current-input-port!" . "(:ctime 1018382069 :cuser #f :mtime 1036927918 :muser #f)* [procedure] set-current-input-port! ''port''\n* [procedure] set-current-output-port! ''port''\n* [procedure] set-error-output-port! ''port''\n\n[[Scsh]]: alter the current input/output/error port.\nSee also [[with-current-input-port*]], \n[[with-current-output-port*]],\n[[with-error-output-port*]]\n\nSome implementations have\n[[with-input-from-port]], [[with-output-to-port]]\nand [[with-error-to-port]]/[[with-error-output-to-port]]\nto alter the current ports.\n\nChezScheme's [[current-input-port]] and [[current-output-port]]\nhas this feature.\n\nGuile has [[set-current-input-port]], [[set-current-output-port]] and [[set-current-error-port]].\n")
("set-umask" . "(:ctime 1020397438 :cuser #f :mtime 1020397438 :muser #f)* [procedure] set-umask ''perms''\n\n[[Scsh]]: sets process's umask.\nSee also [[umask]], [[with-umask*]], [[with-umask]].\n\nThis is called [[set-file-creation-mask!]] or\n[[sys-umask]] in some implementations.\n")
("transcript-cafe" . "(:ctime 1015024257 :cuser #f :mtime 1015024257 :muser #f)* [procedure] transcript-cafe ''filename''\n\n[[ChezScheme]]: starts new cafe (repl) with transcripting to ''filename''.\n\nSee also [[new-cafe]]\n")
("i/o-error-filename" . "(:ctime 1099273497 :cuser #f :mtime 1099273497 :muser #f)* [procedure] i/o-error-filename ''obj''\n\n[[SRFI-36]]: See [[&i/o-filename-error]].\n")
("SRFI-34" . "(:ctime 1063318080 :cuser #f :mtime 1122428753 :muser #f)SRFI-34: Exception Handling for Programs\n\nhttp://srfi.schemers.org/srfi-34/srfi-34.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[with-exception-handler]], [[guard]], [[raise]]\n")
("transcript-on" . "(:ctime 1014860234 :cuser #f :mtime 1014860234 :muser #f)* [procedure] transcript-on ''filename''\n\n[[R5RS]]: ''Filename'' must be a string naming an output file to be created. \nThe effect of transcript-on is to open the named file for\noutput, and to cause a transcript of subsequent interaction \nbetween the user and the Scheme system to be written to the file. \n\nSee also [[transcript-off]].\n")
("undefine-macro!" . "(:ctime 1015069908 :cuser #f :mtime 1015069908 :muser #f)* [procedure] undefine-macro! ''symbol''\n\n[[ChezScheme]]\n")
("sstats?" . "(:ctime 1015028739 :cuser #f :mtime 1015029264 :muser #f)* [procedure] sstats? ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]].\n")
("array->vector" . "(:ctime 1017981877 :cuser #f :mtime 1144488679 :muser #f)* [procedure] array->vector ''array''\n\n[[SRFI-63]], [[Scheme48]]: Returns a new vector consisting of all the elements of ''array'' in row-major order.\n\nSee also [[make-array]].\n")
("string-append/shared" . "(:ctime 1014888524 :cuser #f :mtime 1014888524 :muser #f)* [procedure] string-append/shared ''s1'' ...\n\n[[SRFI-13]]\n\nSee also [[string-concatenate/shared]], [[string-append]].\n")
("wadd" . "(:ctime 1015882736 :cuser #f :mtime 1015882736 :muser #f)* [procedure] wadd ''win'' ''ch-or-str''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("subwin" . "(:ctime 1015877420 :cuser #f :mtime 1015877420 :muser #f)* [procedure] subwin ''orig'' ''nlines'' ''ncols'' ''begy'' ''begx''\n\n[[SCM]]: curses interface.  see [[initscr]], [[newwin]]\n")
("getprop" . "(:ctime 1014947013 :cuser #f :mtime 1039510588 :muser #f)* [procedure] getprop ''symbol'' ''key'' [''default'']\n\n[[ChezScheme]]: get property value of ''symbol'' associated to ''key''.\n\nSee also [[putprop]], [[remprop]], [[property-list]]\n\n* [procedure] getprop ''symbol'' ''environment'' [''default'']\n\n[[SISC]]: reversed the idea of symbol property list.\nInstead of thinking that each symbol keeps key-value pair,\nSISC thinks there are multiple environment where a symbol\ncan have distinct value from toplevel environment.\n''Environment'' can be either a symbol name of such\nenvironment (in which interface it is the same as \ntraditional getprop), or a first-class environment.\n\nSee also [[putprop]].\n\n* [procedure] getprop ''symbol-or-keyword'' ''key''\n\n[[Bigloo]]: in Bigloo, a keyword can also have a property\nlist, and the default value is fixed to #f.\n\nSee also [[putprop!]], [[remprop!]], [[symbol-plist]].\n")
("perm/irwxu" . "(:ctime 1015099854 :cuser #f :mtime 1015099854 :muser #f)[[$$include perm/irusr]]\n")
("test-runner-xpass-count" . "(:ctime 1151136447 :cuser #f :mtime 1151145519 :muser #f)* [procedure] test-runner-xpass-count ''runner''\n\n[[SRFI-64]]: returns the number of tests that passed, but were expected to fail.\n")
("<fx" . "(:ctime 1039346140 :cuser #f :mtime 1039346140 :muser #f)[[$$include =fx]]\n")
("executable-byte-vector->procedure" . "(:ctime 1015280036 :cuser #f :mtime 1015280036 :muser #f)* [procedure] executable-byte-vector->procedure ''pbyte-vector''\n\n[[Chicken]]: creates a procedure out of executable byte vector.\nSee also [[make-executable-byte-vector]], [[byte-vector]].\n")
("lset-intersection" . "(:ctime 1014874919 :cuser #f :mtime 1014874919 :muser #f)* lset-intersection ''elt='' ''list1'' ''list2'' ...\n\n[[SRFI-1]]: Returns the intersection of the lists, \nusing ''elt='' for the element-equality procedure. \n\n")
("string-hash" . "(:ctime 1014892954 :cuser #f :mtime 1191361720 :muser #f)* [procedure] string-hash ''string''\n\n[[R6RS]], [[Scheme48]].  Calculates a hash value of ''string'', suitable\nfor ''string=?'' hashtable.\nSee also [[make-table]], [[string-ci-hash]], [[Concept:HashTable]].\n\n* [procedure] string-hash ''string'' [''bound'']\n\n[[SRFI-69]]: The same as [[hash]], except that the argument ''string'' must be a string.  See also [[string-ci-hash]].\n\n* [procedure] string-hash ''s'' [''bound'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-hash-ci]].\n\n")
("#1=" . "(:ctime 1099277402 :cuser #f :mtime 1416209857 :muser #f)* [reader syntax] #''digits''=\n\n[[SRFI-38]]: Shared structure definition.  The next item of this syntax\ncan be referred afterwards by [[#0=]](,[[#1=]],[[#2=]]...[[#n=]].)\n")
("real-valued?" . "(:ctime 1191211182 :cuser #f :mtime 1191211183 :muser #f)* [procedure] real-valued? ''obj''\n* [procedure] rational-valued? ''obj''\n* [procedure] integer-valued? ''obj''\n\n[[R6RS]]: Like [[real?]], [[rational?]], and [[integer?]], respectively,\nbut these allow ''obj'' to be non-number objects.\n\nThese also differ from [[real?]] etc. when ''obj'' is a complex number\nwith inexact zero imaginary part.  From R6RS:\n\n (real? -2.5+0.0i) => #f\n (real-valued? -2.5+0.0i) => #t\n\nSee also [[real?]], [[rational?]], [[integer?]].\n")
("ucs2-ci<=?" . "(:ctime 1039428841 :cuser #f :mtime 1039428841 :muser #f)[[$$include ucs2-ci=?]]\n")
("real-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499849 :muser #f)[[$$include integer-compare]]\n")
("thread-name" . "(:ctime 1015927300 :cuser #f :mtime 1015964078 :muser #f)* [procedure] thread-name ''thread''\n\n[[SRFI-18]], [[SRFI-21]]\n\nAlso in [[Scsh]].\n")
("fx>=" . "(:ctime 1014950686 :cuser #f :mtime 1015069141 :muser #f)[[$$include fx=]]\n\n")
("foreign-procedure" . "(:ctime 1014925276 :cuser #f :mtime 1014925766 :muser #f)* [syntax] foreign-procedure ''entry-exp'' (''param-type'' ...) ''res-type''\n* [syntax] foreign-procedure ''conv'' ''entry-exp'' (''param-type'' ...) ''res-type''\n\n[[ChezScheme]]: Creates a Scheme procedure that calls routines\ndefined in the other language.\n\nSee also [[foreign-entry?]], [[provide-foreign-entries]],\n[[load-shared-object]], [[load-foreign]].\n\n\n")
("nan?" . "(:ctime 1191210566 :cuser #f :mtime 1191210567 :muser #f)* [procedure] nan? ''x''\n\n[[R6RS]]: ''x'' must be a number object.  Returns #t iff ''x'' is NaN.\n\nSee also [[finite?]], [[infinite?]], [[nan.0]].\n")
("thread-quantum" . "(:ctime 1015105212 :cuser #f :mtime 1015928225 :muser #f)* [procedure] thread-quantum ''thread''\n* [procedure] thread-quantum-set! ''thread'' ''quantum''\n\n[[Chicken]], [[SRFI-21]].\n")
("#|" . "(:ctime 1015041609 :cuser #f :mtime 1100163204 :muser #f)* [reader syntax] #|''comment''|#\n\n[[SRFI-30]]: multi-line comment.\n\n[[ChezScheme]], [[Chicken]], [[Gambit]], [[Kawa]],\n[[MIT-Scheme]], [[MzScheme]], [[Gauche]], [[RScheme]]\n")
("make-time" . "(:ctime 1015209678 :cuser #f :mtime 1045550203 :muser #f)* [procedure] make-time ''type'' ''nanoseconds'' ''seconds''\n\n[[SRFI-19]]: time structure constructor.  See also [[time?]],\n[[time-type]], [[time-second]], [[time-nanosecond]],\n[[set-time-type!]], [[set-time-second!]], [[set-time-nanosecond!]].\n\nSRFI-18 and SRFI-21 refers a time structure which is returned by\n[[current-time]], but they don't specify its internal slots.\nSee [[time->seconds]] and [[seconds->time]].\n\n'''Note:''' As of 2003/2/17, srfi-19 reference implementation in\nSRFI site defines make-time incorrectly, taking ''seconds'' argument\nbefore ''nanoseconds''.  A few implementations that have taken the reference\nimplementation also have the wrong definition.\n\n* [procedure] make-time ''integer''\n\n[[Scheme48]]'s time record just keeps # of seconds since\n1970/1/1 00:00:00 UTC.  See also [[time-seconds]],\n[[time->string]].\n\n\n\n\n\n")
("Ikarus" . "(:ctime 1203723577 :cuser #f :mtime 1239017923 :muser #f)Ikarus\n\nhttp://ikarus-scheme.org/\n\nIkarus Scheme is a free (GPLv3) optimizing incremental native-code compiler for [[R6RS]] Scheme. The current version number is 0.0.3 as of February 2, 2008.\n")
("current-time" . "(:ctime 1015209341 :cuser #f :mtime 1327407131 :muser #f)* [procedure] current-time \n\n[[SRFI-18]], [[SRFI-21]]: returns the current time in opaque time structure.\nSee also [[time->seconds]], [[seconds->time]].\n\n[[Scheme48]]: returns a time record.  See [[make-time]], \n[[time-seconds]].\n\n[[SCM]], [[STklos]]: returns the number of seconds since 1970/1/1 00:00:00 UTC.\n\n* [procedure] current-time [''time-type'']\n\n[[SRFI-19]]: returns the current time in time structure.  Extends SRFI-18's \nby allowing ''time-type'' optional argument.\nSee [[time-resolution]], [[make-time]], [[current-date]].\n [http://www.obtenir-rio.info code rio]\n")
("current-user-id" . "(:ctime 1015198228 :cuser #f :mtime 1015198228 :muser #f)* [procedure] current-user-id\n* [procedure] current-effective-user-id\n\n[[Chicken]]: getuid and geteuid.  See [[Concept:UserGroup]].\n\nSome implementations have [[get-user-id]], [[sys-getuid]], etc.\n")
("max-precision" . "(:ctime 1039510054 :cuser #f :mtime 1039510054 :muser #f)[[$$include min-precision]]\n")
("substring" . "(:ctime 1014859882 :cuser #f :mtime 1191568302 :muser #f)* [procedure] substring ''string'' ''start'' ''end''\n\n[[R5RS]], [[R6RS]]: Substring returns a newly allocated string \nformed from the characters of ''string'' beginning with index ''start'' \n(inclusive) and\nending with index ''end'' (exclusive). \n\nSee also [[substring/shared]], [[string-copy]].\n\n[[Guile]] allows ''end'' argument to be omitted.\n(When ''end'' is omitted, it is equivalent to\n[[string-drop]] in SRFI-13).\n")
("string-ci=?" . "(:ctime 1014859350 :cuser #f :mtime 1019619867 :muser #f)* [procedure] string-ci=? ''string1'' ''string2''\n* [procedure] string-ci<? ''string1'' ''string2''\n* [procedure] string-ci<=? ''string1'' ''string2''\n* [procedure] string-ci>? ''string1'' ''string2''\n* [procedure] string-ci>=? ''string1'' ''string2''\n\n[[R5RS]]\n\nSee also [[string=?]].\n\n[[MzScheme]] extends these to take one or more strings.\n")
("cfl-real-part" . "(:ctime 1014954033 :cuser #f :mtime 1014954152 :muser #f)* [procedure] cfl-real-part ''cflonum''\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[real-part]]\n")
("first-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144536161 :muser #f)* [syntax] first-ec ''default'' ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe first value of ''expression'' in the sequence of bindings\nspecified by the ''qualifier''s. Before enumeration, the result is initialized\nwith the value of ''default''; so this will be the result if the sequence is\nempty. Enumeration is terminated in first-ec when the first value has been\ncomputed.\n")
("if=?" . "(:ctime 1144494246 :cuser #f :mtime 1144502772 :muser #f)* [syntax] if=? ''c'' ''consequent'' [''alternate'']\n* [syntax] if<? ''c'' ''consequent'' [''alternate'']\n* [syntax] if>? ''c'' ''consequent'' [''alternate'']\n* [syntax] if<=? ''c'' ''consequent'' [''alternate'']\n* [syntax] if>=? ''c'' ''consequent'' [''alternate'']\n* [syntax] if-not=? ''c'' ''consequent'' [''alternate'']\n\n[[SRFI-67]]: These six macros are 2-way conditionals for comparisons.\nFirst ''c'' is evaluated, resulting in value ''C''. The value ''C'' must be an exact integer in\n{-1, 0, 1}, otherwise an error is signalled. Then, depending on the value of ''C''\nand the name of the macro, either ''consequence'' or ''alternate'' is evaluated,\nand the resulting value is the value of the conditional expression.\n\nThe branch is chosen according to the following table:\n||          || ''consequent'' || ''alternate'' ||\n|| if=?     || C = 0          || C = -1 or 1   ||\n|| if<?     || C = -1         || C =  0 or 1   ||\n|| if>?     || C = 1          || C = -1 or 0   ||\n|| if<=?    || C = -1 or 0    || C = 1         ||\n|| if>=?    || C = 0 or 1     || C = -1        ||\n|| if-not=? || C = -1 or 1    || C = 0         ||\n")
("directory-stream?" . "(:ctime 1018126341 :cuser #f :mtime 1018126341 :muser #f)[[$$include open-directory-stream]]\n")
("integer->char" . "(:ctime 1014854597 :cuser #f :mtime 1191566212 :muser #f)* [procedure] integer->char ''n''\n\n[[R5RS]]: Converts an exact integer ''n'' to the corresponding character.\nThe mapping between integers and characters is implementation-dependent.\nFurthermore, when ''n'' is outside of the range of [[char->integer]],\nwhat happens depends on the implementation.\n\n[[R6RS]]: Converts an Unicode scalar value ''n'' to the corresponding\ncharacter.  Thus, ''n'' must be in the range between 0 and #xd7ff or\n#xe000 and #x10ffff.  If other value is given, [[&assertion]] \nexception will be raised.\n\nSee also [[char->integer]].\n")
("c-string->string" . "(:ctime 1018343738 :cuser #f :mtime 1018343738 :muser #f)* [procedure] c-string->string ''str''\n\n[[STk]]: used in the foreign function call.\nSee also [[define-external]].\n")
("nonl" . "(:ctime 1015877301 :cuser #f :mtime 1015877301 :muser #f)[[$$include nl]]\n")
("table-set!" . "(:ctime 1017984964 :cuser #f :mtime 1017984964 :muser #f)[[$$include table-ref]]\n")
("sstats-gc-count" . "(:ctime 1015029170 :cuser #f :mtime 1015029170 :muser #f)* [procedure] sstats-gc-count ''sstats''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[set-sstats-gc-count!]].\n")
("symbol-hash" . "(:ctime 1191361837 :cuser #f :mtime 1191361837 :muser #f)* [procedure] symbol-hash ''symbol''\n\n[[R6RS]]: Calculates a hash value of ''symbol''.\n\nSee also [[Concept:HashTable]].\n")
("blob-u64-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144711726 :muser #f)[[$$include blob-u64-ref]]\n")
("process-pid" . "(:ctime 1018342274 :cuser #f :mtime 1099737938 :muser #f)* [procedure] process-pid ''process''\n* [procedure] process-input ''process''\n* [procedure] process-output ''process''\n* [procedure] process-error ''process''\n\n[[STk]], [[STklos]], [[Gauche]]: get parameters of the process\nreturned from [[run-process]].\n")
("time>?" . "(:ctime 1015317895 :cuser #f :mtime 1015317895 :muser #f)[[$$include time=?]]\n")
("current-locale-details" . "(:ctime 1036934904 :cuser #f :mtime 1036934904 :muser #f)* [procedure] current-locale-details\n* [procedure] current-locale-details ''list-of-symbols''\n\n[[SRFI-29]]: gets/sets a list of additional locale details as a list of symbols.\n")
("fxarithmetic-shift-left" . "(:ctime 1191225574 :cuser #f :mtime 1191225575 :muser #f)[[$$include fxarithmetic-shift]]\n")
("hash-table-get" . "(:ctime 1015303657 :cuser #f :mtime 1327407080 :muser #f)* [procedure] hash-table-get ''hash-table'' ''key'' [''default'']\n\n[[STk]], [[STklos]], [[Gauche]]: if no entry is found, an error is signalled, unless ''default'' is provided.\nSee also [[hash-table-put!]], [[hash-table-push!]], [[hash-table-pop!]].\n\n[[MzScheme]]: ''default'' must be a thunk if provided;\nwhen no entry is found, the thunk is evaluated and\nreturned.\n\nThis is called [[hash-table-ref]] in some implementations.\n [http://www.obtenir-rio.info rio orange]\n")
("change-directory" . "(:ctime 1015101135 :cuser #f :mtime 1015189144 :muser #f)* [procedure] change-directory ''directory''\n\n[[Chicken]]: See [[Concept:FileSystem]].\n\nChez's [[current-directory]] can be used to change the current\ndirectory.\n\nThis is called [[sys-chdir]] in Gauche.\n")
("char-ci<=?" . "(:ctime 1015062550 :cuser #f :mtime 1015062738 :muser #f)[[$$include char-ci=?]]\n")
("bitwise-not" . "(:ctime 1015049168 :cuser #f :mtime 1015318800 :muser #f)[[$$include bitwise-and]]\n\n")
(",@" . "(:ctime 1191205280 :cuser #f :mtime 1191205280 :muser #f)[[$$include ,]]\n")
("syntax-errorf" . "(:ctime 1015772673 :cuser #f :mtime 1015772673 :muser #f)[[$$include syntax-error]]\n")
("machine-type" . "(:ctime 1014965610 :cuser #f :mtime 1099742780 :muser #f)* [procedure] machine-type\n\n[[ChezScheme]], [[Chicken]], [[STk]], [[STklos]]:\n\nSee also [[compile-file]], [[compile-port]].\n\n")
("change-file-owner" . "(:ctime 1015197465 :cuser #f :mtime 1018346352 :muser #f)* [procedure] change-file-owner ''pathname'' ''uid'' ''gid''\n\n[[Chicken]]: chown().   See [[Concept:FileSystem]].\n\nSome implementations have\n[[sys-chown]], [[set-file-owner]]/[[set-file-group]].\n")
("set-time-type!" . "(:ctime 1015209763 :cuser #f :mtime 1015209763 :muser #f)[[$$include time-type]]\n")
("block" . "(:ctime 1152518355 :cuser #f :mtime 1152534428 :muser #f)* [syntactic extension] block ''expr'' ...\n\n[[RRS]]: sequentially evaluates the subforms ''expr'' from left to right.\n")
("seconds->date" . "(:ctime 1099743193 :cuser #f :mtime 1099743299 :muser #f)* [procedure] seconds->date ''seconds''\n\n[[STklos]]: converts number of seconds from Unix Epoch to a keyed value list\nrepresents date.\n{{{\n(seconds->date (current-time))   \n            ⇒ (:second 49 :minute 32 :hour 23\n                :day 2 :month 4 :year 2002 \n                :week-day 2 :year-day 91 \n}}}\n\nSRFI-19 has more comprehensive conversions (see [[time-utc->date]]).\nSome implementations provide similar stuff via POSIX gmtime()/localtime().\nSee [[seconds->local-time]]/[[seconds->utc-time]],\n[[sys-localtime]]/[[sys-gmtime]], [[posix-localtime]]/[[posix-gmtime]].\n")
("reverse" . "(:ctime 1014858447 :cuser #f :mtime 1191314671 :muser #f)* [procedure] reverse ''list''\n\n[[R5RS]], [[R6RS]]: Returns a newly allocated list consisting of the elements of\n''list'' in reverse order.\n\nSee also [[reverse!]].\n")
("Foment" . "(:ctime 1457572301 :cuser #f :mtime 1457572301 :muser #f)R7RS Scheme\n\nhttps://github.com/leftmike/foment\n\n[[$$srfis 60 106 111 112 114]]\n")
("string-match-positions" . "(:ctime 1015104391 :cuser #f :mtime 1015104391 :muser #f)[[$$include string-match]]\n")
("link" . "(:ctime 1018127842 :cuser #f :mtime 1018345816 :muser #f)* [procedure] link ''existing'' ''new''\n\n[[Scheme48]]: creates a new hard link.\nSee [[Concept:FileSystem]].\n\nThis is called [[create-hard-link]] or [[sys-link]] in some implementations.\n")
("#s" . "(:ctime 1014876165 :cuser #f :mtime 1014876165 :muser #f)* [reader syntax] #s''N''(''number'' ...)\n\n[[SRFI-4]]: Denotes homogeneous numeric vector.\n''N'' should be one of 8, 16, 32 or 64.\n\nSee also [[#f]], [[#u]].\n")
("SRFI-44" . "(:ctime 1099389116 :cuser #f :mtime 1334563401 :muser #f)SRFI-44: Collections\n\nhttp://srfi.schemers.org/srfi-44/srfi-44.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[alist-map]], \n[[alist-map->list]], \n[[alist-map-add-from]], \n[[alist-map-add-from!]], \n[[alist-map-clear]], \n[[alist-map-clear!]], \n[[alist-map-contains-key?]], \n[[alist-map-copy]], \n[[alist-map-count]], \n[[alist-map-delete]], \n[[alist-map-delete!]], \n[[alist-map-delete-all]], \n[[alist-map-delete-all!]], \n[[alist-map-delete-all-from]], \n[[alist-map-delete-all-from!]], \n[[alist-map-delete-from]], \n[[alist-map-delete-from!]], \n[[alist-map-equivalence-function]], \n[[alist-map-fold-keys-left]], \n[[alist-map-fold-keys-right]], \n[[alist-map-fold-left]], \n[[alist-map-fold-right]], \n[[alist-map-get]], \n[[alist-map-get-all]], \n[[alist-map-key-count]], \n[[alist-map-key-equivalence-function]], \n[[alist-map-keys->list]], \n[[alist-map-put]], \n[[alist-map-put!]], \n[[alist-map-replace-all]], \n[[alist-map-replace-all!]], \n[[alist-map-size]], \n[[alist-map-update]], \n[[alist-map-update!]], \n[[alist-map-update-all]], \n[[alist-map-update-all!]], \n[[alist-map=]], \n[[alist-map?]], \n\n[[bag]], \n[[bag->list]], \n[[bag-add]], \n[[bag-add!]], \n[[bag-add-from]], \n[[bag-add-from!]], \n[[bag-clear]], \n[[bag-clear!]], \n[[bag-contains?]], \n[[bag-copy]], \n[[bag-count]], \n[[bag-delete]], \n[[bag-delete!]], \n[[bag-delete-all]], \n[[bag-delete-all!]], \n[[bag-delete-all-from]], \n[[bag-delete-all-from!]], \n[[bag-delete-from]], \n[[bag-delete-from!]], \n[[bag-empty?]], \n[[bag-equivalence-function]], \n[[bag-fold-keys-left]], \n[[bag-fold-keys-right]], \n[[bag-fold-left]], \n[[bag-fold-right]], \n[[bag-get-any]], \n[[bag-size]], \n[[bag=]], \n[[bag?]], \n\n[[collection]], \n[[collection->list]], \n[[collection-clear]], \n[[collection-clear!]], \n[[collection-copy]], \n[[collection-count]], \n[[collection-delete-left]], \n[[collection-delete-left!]], \n[[collection-delete-right]], \n[[collection-delete-right!]], \n[[collection-empty?]], \n[[collection-fold-keys-left]], \n[[collection-fold-keys-right]], \n[[collection-fold-left]], \n[[collection-fold-right]], \n[[collection-get-any]], \n[[collection-get-left]], \n[[collection-get-right]], \n[[collection-insert-left]], \n[[collection-insert-left!]], \n[[collection-name]], \n[[collection-ordering-function]], \n[[collection-size]], \n[[collection=]], \n[[collection?]], \n\n[[directional-collection?]], \n\n[[flexible-sequence]], \n[[flexible-sequence->list]], \n[[flexible-sequence-clear]], \n[[flexible-sequence-clear!]], \n[[flexible-sequence-copy]], \n[[flexible-sequence-count]], \n[[flexible-sequence-delete-at]], \n[[flexible-sequence-delete-at!]], \n[[flexible-sequence-delete-left]], \n[[flexible-sequence-delete-left!]], \n[[flexible-sequence-delete-right]], \n[[flexible-sequence-delete-right!]], \n[[flexible-sequence-empty?]], \n[[flexible-sequence-fold-keys-left]], \n[[flexible-sequence-fold-keys-right]], \n[[flexible-sequence-fold-left]], \n[[flexible-sequence-fold-right]], \n[[flexible-sequence-get-any]], \n[[flexible-sequence-insert]], \n[[flexible-sequence-insert!]], \n[[flexible-sequence-insert-left]], \n[[flexible-sequence-insert-left!]], \n[[flexible-sequence-insert-right]], \n[[flexible-sequence-insert-right!]], \n[[flexible-sequence-size]], \n[[flexible-sequence=]], \n[[flexible-sequence?]], \n\n[[limited-collection?]], \n\n[[list]], \n[[list->list]], \n[[list-add]], \n[[list-add!]], \n[[list-add-from]], \n[[list-add-from!]], \n[[list-clear]], \n[[list-clear!]], \n[[list-contains?]], \n[[list-copy]], \n[[list-count]], \n[[list-delete]], \n[[list-delete!]], \n[[list-delete-all]], \n[[list-delete-all!]], \n[[list-delete-all-from]], \n[[list-delete-all-from!]], \n[[list-delete-at]], \n[[list-delete-at!]], \n[[list-delete-from]], \n[[list-delete-from!]], \n[[list-delete-left]], \n[[list-delete-left!]], \n[[list-delete-right]], \n[[list-delete-right!]], \n[[list-empty?]], \n[[list-equivalence-function]], \n[[list-fold-left]], \n[[list-fold-right]], \n[[list-get-any]], \n[[list-get-left]], \n[[list-get-right]], \n[[list-insert]], \n[[list-insert!]], \n[[list-insert-left]], \n[[list-insert-left!]], \n[[list-insert-right]], \n[[list-insert-right!]], \n[[list-ref]], \n[[list-replace-from]], \n[[list-replace-from!]], \n[[list-set]], \n[[list-set!]], \n[[list-size]], \n[[list=]], \n[[list?]], \n\n[[make-alist-map]], \n[[make-bag]], \n[[make-collection]], \n[[make-flexible-sequence]], \n[[make-list]], \n[[make-map]], \n[[make-sequence]], \n[[make-set]], \n[[make-string]], \n[[make-vector]], \n\n[[map]], \n[[map->list]], \n[[map-add-from]], \n[[map-add-from!]], \n[[map-clear]], \n[[map-clear!]], \n[[map-contains-key?]], \n[[map-copy]], \n[[map-count]], \n[[map-delete]], \n[[map-delete!]], \n[[map-delete-from]], \n[[map-delete-from!]], \n[[map-empty?]], \n[[map-equivalence-function]], \n[[map-fold-keys-left]], \n[[map-fold-keys-right]], \n[[map-fold-left]], \n[[map-fold-right]], \n[[map-get]], \n[[map-get-any]], \n[[map-key-equivalence-function]], \n[[map-keys->list]], \n[[map-put]], \n[[map-put!]], \n[[map-size]], \n[[map-update]], \n[[map-update!]], \n[[map=]], \n[[map?]], \n\n[[ordered-collection?]], \n\n[[purely-mutable-collection?]], \n\n[[sequence]], \n[[sequence->list]], \n[[sequence-add]], \n[[sequence-add!]], \n[[sequence-clear]], \n[[sequence-clear!]], \n[[sequence-copy]], \n[[sequence-count]], \n[[sequence-empty?]], \n[[sequence-fold-keys-left]], \n[[sequence-fold-keys-right]], \n[[sequence-fold-left]], \n[[sequence-fold-right]], \n[[sequence-get-any]], \n[[sequence-get-left]], \n[[sequence-get-right]], \n[[sequence-insert-right]], \n[[sequence-insert-right!]], \n[[sequence-ref]], \n[[sequence-replace-from]], \n[[sequence-replace-from!]], \n[[sequence-set]], \n[[sequence-set!]], \n[[sequence-size]], \n[[sequence=]], \n[[sequence?]], \n\n[[set]], \n[[set->list]], \n[[set-add]], \n[[set-add!]], \n[[set-add-from]], \n[[set-add-from!]], \n[[set-clear]], \n[[set-clear!]], \n[[set-contains?]], \n[[set-copy]], \n[[set-count]], \n[[set-delete]], \n[[set-delete!]], \n[[set-delete-from]], \n[[set-delete-from!]], \n[[set-difference]], \n[[set-difference!]], \n[[set-empty?]], \n[[set-equivalence-function]], \n[[set-fold-keys-left]], \n[[set-fold-keys-right]], \n[[set-fold-left]], \n[[set-fold-right]], \n[[set-get-any]], \n[[set-intersection]], \n[[set-intersection!]], \n[[set-size]], \n[[set-subset?]], \n[[set-symmetric-difference]], \n[[set-symmetric-difference!]], \n[[set-union]], \n[[set-union!]], \n[[set=]], \n[[set?]], \n\n[[string]], \n[[string->list]], \n[[string-contains?]], \n[[string-copy]], \n[[string-count]], \n[[string-empty?]], \n[[string-equivalence-function]], \n[[string-fold-left]], \n[[string-fold-right]], \n[[string-get-any]], \n[[string-get-left]], \n[[string-get-right]], \n[[string-ref]], \n[[string-replace-from]], \n[[string-replace-from!]], \n[[string-set]], \n[[string-set!]], \n[[string-size]], \n[[string=]], \n[[string?]], \n\n[[vector]], \n[[vector->list]], \n[[vector-contains?]], \n[[vector-copy]], \n[[vector-count]], \n[[vector-empty?]], \n[[vector-equivalence-function]], \n[[vector-fold-left]], \n[[vector-fold-right]], \n[[vector-get-any]], \n[[vector-get-left]], \n[[vector-get-right]], \n[[vector-ref]], \n[[vector-replace-from]], \n[[vector-replace-from!]], \n[[vector-set]], \n[[vector-set!]], \n[[vector-size]], \n[[vector=]], \n[[vector?]]\n")
("gauche-character-encoding" . "(:ctime 1015773175 :cuser #f :mtime 1015773175 :muser #f)* [procedure] gauche-character-encoding\n\n[[Gauche]]: returns native character encoding.\n")
("*." . "(:ctime 1191218793 :cuser #f :mtime 1191218793 :muser #f)[[$$include +.]]\n")
("time-monotonic->julian-day" . "(:ctime 1099301256 :cuser #f :mtime 1099301256 :muser #f)[[$$include time-monotonic->date]]\n")
("ucs2-string-ci>=?" . "(:ctime 1039428130 :cuser #f :mtime 1039428130 :muser #f)[[$$include ucs2-string-ci=?]]\n")
("set-procedure-data!" . "(:ctime 1015274561 :cuser #f :mtime 1015274561 :muser #f)[[$$include procedure-data]]\n")
("cat" . "(:ctime 1099395084 :cuser #f :mtime 1099395098 :muser #f)* [procedure] cat ''object'' [''directive'' ...]\n\n[[SRFI-54]]: Returns a formatted string representation of ''object''.\nSee the SRFI document for details of ''directive''... it's too\ncomplicated to summarlize in this space.\n")
("autoload?" . "(:ctime 1018334923 :cuser #f :mtime 1018334923 :muser #f)* [procedure] autoload? ''symbol'' ''module''\n\n[[STk]]: see [[autoload]].\n")
("cadr" . "(:ctime 1201704087 :cuser #f :mtime 1201704087 :muser #f)[[$$include caar]]\n")
("uri-encode-string" . "(:ctime 1144169134 :cuser #f :mtime 1144190895 :muser #f)abc abc\n")
("exec-with-environment" . "(:ctime 1015285315 :cuser #f :mtime 1015285315 :muser #f)[[$$include exec]]\n")
(">fx" . "(:ctime 1039346152 :cuser #f :mtime 1039346152 :muser #f)[[$$include =fx]]\n")
("hashtable-delete!" . "(:ctime 1191360152 :cuser #f :mtime 1191360152 :muser #f)* [procedure] hashtable-delete! ''hashtable'' ''key''\n\n[[R6RS]]: Deletes the entry of ''key'' from ''hashtable''.\n\nSee also [[Concept:HashTable]].\n\nOther implementations have [[hashtable-remove!]], [[hash-table-delete!]],\n[[hash-table/remove!]], [[hash-table-remove!]].\n")
("set-output-port-position!" . "(:ctime 1039756013 :cuser #f :mtime 1039756013 :muser #f)[[$$include set-input-port-position!]]\n\n")
("cos" . "(:ctime 1014841112 :cuser #f :mtime 1191311959 :muser #f)* [procedure] cos ''z''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[sin]], [[tan]], [[acos]], [[cosh]].\n\n")
("string-scan" . "(:ctime 1015806552 :cuser #f :mtime 1015806552 :muser #f)* [procedure] string-scan ''string'' ''item'' [''return-type'']\n\n[[Gauche]]: scans the occurrence ''item'' (a substring or a character) from ''string''.\nReturns a position or a substring before/after match depends on ''return-type''.\nSee also [[string-contains]], [[string-index]].\n")
("char-set-any" . "(:ctime 1039169395 :cuser #f :mtime 1039169395 :muser #f)* [procedure] char-set-any ''pred'' ''char-set''\n\n[[SRFI-14]]: applies ''pred'' to every character in character\nset ''char-set'', and returns the first true value it finds.\nSee also [[char-set-every]].\n")
("reverse-vector->list" . "(:ctime 1099388945 :cuser #f :mtime 1099388945 :muser #f)* [procedure] reverse-vector->list ''vec'' [''start'' ''end'']\n\n[[SRFI-43]]: Like [[vector->list]], but lists elements in reverse order.\n")
("acosh" . "(:ctime 1014955459 :cuser #f :mtime 1015237306 :muser #f)[[$$include asinh]]\n\n")
("box?" . "(:ctime 1014945881 :cuser #f :mtime 1018692710 :muser #f)* [procedure] box? ''obj''\n\n[[ChezScheme]], [[SISC]], [[MzScheme]]: returns true if ''obj'' is a box.  See [[box]].\n")
("define-condition-type" . "(:ctime 1099264772 :cuser #f :mtime 1099264790 :muser #f)* [syntax] define-condition-type ''condition-type'' ''supertype'' ''predicate'' (''field'' ''accessor'') ...\n\n[[SRFI-35]]: Defines a condition type.  The variable ''condition-type'' is bound\nto a new condition type (see [[make-condition-type]]), with supertype\n''supertype'', which must be the name of previously defined condition type.\n\nThe variable ''predicate'' is bound to the predicate procedure which is\neffectively equivalent to (lambda (obj) (condition-has-type? obj ''condition-type'')).\n\nThe created condition type has fields given as ''field'' ....\nEach ''accessor'' is bound to a procedure that extracts the field name,\ni.e. (lambda (obj) (condition-ref obj ' ''field'')).\n")
("append!" . "(:ctime 1014864289 :cuser #f :mtime 1099724611 :muser #f)* [procedure] append! ''list1'' ...\n\n[[SRFI-1]]: linear-update variant of [[append]].\n\nAlso in [[ChezScheme]], [[Gauche]], [[STk]], [[STklos]], [[MzScheme]],\n[[Bigloo]]\n")
("copy-tree" . "(:ctime 1018333210 :cuser #f :mtime 1099724662 :muser #f)* [procedure] copy-tree ''obj''\n\n[[STk]], [[STklos]]: recursively copies trees of pairs.\n\n[[SCM]]: copies tree of pairs and vectors.\nSee also [[@copy-tree]].\n")
("modified-julian-day->time-utc" . "(:ctime 1099301096 :cuser #f :mtime 1099301096 :muser #f)[[$$include modified-julian-day->date]]\n")
("SRFI-114" . "(:ctime 1474475275 :cuser #f :mtime 1474475275 :muser #f)SRFI-114: Comparators\n\nhttp://srfi.schemers.org/srfi-114/srfi-114.html\n\n[[$$srfi-implementors]]\n")
("with-input-from-pipe" . "(:ctime 1015105698 :cuser #f :mtime 1015105698 :muser #f)* [procedure] with-input-from-pipe ''cmdline'' ''proc'' [''mode'']\n* [procedure] with-output-to-pipe ''cmdline'' ''proc'' [''mode'']\n\n[[Chicken]]: see also [[open-input-pipe]], [[open-output-pipe]],\n[[call-with-input-pipe]], [[call-with-output-pipe]].\n\nSome implementations allow to use \"| cmdline\" or \"cmdline |\" as\nthe filename in [[with-input-from-file]] and [[with-output-to-file]]\nto achieve the same effects as these.\n\nGauche has [[with-input-from-process]] and [[with-output-from-process]]\nwhich do the same thing.\n")
("char-set-diff+intersection" . "(:ctime 1099288857 :cuser #f :mtime 1099288857 :muser #f)* [procedure] char-set-diff+intersection ''cset0'' ''cset1'' ...\n* [procedure] char-set-diff+intersection! ''cset0'' ''cset1'' ''cset3'' ...\n\n[[SRFI-14]]: Returns two values, as shown below.\n\n{{{\n(values (char-set-difference cset0 cset1 ...)\n        (char-set-intersection cset0 (char-set-union cset1 ...)))\n}}}\n\n[[char-set-diff+intersection!]] may modify both ''cset0'' and ''cset1''.\nSee also [[char-set-difference]], [[char-set-intersection]].\n")
("set" . "(:ctime 1018036484 :cuser #f :mtime 1018038252 :muser #f)* [procedure] set ''character-or-string'' ...\n\n[[Scheme48]]: character set constructor.\n- Other character set constructors: [[range]], [[ranges]],\n[[ascii-range]], [[ascii-ranges]].\n- Set operations on character sets: [[negate]],\n[[intersection]], [[union]], [[subtract]]\n- Predefined character sets: [[lower-case]], [[upper-case]],\n[[alphabetic]], [[numeric]], [[alphanumeric]], [[punctuation]],\n[[graphic]], [[printing]], [[control]], [[blank]],\n[[whitespace]], [[hexdigit]].\n- Char-set can be used to construct a regexp.  See [[match]],\n[[Concept:RegularExpression]].\n\n")
("open-output-file*" . "(:ctime 1015184537 :cuser #f :mtime 1015184537 :muser #f)[[$$include open-input-file*]]\n")
("test-on-group-end-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151083822 :muser #f)* [procedure] test-on-group-end-simple ''runner''\n\n[[SRFI-64]]: (test-runner-on-group-end (test-runner-simple)).\n\nSee also [[test-runner-simple]] and [[test-runner-on-group-end]].\n")
("intersection" . "(:ctime 1018038023 :cuser #f :mtime 1018038961 :muser #f)* [procedure] intersection ''char-set'' ''char-set''\n\n[[Scheme48]]: character set operation.  see [[set]].\n\n\nSRFI-14 calls this [[char-set-intersection]].\n")
("view" . "(:ctime 1018344564 :cuser #f :mtime 1018344564 :muser #f)* [procedure] view ''obj''\n\n[[STk]]: invokes a graphical viewer for ''obj''.\nSee also [[inspect]], [[detail]]\n")
("set-port-output-index!" . "(:ctime 1014956641 :cuser #f :mtime 1014956641 :muser #f)* [procedure] set-port-output-index! ''port'' ''n''\n\n[[ChezScheme]]\n\nSee also [[port-output-index]]\n")
("record" . "(:ctime 1017982518 :cuser #f :mtime 1017982518 :muser #f)* [procedure] record ''value'' ...\n\n[[Scheme48]]: record constructor.  See [[define-record-type]].\n")
("quotient&remainder" . "(:ctime 1112826498 :cuser #f :mtime 1112826498 :muser #f)* [procedure] quotient&remainder ''n1'' ''n2''\n\n[[Gauche]]: returns (values (quotient ''n1'' ''n2'') (remainder ''n1'' ''n2'')),\nbut calculates more efficiently.\n\nSome other implementations have [[quotient/remainder]].\n")
("make-directory" . "(:ctime 1018128249 :cuser #f :mtime 1039754939 :muser #f)* [procedure] make-directory ''name'' ''file-mode''\n\n[[Scheme48]]: make directory.\nSee [[file-mode]] for ''file-mode''.\nSee also [[remove-directory]], [[Concept:FileSystem]].\n\nThis is called [[create-directory]] or\n[[sys-mkdir]] in some implementations.\n\n* [procedure] make-directory ''name''\n\n[[MzScheme]], [[Bigloo]]: doesn't take mode argument.\nSee also [[delete-directory]], [[Concept:FileSystem]].\n\nIn Bigloo, see also [[make-directories]].\n")
("rxmatch-case" . "(:ctime 1015915872 :cuser #f :mtime 1015915872 :muser #f)* [syntax] rxmatch-case ''string'' ''clause'' ...\n\n[[Gauche]]: case with regexp match.\n\nSee also [[Concept:RegularExpression]], [[rxmatch-if]], [[rxmatch-let]],\n[[rxmatch-cond]].\n")
("#n=" . "(:ctime 1416209924 :cuser #f :mtime 1416209924 :muser #f)* [reader syntax] #''digits''=\n\n[[SRFI-38]]: Shared structure definition.  The next item of this syntax\ncan be referred afterwards by [[#0=]](,[[#1=]],[[#2=]]...[[#n=]].)\n")
("signal/kill" . "(:ctime 1015076528 :cuser #f :mtime 1015076528 :muser #f)[[$$include signal/hup]]\n")
("hashtable-entries" . "(:ctime 1191360983 :cuser #f :mtime 1191360983 :muser #f)* [procedure] hashtable-entries ''hashtable''\n\n[[R6RS]]: Returns two ''vectors'', one for all keys and another for\ncorresponding values.\n\nSee also [[Concept:HashTable]].\n")
("cfl+" . "(:ctime 1014953227 :cuser #f :mtime 1014953227 :muser #f)* [procedure] cfl+ ''cflonum'' ...\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[+]], [[fl+]]\n")
("fxodd?" . "(:ctime 1014951201 :cuser #f :mtime 1191226049 :muser #f)* [procedure] fxodd? ''fixnum''\n\n[[R6RS]], [[ChezScheme]]\n\nSee also [[fixnum?]], [[odd?]]\n")
("fxmod" . "(:ctime 1015049712 :cuser #f :mtime 1191224393 :muser #f)* [procedure] fxmod ''fixnum1'' ''fixnum2''\n\n[[R6RS]], [[Chicken]]: modulo for two fixnums.\n\nIn R6RS, this returns a real num in the range of [0, ''fixnum2'').\nSee [[fxmod0]], [[fxdiv]], [[div]].\n\nSee [[fixnum?]] for other fixnum operations.\n\n\n")
("make-client-socket" . "(:ctime 1018342941 :cuser #f :mtime 1099741042 :muser #f)* [procedure] make-client-socket ''hostname'' ''port-number''\n\n[[STk]]: creates a client socket.  See also\n[[socket?]], [[socket-host-name]], [[socket-host-address]],\n[[socket-local-address]], [[socket-port-number]],\n[[socket-input]], [[socket-output]], [[make-server-socket]],\n[[socket-accept-connection]], [[socket-shutdown]], \n[[socket-down?]], [[socket-dup]], [[when-socket-ready]].\n\nThis is called [[socket-client]] in some implementations.\n\n* [procedure] make-client-socket ''hostname'' ''port-number'' [''line-buffered'']\n\n[[STklos]]: adds an optiona argument to STk's [[make-client-socket]].\nThe API set is slightly different. See\n[[socket?]], [[socket-host-name]], [[socket-host-address]],\n[[socket-local-address]], [[socket-port-number]],\n[[socket-input]], [[socket-output]], [[make-server-socket]],\n[[socket-accept]], [[socket-shutdown]], \n[[socket-client?]], [[socket-server?]]\n\n* [procedure] make-client-socket ''domain'' ''args'' ...\n* [procedure] make-client-socket ''host'' ''port''\n* [procedure] make-client-socket ''sockaddr''\n\n[[Gauche]]: creates a TCP client socket.  This can be used to create\nboth unix-domain and inet-domain socket.  For inet domain, it tries\nboth IPv6 and IPv4.\nSee also [[make-socket]], [[socket?]], [[socket-address]], \n[[socket-fd]], [[socket-status]], [[socket-input-port]],\n[[socket-output-port]], [[socket-close]], [[call-with-client-socket]],\n[[make-server-socket]], [[make-server-sockets]], [[socket-bind]],\n[[socket-listen]], [[socket-accept]], [[socket-connect]], [[socket-shutdown]],\n[[socket-getsockname]], [[socket-getpeername]], [[socket-send]],\n[[socket-sendto]], [[socket-recv]], [[socket-recvfrom]],\n[[socket-getsockopt]], [[socket-setsockopt]].\n")
("SRFI-95" . "(:ctime 1173770840 :cuser #f :mtime 1173779659 :muser #f)SRFI 95: Sorting and Merging\n\nhttp://srfi.schemers.org/srfi-95/srfi-95.html\n\n[[$$srfi-implementors]]\n----\n\n[[sorted?]], [[merge]], [[merge!]], [[sort]], [[sort!]]\n")
("write/ss" . "(:ctime 1099277595 :cuser #f :mtime 1099277595 :muser #f)* [procedure] write/ss ''obj'' [''port'' [''optarg'']]\n\n[[SRFI-38]]: a synonym of [[write-with-shared-structure]].\n")
("clearok" . "(:ctime 1015877002 :cuser #f :mtime 1015877002 :muser #f)* [procedure] clearok ''win'' ''bf''\n* [procedure] idlok ''win'' ''bf''\n* [procedure] leaveok ''win'' ''bf''\n* [procedure] scrollok ''win'' ''bf''\n* [procedure] nodelay ''win'' ''bf''\n\n[[SCM]]: curses interface.  see [[initscr]]\n")
("arg*" . "(:ctime 1038277782 :cuser #f :mtime 1038277782 :muser #f)[[$$include arg]]\n")
("trace-define" . "(:ctime 1014896191 :cuser #f :mtime 1014896191 :muser #f)* [syntax] trace-define ''var'' ''exp''\n* [syntax] trace-define (''var'' . ''idspec'') ''exp1'' ''exp2'' ...\n\n[[ChezScheme]]\n\nSee also [[trace-lambda]], [[trace]].\n")
("most-negative-fixnum" . "(:ctime 1014952672 :cuser #f :mtime 1014952704 :muser #f)* [procedure] most-negative-fixnum\n\n[[ChezScheme]]\n\nSee also [[most-positive-fixnum]], [[fixnum?]]\n")
("delete-directory" . "(:ctime 1015101403 :cuser #f :mtime 1023695661 :muser #f)* [procedure] delete-directory ''dirname''\n\n[[Bigloo]], [[Chicken]], [[Scsh]], [[MzScheme]]: \nsee also [[create-directory]] or [[make-directory]].\nSee [[Concept:FileSystem]].\n\n\nThis is called [[remove-directory]] or [[sys-rmdir]] in\nsome implementations.\n")
("unspecified" . "(:ctime 1043984447 :cuser #f :mtime 1043984447 :muser #f)* [procedure] unspecified\n\n[[Bigloo]]: returns an unspecified value.\n\nSome implementations have similar procedure that\nyields ''unspecified'', ''undefined'' or ''void'' value.\nSee [[undefined]], [[void]].\n")
("untrace" . "(:ctime 1014896083 :cuser #f :mtime 1099776772 :muser #f)* [syntax] untrace ''var'' ..\n\n[[ChezScheme]], [[Chicken]], [[SCM]]\n\n\nSee also [[trace]].\n\nSTk has [[untrace-var]].\n\n* [syntax] untrace [''f-name'' ...]\n\n[[STklos]]:\n")
("current-input-port" . "(:ctime 1014841144 :cuser #f :mtime 1036927503 :muser #f)* [procedure] current-input-port\n\n[[R5RS]]\n\nSee also [[current-output-port]], [[current-error-port]].\n\n* [procedure] current-input-port [''newport'']\n\n[[ChezScheme]] and [[Chicken]] extends R5RS to allow to change the current input\nport by providing an optional argument.\n\nSome implementations have [[set-current-input-port!]] to do so.\n\n")
("car+cdr" . "(:ctime 1014863358 :cuser #f :mtime 1014863358 :muser #f)* [procedure] car+cdr ''pair''\n\n[[SRFI-1]]: (lambda (p) (values (car p) (cdr p)))\n")
("seek" . "(:ctime 1036970107 :cuser #f :mtime 1039776862 :muser #f)* [procedure] seek ''fd/port'' ''offset'' [''whence'']\n\n[[Scsh]]: seek(2).   See also [[tell]].\n\nOther implementations have [[file-position]] or [[port-seek]].\n")
(":port" . "(:ctime 1144527545 :cuser #f :mtime 1144538070 :muser #f)* [syntax] :port ''vars'' ''port''\n* [syntax] :port ''vars'' ''port'' ''read-proc''\n[[SRFI-42]]:\nReads from the port until the eof-object is read. Providing the default\n[[read]] for ''read-proc'', the generator first evaluates ''port'' and ''read-proc'',\nwhich must result in an input port ''p'' and a procedure ''r''. Then the variable\nis run through the sequence obtained by (''r'' ''p'') while the result does not\nsatisfy [[eof-object?]].\n\n")
("test-runner-on-group-end!" . "(:ctime 1151049296 :cuser #f :mtime 1151083316 :muser #f)[[$$include test-runner-on-group-end]]\n")
("make-random-source" . "(:ctime 1038273003 :cuser #f :mtime 1038273003 :muser #f)* [procedure] make-random-source\n\n[[SRFI-27]]: creates a new random source.\n")
("absolute-path?" . "(:ctime 1020224798 :cuser #f :mtime 1020581378 :muser #f)* [procedure] absolute-path? ''path''\n* [procedure] relative-path? ''path''\n\n[[MzScheme]], [[Gauche]]: determine ''path'' is absolute or relative.\nThese don't access the filesystem.  See also\n[[complete-path?]], [[Concept:FileSystem]].\n\nSome implementations have [[absolute-pathname?]].\n")
("file-exists?" . "(:ctime 1014961888 :cuser #f :mtime 1191233018 :muser #f)* [procedure] file-exists? ''filename''\n\n[[R6RS]], [[Bigloo]], [[ChezScheme]], [[Chicken]], [[Gauche]], [[MzScheme]], [[STk]], [[STklos]]:\n\nSee [[Concept:FileSystem]].\n\n")
("os-release-name" . "(:ctime 1020375201 :cuser #f :mtime 1020375201 :muser #f)[[$$include os-name]]\n")
("compare-by=/<" . "(:ctime 1144494246 :cuser #f :mtime 1144505016 :muser #f)[[$$include compare-by<]]\n")
("Index:s" . "(:ctime 1014846388 :cuser #f :mtime 1015014745 :muser #f)[[$$index s]]\n\n")
("get-signal-handler" . "(:ctime 1026112844 :cuser #f :mtime 1026112844 :muser #f)* [procedure] get-signal-handler ''n''\n\n[[Bigloo]]: returns the current signal handling procedure\nof signal ''n''.  See also [[signal]].\n\nSTk has [[get-signal-handlers]].\n")
("port-input-index" . "(:ctime 1014956202 :cuser #f :mtime 1014956202 :muser #f)* [procedure] port-input-index ''port''\n\n[[ChezScheme]]\n\nSee also [[make-input-port]], [[set-port-input-index!]]\n")
("errno/nospc" . "(:ctime 1015077266 :cuser #f :mtime 1015077266 :muser #f)[[$$include errno/perm]]\n")
("fl+" . "(:ctime 1014952239 :cuser #f :mtime 1191227628 :muser #f)* [procedure] fl+ ''flonum'' ...\n* [procedure] fl- ''flonum1'' ''flonum2'' ...\n* [procedure] fl* ''flonum'' ...\n* [procedure] fl/ ''flonum1'' ''flonum2'' ...\n\n[[R6RS]], [[ChezScheme]]: flonum specific arithmetics.\nSee [[flonum?]] for other flonum operations.\n\nChicken has [[fp+]] etc.\n\nBigloo has [[+fl]] etc.\n")
("time-tai->time-monotonic" . "(:ctime 1099301410 :cuser #f :mtime 1099301410 :muser #f)[[$$include time-tai->date]]\n")
("chdir" . "(:ctime 1018339721 :cuser #f :mtime 1099741452 :muser #f)* [procedure] chdir ''dir''\n\n[[STk]], [[STklos]], [[Bigloo]]: chdir.  See also [[getcwd]].\nSee also [[Concept:FileSystem]].\n\nThis is called [[change-directory]] or\n[[sys-chdir]] in some implementations.\n\n")
("thread-base-priority" . "(:ctime 1015928133 :cuser #f :mtime 1015928133 :muser #f)* [procedure] thread-base-priority ''thread''\n* [procedure] thread-base-priority-set! ''thread'' ''priority''\n\n[[SRFI-21]]\n")
("regexp?" . "(:ctime 1018341455 :cuser #f :mtime 1037911042 :muser #f)* [procedure] regexp? ''obj''\n\nSee [[Concept:RegularExpression]].\n\n[[STk]]: see also [[string->regexp]].\n\n[[MzScheme]]: see also [[regexp]], [[regexp-match]],\n[[regexp-match-positions]], [[regexp-replace]], \n[[regexp-replace*]].\n\n[[Gauche]]: see also [[#/]], [[string->regexp]],\n[[rxmatch]], etc.\n\n\n")
("null?" . "(:ctime 1014855945 :cuser #f :mtime 1191313987 :muser #f)* [procedure] null? ''obj''\n\n[[R5RS]], [[R6RS]]: Returns #t if ''obj'' is an empty list, #f otherwise.\n\nSee also [[pair?]], [[list?]].\n")
("Index:j" . "(:ctime 1015014559 :cuser #f :mtime 1015014559 :muser #f)[[$$index j]]\n")
("au8" . "(:ctime 1099398114 :cuser #f :mtime 1099398114 :muser #f)[[$$include ac64]]\n")
("mutex-lock!" . "(:ctime 1015927599 :cuser #f :mtime 1015963639 :muser #f)* [procedure] mutex-lock! ''mutex'' [''timeout'' ''thread'']\n\n[[SRFI-18]], [[SRFI-21]]\n")
("string-suffix-length" . "(:ctime 1014893196 :cuser #f :mtime 1014893196 :muser #f)* [procedure] string-suffix-length ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-prefix-length]], [[string-suffix?]]\n")
("syntax" . "(:ctime 1014962103 :cuser #f :mtime 1014962103 :muser #f)* [syntax] syntax ''template''\n\n[[ChezScheme]]: for low-level hygienic macro.  See also [[syntax-case]].\n")
("hash-table-hash-function" . "(:ctime 1144485145 :cuser #f :mtime 1144493802 :muser #f)* [procedure] hash-table-hash-function ''hash-table''\n\n[[SRFI-69]]: Returns the hash function used for keys of ''hash-table''.\n")
("complex?" . "(:ctime 1014841065 :cuser #f :mtime 1191210842 :muser #f)* [procedure] complex? ''obj''\n\n[[R5RS]], [[R6RS]]\n\nNote: in R6RS, (complex? +inf.0), (complex? -inf.0) and (complex? +nan.0) are all #t.\n\nSee also [[number?]], [[real?]], [[rational?]], [[integer?]].\n")
("wstandout" . "(:ctime 1015883059 :cuser #f :mtime 1015883059 :muser #f)* [procedure] wstandout ''win''\n* [procedure] wstandend ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("amapcar" . "(:ctime 1152535011 :cuser #f :mtime 1152535526 :muser #f)* [syntactic extension] amapcar ''fn'' ''list1''  ''list2'' ...\n[[RRS]]: the same as [[map]] in [[R5RS]].\n")
("SRFI-54" . "(:ctime 1099394985 :cuser #f :mtime 1122428878 :muser #f)SRFI-54: Formatting\n\nhttp://srfi.schemers.org/srfi-54/srfi-54.html\n\n[[$$srfi-implementors]]\n\n----\n[[cat]]\n")
("define-library-interface" . "(:ctime 1015048956 :cuser #f :mtime 1015048956 :muser #f)* [syntax] define-library-interface ''name'' ''export1'' ...\n\n[[Chicken]]: (define-module ''name'' (unit ''name'') (export ''export1'' ...))\n\nSee [[define-module]], [[define-library-implementation]].\n")
("limit-output" . "(:ctime 1017989297 :cuser #f :mtime 1017989297 :muser #f)* [procedure] limit-output ''output-port'' ''n'' ''procedure''\n\n[[Scheme48]]: ''procedure'' is called on an output port,\nand characters written to the port are copied to ''output-port'' up to ''n'' characters.\n")
("scroll" . "(:ctime 1015882942 :cuser #f :mtime 1015882942 :muser #f)* [procedure] scroll ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("close-socket" . "(:ctime 1017993406 :cuser #f :mtime 1017993406 :muser #f)* [procedure] close-socket ''socket''\n\n[[Scheme48]]: close the server socket ''socket''.\nSee [[open-socket]].\n\nSome implementations have [[socket-close]].\n")
("let-keywords*" . "(:ctime 1038030204 :cuser #f :mtime 1038030204 :muser #f)[[$$include let-keywords]]\n")
("bitwise-xor" . "(:ctime 1015049134 :cuser #f :mtime 1015318789 :muser #f)[[$$include bitwise-and]]\n\n")
("char-set-contains?" . "(:ctime 1015773367 :cuser #f :mtime 1015773367 :muser #f)* [procedure] char-set-contains? ''char-set'' ''char''\n\n[[SRFI-14]], and also in [[Gauche]].\n")
("a:flor64b" . "(:ctime 1144485145 :cuser #f :mtime 1144529247 :muser #f)* [procedure] a:flor64b [''z'']\n[[SRFI-63]]: Returns an inexact 64.bit flonum real uniform-array prototype.\n")
("ascii-ranges" . "(:ctime 1018037924 :cuser #f :mtime 1018037924 :muser #f)[[$$include ascii-range]]\n")
("fpneg" . "(:ctime 1191227014 :cuser #f :mtime 1191227014 :muser #f)* [procedure] fpneg ''flonum''\n\n[[Chicken]]: returns (- ''flonum'').  See [[flonum?]] for other flonum operations.\n\nIn R6RS you can use [[fl-]].\n\nIn Bigloo this is [[negfl]].\n")
("string-upcase!" . "(:ctime 1014894404 :cuser #f :mtime 1039752829 :muser #f)* [procedure] string-upcase! ''s'' [''start'' ''end'']\n* [procedure] string-downcase! ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-upcase]], [[string-downcase]]\n\n* [procedure] string-upcase! ''s''\n* [procedure] string-downcase! ''s''\n\n[[Chicken]], [[Guile]], [[Bigloo]]: doesn't take optional arguments.\n\nSee also [[string-capitalize!]]\n\n\n")
("file-is-executable?" . "(:ctime 1015197312 :cuser #f :mtime 1015197322 :muser #f)[[$$include file-is-readable?]]\n")
("eqv?" . "(:ctime 1014847802 :cuser #f :mtime 1191210123 :muser #f)* [procedure] eqv? ''obj1'' ''obj2''\n\n[[R5RS]], [[R6RS]]:\n\nNote: In R6RS, (eqv? +nan.0 +nan.0) is unspecified (section 11.5), while\n(= +nan.0 +nan.0) is #f (section 11.7.4).\n\nSee also [[eq?]], [[equal?]].\n")
("iterate" . "(:ctime 1015318612 :cuser #f :mtime 1152534803 :muser #f)* [syntactic extension] iterate name ((''var'' ''expr'') ...) ''body'' ...)\n[[RRS]]: same as\n{{{\n(labels ((name (lambda (var ...) (block body ...))))\n  (name expr ...))\n}}}\n\nSee also [[labels]].\n\n* [syntax] iterate ''loop-name'' ((''sequence-type'' ''element-var'' ''data'' ...) ...) ((''state-var'' ''init'') ...) ''body'' [''final'']\n\n[[Scheme48]]: extensible macro for iteration.\nSee also [[reduce]].\n")
("hash-table-walk" . "(:ctime 1144494246 :cuser #f :mtime 1144495077 :muser #f)* [procedure] hash-table-walk ''hash-table'' ''proc''\n\n[[SRFI-69]]: ''proc'' should be a function taking two arguments, a key and a value.\nThis procedure calls ''proc'' for each association in ''hash-table'', giving the key of the association as key and the value of the association as value. The results of ''proc'' are discarded. The order in which ''proc'' is called for the different associations is unspecified.\n")
("real-acos" . "(:ctime 1170264990 :cuser #f :mtime 1170267509 :muser #f)* real-acos ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[acos]], but signals error if the argument is not real  or the result is not real.\n")
("process-run" . "(:ctime 1015185297 :cuser #f :mtime 1015185297 :muser #f)* [procedure] process-run ''pathname'' [''list'']\n\n[[Chicken]]: fork & execv.  See also [[process-fork]], [[process-wait]].\n\nSTk and Gauche has [[run-process]].\n")
("port?" . "(:ctime 1014846130 :cuser #f :mtime 1014846130 :muser #f)* [procedure] port?\n\n[[R5RS]] mentions port? in section 3.2, Disjointness of Types, but\ndoesn't list it in chapter 6, Standard Procedures.\n\nSee also [[input-port?]], [[output-port?]].\n\n\n")
("fold" . "(:ctime 1014865625 :cuser #f :mtime 1018072227 :muser #f)* [procedure] fold ''kons'' ''knil'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: The fundamental list iterator. \n\n     (fold kons knil lis) = (fold kons (kons (car lis) knil) (cdr lis))\n     (fold kons knil '()) = knil\n\nSee also [[fold-right]], [[pair-fold]], [[reduce]].\n\n* [generic] fold ''kons'' ''knil'' ''coll1'' ''coll2'' ...\n\n[[Gauche]] extends this to take arbitrary collections\n(with gauche.collection module).\n")
("make-byte-vector" . "(:ctime 1015280109 :cuser #f :mtime 1017981557 :muser #f)* [procedure] make-byte-vector ''size'' [''init'']\n\n[[Chicken]]: see also [[byte-vector]].\n\n* [procedure] make-byte-vector ''size'' ''fill''\n\n[[Scheme48]]: ''fill'' argument is mandatory.\nsee also [[byte-vector]].\n")
("blit-string!" . "(:ctime 1039427138 :cuser #f :mtime 1039427138 :muser #f)* [procedure] blit-string! ''s1'' ''o1'' ''s2'' ''o2'' ''len''\n\n[[Bigloo]]: Fill string ''s2'' from position ''o2'' and length ''len'' with the string ''s1'' from position ''o1''.\n\nSRFI-13 has [[string-copy!]], which can be used in place of\nthis.  I think it is equivalent if you call:\n\n (string-copy! s2 o2 s1 o1 (+ o1 len))\n")
("with-error-output-port*" . "(:ctime 1018381751 :cuser #f :mtime 1018381751 :muser #f)[[$$include with-current-input-port*]]\n")
("collect-request-handler" . "(:ctime 1015030484 :cuser #f :mtime 1015030484 :muser #f)* [procedure] collect-request-handler [''newval'']\n\n[[ChezScheme]]: garbage collector parameter.  See [[collect]].\n")
("record-printer-set!" . "(:ctime 1014949715 :cuser #f :mtime 1017982989 :muser #f)* [procedure] record-printer-set! ''rtd'' ''printer''\n\n[[SCM]]: causes records of type ''rtd'' to be printed in a user-defined\nformat.\n\nSee also [[make-record-type]].\n\nScheme48 has [[define-record-discloser]] which is similar\nto this.\n")
("cute" . "(:ctime 1036934479 :cuser #f :mtime 1036934479 :muser #f)[[$$include cut]]\n")
("signal/pipe" . "(:ctime 1015076668 :cuser #f :mtime 1015076668 :muser #f)[[$$include signal/hup]]\n")
("make-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074780 :muser #f)* [procedure] make-vicinity ''dirpath''\n\n[[SRFI-59]]: Returns ''dirpath'' as a vicinity for use as first argument to [[in-vicinity]].\n")
("#!false" . "(:ctime 1152518355 :cuser #f :mtime 1152526692 :muser #f)* [constant] #!false\n\n[[RRRS]]: boolean false value.\n\nSee also [[#!true]].\n")
("nth-value" . "(:ctime 1015045866 :cuser #f :mtime 1015045866 :muser #f)* [syntax] nth-value ''n'' ''exp''\n\n[[Chicken]]: returns ''n''-th value of expression ''exp''.\n")
("key-delete" . "(:ctime 1038030931 :cuser #f :mtime 1038030931 :muser #f)* [procedure] key-delete ''kv-list'' ''key''\n* [procedure] key-delete! ''kv-list'' ''key''\n\n[[STklos]]: deletes ''key'' and associated value from\nkey-value list ''kv-list''.  See also [[key-get]],\n[[key-set!]].\n")
("negative?" . "(:ctime 1014856639 :cuser #f :mtime 1191216278 :muser #f)* [procedure] negative? ''x''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[positive?]], [[zero?]].\n")
("pretty-maximum-lines" . "(:ctime 1014960115 :cuser #f :mtime 1014960115 :muser #f)* [procedure] pretty-maximum-lines [''newval'']\n\n[[ChezScheme]]: a parameter for [[pretty-print]]\n")
("match-define" . "(:ctime 1015101883 :cuser #f :mtime 1144597780 :muser #f)* [syntax] match-define ''pat'' ''exp''\n\n[[Chicken]], [[Gauche]]: Andrew Wright's pattern matching package. See [[match]].\n")
("errno/child" . "(:ctime 1015077179 :cuser #f :mtime 1015077179 :muser #f)[[$$include errno/perm]]\n")
("time-difference" . "(:ctime 1015408895 :cuser #f :mtime 1015408895 :muser #f)* [procedure] time-difference ''time1'' ''time2''\n* [procedure] time-difference! ''time1'' ''time2''\n[[SRFI-19]]: takes difference of two time structures.\nSee also [[add-duration]], [[subtract-duration]].\n")
("cfl-imag-part" . "(:ctime 1014954084 :cuser #f :mtime 1014954092 :muser #f)* [procedure] cfl-imag-part ''cflonum''\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[imag-part]]\n")
("pathname-extension" . "(:ctime 1015100475 :cuser #f :mtime 1015100665 :muser #f)procedure] pathname-extension ''pathname''\n\n[[Chicken]]: see also [[pathname-file]], [[pathname-directory]],\n[[decompose-pathname]], [[pathname-replace-extension]]\n")
("SRFI-13" . "(:ctime 1014883305 :cuser #f :mtime 1122428602 :muser #f)SRFI-13: String Libraries\n\n\nhttp://srfi.schemers.org/srfi-13/srfi-13.html\n\n[[$$srfi-implementors]]\n\n----\n\n** Predicates\n\n[[string?]], [[string-null?]], [[string-every]], [[string-any]]\n\n** Constructors\n\n[[make-string]], [[string]], [[string-tabulate]]\n\n** List & string conversion\n\n[[string->list]], [[list->string]],\n[[reverse-list->string]], [[string-join]]\n\n** Selection\n\n[[string-length]],\n[[string-ref]],\n[[string-copy]],\n[[substring/shared]],\n[[string-copy!]], [[string-take]], [[string-take-right]],\n[[string-drop]], [[string-drop-right]],\n[[string-pad]], [[string-pad-right]], [[string-trim]], \n[[string-trim-right]], [[string-trim-both]]\n\n** Modification\n\n[[string-set!]], [[string-fill!]]\n\n** Comparison\n\n[[string-compare]], [[string-compare-ci]],\n[[string<>]], [[string=]], [[string<]], [[string>]], [[string<=]], [[string>=]],\n[[string-ci<>]], [[string-ci=]], [[string-ci<]], [[string-ci>]], [[string-ci<=]], [[string-ci>=]],\n[[string-hash]], [[string-hash-ci]]\n\n** Prefixes & suffixes\n\n[[string-prefix-length]], [[string-suffix-length]],\n[[string-prefix-length-ci]], [[string-suffix-length-ci]]\n\n[[string-prefix?]], [[string-suffix?]], \n[[string-prefix-ci?]], [[string-suffix-ci?]]\n\n** Searching\n\n[[string-index]], [[string-index-right]],\n[[string-skip]], [[string-skip-right]], [[string-count]], \n[[string-contains]], [[string-contains-ci]]\n\n** Alphabetic case mapping\n\n[[string-titlecase]], [[string-upcase]], [[string-downcase]],\n[[string-titlecase!]], [[string-upcase!]], [[string-downcase!]]\n\n** Reverse & append\n\n[[string-reverse]], [[string-reverse!]],\n[[string-append]],\n[[string-concatenate]],\n[[string-concatenate/shared]], [[string-append/shared]],\n[[string-concatenate-reverse]], [[string-concatenate-reverse/shared]]\n\n** Fold, unfold & map\n\n[[string-map]], [[string-map!]],\n[[string-fold]], [[string-fold-right]],\n[[string-unfold]], [[string-unfold-right]],\n[[string-for-each]], [[string-for-each-index]]\n\n** Replicate & rotate\n\n[[xsubstring]], [[string-xcopy!]]\n\n** Miscellaneous: insertion, parsing\n\n[[string-replace]], [[string-tokenize]]\n\n** Filtering & deleting\n\n[[string-filter]], [[string-delete]]\n\n** Low-level procedures\n\n[[string-parse-start+end]],\n[[string-parse-final-start+end]],\n[[let-string-start+end]],\n\n[[check-substring-spec]],\n[[substring-spec-ok?]],\n\n[[make-kmp-restart-vector]], [[kmp-step]], [[string-kmp-partial-search]]\n\n\n\n")
("set!-values" . "(:ctime 1015044316 :cuser #f :mtime 1138264005 :muser #f)* [syntax] set!-values (''var'' ...) ''exp''\n\n[[Chicken]], [[MzScheme]], [[Gauche]]\n\nSee also [[define-values]]\n")
("evict" . "(:ctime 1015280394 :cuser #f :mtime 1015280413 :muser #f)* [procedure] evict ''obj'' [''allocator'']\n\n[[Chicken]]: copies ''obj'' and referenced objects from it into a non-gc\nmemory allocated by ''allocator''.  Use [[release]] to free the memory.\nSee also [[evicted?]], [[block-ref]], [[bblock-set!]],\n[[copy]], [[move-memory!]], [[number-of-slots]].\n")
("directory-exists?" . "(:ctime 1020221698 :cuser #f :mtime 1020221698 :muser #f)* [procedure] directory-exists? path\n\n[[MzScheme]]: returns #t if ''path'' exists and refers to\na directory, #f otherwise.\n")
("pair-fold" . "(:ctime 1014866550 :cuser #f :mtime 1014866550 :muser #f)* [procedure] pair-fold ''kons'' ''knil'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Analogous to [[fold]], but kons is applied to successive sublists of the lists, \nrather than successive elements -- that is, ''kons'' is\napplied to the pairs making up the lists, giving this (tail) recursion: \n\n     (pair-fold kons knil lis) = (let ((tail (cdr lis)))\n                                   (pair-fold kons (kons lis knil) tail))\n     (pair-fold kons knil '()) = knil\n\nSee also [[pair-fold-right]].\n")
("ieee" . "(:ctime 1015023495 :cuser #f :mtime 1015023495 :muser #f)* [module] ieee\n\n[[ChezScheme]]: a module contains bindings in IEEE standard Scheme.\n\nSee also [[scheme]], [[r5rs]], [[r5rs-syntax]], [[module]].\n")
("&read-error" . "(:ctime 1099273843 :cuser #f :mtime 1099273843 :muser #f)* [condition-type] &read-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &read-error &error\n  read-error?\n  (line read-error-line)\n  (column read-error-column)\n  (position read-error-position)\n  (span read-error-span))\n}}}\n\nSee [[&condition]], [[&error]].\n")
("current-microseconds" . "(:ctime 1202874429 :cuser #f :mtime 1202874429 :muser #f)* [procedure] current-microseconds\n\n[[Gauche]]: Returns current time in microseconds since system-dependent\nepoch; wraps around in fixnum range (may be negative).\n\nSee also [[current-milliseconds]], [[current-seconds]].\n")
("string->regexp" . "(:ctime 1015725407 :cuser #f :mtime 1099777603 :muser #f)* [procedure] string->regexp ''string''\n\n[[STk]], [[STklos]], [[Gauche]]: converts ''string'' to a regexp object.\n\nSee also [[Concept:RegularExpression]].\n\nGauche related: [[#/]], [[rxmatch]].\n\nSTklos related: [[regexp-match]], [[regexp-match-positions]].\n")
("->char-set" . "(:ctime 1018084985 :cuser #f :mtime 1018084985 :muser #f)* [procedure] ->char-set ''x''\n* [procedure] x->char-set ''x''\n\n[[SRFI-14]]: ''x'' may be a string, a list of characters\nor a character set.  Returns a character set.\n\nAlthough SRFI-14 defines [[->char-set]], it is not\na standard R5RS Scheme identifier.  Some implementations\n(e.g. [[Scheme48]]) uses the name [[x->char-set]]\ninstead.\n")
("option-optional-arg?" . "(:ctime 1099274418 :cuser #f :mtime 1099274466 :muser #f)[[$$include option-names]]\n")
("test-runner-on-bad-end-name!" . "(:ctime 1151049296 :cuser #f :mtime 1151083384 :muser #f)[[$$include test-runner-on-bad-end-name]]\n")
("check-reset!" . "(:ctime 1144485145 :cuser #f :mtime 1144492126 :muser #f)* [procedure] check-reset!\n[[SRFI-78]]: Resets the global state (counters of correct/failed examples)\nto the state immediately after loading the module for the first time,\ni.e. no checks have been executed.\n")
("environment" . "(:ctime 1191221237 :cuser #f :mtime 1191221237 :muser #f)* [procedure] environment ''import-spec'' ...\n\n[[R6RS]]: Returns an environment that can be used by [[eval]].\n")
("home-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074742 :muser #f)* [procedure] home-vicinity\n\n[[SRFI-59]]: Returns the vicinity of the user's ''HOME'' directory, the directory which typically contains files which customize a computer environment for a user. If scheme is running without a user (eg. a daemon) or if this concept is meaningless for the platform, then home-vicinity returns #f.\n")
("perm/isgid" . "(:ctime 1015099896 :cuser #f :mtime 1015099896 :muser #f)[[$$include perm/irusr]]\n")
("digit->integer" . "(:ctime 1015772122 :cuser #f :mtime 1015772122 :muser #f)* [procedure] digit->integer ''char'' [''radix'']\n* [procedure] integer->digit ''integer'' [''radix'']\n\n[[Gauche]]: conversion between a digit character and its value.\nCommonLisp's digit-char-p and digit-char.\n")
("char-set-ref" . "(:ctime 1039168638 :cuser #f :mtime 1039168638 :muser #f)* [procedure] char-set-ref ''char-set'' ''cursor''\n\n[[SRFI-14]]: returns a character in ''char-set''\npointed by ''cursor''.   See [[char-set-cursor]].\n")
("condition-variable-name" . "(:ctime 1015927683 :cuser #f :mtime 1015963689 :muser #f)* [procedure] condition-variable-name ''cv''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("string-pad" . "(:ctime 1014889256 :cuser #f :mtime 1014889256 :muser #f)* [procedure] string-pad ''s'' ''len'' [''char'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-pad-right]].\n")
("make-directory*" . "(:ctime 1039755044 :cuser #f :mtime 1039755044 :muser #f)* [procedure] make-directory* ''path''\n* [procedure] create-directory* ''path''\n\n[[Gauche]]: makes directory ''path'', including all the\nintermediate directories.\nSee [[sys-mkdir]] for just creating one directory.\n\nThis is called [[make-directories]] in Bigloo.\n\n")
("provide-foreign-entries" . "(:ctime 1014925668 :cuser #f :mtime 1014926021 :muser #f)* [procedure] provide-foreign-entries ''entries'' [''libraries'']\n\n[[ChezScheme]]: Search foreing function entry from specified\nlibraries.   ''Libraries'' defaults to [[default-foreign-libraries]].\n\nSee also [[foreign-procedure]].\n")
("module-table" . "(:ctime 1015772650 :cuser #f :mtime 1015772650 :muser #f)* [procedure] module-table ''module''\n\n[[Gauche]]: returns a hash table that maps symbols to bindings.\nSee also [[Concept:Module]], [[define-module]].\n")
("ucs2-string-set!" . "(:ctime 1039427904 :cuser #f :mtime 1039427904 :muser #f)* [procedure] ucs2-string-set! ''ucs2-string'' ''k'' ''char''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("char-set-hash" . "(:ctime 1015899490 :cuser #f :mtime 1015899490 :muser #f)* [procedure] char-set-hash ''char-set''\n\n[[SRFI-14]]\n")
("string-match" . "(:ctime 1015104346 :cuser #f :mtime 1015104346 :muser #f)* [procedure] string-match ''regexp'' ''string'' [''start'']\n* [procedure] string-match-positions ''regexp'' ''string'' [''start'']\n\n[[Chicken]]: match regular expression ''regexp'' (string) with ''string''.\nSee also [[Concept:RegularExpression]], [[string-search]].\n")
("char-set" . "(:ctime 1015773307 :cuser #f :mtime 1015773307 :muser #f)* [procedure] char-set ''char'' ...\n\n[[SRFI-14]]: construct a character set that contains ''char'' ...\n\nAlso in [[Gauche]].\n\nSee also [[char-set-contains?]], [[char-set?]], [[char-set-copy]]\n")
("test-assert" . "(:ctime 1151136447 :cuser #f :mtime 1151144024 :muser #f)* [syntax] test-assert [''test-name''] ''expression''\n\n[[SRFI-64]]: evaluates ''expression'' and then the test passes if the result is true.\nIf the result is false, a test failure is reported. The test also fails if an exception is raised,\nassuming the implementation has a way to catch exceptions.\n''test-name'' is the name of the test case.\n\nIt is an error to invoke [[test-assert]] if there is no current test runner.\n\nSee also [[test-runner-current]].\n")
("fl<=?" . "(:ctime 1191226777 :cuser #f :mtime 1191226777 :muser #f)[[$$include fl=?]]\n")
("time-tai->date" . "(:ctime 1099301361 :cuser #f :mtime 1099301361 :muser #f)* [procedure] time-tai->date ''time'' [''tz-offset'']\n* [procedure] time-tai->julian-day ''time''\n* [procedure] time-tai->modified-julian-day ''time''\n* [procedure] time-tai->time-monotonic ''time''\n* [procedure] time-tai->time-monotonic! ''time''\n* [procedure] time-tai->time-utc ''time''\n* [procedure] time-tai->time-utc! ''time''\n\n[[SRFI-19]]: Conversion procedures.\n")
("SRFI-109" . "(:ctime 1381734903 :cuser #f :mtime 1381734904 :muser #f)SRFI-109: SRFI Libraries\n\nhttp://srfi.schemers.org/srfi-109/srfi-109.html\n\n[[$$srfi-implementors]]\n")
("set-sstats-bytes!" . "(:ctime 1015028967 :cuser #f :mtime 1015028967 :muser #f)* [procedure] set-sstats-bytes! ''sstats'' ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[sstats-bytes]].\n")
("unquote" . "(:ctime 1191206241 :cuser #f :mtime 1191206241 :muser #f)* [auxiliary syntax]  unquote ''datum''\n* [auxiliary syntax]  unquote-splicing ''datum''\n\n[[R5RS]]: When appears in [[quasiquote]] template, evaluates\nand inserts the value of ''datum''.\n\n* [auxiliary syntax] unquote ''datum'' ...\n* [auxiliary syntax] unquote-splicing ''datum'' ...\n\n[[R6RS]]: Allows zero or more ''datum''s if the unquote or unquote-splicing form\nis at the splicing position of a quasiquote template.\n\n\nSee also [[quasiquote]], [[,]], [[,@]].\n")
("subtract-duration" . "(:ctime 1015409006 :cuser #f :mtime 1015409006 :muser #f)* [procedure] subtract-duration ''time1'' ''time-duration''\n* [procedure] subtract-duration! ''time1'' ''time-duration''\n\n[[SRFI-19]]: subtracts ''time-duration'' from ''time1''.  Both arguments\nmust be a time object.  See also [[time-difference]], \n[[add-duration]].\n")
("overlay" . "(:ctime 1015882582 :cuser #f :mtime 1015882582 :muser #f)* [procedure] overlay ''srcwin'' ''dstwin''\n* [procedure] overwrite ''srcwin'' ''dstwin''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("test-read-eval-string" . "(:ctime 1151049296 :cuser #f :mtime 1151074545 :muser #f)* [syntax] read-eval-string ''string''\n\n[[SRFI-64]]: parse ''string'' using [[read]] and evaluate it to return.\nAn error is signaled if there are unread characters after [[read]] is done.\n")
("assert" . "(:ctime 1015045476 :cuser #f :mtime 1191570473 :muser #f)* [syntax] assert ''exp''\n\n[[R6RS]]: Signals [[&assertion]] exception if ''exp'' evaluates to false.\nSee also [[assertion-violation]].\n\n* [syntax] assert ''exp'' [''string'' ''arg'' ...]\n\n[[Chicken]]: signals error if ''exp'' evaluates to false.\n''string'' and ''args'' are used for error message.\nSee [[error]].\n")
("file-or-directory-modify-seconds" . "(:ctime 1020222452 :cuser #f :mtime 1020222452 :muser #f)* [procedure] file-or-directory-modify-seconds ''path''\n\n[[MzScheme]]: returnes the file or directory's last\nmodified time.  See also [[Concept:FileSystem]].\n")
("port-tell" . "(:ctime 1039776979 :cuser #f :mtime 1099726622 :muser #f)* [procedure] port-tell ''port''\n\n[[Gauche]]: returns the current position of read/write\npointer of ''port'' in bytes.  Can be applied to file ports\nand string ports.   See also [[port-seek]].\n\nOther implementations call this [[port-current-position]], [[file-position]],\n[[tell]] or [[ftell]].\n")
("fp<=" . "(:ctime 1191226808 :cuser #f :mtime 1191226808 :muser #f)[[$$include fp=]]\n")
("string-byte-set!" . "(:ctime 1015806407 :cuser #f :mtime 1015806407 :muser #f)[[$$include string-byte-ref]]\n")
("rxmatch-start" . "(:ctime 1015899695 :cuser #f :mtime 1018083691 :muser #f)* [procedure] rxmatch-start ''match'' [''i'']\n* [procedure] rxmatch-end ''match'' [''i'']\n* [procedure] rxmatch-substring ''match'' [''i'']\n* [procedure] rxmatch-after ''match'' [''i'']\n* [procedure] rxmatch-before ''match'' [''i'']\n\n[[Gauche]]: Returns various match information from [[<regmatch>]] object.\nSee [[Concept:RegularExpression]], [[rxmatch]].\n\nSome implementations have [[match-start]] and \n[[match-end]].\n")
("primitive-name" . "(:ctime 1019625121 :cuser #f :mtime 1019625121 :muser #f)* [procedure] primitive-name ''prim-proc''\n\n[[MzScheme]]: returns the name of the promitive procedure.\nSee also [[primitive?]], [[primitive-result-arity]]\n")
("report" . "(:ctime 1015279370 :cuser #f :mtime 1015279370 :muser #f)* [procedure] report [''port'']\n\n[[Chicken]]: display some status information of running Scheme process.\n")
("SRFI-64" . "(:ctime 1150716954 :cuser #f :mtime 1151084118 :muser #f)SRFI 64: A Scheme API for test suites\n\nhttp://srfi.schemers.org/srfi-64/srfi-64.html\n\n[[$$srfi-implementors]]\n----\n\n[[test-assert]], [[test-eqv]], [[test-eq]], [[test-equal]], [[test-approximate]]\n\n[[test-error]]\n\n[[test-read-eval-string]]\n\n[[test-begin]], [[test-end]], [[test-group]]\n\n[[test-group-with-cleanup]]\n\n[[test-match-name]], [[test-match-nth]], [[test-match-any]], [[test-match-all]]\n\n[[test-skip]]\n\n[[test-expect-fail]]\n\n[[test-runner?]], [[test-runner-current]], [[test-runner-get]], [[test-runner-simple]], [[test-runner-null]], [[test-runner-create]], [[test-runner-factory]]\n\n[[test-apply]], [[test-with-runner]]\n\n[[test-result-kind]], [[test-passed?]]\n\n[[test-result-ref]], [[test-result-set!]], [[test-result-remove]], [[test-result-clear]], [[test-result-alist]]\n\n[[test-runner-on-test-begin]], [[test-runner-on-test-begin!]], [[test-runner-on-group-begin]], [[test-runner-on-group-begin!]], [[test-runner-on-group-end]], [[test-runner-on-group-end!]], [[test-runner-on-bad-count]], [[test-runner-on-bad-count!]], [[test-runner-on-bad-end-name]], [[test-runner-on-bad-end-name!]], [[test-runner-on-final]], [[test-runner-on-final!]]\n\n[[test-on-test-begin-simple]], [[test-on-test-end-simple]], [[test-on-group-begin-simple]], [[test-on-group-end-simple]], [[test-on-bad-count-simple]], [[test-on-bad-end-name-simple]], [[test-on-final-simple]]\n\n[[test-runner-pass-count]], [[test-runner-fail-count]], [[test-runner-xpass-count]], [[test-runner-xfail-count]], [[test-runner-skip-count]], [[test-runner-test-name]], [[test-runner-group-path]], [[test-runner-group-stack]], [[test-runner-aux-value]], [[test-runner-aux-value!]], [[test-runner-reset]]\n")
("record-type-descriptor?" . "(:ctime 1014948006 :cuser #f :mtime 1014948006 :muser #f)* [procedure] record-type-descriptor? ''obj''\n\n[[ChezScheme]]\n\nSee also [[make-record-type]], [[define-record]]\n")
("record-length" . "(:ctime 1017982550 :cuser #f :mtime 1017982550 :muser #f)* [procedure] record-length ''record''\n\n[[Scheme48]]: low-level record accessor.  See [[define-record-type]].\n")
("byte-vector->u8vector" . "(:ctime 1015075758 :cuser #f :mtime 1015075758 :muser #f)* [procedure] byte-vector->u8vector ''byte-vector''\n* [procedure] byte-vector->s8vector ''byte-vector''\n* [procedure] byte-vector->u16vector ''byte-vector''\n* [procedure] byte-vector->s16vector ''byte-vector''\n* [procedure] byte-vector->u32vector ''byte-vector''\n* [procedure] byte-vector->s32vector ''byte-vector''\n* [procedure] byte-vector->f32vector ''byte-vector''\n* [procedure] byte-vector->f64vector ''byte-vector''\n\n[[Chicken]]\n\nSee also [[u8vector->byte-vector]].\n\n\n")
("require-extension" . "(:ctime 1099655552 :cuser #f :mtime 1099655567 :muser #f)* [syntax] require-extension (''extension-identifier'' ''extension-argument'' ...) ...\n\n[[SRFI-55]]: \n\n{{{\n(require-extension (srfi 1))              ; Make the SRFI 1 List Library available\n(require-extension (srfi 1 13 14))        ; Make the SRFI 1, 13 and 14 libraries available\n}}}\n\nRelated: [[cond-expand]], [[program]], [[requires]].\n\nSimilar implementation-specific constructs: [[require]], [[use]], [[use-modules]].\n")
("test" . "(:ctime 1152535011 :cuser #f :mtime 1152535230 :muser #f)* [syntactic extension] test ''pred'' ''proc'' ''alt''\n[[RRS]]: evaluates ''pred'' and if its values is non-nil then calls the ''proc'' with the value of ''pred'', otherwise returns ''alt''.\n")
("getcwd" . "(:ctime 1018338167 :cuser #f :mtime 1099741412 :muser #f)* [procedure] getcwd\n\n[[STk]], [[STklos]]: getcwd.  To change cwd, use [[chdir]].\nSee also [[Concept:FileSystem]].\n\nThis is called [[current-directory]] or [[sys-getcwd]]\nin some implementations.\n")
("write*" . "(:ctime 1018334641 :cuser #f :mtime 1099727270 :muser #f)* [procedure] write* ''obj'' [''port'']\n\n[[STk]], [[STklos]], [[Gauche]]: writes ''obj'' to ''port''.\nIf there's a circular or shared substructure\nin ''obj'', using [[#1=]] and [[#1#]] notation\nto write it out.\n")
("close-input-pipe" . "(:ctime 1015105923 :cuser #f :mtime 1015105923 :muser #f)* [process] close-input-pipe ''port''\n* [process] close-output-pipe ''port''\n\n[[Chicken]]: closes the pipe port and waits for subprocess to finish.\nSee also [[open-input-pipe]], [[open-output-pipe]].\n\n")
("Index:a" . "(:ctime 1014837641 :cuser #f :mtime 1015014091 :muser #f)[[$$index a]]\n\n")
("#\"" . "(:ctime 1015806255 :cuser #f :mtime 1079476461 :muser #f)* [reader syntax] #\"...\"\n\n[[Gauche]]: (OBSOLETED) denotes an incomplete string (see [[string-incomplete?]]).\nsee [[#*]].\n")
("evicted?" . "(:ctime 1015280435 :cuser #f :mtime 1015280435 :muser #f)* [procedure] evicted? ''obj''\n\n[[Chicken]]: see also [[evict]].\n")
("test-on-bad-count-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151083928 :muser #f)* [procedure] test-on-bad-count-simple ''runner'' ''actual-count'' ''expected-count''\n\n[[SRFI-64]]: (test-runner-on-bad-count (test-runner-simple)).\n\nSee also [[test-runner-simple]] and [[test-runner-on-bad-count]].\n")
("fluid-ref" . "(:ctime 1014929387 :cuser #f :mtime 1014929409 :muser #f)* [procedure] fluid-ref ''fluid''\n\n[[Guile]]: Get the value of ''fluid'' in the current dynamic root.\n\nSee also [[make-fluid]], [[fluid-set!]], [[fluid?]]\n")
("reduce" . "(:ctime 1014866954 :cuser #f :mtime 1015318545 :muser #f)* [procedure] reduce ''f'' ''ridentity'' ''list''\n\n[[SRFI-1]]: reduce has the following definition: \n\n     If list = (), return ''ridentity'';\n     Otherwise, return (fold f (car list) (cdr list)). \n     ...in other words, we compute (fold f ridentity list). \n\nNote: MIT Scheme and Haskell flip F's arg order \nfor their reduce and fold functions. \n\nSee also [[fold]], [[reduce-right]].\n\n* [syntax] reduce ((''sequence-type'' ''element-var'' ''data'' ...) ...) ((''state-var'' ''initial'') ...) ''body'' [''final'']\n\n[[Scheme48]]'s reduce is a macro for looping.\nSee [[iterate]].\n\n")
("keyword->string" . "(:ctime 1015051743 :cuser #f :mtime 1203990919 :muser #f)* [procedure] keyword->string ''keyword''\n\n[[SRFI-88]], [[Chicken]], [[STk]], [[STklos]], [[Bigloo]], [[Kawa]]\n\nSee also [[#:]], [[keyword?]], [[string->keyword]].\n")
("test-runner-on-group-begin" . "(:ctime 1151049296 :cuser #f :mtime 1151083286 :muser #f)* [syntax] test-runner-on-group-begin ''runner''\n* [syntax] test-runner-on-group-begin! ''runner'' ''function''\n\n[[SRFI-64]]: gets or sets the callback function for on-group-begin.\n''function'' is called at [[test-begin]].\n\nSee also [[test-on-group-begin-simple]].\n")
("set-port-input-index!" . "(:ctime 1014956642 :cuser #f :mtime 1014956642 :muser #f)* [procedure] set-port-input-index! ''port'' ''n''\n\n[[ChezScheme]]\n\nSee also [[port-input-index]]\n")
("abandoned-mutex-exception?" . "(:ctime 1015927918 :cuser #f :mtime 1015927918 :muser #f)[[$$include join-timeout-exception?]]\n")
("error?" . "(:ctime 1099267770 :cuser #f :mtime 1099267770 :muser #f)* [procedure] error? obj\n\n[[SRFI-35]]: See [[&error]].\n")
("endwin" . "(:ctime 1015876935 :cuser #f :mtime 1015876935 :muser #f)* [procedure] endwin\n\n[[SCM]]: curses interface.  see [[initscr]]\n")
("time" . "(:ctime 1015024776 :cuser #f :mtime 1099743463 :muser #f)* [syntax] time ''exp''\n\n[[ChezScheme]], [[Chicken]], [[STk]], [[Gauche]]: evaluates ''exp'' and reports the amount of execution statistics.\n\nFor [[ChezScheme]]: see also [[display-statistics]].\n\n* [syntax] time ''exp1'' ''exp2'' ...\n\n[[STklos]]: allows multiple exps.\n\n\n* [procedure] time [''iterations''] ''exp''\n\n[[SISC]]: may take optional ''iterations''.\n\n* [procedure] time [''date'']\n\n[[Scsh]]: without args, returns the current time.\nWith date record, converts it to time.\n\nSRFI-19 has [[current-time]] and [[date->time-utc]].\n\n")
("printing" . "(:ctime 1018071896 :cuser #f :mtime 1018071896 :muser #f)[[$$include lower-case]]\n")
("Concept:CaseSensitivity" . "(:ctime 1164224914 :cuser #f :mtime 1245541063 :muser #f)Although symbols themselves are case-sensitive (you can create uppercase and lowercase symbols via string->symbol), by R5RS the standard required the reader to effectively fold the cases when it is reading symbol, so that 'a and 'A are treated as eq?\n\nAlmost all active implementations, however, have a switch to choose case-sensitiveness of the symbol reader.   Furthermore, more and more recent implementations seem to adopt case-sensitive reader by default.\n\nHere's a list of implementations and their default case sensitivity\n('S' for sensitive, 'I' for insensitive), and whether they have an option\nto switch.  (If you want to add or correct entries, please go ahead.)\n\n||''Implementation''||''default''||''option?''||\n||[[Bigloo]]        ||S          ||yes (option -fcase-insensitive)||\n||[[ChezScheme]]    ||I          ||yes (parameter case-sensitive)||\n||[[Chicken]]       ||S          ||yes (complier command line option)||\n||[[Elk]]           ||S          ||yes (command line)||\n||[[Gambit]]        ||S          ||yes (command line / readtable)||\n||[[Gauche]]        ||S          ||yes (command line -fcase-fold)||\n||[[Guile]]         ||S          ||yes (reader option)||\n||[[Ikarus]]        ||S          ||no?||\n||[[Kawa]]          ||S          ||yes (variable symbol-read-case)||\n||[[Larceny]]       ||S          ||yes (command line switches, parameter, per-port flags)||\n||[[LispMe]]        ||I          ||yes (settings dialog)||\n||[[MIT-Scheme]]    ||I          ||yes (variable *parser-canonicalize-symbols?*)||\n||[[PLT-Scheme]]    ||S          ||yes (parameter read-case-sensitive, per-expression prefix #cs and #ci)||\n||[[Pocket-Scheme]] ||I*         ||no||\n||[[RScheme]]       ||S          ||?||\n||[[Scheme48]]      ||I          ||no||\n||[[SCM]]           ||I          ||no||\n||[[Scsh]]          ||S          ||no?||\n||[[SigScheme]]     ||S          ||no?||\n||[[SISC]]          ||I          ||yes (parameter case-sensitive)||\n||[[Stalin]]        ||I          ||no||\n||[[STklos]]        ||I          ||no?||\n\n(* Pocket Scheme: only folds case between U+0000 - U+00FF)\n")
("store-bundle" . "(:ctime 1099300277 :cuser #f :mtime 1099300277 :muser #f)* [procedure] store-bundle ''bundle-specifier''\n\n[[SRFI-29]]: Stores the bundle information associated to ''bundle-specifier'',\nas declared by [[declare-bundle!]].   The stored information may later be\nretrieved by [[load-bundle!]].   An implementation may not provide the\nexternalization feature, in which case this procedure returns #f.\n")
("refresh" . "(:ctime 1015882523 :cuser #f :mtime 1015882523 :muser #f)* [procedure] refresh\n\n[[SCM]]: curses interface.   see [[initscr]].\n")
("text" . "(:ctime 1018082931 :cuser #f :mtime 1169058162 :muser #f)* [procedure] text ''string''\n\n[[Scheme48]]: returns a rexexp that matches ''string''.\nSee [[Concept:RegularExpression]], [[match]].\n\n[[LispMe]]: prints an object as graphic text.\n")
("span" . "(:ctime 1014869973 :cuser #f :mtime 1014869973 :muser #f)* [procedure] span ''pred'' ''clist''\n\n[[SRFI-1]]: splits the list into the longest initial prefix \nwhose elements all satisfy ''pred'', and the remaining tail.\n\nSee also [[span!]], [[break]].\n")
("struct-type-slots" . "(:ctime 1099725488 :cuser #f :mtime 1099725488 :muser #f)[[$$include struct-type-name]]\n")
("hash-table-pop!" . "(:ctime 1015303912 :cuser #f :mtime 1015303912 :muser #f)* [procedure] hash-table-pop! ''hash-table'' ''key'' [''default'']\n\n[[Gauche]]: get the car of the list associated to ''key'' in ''hash-table'',\nand sets the cdr of the original value to the ''key''.  See also [[hash-table-push!]],\n[[Concept:HashTable]].\n")
("module-environment" . "(:ctime 1018336663 :cuser #f :mtime 1018336663 :muser #f)* [procedure] module-environment ''module''\n\n[[STk]]: returns the environment associated to the module.\nSee [[the-environment]].\n")
("enqueue!" . "(:ctime 1015071985 :cuser #f :mtime 1017980763 :muser #f)* [procedure] enqueue! ''queue'' ''x''\n\n[[SLIB]], [[Scheme48]]: adds ''x'' to the rear of ''queue''.\n\nThis is called [[queue-add!]] in some implementations.\n\nSee also [[make-queue]], [[dequeue!]]\n\n* [procedure] enqueue! ''queue'' ''obj1'' ''obj2'' ...\n\n[[Gauche]] allows more than one object to be queued.\n\n\n")
("sstats-cpu" . "(:ctime 1015028900 :cuser #f :mtime 1015028900 :muser #f)* [procedure] sstats-cpu ''sstats''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[set-sstats-cpu!]].\n")
("char-set:ascii" . "(:ctime 1018082717 :cuser #f :mtime 1018082717 :muser #f)[[$$include char-set:lower-case]]\n")
("inexact" . "(:ctime 1191211567 :cuser #f :mtime 1191211567 :muser #f)[[$$include exact]]\n")
("stream-for-each" . "(:ctime 1099280482 :cuser #f :mtime 1099280482 :muser #f)* [procedure] stream-for-each ''proc'' ''stream_0'' ''stream_1'' ...\n\n[[SRFI-40]]: Like [[stream-map]], but the result of ''proc'' is discarded.\n")
("char-set-fold" . "(:ctime 1039168832 :cuser #f :mtime 1039168832 :muser #f)* [procedure] char-set-fold ''kons'' ''knil'' ''char-set''\n\n[[SRFI-14]]: fundamental iterator for a character set.\nSee also [[char-set-unfold]], [[char-set-for-each]],\n[[char-set-map]].\n")
(":until" . "(:ctime 1144527545 :cuser #f :mtime 1144538361 :muser #f)* [syntax] :until ''generator'' ''expression''\n[[SRFI-42]]:\nRuns ''generator'' until after ''expression'' has evaluated to non-#f. The\nguarding expression is included in the scope of the variables introduced by\nthe generator.\n\nNote the distinction between [[:while]], stopping at a certain condition, and\n:until, stopping after a certain condition has occurred. The latter implies\nthat the binding that has triggered termination has been processed by the\ncomprehension.\n")
("SRFI-23" . "(:ctime 1014883166 :cuser #f :mtime 1122428677 :muser #f)SRFI-23: Error reporting mechanism\n\nhttp://srfi.schemers.org/srfi-23/srfi-23.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[error]]\n\n")
("sys-readdir" . "(:ctime 1015904982 :cuser #f :mtime 1020222033 :muser #f)* [procedure] sys-readdir ''path''\n\n[[Gauche]]: returns a list of directory contents.\n\nThis is called [[directory]], [[list-directory]],\n[[directory-list]] or [[directory-files]] in some implementations.\n")
("hashtable?" . "(:ctime 1045088811 :cuser #f :mtime 1191359351 :muser #f)* [procedure] hashtable? ''obj''\n\n[[R6RS]], [[Bigloo]]: returns #t if ''obj'' is a hash table.  See [[make-hashtable]].\n\nSome implementations have [[hash-table?]].\n")
("error-output-port" . "(:ctime 1018381469 :cuser #f :mtime 1018381541 :muser #f)* [procedure] error-output-port\n\n[[Scsh]]: returns the current error port.\n\nThis is called [[current-error-port]] in some implementations.\n")
("stream-unfoldn" . "(:ctime 1099280347 :cuser #f :mtime 1099280347 :muser #f)* [procedure] stream-unfoldn ''generator'' ''seed'' ''n''\n\n[[SRFI-40]]: Returns ''n'' streams whose contents are produced by successive \ncalls to ''generator'', which takes the current seed as an arguments and \nreturns ''n'' + 1 values.\n\n{{{\n(proc seed) -> seed result_0 ... result_N \n}}}\n\nHere, result_i indicates how to produce the next element of the i-th result\nstream:\n\n- (value) : value is the next car of this result stream\n- #f : no new information for this result stream\n- () : the end of this result stream has been reached\n")
("f32vector->byte-vector" . "(:ctime 1015075636 :cuser #f :mtime 1015075636 :muser #f)[[$$include u8vector->byte-vector]]\n")
("set-sstats-gc-count!" . "(:ctime 1015029234 :cuser #f :mtime 1015029234 :muser #f)* [procedure] set-sstats-gc-count! ''sstats'' ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[sstats-gc-count]].\n")
("Gauche" . "(:ctime 1014837464 :cuser #f :mtime 1421429798 :muser #f)Gauche is an R5RS Scheme interpreter aimed to be a script engine for\ndaily work.  Handles several multibyte character encodings natively.\n\n(As of October 2013, git HEAD almost implements R7RS-small.  The next release is expcted to provide full R7RS-small support.)\n\nhttp://practical-scheme.net/gauche/\n\n[[$$srfis 0 1 2 4 5 6 7 8 9 10 11 13 14 16 17 18 19 22 23 25 26 27 28 29 30 31 34 35 36 37 38 39 40 42 43 45 46 55 60 61 62 69 87 95 98 99 106 111 113 114]](0.9.5_pre1)\n\n----\n* Programming in Gauche\n[[*argv*]], [[*program-name*]]\n\n* Core syntax\n[[set!-values]], [[has-setter?]], \n[[push!]], [[pop!]], [[inc!]], [[dec!]], [[update!]],\n[[when]], [[unless]], [[let1]], [[fluid-let]],\n[[receive]], [[begin0]], [[dotimes]], [[dolist]], [[while]], [[until]],\n[[define-values]], [[define-constant]], \n[[define-in-module]]\n\n[[define-module]], [[select-module]], [[with-module]],\n[[export]], [[export-all]], [[extend]], [[import]], [[current-module]],\n[[use]], [[module?]], [[find-module]], [[make-module]], [[all-modules]],\n[[module-name]], [[module-imports]], [[module-exports]],\n[[module-table]], [[module-parents]], [[module-precedence-list]],\n[[global-variable-bound?]], [[global-variable-ref]],\n[[module-name->path]], [[path->module-name]],\n[[null]], [[scheme]], [[gauche]], [[user]]\n\n[[define-macro]], [[macroexpand]], [[macroexpand-1]],\n[[%macroexpand]], [[%macroexpand-1]], [[syntax-error]],\n[[syntax-errorf]], [[unwrap-syntax]]\n\n* Core library\n[[object-equal?]]\n\n[[<number>]], [[<complex>]], [[<real>]], [[<integer>]],\n[[fixnum?]], [[bignum?]], [[min&max]], [[quotient&reminder]],\n[[clamp]], [[sinh]], [[cosh]], [[tanh]], [[asinh]],\n[[acosh]], [[atanh]], [[decode-float]],\n[[fmod]], [[modf]], [[frexp]], [[ldexp]],\n[[number->string]], [[x->number]],\n[[x->integer]], [[ash]], [[logand]], [[logior]], [[logxor]],\n[[lognot]], [[logtest]], [[logbit?]], [[bit-field]],\n[[copy-bit]], [[copy-bit-field]], [[logcount]], [[integer-length]],\n\n[[<boolean>]], [[<list>]], [[<null>]], [[<pair>]],\n[[acons]], [[list*]], [[list-copy]], [[list-ref]], [[last-pair]],\n[[append!]], [[reverse!]]\n\n[[<symbol>]], [[gensym]], \n[[<keyword>]], [[keyword?]], [[make-keyword]], [[keyword->string]],\n[[get-keyword]], [[get-keyword*]], [[delete-keyword]],\n[[<identifier>]], [[identifier?]], [[identifier->symbol]]\n\n[[<char>]], [[digit->integer]], [[integer->digit]], \n[[char->ucs]], [[ucs->char]],\n[[gauche-character-encoding]], [[supported-character-encodings]]\n\n[[<char-set>]], [[#[]], [[char-set?]], [[char-set-contains?]],\n[[char-set]], [[char-set-copy]]\n\n[[<string>]], [[string-immutable?]], [[string-incomplete?]], [[#\"]],\n[[make-byte-string]], \n[[x->string]], [[#`]], [[string-interpolate]],\n[[string-size]], [[string-ref]], [[string-byte-ref]],\n[[string-byte-set!]], [[string->list]], [[string-copy]],\n[[string-fill!]], [[string-join]], [[string-scan]], [[string-split]],\n[[<string-pointer>]], [[make-string-pointer]], [[string-pointer?]],\n[[string-pointer-next!]], [[string-pointer-prev!]],\n[[string-pointer-set!]], [[string-pointer-substring]], \n[[string-pointer-index]], [[string-complete->incomplete]],\n[[string-incomplete->complete]]\n\n[[<regexp>]], [[<regmatch>]], [[#/]], [[string->regexp]],\n[[rxmatch]], [[rxmatch-substring]], [[rxmatch-start]], \n[[rxmatch-end]], [[rxmatch-after]], [[rxmatch-before]],\n[[rxmatch-let]],\n[[rxmatch-if]],\n[[rxmatch-cond]],\n[[rxmatch-case]],\n[[regexp-replace]],\n[[regexp-replace-all]],\n[[regexp-replace*]],\n[[regexp-replace-all*]],\n[[regexp-quote]]\n\n[[<vector>]], [[vector-ref]],\n\n[[<hash-table>]], [[hash]], [[object-hash]],\n[[eq-hash]], [[eqv-hash]],\n[[make-hash-table]], [[hash-table?]], [[hash-table-type]],\n[[hash-table-num-entries]], [[hash-table]],\n[[hash-table-get]],\n[[hash-table-put!]], [[hash-table-exists?]], [[hash-table-delete!]],\n[[hash-table-push!]], [[hash-table-pop!]], [[hash-table-update!]],\n[[hash-table-for-each]],\n[[hash-table-map]], [[hash-table-fold]],\n[[hash-table-keys]], [[hash-table-values]],\n\n[[<weak-vector>]], [[make-weak-vector]], [[weak-vector-length]],\n[[weak-vector-ref]], [[weak-vector-set!]]\n\n[[error]], [[errorf]], [[with-error-handler]],\n[[<exception>]], [[current-exception-handler]], \n[[raise]], [[with-exception-handler]],\n\n[[<port>]], [[port-closed?]], [[current-error-port]], \n[[standard-input-port]], [[standard-output-port]], \n[[standard-error-port]], [[with-input-from-port]],\n[[with-output-to-port]], [[with-error-to-port]],\n[[port-type]], [[port-name]], [[port-current-line]],\n[[port-file-number]], [[port-buffering]], [[copy-port]], \n[[open-input-file]], [[open-output-file]],\n[[call-with-input-file]], [[call-with-output-file]]\n[[with-input-from-file]], [[with-output-to-file]],\n[[open-input-fd-port]], [[open-output-fd-port]],\n[[open-input-string]], [[open-output-string]], [[get-output-string]],\n[[call-with-input-string]], [[call-with-output-string]],\n[[with-input-from-string]], [[with-output-to-string]], \n[[call-with-string-io]], [[with-string-io]],\n[[write-to-string]], [[read-from-string]],\n[[open-input-buffered-port]], [[open-output-buffered-port]],\n[[read-byte]], [[read-line]], [[read-block]], [[port->string]],\n[[port->list]], [[port->string-list]], [[port->sexp-list]],\n[[port-fold]], [[port-fold-right]], [[port-for-each]], \n[[port-map]], [[write-object]], [[flush]], \n[[flush-all-ports]],\n[[write-byte]], [[write*]], [[format]],\n\n[[load]], [[*load-path*]], [[add-load-path]], [[load-from-port]],\n[[current-load-port]], [[current-load-history]], [[current-load-next]],\n[[dynamic-load]], [[require]], [[provide]], [[provided?]]\n[[autoload]]\n\n[[sort]], [[sort!]]\n\n[[exit]], [[sys-exit]], [[sys-getenv]], [[sys-putenv]],\n[[gauche-version]], [[gauche-architecture]], [[gauche-library-directory]],\n[[gauche-architecture-directory]], [[gauche-site-library-directory]],\n[[gauche-site-architecture-directory]], [[sys-readdir]],\n[[sys-glob]], [[sys-remove]], [[sys-rename]], [[sys-tmpnam]],\n[[sys-mkstemp]], [[sys-link]], [[sys-unlink]], [[sys-symlink]],\n[[sys-readlink]], [[sys-mkdir]], [[sys-rmdir]], [[sys-umask]],\n[[sys-normalize-pathname]], [[sys-basename]], [[sys-dirname]],\n[[file-exists?]], [[file-is-regular?]], [[file-is-directory?]],\n[[<sys-stat>]], [[sys-stat]], [[sys-lstat]], [[sys-fstat]],\n[[sys-stat->mode]], [[sys-stat->ino]], [[sys-stat->dev]], [[sys-stat->rdev]],\n[[sys-stat->nlink]], [[sys-stat->size]], [[sys-stat->uid]],\n[[sys-stat->gid]], [[sys-stat->atime]], [[sys-stat->mtime]],\n[[sys-stat->ctime]], [[sys-stat->file-type]], [[sys-access]],\n[[sys-chmod]], [[sys-chdir]], [[sys-pipe]], [[sys-isatty]],\n[[sys-ttyname]], [[sys-getgrgid]], [[sys-getgrnam]], [[sys-gid->group-name]],\n[[sys-group-name->gid]], [[sys-getpwuid]], [[sys-getpwnam]],\n[[sys-uid->user-name]], [[sys-user-name->uid]],  [[sys-crypt]],\n[[sys-setlocale]], [[<sys-sigset>]], [[sys-sigset-add!]],\n[[sys-sigset-delete!]], [[sys-signal-name]], [[sys-kill]],\n[[with-signal-handlers]], [[sys-uname]], [[sys-getcwd]], [[sys-getgid]],\n[[sys-getegid]], [[sys-getuid]], [[sys-geteuid]], [[sys-getgroups]],\n[[sys-getlogin]], [[sys-getpgrp]], [[sys-getpid]], [[sys-getppid]],\n[[sys-times]], [[sys-ctermid]], [[<sys-tm>]], [[sys-time]],\n[[sys-gmtime]], [[sys-localtime]], [[sys-ctime]], [[sys-difftime]],\n[[sys-asctime]], [[sys-strftime]], [[sys-mktime]], [[sys-tm->alist]], \n[[sys-system]], [[sys-fork]], [[sys-exec]], [[sys-wait]],\n[[sys-waitpid]], [[sys-wait-exited?]], [[sys-wait-exit-status]],\n[[sys-wait-signaled?]], [[sys-wait-termsig]], [[sys-wait-stopped?]],\n[[sys-wait-stopsig]], [[<sys-fdset>]], [[sys-fdset-ref]],\n[[sys-fdset-set!]], [[sys-fdset-max-fd]], [[sys-select]], [[sys-select!]],\n[[sys-pause]], [[sys-alarm]], [[sys-sleep]], [[sys-random]],\n[[sys-srandom]], [[sys-abort]], [[sys-fmod]], [[sys-frexp]], [[sys-mkfifo]],\n[[sys-setgid]], [[sys-setpgid]], [[sys-setpgrp]], [[sys-getpgid]],\n[[sys-setsid]], [[sys-setuid]], [[sys-gethostname]], [[sys-getdomainname]]\n\n* Object system\n[[class-of]], [[is-a?]], [[define-class]], [[define-generic]],\n[[define-method]], [[make]], [[initialize]]\n\n[[slot-ref]], [[slot-set!]], [[slot-bound?]], [[slot-exists?]],\n[[slot-unbound]], [[slot-missing]], [[class-slot-ref]],\n[[class-slot-set!]], \n\n[[<top>]], [[<class>]], [[<generic>]], [[<method>]], [[<object>]],\n\n[[class-name]], [[class-precedence-list]], [[class-direct-supers]],\n[[class-direct-slots]], [[class-slots]],\n\n[[<slot-accessor>]], [[class-slot-definition]],\n[[class-slot-accessor]], [[slot-definition-name]], \n[[slot-definition-allocation]], [[slot-definition-getter]]\n[[slot-defininion-setter]], [[slot-definition-accessor]],\n[[slot-definition-options]], [[slot-definition-option]],\n\n[[compute-slots]], [[compute-get-n-set]], \n[[slot-ref-using-accessor]], [[slot-set-using-accessor]], \n\n[[apply-generic]], [[sort-applicable-methods]],\n[[method-more-specific?]], [[apply-methods]], \n[[apply-method]],\n\n* Library modules\n** DBM interface\n[[dbm]], [[<dbm>]], [[<dbm-meta>]], [[dbm-open]], [[dbm-close]],\n[[dbm-closed?]], [[dbm-put!]], [[dbm-get]], [[dbm-exists?]], [[dbm-delete!]]\n[[dbm-fold]], [[dbm-for-each]], [[dbm-map]], [[dbm.gdbm]], [[<gdbm>]],\n[[gdbm-close]], [[gdbm-closed?]], [[gdbm-store]], [[gdbm-fetch]],\n[[gdbm-delete]], [[gdbm-firstkey]], [[gdbm-nextkey]], [[gdbm-reorganize]],\n[[gdbm-symc]], [[gdbm-exists]], [[gdbm-strerror]], [[gdbm-setopt]],\n[[gdbm-version]], [[gdbm-errno]], [[dbm.ndbm]], [[<ndbm>]],\n[[ndbm-open]], [[ndbm-close]], [[ndbm-closed?]], [[ndbm-store]],\n[[ndbm-fetch]], [[ndbm-delete]], [[ndbm-firstkey]], \n[[ndbm-nextkey]], [[ndbm-error]], [[ndbm-clear-error]],\n[[dbm.odbm]], [[<odbm>]], [[odbm-init]], [[odbm-close]],\n[[odbm-store]], [[odbm-fetch]], [[odbm-delete]], [[odbm-firstkey]],\n[[odbm-nextkey]],\n\n** Filtering file content\n[[file.filter]], [[file-filter]]\n\n** Filesystem utility\n[[file.util]], [[current-directory]], [[directory-list]],\n[[directory-list2]], [[directory-fold]],\n[[make-directory*]], [[create-directory*]],\n[[remove-directory*]], [[delete-directory*]],\n[[build-path]], [[absolute-path?]], [[relative-path?]],\n[[expand-path]], [[resolve-path]], [[simplify-path]],\n[[file-type]], [[file-perm]], [[file-mode]], [[file-ino]],\n[[file-dev]], [[file-rdev]], [[file-nlink]], [[file-uid]],\n[[file-gid]], [[file-size]], [[file-atime]], [[file-mtime]],\n[[file-ctime]], [[file-is-readable?]], [[file-is-writable?]],\n[[file-is-executable?]], [[file-eq?]], [[file-eqv?]],\n[[file-equal?]], [[file-mtime=?]], [[file-mtime<?]],\n[[file-mtime<=?]], [[file-mtime>?]], [[file-mtime>=?]],\n[[file-atime=?]], [[file-atime<?]], [[file-atime<=?]],\n[[file-atime>?]], [[file-atime>=?]], [[file-ctime=?]],\n[[file-ctime<?]], [[file-ctime<=?]], [[file-ctime>?]],\n[[file-ctime>=?]], \n\n** Character code conversion\n[[gauche.charconv]], [[ces-conversion-supported?]],\n[[open-input-conversion-port]], [[open-output-conversion-port]],\n[[ces-convert]], [[ces-guess-from-string]],\n\n** Collection & sequence framework\n[[gauche.collection]], [[fold]], [[map]], [[map-to]],\n[[for-each]], [[find]], [[filter]], [[filter-to]], [[remove]], [[remove-to]],\n[[partition]], [[partition-to]],\n[[size-of]], [[lazy-size-of]], [[coerce-to]],\n[[call-with-iterator]], [[with-iterator]], \n[[call-with-iterators]], [[call-with-builder]],\n[[with-builder]],\n[[gauche.sequence]], [[ref]], [[referencer]], [[modifier]], [[subseq]]\n\n** Low-level file operations\n[[gauche.fcntl]], [[sys-fcntl]], [[<sys-flock>]],\n\n** Interactive session\n[[gauche.interactive]], [[apropos]], [[describe]], [[d]]\n\n** User-level logging\n[[gauche.logger]], [[<log-drain>]], [[log-open]], [[log-format]]\n\n** Networking\n[[gauche.net]], [[<sockaddr>]], [[sockaddr-family]],\n[[sockaddr-name]], [[<sockaddr-in>]], [[<sockaddr-un>]],\n[[<socket>]], [[make-client-socket]], [[make-server-socket]],\n[[socket-address]], [[socket-input-port]], [[socket-output-port]],\n[[socket-close]], [[call-with-client-socket]],\n[[make-socket]], [[socket-fd]], [[socket-status]], [[socket-bind]],\n[[socket-listen]], [[socket-accept]], [[socket-connect]],\n[[socket-shutdown]], [[socket-setsockopt]], [[socket-getsockopt]],\n[[<sys-hostent>]], [[sys-gethostbyname]], [[sys-gethostbyaddr]],\n[[<sys-servent>]], [[sys-getservbyname]], [[sys-getservbyport]],\n[[<sys-protoent>]], [[sys-getprotobyname]], [[sys-getprotobynumber]],\n\n** Parsing command-line options\n[[gauche.parseopt]], [[parse-options]], [[make-option-parser]]\n\n** High Level Process Interface\n[[gauche.process]], [[<process>]], [[run-process]],\n[[process?]], [[process-pid]], [[process-command]],\n[[process-input]], [[process-output]], [[process-error]],\n[[process-alive?]], [[process-list]], [[process-wait]],\n[[process-send-signal]], [[process-kill]], [[process-stop]],\n[[process-continue]], [[open-input-process-port]]\n[[call-with-input-process]], [[with-input-from-process]],\n[[open-output-process-port]], [[call-with-output-process]],\n[[with-output-to-process]], [[call-with-process-io]],\n[[process-output->string]], [[process-output->string-list]]\n\n** Simple dispatcher\n[[gauche.selector]], [[<selector>]], [[selector-add!]],\n[[selector-delete!]], [[selector-select]]\n\n** Singleton\n[[gauche.singleton]], [[<singleton-meta>]], [[instance-of]]\n\n** Termios\n[[gauche.termios]], [[<sys-termios>]],\n[[sys-tcgetattr]], [[sys-tcsetattr]], [[sys-tcsendbreak]],\n[[sys-tcdrain]], [[sys-tcflush]], [[sys-tcflow]],\n[[sys-tcgetpgrp]], [[sys-tcsetpgrp]], [[sys-cfgetispeed]],\n[[sys-cfsetispeed]], [[sys-cfgetospeed]], [[sys-cfsetospeed]],\n\n** Unit Testing\n[[gauche.test]], [[test]], [[test-start]], [[test-section]], [[test-end]],\n\n** Slot with validator\n[[gauche.validator]], [[<validator-meta>]]\n\n** Comparing version numbers\n[[gauche.version]], [[version=?]], [[version<?]], [[version<=?]],\n[[version>?]], [[version>=?]], [[version-compare]],\n[[relnum-compare]],\n\n** RFC822 Message parsing\n[[rfc.822]], [[rfc822-header->list]], [[rfc822-parse-date]],\n\n** Base64 encoding/decoding\n[[rfc.base64]], [[base64-encode]], [[base64-encode-string]],\n[[base64-decode]], [[base64-decode-string]],\n\n** HTTP cookie handling\n[[rfc.cookie]], [[parse-cookie-string]], [[construct-cookie-string]],\n\n** URI parsing and construction\n[[rfc.uri]], [[uri-scheme&specific]], [[uri-decompose-hierarchical]],\n[[uri-decompose-authority]], [[uri-decode]], [[uri-decode-string]],\n[[uri-encode]], [[uri-encode-string]]\n\n** Srfi-4\n[[s8vector-copy!]], [[s16vector-copy!]],\n[[s32vector-copy!]], [[s64vector-copy!]], \n[[u8vector-copy!]], [[u16vector-copy!]],\n[[u32vector-copy!]], [[u64vector-copy!]], \n[[f32vector-copy!]], [[f64vector-copy!]], \n[[s8vector->vector]], [[s16vector->vector]],\n[[s32vector->vector]], [[s64vector->vector]], \n[[u8vector->vector]], [[u16vector->vector]],\n[[u32vector->vector]], [[u64vector->vector]], \n[[f32vector->vector]], [[f64vector->vector]], \n[[vector->s8vector]], [[vector->s16vector]],\n[[vector->s32vector]], [[vector->s64vector]], \n[[vector->u8vector]], [[vector->u16vector]],\n[[vector->u32vector]], [[vector->u64vector]], \n[[vector->f32vector]], [[vector->f64vector]], \n\n** CSV tables\n[[text.csv]], [[make-csv-reader]], [[make-csv-writer]]\n\n** Simple HTML document construction\n[[text.html-lite]], [[html-escape]], [[html-escape-string]],\n[[html-doctype]],\n\n** Parsing input stream\n[[text.parse]], [[find-string-from-port?]],\n[[peek-next-char]], [[assert-curr-char]],\n[[skip-until]], [[skip-while]], [[next-token]], [[next-token-of]],\n[[read-string]]\n\n** Transliterate characters\n[[text.tr]], [[tr]], [[string-tr]], [[build-transliterator]]\n\n** Lazy text construction\n[[text.tree]], [[write-tree]], [[tree->string]]\n\n** Isomorphism\n[[util.isomorph]], [[isomorphic?]], [[object-isomorphic?]]\n\n** Queue\n[[util.queue]], [[make-queue]], [[queue?]], [[queue-empty?]],\n[[enqueue!]], [[queue-push!]], [[dequeue!]], [[queue-pop!]],\n[[dequeue-all!]], [[queue-front]], [[queue-rear]]\n\n** Topological sort\n[[util.toposort]], [[topological-sort]], \n\n** CGI Utility\n[[www.cgi]], [[cgi-parse-parameters]], [[cgi-get-parameter]]\n[[cgi-header]], [[cgi-main]], \n\n** List Utility\n[[util.list]], [[take*]], [[drop*]],\n[[take-right*]], [[drop-right*]], [[split-at*]],\n[[slices]], [[intersperse]], [[cond-list]],\n[[alist->hash-table]], [[hash-table->alist]],\n[[rassoc]], [[rassq]], [[rassv]],\n[[assoc-ref]], [[assq-ref]], [[assv-ref]],\n[[rassoc-ref]], [[rassq-ref]], [[rassv-ref]],\n[[assoc-set!]], [[assq-set!]], [[assv-set!]]\n\n** Pattern Matching Library\n[[match]], [[match-lambda]], [[match-lambda*]],\n[[match-let]], [[match-let*]], [[match-letrec]], [[match-let1]],\n[[match-define]]\n")
("serialize" . "(:ctime 1015274371 :cuser #f :mtime 1015274371 :muser #f)* [procedure] serialize ''object''\n\n[[Chicken]]: serialize object into an u32vector.  See also [[deserialize]].\n")
("SRFI-127" . "(:ctime 1474475580 :cuser #f :mtime 1474475580 :muser #f)SRFI-127:  Lazy Sequences \n\nhttp://srfi.schemers.org/srfi-127/srfi-127.html\n\n[[$$srfi-implementors]]\n")
("define-record-discloser" . "(:ctime 1017982177 :cuser #f :mtime 1017983026 :muser #f)* [procedure] define-record-discloser ''type'' ''discloser''\n\n[[Scheme48]]: defines printer method of the record type\n''type''.   See [[define-record-type]],\n[[define-record-resumer]].\n\nSCM has [[record-printer-set!]] which is similar to this.\n")
("test-apply" . "(:ctime 1151049296 :cuser #f :mtime 1151078891 :muser #f)* [syntax] test-apply [''runner''] ''specifier'' ... ''thunk''\n\n[[SRFI-64]]: calls ''thunk'' using ''runner'' as the current test runner.\nIf runner is not specified, (test-runner-current) is used. (If there is no current test runner,\none is newly created as in [[test-begin]].) If one or more ''specifier'' are supplied,\nonly tests matching any of ''specifier'' (and not matching current [[test-skip]] specifiers) are executed.\n")
("define-syntax" . "(:ctime 1014847460 :cuser #f :mtime 1191208813 :muser #f)* [syntax] define-syntax ''keyword'' ''transformer-spec''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[let-syntax]], [[letrec-syntax]].\n")
("fxnot" . "(:ctime 1191224702 :cuser #f :mtime 1191224702 :muser #f)* [procedure] fxnot ''fixnum''\n\n[[R6RS]], [[Chicken]]: bitwise not of a fixnum.  See [[fixnum?]] for other \nfixnum operations.  See also [[fxand]], [[fxior]] and [[fxxor]].\n\nIn ChezScheme, this operation is [[fxlognot]].\n")
("close-port" . "(:ctime 1014955978 :cuser #f :mtime 1099726530 :muser #f)* [procedure] close-port ''port''\n\n[[ChezScheme]], [[SCM]], [[STk]], [[STklos]]: close a port.\n\nSee also [[close-input-port]], [[close-output-port]]\n\nSCM's close-port works on the curses window as well.  see [[initscr]].\n")
("signal-queue-monitored-signals" . "(:ctime 1020374828 :cuser #f :mtime 1020374828 :muser #f)* [procedure] signal-queue-monitored-signals ''signal-queue''\n\n[[Scheme48]]: returns a list of signals monitored by\nthe ''signal-queue''.   See [[make-signal-queue]].\n")
("fasl-write" . "(:ctime 1014961733 :cuser #f :mtime 1014961733 :muser #f)* [procedure] fasl-write ''obj'' [''output-port'']\n\n[[ChezScheme]]: writes fasl representation of object ''obj''.\nChez uses [[#@]] prefix for fasl representation.\n\nSee also [[fasl-file]]\n")
("int->0..255" . "(:ctime 1045088975 :cuser #f :mtime 1045088975 :muser #f)[[$$include string->0..255]]\n")
("#\\u" . "(:ctime 1039510226 :cuser #f :mtime 1292548124 :muser #f)* [reader syntax] #\\u''XXXX''\n\n[[SISC]], [[Gauche]]: denotes a character whose \ncodepoint in Unicode is ''XXXX'', represented in\nhexadecimal integer.\n\nSISC covers UCS2.  Gauche covers more.\n\nRelated: Bigloo has separated type for UCS2 character.\nSee [[ucs2?]].\n\n[[R6RS]] defines #\\x''XXXX'' for unicode character U+''XXXX''.\n(The number of digits doesn't need to be 4).  See [[#\\x]].\n\n")
("integer->ucs2" . "(:ctime 1039429776 :cuser #f :mtime 1039429776 :muser #f)[[$$include ucs2->integer]]\n")
("test-runner-aux-value!" . "(:ctime 1151136447 :cuser #f :mtime 1151146617 :muser #f)[[$$include test-runner-aux-value]]\n")
("condition?" . "(:ctime 1099263310 :cuser #f :mtime 1099263311 :muser #f)* [procedure] condition? ''obj''\n\n[SRFI-35]: Returns true if ''obj'' is a condition object.\nSee also [[make-condition]], [[condition]].\n")
("group-id?" . "(:ctime 1018124388 :cuser #f :mtime 1018124388 :muser #f)* [procedure] group-id? ''x''\n* [procedure] group-id=? ''group-id0'' ''group-id1''\n* [procedure] group-id->integer ''group-id''\n* [procedure] integer->group-id ''integer''\n\n[[Scheme48]]: operates on group-id type.\nSee [[Concept:UserGroup]], [[group-id->group-info]].\n")
("static" . "(:ctime 1152518355 :cuser #f :mtime 1152534114 :muser #f)* [magic form] static ''identifier''\n[[RRS]]: returns the value of the lexical identifier ''identifier''. This is the same as writing just ''identifier''.\n")
("sys-chdir" . "(:ctime 1018339764 :cuser #f :mtime 1018339764 :muser #f)* [procedure] sys-chdir ''dir''\n\n[[Gauche]]: chdir.  See also [[Concept:FileSystem]].\n\nThis is called [[chdir]] or [[change-directory]]\nin some implementations.\n")
("engine-return" . "(:ctime 1014941838 :cuser #f :mtime 1014941838 :muser #f)* [procedure] engine-return ''obj'' ...\n\n[[ChezScheme]]: stop the running engine.\n\nSee also [[make-engine]], [[engine-block]].\n")
("create-symlink" . "(:ctime 1018345922 :cuser #f :mtime 1018345922 :muser #f)* [procedure] create-symlink ''oldname'' ''newname'' [''override?'']\n\n[[Scsh]]: creates a symbolic link.\nSee also [[Concept:FileSystem]].\n\nThis is called [[create-symbolic-link]] or\n[[sys-symlink]] in some implementations.\n")
("enable-interrupts" . "(:ctime 1014964758 :cuser #f :mtime 1015052240 :muser #f)* [procedure] enable-interrupts\n\n[[ChezScheme]], [[Chicken]]\n\nSee also [[disable-interrupts]], [[critical-section]],\n[[keyboard-interrupt-handler]], [[timer-interrupt-handler]]\n")
("dotimes" . "(:ctime 1015772217 :cuser #f :mtime 1099722667 :muser #f)* [syntax] dotimes (''variable'' ''limit'' [''result'']) ''body''\n\n[[STk]], [[STklos]], [[Gauche]]: CommonLisp's dotimes.  See also [[do]].\n")
("substring-spec-ok?" . "(:ctime 1014895256 :cuser #f :mtime 1014895256 :muser #f)* [procedure] substring-spec-ok? ''s'' ''start'' ''end''\n\n[[SRFI-13]]\n\nSee also [[check-substring-spec]]\n")
("integer-sqrt" . "(:ctime 1170264990 :cuser #f :mtime 1170267962 :muser #f)* integer-sqrt ''n''\n\n[[SRFI-94]]: For non-negative integer ''n'' returns the largest integer whose square is less than or equal to ''n''; otherwise signals an error.\n")
("boolean?" . "(:ctime 1014838687 :cuser #f :mtime 1191313888 :muser #f)* [procedure] boolean? ''obj''\n\n[[R5RS]], [[R6RS]]\n")
("command-line-arguments" . "(:ctime 1015047726 :cuser #f :mtime 1038277488 :muser #f)* [procedure] command-line-arguments [''newval'']\n\n[[Chicken]]: gets/sets the list of arguments passed to the script, \nwith the script name removed.\n\nSome implementations provide a global variable [[*argv*]] to access\ncommand-line arguments.\n\nThe portable way (in future) will be to use [[SRFI-22]] interface.  See [[main]].\n\n* [variable] command-line-arguments\n\n[[Scsh]]: keeps a list of strings of command-line arguments.\nThe procedure version in Scsh is [[command-line]].\n")
("with-module" . "(:ctime 1015303094 :cuser #f :mtime 1015303094 :muser #f)* [syntax] with-module ''module'' ''exp'' ...\n\n[[STk]], [[Gauche]]: evaluates ''exp'' ... in the module ''module''.\n\nSee also [[define-module]], [[select-module]].\n")
("receive" . "(:ctime 1014882600 :cuser #f :mtime 1014882799 :muser #f)* [syntax] receive ''formals'' ''expression'' ''body''\n\n[[SRFI-8]]: \n\n (define-syntax receive\n   (syntax-rules ()\n     ((receive formals expression body ...)\n      (call-with-values (lambda () expression)\n                        (lambda formals body ...)))))\n \n\nSee also [[call-with-values]], [[let-values]], [[let*-values]].\n\n")
("open/excl" . "(:ctime 1015106371 :cuser #f :mtime 1015106371 :muser #f)[[$$include open/rdonly]]\n")
("fx>" . "(:ctime 1014950665 :cuser #f :mtime 1015067650 :muser #f)[[$$include fx=]]\n\n")
("LispMe" . "(:ctime 1152212220 :cuser #f :mtime 1170799809 :muser #f)LispMe is an [[R4RS]] Scheme compiler and runtime system running on PalmOS. It is mainly intended as a tool for quickly trying ideas and algorithms, but you can write dialog-based applications, too.\n\nhttp://www.lispme.de/lispme/index.html\n----\n\nThe following is very incomplete:\n\n* Syntax\n\n[[macro]], [[macro?]], [[gensym]]\n\n[[while]]\n\n* Operators\n\n[[cxr]] supports up to 12 x's\n\n[[circular?]], [[rassoc]], [[rassq]], [[rassv]]\n\n[[string->object]], [[string-lower]], [[string-tokenize]]\n\n* Numbers\n\n[[acosh]], [[asinh]], [[atanh]], [[cosh]]\n\n[[random]]\n\n* Bit Manipulation\n\n[[bit-and]], [[bit-not]], [[bit-or]], [[bit-shift]], [[bit-xor]]\n\n* I/O\n\n[[open-input-string]]\n\n* Eval and environments\n\n[[eval]]\n\n* PalmOS Specific\n\n- Palm database access\n\n[[*resdb*]], [[dbref?]], [[dm-archive-rec]], [[dm-close-db]], [[dm-create-db]], [[dm-db-info]], [[dm-db-size]], [[dm-db-list]], [[dm-delete-db]], [[dm-delete-rec]], [[dm-get-rec-attr]], [[dm-insert-rec]], [[dm-insert-rsrc]], \t[[dm-num-recs]], [[dm-open-db]], [[dm-read-rec]], [[dm-read-rsrc]], [[dm-remove-rec]], [[dm-remove-rsrc]], [[dm-rsrc-db?]], [[dm-set-rec-attr]], [[dm-update-rec]], [[dm-update-rsrc]]\n\n- Graphics\n\n[[*gstate*]], [[bitmap]], [[draw]], [[index->rgb]], [[move]], [[rect]], [[rgb->index]], [[set-palette]], [[text]]\n\n- User interface support\n\n[[ctl-enter]], [[ctl-get-label]], [[ctl-get-val]], [[ctl-hit]], [[ctl-repeat]], [[ctl-select]], [[ctl-set-label]], [[ctl-set-val]], [[error]], [[event]], [[fld-changed]], [[fld-copy]], [[fld-cut]], [[fld-dirty?]], [[fld-enter]], [[fld-get-scroll]], [[fld-get-text]], [[fld-paste]], [[fld-scroll]], [[fld-set-dirty]], [[fld-set-text]], [[fld-undo]], [[frm-alert]], [[frm-close]], [[frm-get-focus]], [[frm-get-prop]], [[frm-goto]], [[frm-help]], [[frm-open]], [[frm-popup]], [[frm-return]], [[frm-set-focus]], [[frm-show]], [[frm-title-enter]], [[frm-title-select]], [[frm-update]], [[key-down \tlst-enter]], [[lst-get-sel]], [[lst-get-text]], [[lst-select]], [[lst-set-list]], [[lst-set-sel]], [[menu]], [[message]], [[own-gui]], [[pen-down]], [[pen-move]], [[pen-up]], [[pop-select]], [[scl-enter]], [[scl-exit]], [[scl-get-val]], [[scl-repeat]], [[scl-set-val]], [[timeout]], [[wait-pen]]\n\n- HanDBase interface\n\n[[hb-addrecord]], [[hb-dir]], [[hb-info]], [[hb-getfield]], [[hb-getlinks]], [[hb-setfield]], [[hb-version]]\n\n- Date and Time\n\n[[current-ticks]], [[current-ts]], [[date+]], [[date-day]], [[date-diff]], [[date-month]], [[date-time]], [[date-year]], [[date?]], [[day-of-week]], [[make-date]], [[make-time]], [[make-ts]], [[set-ticks]], [[ticks-per-sec]], [[ticks-since]], [[ticks?]], [[time-hour]], [[time-minute]], [[time?]], [[ts->date]], [[ts->number]], [[ts->time]], [[ts-second]], [[ts?]]\n\n- Serial port\n\n[[close-serial]], [[new-serial?]], [[open-serial]], [[serial-get-cts]], [[serial-get-timeout]], [[serial-info]], [[serial-input]], [[serial-output]], [[serial-receive-flush]], [[serial-send-flush]], [[serial-set-break!]], [[serial-set-cts!]], [[serial-set-irda!]], [[serial-set-rx!]], [[serial-set-timeout!]], [[serial-status]], [[serial?]]\n\n- Sockets\n\n[[close-netlib]], [[lookup-host]], [[make-client-socket]], [[socket-down?]], [[socket-host-address]], [[socket-hostname]], [[socket-input]], [[socket-local-address]], [[socket-output]], [[socket-port-number]], [[socket-shutdown]], [[socket?]]\n\n- Virtual file system\n\n[[vfs-close]], [[vfs-create-dir]], [[vfs-delete]], [[vfs-dir]], [[vfs-eof?]], [[vfs-get-attr]], [[vfs-get-ts]], [[vfs-open]], [[vfs-open-input]], [[vfs-open-output]], [[vfs-read]], [[vfs-ref?]], [[vfs-rename]], [[vfs-seek]], [[vfs-set-attr]], [[vfs-set-ts]], [[vfs-size]], [[vfs-supported?]], [[vfs-tell]], [[vfs-vol-get-label]], [[vfs-vol-info]], [[vfs-vol-set-label]], [[vfs-vol-size]], [[vfs-volumes]], [[vfs-write]]\n\n- C datatypes\n\n[[buf-get-cstr]], [[buf-get-date]], [[buf-get-f32]], [[buf-get-f64]], [[buf-get-s16]], [[buf-get-s32]], [[buf-get-s8]], [[buf-get-time]], [[buf-get-ts]], [[buf-get-u16]], [[buf-get-u32]], [[buf-get-u8]], [[buf-set-cstr!]], [[buf-set-date!]], [[buf-set-f32!]], [[buf-set-f64!]], [[buf-set-s16!]], [[buf-set-s32!]], [[buf-set-s8!]], [[buf-set-time!]], [[buf-set-ts!]], [[buf-set-u16!]], [[buf-set-u32!]], [[buf-set-u8!]]\n\n- Miscellaneous Palm API\n\n[[battery-info]], [[crash]], [[get-clipboard-text]], [[get-sys-pref]], [[hotsync-info]], [[launch]], [[rom-version]], [[serial-number]], [[set-clipboard-text]], [[set-sys-pref]]\n\n* [[R4RS]] Extended operators\n\n[[max]], [[min]] support strings and chars\n\n* [[R4RS]] Omissions, Restrictions and Incompatabilities\n\nContinuations implemented with [[call/cc]]. [[call-with-current-continuation]] is omitted.\n\n[[cond]] expression sequences in each clause must not be empty.\n\n[[define]] does not allow undefined variables.\n\n[[make-string]], [[make-vector]] both require 2 arguments.\n\n[[map]] in standard library takes 2 arguments only. (Custom definition of map is possible.)\n\n[[read]], [[read-char]] Require 1 argument.\n\n[[string->symbol]], [[string->number]] not implemented. Use [[string->object]].\n\n[[substring]] has different error conditions\n")
("rationalize" . "(:ctime 1014857137 :cuser #f :mtime 1191219752 :muser #f)* [procedure] rationalize ''x'' ''y''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[numerator]], [[denominator]].\n\n* [procedure] rationalize ''x''\n\n[[RRRS]], [[R3RS]]: produces the best rational approximation to ''x'', preserving all of the precision in its representation.\n")
("with-current-input-port" . "(:ctime 1018381872 :cuser #f :mtime 1018381872 :muser #f)* [syntax] with-current-input-port ''port'' . ''body''\n* [syntax] with-current-output-port ''port'' . ''body''\n* [syntax] with-error-output-port ''port'' . ''body''\n\n[[Scsh]]: syntax version of \n[[with-current-input-port*]], \n[[with-current-output-port*]], and\n[[with-error-output-port*]], respectively.\n")
("time-monotonic->time-tai!" . "(:ctime 1099301293 :cuser #f :mtime 1099301293 :muser #f)[[$$include time-monotonic->date]]\n")
("ratnum?" . "(:ctime 1014954396 :cuser #f :mtime 1014954396 :muser #f)* [procedure] ratnum? ''obj''\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[flonum?]], [[bignum?]], [[cflonum?]]\n")
("a:fixz32b" . "(:ctime 1144485145 :cuser #f :mtime 1144529286 :muser #f)* [procedure] a:fixz32b [''n'']\n[[SRFI-63]]: Returns an exact binary fixnum uniform-array prototype with at least 32 bits of precision.\n")
("port-current-line" . "(:ctime 1015916016 :cuser #f :mtime 1151857797 :muser #f)* [procedure] port-current-line ''port''\n\n[[Gauche]]\n\nSome implementations have [[port-line]] or [[current-row]].\n\n* [procedure] port-current-line [''port'']\n\n[[STklos]]: ''port'' argument is optional.\n\nSTklos also has [[port-current-position]].\n")
("cosh" . "(:ctime 1014955581 :cuser #f :mtime 1015237219 :muser #f)[[$$include sinh]]\n\n")
("set-current-error-port" . "(:ctime 1036928077 :cuser #f :mtime 1036928077 :muser #f)[[$$include set-current-input-port]]\n")
("date-and-time" . "(:ctime 1015030026 :cuser #f :mtime 1015201506 :muser #f)* [procedure] date-and-time\n\n[[ChezScheme]]: returns a string giving the current date and time.\n\nOn other Schemes that implement POSIX time functions,\nthis function can be created by time() and ctime(), asctime() or strftime().\n\n  Gauche:\n    (sys-ctime (sys-time))\n\n  STk:\n    (require \"posix\")\n    (posix-ctime (posix-time))\n\n  Chicken:\n    (seconds->string (current-seconds))\n\nSee also [[sys-time]], [[posix-time]], [[current-seconds]].\n\n\n")
("queue-empty?" . "(:ctime 1015072273 :cuser #f :mtime 1017980741 :muser #f)* [procedure] queue-empty? ''queue''\n\n[[Chicken]], [[SLIB]], [[Gauche]], [[Scheme48]]\n\nSee [[make-queue]]\n")
("SRFI-74" . "(:ctime 1144197855 :cuser #f :mtime 1145787691 :muser #f)SRFI 74: Octet-Addressed Binary Blocks\n\nhttp://srfi.schemers.org/srfi-74/srfi-74.html\n\n[[$$srfi-implementors]]\n----\n\n[[endianness]]\n\n[[blob?]],\n[[make-blob]]\n\n[[blob-length]]\n\n[[blob-u8-ref]],\n[[blob-s8-ref]],\n[[blob-u8-set!]],\n[[blob-s8-set!]]\n\n[[blob-uint-ref]],\n[[blob-sint-ref]],\n[[blob-uint-set!]],\n[[blob-sint-set!]]\n\n[[blob-u16-ref]],\n[[blob-s16-ref]],\n[[blob-u16-native-ref]],\n[[blob-s16-native-ref]],\n[[blob-u16-set!]],\n[[blob-s16-set!]],\n[[blob-u16-native-set!]],\n[[blob-s16-native-set!]]\n\n[[blob-u32-ref]],\n[[blob-s32-ref]],\n[[blob-u32-native-ref]],\n[[blob-s32-native-ref]],\n[[blob-u32-set!]],\n[[blob-s32-set!]],\n[[blob-u32-native-set!]],\n[[blob-s32-native-set!]]\n\n[[blob-u64-ref]],\n[[blob-s64-ref]],\n[[blob-u64-native-ref]],\n[[blob-s64-native-ref]],\n[[blob-u64-set!]],\n[[blob-s64-set!]],\n[[blob-u64-native-set!]],\n[[blob-s64-native-set!]]\n\n[[blob=?]]\n\n[[blob-copy!]],\n[[blob-copy]]\n\n[[blob->u8-list]],\n[[u8-list->blob]],\n[[blob->uint-list]],\n[[blob->sint-list]],\n[[uint-list->blob]],\n[[sint-list->blob]]\n")
("quote" . "(:ctime 1014858127 :cuser #f :mtime 1191205141 :muser #f)* [syntax] quote ''datum''\n\n[[R5RS]], [[R6RS]]: (quote ''datum'') evaluates to ''datum''.\n''Datum'' may be any external representation of a Scheme object\nThis notation is used to include literal constants in Scheme code.\n\nSee also [[quasiquote]].\n")
("process-stop" . "(:ctime 1018342645 :cuser #f :mtime 1018342645 :muser #f)[[$$include process-kill]]\n")
("make-blob" . "(:ctime 1144700986 :cuser #f :mtime 1144709993 :muser #f)* [procedure] make-blob ''k''\n\n[[SRFI-74]]: Returns a newly allocated blob of ''k'' octets, all of them 0.\n")
("display-statistics" . "(:ctime 1015027722 :cuser #f :mtime 1015027722 :muser #f)* [procedure] display-statistics [''output-port'']\n\n[[ChezScheme]]\n\nSee also [[statistics]], [[cpu-time]], [[real-time]], [[bytes-allocated]]\n")
("home-directory" . "(:ctime 1023888767 :cuser #f :mtime 1038190264 :muser #f)* [variable] home-directory\n\n[[Scsh]]: bound to a home directory of the effective\nuser of the running process.  It is set at the startup\nof the script.\n\n* [procedure] home-directory [''user'']\n\n[[Gauche]]: in file.util module.  Returns the home\ndirectory of ''user'' (default is the current user).\n")
("char-symbolic?" . "(:ctime 1403317784 :cuser #f :mtime 1403317784 :muser #f)char-symbolic?\n")
("`" . "(:ctime 1191205189 :cuser #f :mtime 1191205190 :muser #f)* [reader syntax] ` ''datum''\n\n[[R5RS]], [[R6RS]]: Abbreviation of ([[quasiquote]] ''datum'')\n\nSee also [[']], [[,]], [[,@]], [[#`]]\n")
("make-parameter" . "(:ctime 1015029521 :cuser #f :mtime 1370466300 :muser #f)* [procedure] make-parameter ''object'' [''procedure'']\n\n[[SRFI-39]],\n[[ChezScheme]], [[Chicken]], [[STklos]], [[MzScheme]], [[Gauche]]:\ncreates a ''parameter'' with initial value \n''object'', and optionally, a filter procedure ''procedure''.\n\n''Parameters'' are the procedure that takes zero\nor one argument; if no argument is given, it returns its current\nvalue; if one argument is given, the argument is set as the current\nvalue.  Some implementations use pararmeters to keep global state.\n\nIn MzScheme, parameter values are thread-local.\n\nSee also [[parameterize]], [[parameter?]], \n[[parameter-procedure=?]].\n\nGuile has ''fluids'', which is conceptually similar\nto parameters.  See [[make-fluid]].\n")
("stream-null" . "(:ctime 1099279631 :cuser #f :mtime 1099279631 :muser #f)* [constant] stream-null\n\n[[SRFI-40]]: a sigleton of a stream used to mark the end of the stream.\nSee [[stream-null?]], [[stream]].\n")
("remove-directory" . "(:ctime 1018128187 :cuser #f :mtime 1018128187 :muser #f)* [procedure] remove-directory ''name''\n\n[[Scheme48]]: remove directory.  See also \n[[make-directory]], [[Concept:FileSystem]].\n\nThis is called [[delete-directory]] or\n[[sys-rmdir]] in some implementations.\n")
("string-filter" . "(:ctime 1014895100 :cuser #f :mtime 1018389828 :muser #f)* [procedure] string-filter ''s'' ''char/char-set/pred'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-delete]]\n\n* [procedure] string-filter ''pred'' ''string''\n\n[[Chicken]] has the different interface.\n\n* [procedure] string-filter ''filter'' [''buflen'']\n\n[[Scsh]]: Given string -> string procedure ''filter'',\nthis returns a procedure that, when called,\nreads string from the current input port, applies\n''filter'' on it and writes the result to the current\noutput port.  See also [[char-filter]].\n")
("file-or-directory-permissions" . "(:ctime 1020222500 :cuser #f :mtime 1020222500 :muser #f)* [procedure] file-or-directory-permissions ''path''\n\n[[MzScheme]]: returns the file or directory's permission\nby a list containing 'read 'write and/or 'execute.\nSee also [[Concept:FileSystem]]\n")
("key-delete!" . "(:ctime 1099388167 :cuser #f :mtime 1099388167 :muser #f)[[$$include key-delete]]\n")
("print-graph" . "(:ctime 1014960306 :cuser #f :mtime 1014960306 :muser #f)* [procedure] print-graph [''newval'']\n\n[[ChezScheme]]: a parameter for [[write]] and [[pretty-print]]\nto control printing circular structure and/or shared common structure\nin #n# form.\n\n")
("even?" . "(:ctime 1014847918 :cuser #f :mtime 1191216309 :muser #f)* [procedure] even? ''n''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[odd?]].\n")
("export-all-symbols" . "(:ctime 1018336025 :cuser #f :mtime 1018336025 :muser #f)* [procedure] export-all-symbols\n\n[[STk]]: exports all the symbols of the current module.\n\nSome implementations call this [[export-all]].\n")
("die" . "(:ctime 1099776333 :cuser #f :mtime 1099776333 :muser #f)* [procedure] die ''message'' [''status'']\n\n[[STklos]]: display message and exits.  See also [[exit]].\n")
("fxpositive?" . "(:ctime 1014951107 :cuser #f :mtime 1191226011 :muser #f)* [procedure] fxpositive? ''fixnum''\n* [procedure] fxnegative? ''fixnum''\n\n[[R6RS]], [[ChezScheme]]\n\nSee also [[fixnum?]], [[positive?]]\n")
("break" . "(:ctime 1014870103 :cuser #f :mtime 1015070060 :muser #f)* [procedure] break ''pred'' ''clist''\n\n[[SRFI-1]]: splits the list into the longest initial prefix whose\nelements all dissatisfy ''pred'', and the remaining tail.\n\nSee also [[span]], [[break!]].\n\n* [procedure] break [''symbol'' [''string'' ''object'' ...]]\n\n[[ChezScheme]]'s [[break]] is completely different from [[SRFI-1]]'s.\nIt is used to suspend execution of program and invokes the debugger.\n\nSee [[break-handler]]\n\n* [procedure] break [''message'']\n\n[[Chicken]]: enters the debugger.\n\n")
("current-directory" . "(:ctime 1014961856 :cuser #f :mtime 1020581288 :muser #f)* [procedure] current-directory [''newval'']\n\n[[ChezScheme]], [[MzScheme]], [[Gauche]]: gets/sets the current working directory.\nSee [[Concept:FileSystem]].\n\n* [procedure] current-directory\n\n[[Chicken]]: gets the current working directory.  Use [[change-directory]]\nto change it.  \nSee [[Concept:FileSystem]].\n\nThis is called [[sys-getcwd]] in Gauche.\n\n")
("thread-sleep!" . "(:ctime 1015927394 :cuser #f :mtime 1015928265 :muser #f)* [procedure] thread-sleep! ''timeout''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("Schoca" . "(:ctime 1173770840 :cuser #f :mtime 1173779475 :muser #f)Schoca is an implementation of the Scheme language. The primary purpose of Schoca is the use as an embedded extension language in OCaml applications (e.g. the ibgsclient).\n\nhttp://home.arcor.de/chr_bauer/schoca.html\n")
("rem" . "(:ctime 1170264990 :cuser #f :mtime 1170268964 :muser #f)* rem ''x1'' ''x2''\n\n[[SRFI-94]]:\n{{{\n(define (rem x1 x2) (- x1 (* x2 (quo x1 x2))))\n}}}\n\nSee also [[quo]], [[mod]].\n")
("cfl-magnitude-squared" . "(:ctime 1014954147 :cuser #f :mtime 1014954147 :muser #f)* [procedure] cfl-magnitude-squared ''cflonum''\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[magnitude-squared]]\n")
("file-write" . "(:ctime 1015184207 :cuser #f :mtime 1015184207 :muser #f)* [procedure] file-write ''fileno'' ''buffer'' [''size'']\n\n[[Chicken]]: low-level write(2) interface.   See also [[file-open]],\n[[port->fileno]].\n\nSome other implementation provides a way to write a chunk of data,\nbypassing buffering mechanism; see also [[block-write]].\n")
("&i/o-error" . "(:ctime 1099268562 :cuser #f :mtime 1099268572 :muser #f)* [condition-type] &i/o-error\n\n[[SRFI-36]]:\n{{{\n(define-condition-type &i/o-error &error\n  i/o-error?)\n}}}\n\nSee also [[SRFI-35]], [[&condition]].\n\n")
("get-signal-handlers" . "(:ctime 1018340704 :cuser #f :mtime 1026112810 :muser #f)* [procedure] get-signal-handlers [''sig'']\n\n[[STk]]: returns the handlers or the list of\nhandlers.  See also [[set-signal-handler!]].\n\nBigloo has [[get-signal-handler]].\n")
(" %recent-changes" . "((\"flo:atan2\" . 1480141597) (\"SRFI-134\" . 1474476457) (\"SRFI-133\" . 1474476434) (\"SRFI-132\" . 1474476402) (\"SRFI-131\" . 1474476377) (\"_SidePane\" . 1474476294) (\"SRFI-130\" . 1474475670) (\"SRFI-129\" . 1474475642) (\"SRFI-128\" . 1474475614) (\"SRFI-127\" . 1474475580) (\"SRFI-126\" . 1474475551) (\"SRFI-125\" . 1474475516) (\"SRFI-124\" . 1474475491) (\"SRFI-123\" . 1474475463) (\"SRFI-121\" . 1474475432) (\"SRFI-120\" . 1474475404) (\"SRFI-117\" . 1474475372) (\"SRFI-116\" . 1474475345) (\"SRFI-115\" . 1474475312) (\"SRFI-114\" . 1474475275) (\"SRFI-113\" . 1474475244) (\"SRFI-112\" . 1474475217) (\"Sagittarius\" . 1474474651) (\"RRRS\" . 1467277534) (\"vector-resize\" . 1464705070) (\"let-optionals*\" . 1459596785) (\"let-optionals\" . 1459596754) (\"Foment\" . 1457572301) (\"let-values\" . 1455913618) (\"T\" . 1454952626) (\"collection-insert-left\" . 1443713520) (\"os-class\" . 1443189740) (\"uniform-array-write\" . 1440711699) (\"subseq\" . 1437012787) (\"command:make-editable-table\" . 1435228989) (\"for-each\" . 1429284461) (\"Chicken\" . 1421438465) (\"Gauche\" . 1421429798) (\"defined?\" . 1418333084) (\"command-line\" . 1418329611) (\"#n#\" . 1416210018) (\"#2#\" . 1416210012) (\"#0#\" . 1416210004) (\"#1#\" . 1416209995) (\"#n=\" . 1416209924) (\"#2=\" . 1416209916) (\"#0=\" . 1416209908))")
("set-box!" . "(:ctime 1014946072 :cuser #f :mtime 1018692697 :muser #f)* [procedure] set-box! ''box'' ''obj''\n\n[[ChezScheme]], [[SISC]], [[MzScheme]]: sets the contents of ''box'' to ''obj''.\nSee [[box]]. \n")
("integer->signal" . "(:ctime 1020374114 :cuser #f :mtime 1020374130 :muser #f)* [procedure] integer->signal ''integer''\n\n[[Scheme48]]: converts integer singal number to a signal\nobject.  See also\n[[name->signal]], [[signal?]], \n[[signal-name]], [[signal-os-number]], [[signal=?]],\n[[signal-process]], [[make-signal-queue]].\n")
("port->fileno" . "(:ctime 1015184325 :cuser #f :mtime 1018390903 :muser #f)* [procedure] port->fileno ''port''\n\n[[Chicken]]: returns underlying file descriptor of file-port ''port''.\nSignals an error if ''port'' is not a file port.\n\nScsh has [[port->fdes]].\nGauche has [[port-file-number]].\n")
("set-current-output-port!" . "(:ctime 1018382128 :cuser #f :mtime 1018382128 :muser #f)[[$$include set-current-input-port!]]\n")
("extend-procedure" . "(:ctime 1015274464 :cuser #f :mtime 1015274464 :muser #f)* [procedure] extend-procedure ''procedure'' ''x''\n\n[[Chicken]]: returns a copy of ''procedure'' with an extra data slot initialized\nby ''x''.  See also [[extended-procedure?]], [[procedure-data]], [[set-procedure-data!]].\n")
("error" . "(:ctime 1014883218 :cuser #f :mtime 1191569284 :muser #f)* [procedure] error ''who'' ''message'' ''obj'' ...\n\n[[R6RS]]: The ''who'' argument must be a string, a symbol or #f.\nIf it is not #f, it should describe the procedure or operation that detected the\nexception, and used to initialise ''who'' field of ''&who'' condition.\nSee also [[assertion-violation]], [[assert]].\n\n* [procedure] error ''reason'' ''arg'' ...\n\n[[SRFI-23]].  [[Chicken]], [[Gauche]], [[SCM]]\n\n* [procedure] error ''symbol'' ''string'' ''object'' ...\n\n[[ChezScheme]] has extra ''symbol'' to indicate the place of\nerror, and ''objects'' are formatted by [[format]].\n\n* [procedure] error ''symbol'' ''string'' ''object''\n\n[[Bigloo]]: Similar to Chez, but only takes one ''object''.\nBigloo also has [[error/location]].\n\n* [procedure] error ''format-string'' ''object'' ...\n\n[[STk]] uses [[format]] to format error messages.\nGauche provides [[errorf]] which is equivalent to STk's [[error]].\n\n* [procedure] error [''name''] ''string'' [''obj'' ...]\n\n[[STklos]]: covers most of [[error]] variations.  The first\narg can be symbol like ChezScheme's.   ''string'' can be either\na format string (if it has tilde) or a simple string (otherwise),\nand it works like STk's [[error]] and SRFI-23's [[error]], respectively.\n")
("isatty?" . "(:ctime 1015312916 :cuser #f :mtime 1099726232 :muser #f)* [procedure] isatty? ''port''\n\n[[SCM]]: POSIX isatty.\n\nThis is called [[terminal-port?]], [[interactive-port?]], \n[[sys-isatty]] or [[port-is-a-terminal?]]\nin some implementations.\n\n")
("i/o-malformed-filename-error?" . "(:ctime 1099273518 :cuser #f :mtime 1099273518 :muser #f)* [procedure] i/o-malformed-filename-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-malformed-filename-error]].\n")
("line-number" . "(:ctime 1015889394 :cuser #f :mtime 1038309963 :muser #f)* [procedure] line-number\n\n[[SCM]]: the current line number in the file being loaded.\nSee also [[port-line]].\n")
("xcons" . "(:ctime 1014861545 :cuser #f :mtime 1014861545 :muser #f)* [procedure] xcons ''d'' ''a''\n\n[[SRFI-1]]: (lambda (d a) (cons a d))\n\nSee also [[cons]].\n")
("get-write-length" . "(:ctime 1063245648 :cuser #f :mtime 1063245648 :muser #f)[[$$include set-write-length!]]\n")
("byte-vector-ref" . "(:ctime 1015275643 :cuser #f :mtime 1017981611 :muser #f)* [procedure] byte-vector-ref ''byte-vector'' ''index''\n* [procedure] byte-vector-set! ''byte-vector'' ''index'' ''n''\n\n[[Chicken]], [[Scheme48]]: element getter/setter of byte vector.  See [[byte-vector]].\n")
("environment?" . "(:ctime 1018336460 :cuser #f :mtime 1018336460 :muser #f)* [procedure] environment? ''obj''\n\n[[STk]]: Returns #t if ''obj'' is an environment.\nSee also [[the-environment]] and [[global-environment]].\n")
("quo" . "(:ctime 1170264990 :cuser #f :mtime 1170268988 :muser #f)* quo ''x1'' ''x2''\n\n[[SRFI-94]]:\n{{{\n(define (quo x1 x2) (truncate (/ x1 x2)))\n}}}\n\nSee also [[truncate]], [[rem]], [[mod]].\n")
("utf8-string->ucs2-string" . "(:ctime 1039427834 :cuser #f :mtime 1039427834 :muser #f)[[$$include ucs2-string->utf8-string]]\n")
("match-letrec" . "(:ctime 1015101920 :cuser #f :mtime 1015101920 :muser #f)[[$$include match-let]]\n")
("time>=?" . "(:ctime 1015317901 :cuser #f :mtime 1015317901 :muser #f)[[$$include time=?]]\n")
("fl=?" . "(:ctime 1191226657 :cuser #f :mtime 1191226657 :muser #f)* [procedure] fl=? ''fl1'' ''fl2'' ''fl3'' ...\n* [procedure] fl<? ''fl1'' ''fl2'' ''fl3'' ...\n* [procedure] fl<=? ''fl1'' ''fl2'' ''fl3'' ...\n* [procedure] fl>? ''fl1'' ''fl2'' ''fl3'' ...\n* [procedure] fl>=? ''fl1'' ''fl2'' ''fl3'' ...\n\n[[R6RS]]: flonum specific comparison routines.\nSee [[flonum?]] for other flonum operations.\n\nOther implementations have [[fl=]], [[fp=]], [[=fl]], etc.\n")
("make-eqv-hashtable" . "(:ctime 1191358999 :cuser #f :mtime 1191358999 :muser #f)[[$$include make-eq-hashtable]]\n")
("port-type" . "(:ctime 1015915936 :cuser #f :mtime 1015915990 :muser #f)* [procedure] port-type ''port''\n\n[[Gauche]]: returns the type of the ''port''; one of symbols 'string', 'file' or 'proc'.\n")
("option-required-arg?" . "(:ctime 1099274409 :cuser #f :mtime 1099274409 :muser #f)[[$$include option-names]]\n")
("file-nlinks" . "(:ctime 1037014894 :cuser #f :mtime 1037014894 :muser #f)* [procedure] file-nlinks ''fname/fd/port'' [''chase?'']\n\n[[Scsh]]: see also [[file-info]]\n\nGauche has [[file-nlink]]\n")
("file-is-readable?" . "(:ctime 1015197276 :cuser #f :mtime 1099741372 :muser #f)* [procedure] file-is-readable? ''pathname''\n* [procedure] file-is-writable? ''pathname''\n* [procedure] file-is-executable? ''pathname''\n\n[[STk]], [[STklos]], [[Gauche]]: \ncheck accessibility of file by the current effective user.\nSee also [[Concept:FileSystem]].\n\nChicken has [[file-read-access?]] etc.\nScsh calls these [[file-readable?]] etc.\n\nGauche also has [[sys-access]] which is an interface to POSIX access().\n")
("equal?" . "(:ctime 1014847769 :cuser #f :mtime 1191361592 :muser #f)* [procedure] equal? ''obj1'' ''obj2''\n\n[[R5RS]], [[R6RS]]\n\nNote: In R5RS, equal? may fail to terminate if ''obj1'' and ''obj2'' contain\ncycles.  In R6RS, equal? ''must'' terminate even if they contain cycles.\n\nSee also [[eq?]], [[eqv?]].\n")
("noraw" . "(:ctime 1015877240 :cuser #f :mtime 1015877240 :muser #f)[[$$include raw]]\n")
("RRS" . "(:ctime 1152506103 :cuser #f :mtime 1346013828 :muser #f)The Revised Report on Scheme, a Dialect of Lisp. (1978)\n\nhttp://repository.readscheme.org/ftp/papers/ai-lab-pubs/AIM-452.pdf\n;; http://library.readscheme.org/servlets/cite.ss?pattern=Oz-entry9\n\n----\n\n* Catalogue of Magic Forms\n** Kernel Magic Forms\n\n[[lambda]], [[if]], [[quote]], [[labels]]\n\n** Side Effects\n[[define]], [[aset']]\n\n** Dynamic Magic\n\n[[fluidbind]], [[fluid]], [[fluidset']], [[static]], [[catch]], \n\n\n* Syntactic Extensions\n\n** System-Provided Extensions\n[[block]], [[let]], [[do]], [[iterate]], [[test]], [[cond]], [[or]], [[and]], [[amapcar]], [[amaplist]], [[amapc]], [[prog]]\n\n** User-Provided Extensions\n[[schmac]], [[macro]]\n\n\n* Primitive SCHEME Functions\n[[procp]], [[enclose]], [[create!process]], [[start!process]], [[terminate]]\n")
(":integers" . "(:ctime 1144527545 :cuser #f :mtime 1144537765 :muser #f)* [syntax] :integers ''vars''\n[[SRFI-42]]:\nRuns through the sequence 0, 1, 2, ... of non-negative integers. This is\nmost useful in combination with [[:parallel]], [[:while]], and [[:until]] or with a non-local exit in the body of the comprehension.\n")
("regexp-replace" . "(:ctime 1015905214 :cuser #f :mtime 1099777792 :muser #f)* [procedure] regexp-replace ''regexp'' ''string'' ''substitute''\n* [procedure] regexp-replace-all ''regexp'' ''string'' ''substitute''\n\n[[STk]], [[STklos]], [[Gauche]]: substitute matched portion of ''string'' for ''substitute''.\nGauche allows a procedure as ''substitute''.\nSee also [[Concept:RegularExpression]].\n\nSome implementations have similar functions, such as [[string-substitute]].\n")
("hashtable-copy" . "(:ctime 1191360561 :cuser #f :mtime 1191360561 :muser #f)* [procedure] hashtable-copy ''hashtable'' [''mutable'']\n\n[[R6RS]]: Returns a copy of a hashtable.  If ''mutable'' is given and a true,\nthe new hashtable is mutable; othewise it is immutable.\n\nSee also [[Concept:HashTable]].\n\n")
("savetty" . "(:ctime 1015877336 :cuser #f :mtime 1015877336 :muser #f)[[$$include resetty]]\n")
("make-sstats" . "(:ctime 1015028693 :cuser #f :mtime 1015028746 :muser #f)* [procedure] make-sstats ''cpu'' ''real'' ''bytes'' ''gc-count'' ''gc-cpu'' ''gc-real'' ''gc-bytes''\n\n[[ChezScheme]]: statistics.  See [[statistics]]\n")
("random-source-state-set!" . "(:ctime 1038273302 :cuser #f :mtime 1038273302 :muser #f)* [procedure] random-source-state-set! ''source'' ''state''\n\n[[SRFI-27]]: install the random source state ''state''\nto the random source ''source''.\n''state'' must be the object returend by\n[[random-source-state-ref]].\n")
("char-set->string" . "(:ctime 1018085098 :cuser #f :mtime 1018085098 :muser #f)[[$$include char-set->list]]\n")
("define-syntax-expander" . "(:ctime 1015033828 :cuser #f :mtime 1015033828 :muser #f)* [syntax] define-syntax-expander ''keyword'' ''exp''\n\n[[ChezScheme]]: expansion-passing style macro.\nSee also [[install-expander]], [[eps-expand]].\n")
("take" . "(:ctime 1014863494 :cuser #f :mtime 1014863494 :muser #f)* [procedure] take ''list'' ''k''\n\n[[SRFI-1]]: Returns the first ''k'' elements of list ''list''.\n\nSee also [[drop]], [[take-right]], [[take!]].\n")
("decompose-file-name" . "(:ctime 1099741669 :cuser #f :mtime 1099741669 :muser #f)* [procedure] decompose-file-name ''path''\n\n[[STklos]]: \n{{{\n(decompose-file-name \"/a/b/c.stk\") ⇒ (\"/\" \"a\" \"b\" \"c.stk\")\n(decompose-file-name \"a/b/c.stk\")  ⇒ (\".\" \"a\" \"b\" \"c.stk\")\n}}}\n")
("queue-rear" . "(:ctime 1015072377 :cuser #f :mtime 1015072377 :muser #f)* [procedure] queue-rear ''queue''\n\n[[SLIB]], [[Gauche]]: see [[make-queue]].\n\nThis is called [[queue-last]] in some implementations.\n")
("lock-object" . "(:ctime 1015033665 :cuser #f :mtime 1015033665 :muser #f)* [procedure] lock-object ''obj''\n\n[[ChezScheme]]: prevents copying-gc from relocating ''obj''.  (It seems that\nit has nothing to do with mutex.)\n\nSee also [[unlock-object]].\n")
("inf.0" . "(:ctime 1191210346 :cuser #f :mtime 1191210365 :muser #f)* [reader syntax] +inf.0\n* [reader syntax] -inf.0\n* [reader syntax] +nan.0\n* [reader syntax] -nan.0\n\n[[R6RS]]: Infinities and NaNs.\n\nSee also [[finite?]], [[infinite?]], [[nan?]].\n\n")
("stream-null?" . "(:ctime 1099279683 :cuser #f :mtime 1099279701 :muser #f)* [procedure] stream-null? ''obj''\n\n[[SRFI-40]]: Returns #t iff ''obj'' is the singleton null stream\n([[stream-null]]).\nSee also [[stream-pair?]].\n")
("get-login-name" . "(:ctime 1018124735 :cuser #f :mtime 1018124735 :muser #f)* [procedure] get-login-name\n\n[[Scheme48]]: returns the user name of the current process.\n\nOther implementation have [[sys-getlogin]], [[getlogin]].\n")
("time-utc->time-tai" . "(:ctime 1099301564 :cuser #f :mtime 1099301564 :muser #f)[[$$include time-utc->date]]\n")
("quotient" . "(:ctime 1014856579 :cuser #f :mtime 1191220071 :muser #f)* [procedure] quotient ''n1'' ''n2''\n\n[[R5RS]]\n\n[[SRFI-94]]: If ''n1'' is not an exact integer, or if ''n2'' is not an exact non-zero integer, an error is signaled.\n\nIn [[R6RS]] this procedure is in R5RS compatibility library.  You may want to use [[div]] or [[div0]] instead.\n\n\nSee also [[modulo]], [[remainder]], [[quotient/remainder]], [[quotient&remainder]].\n")
("nconc" . "(:ctime 1165143329 :cuser #f :mtime 1165161547 :muser #f)nconc\n")
("char-lower-case?" . "(:ctime 1014839409 :cuser #f :mtime 1015063490 :muser #f)* [procedure] char-lower-case? ''char''\n* [procedure] char-upper-case? ''char''\n\n[[R5RS]]\n\n")
("SRFI-94" . "(:ctime 1170156876 :cuser #f :mtime 1170180795 :muser #f)SRFI 94: Type-Restricted Numerical Functions\n\nhttp://srfi.schemers.org/srfi-94/srfi-94.html\n\n[[$$srfi-implementors]]\n----\n\n[[real-exp]], [[real-ln]], [[real-log]], [[real-sin]], [[real-cos]], [[real-tan]], [[real-asin]], [[real-acos]], [[real-atan]], [[atan]], [[real-sqrt]], [[integer-sqrt]], [[integer-log]], [[integer-expt]], [[real-expt]], [[quo]], [[rem]], [[mod]], [[ln]], [[make-rectangular]], [[make-polar]], [[abs]], [[quotient]], [[remainder]], [[modulo]]\n")
("div0-and-mod0" . "(:ctime 1191219646 :cuser #f :mtime 1191219646 :muser #f)* [procedure] div0-and-mod0 ''x1'' ''x2''\n\n[[R6RS]]: Calculates ''x1'' [[div0]] ''x2'' and ''x1'' [[mod0]] ''x2''.\n")
("set-current-output-port" . "(:ctime 1036928064 :cuser #f :mtime 1036928064 :muser #f)[[$$include set-current-input-port]]\n")
("inexact?" . "(:ctime 1014848063 :cuser #f :mtime 1191211245 :muser #f)* [procedure] inexact? ''z''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[exact?]], [[#i]], [[#e]].\n")
("ignore-case" . "(:ctime 1018083115 :cuser #f :mtime 1018083115 :muser #f)* [procedure] ignore-case ''regexp''\n* [procedure] use-case ''regexp''\n\n[[Scheme48]]: returns a regexp which is the same as\n''regexp'' except it matches ignoring (or not ignoring)\nthe case.\nSee [[Concept:RegularExpression]], [[match]].\n")
("string-map" . "(:ctime 1014894701 :cuser #f :mtime 1014894701 :muser #f)* [procedure] string-map ''proc'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-map!]], [[string-for-each]], [[string-fold]]\n")
("gauche-site-architecture-directory" . "(:ctime 1015904932 :cuser #f :mtime 1015904932 :muser #f)[[$$include gauche-architecture]]\n")
("sequence" . "(:ctime 1018082861 :cuser #f :mtime 1018082861 :muser #f)* [procedure] sequence ''regexp'' ...\n\n[[Scheme48]]: compose a regexp that matches the sequence\nof ''regexp''s.   See [[Concept:RegularExpression]], [[match]].\n")
("pathname->vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074793 :muser #f)* [procedure] pathname->vicinity ''path''\n\n[[SRFI-59]]: Returns the vicinity containing ''path''.\n{{{\n(pathname->vicinity \"/usr/local/lib/scm/Link.scm\")\n                    => \"/usr/local/lib/scm/\"\n}}}\n")
("make-table" . "(:ctime 1017984695 :cuser #f :mtime 1017984695 :muser #f)* [procedure] make-table \n* [procedure] make-symbol-table\n* [procedure] make-string-table\n* [procedure] make-integer-table\n\n[[Scheme48]]: hash table implementation.\n\n                    |key comparer|allowed keys\n -------------------+------------+----------------------------\n make-table         | eqv?       |symbol,integer,character,\n                    |            | boolean, emptylist\n make-symbol-table  | eq?        |symbol\n make-string-table  | string=?   |string\n make-integer-table | =          |integer\n\nSee also [[Concept:HashTable]],\n[[make-table-maker]], [[make-table-immutable!]],\n[[table?]], [[table-ref]], [[table-set!]], [[table-walk]],\n[[default-hash-function]], [[string-hash]].\n")
("alist-copy" . "(:ctime 1014874009 :cuser #f :mtime 1014874009 :muser #f)* [procedure] alist-copy ''alist''\n\n[[SRFI-1]]: Make a fresh copy of ''alist''. \nThis means copying each pair that forms an association as well as \nthe spine of the list, i.e. \n\n     (lambda (a) (map (lambda (elt) (cons (car elt) (cdr elt))) a))\n\nSee also [[list-copy]].\n")
("use-case" . "(:ctime 1018083128 :cuser #f :mtime 1018083128 :muser #f)[[$$include ignore-case]]\n")
("push!" . "(:ctime 1015312433 :cuser #f :mtime 1015312521 :muser #f)* [syntax] push! ''place'' ''obj''\n\n[[Gauche]]: CL's push, but the order of arguments reversed.\nSee also [[pop!]], [[inc!]], [[dec!]], [[set!]].\n\n")
("rec" . "(:ctime 1014928977 :cuser #f :mtime 1100322481 :muser #f)* [syntax] rec ''var'' ''exp''\n* [syntax] rec (''name'' . ''variables'') ''body''\n\n[[SRFI-31]]: creates recursive function.\n\n{{{\n(define-syntax rec\n  (syntax-rules ()\n    ((rec (NAME . VARIABLES) . BODY)\n     (letrec ( (NAME (lambda VARIABLES . BODY)) ) NAME))\n    ((rec NAME EXPRESSION)\n     (letrec ( (NAME EXPRESSION) ) NAME))))\n}}}\n\n[[ChezScheme]]: Creates a recursive object.\n\n  (define-syntax rec\n    (syntax-rules ()\n      ((_ x e) (letrec ((x e)) x))))\n\nSee also [[letrec]].\n\nMIT-Scheme has [[named-lambda]], which is equivalent to the second form\nof [[rec]].\n\n\n\n")
("get-group-id" . "(:ctime 1015138916 :cuser #f :mtime 1015198626 :muser #f)* [procedure] get-group-id\n* [procedure] get-effective-group-id\n\n[[Scheme48]]: see also [[Concept:UserGroup]], [[set-group-id!]]\n\nGauche has [[sys-getgid]], [[sys-getegid]]\n")
("d" . "(:ctime 1015312634 :cuser #f :mtime 1015312634 :muser #f)* [procedure] d ''obj''\n\n[[Gauche]]: synonym of [[describe]].\n")
("=fl" . "(:ctime 1039381939 :cuser #f :mtime 1039386603 :muser #f)* [procedure] =fl ''flonum1'' ''flonum2''\n* [procedure] <fl ''flonum1'' ''flonum2''\n* [procedure] <=fl ''flonum1'' ''flonum2''\n* [procedure] >fl ''flonum1'' ''flonum2''\n* [procedure] >=fl ''flonum1'' ''flonum2''\n\n[[Bigloo]]: comparison ops specialized for flonums.\nSee also [[fixnum?]], [[flonum?]].\n\nChezScheme has [[fl=]], [[fl<]], [[fl<=]], [[fl>]], [[fl>=]].\n\n")
("check-passed?" . "(:ctime 1144485145 :cuser #f :mtime 1144492272 :muser #f)* [procedure] check-passed? ''expected-total-count''\n[[SRFI-78]]: #t if there were no failed checks and\n''expected-total-count'' correct checks, #f otherwise.\n\nRationale: This procedure can be used in automatized tests\nby terminating a test program with the statement\n(exit (if (check-passed? n) 0 1)).\n")
("sys-geteuid" . "(:ctime 1038189898 :cuser #f :mtime 1038189898 :muser #f)[[$$include sys-getuid]]\n")
("substq!" . "(:ctime 1014945205 :cuser #f :mtime 1014945205 :muser #f)* [procedure] substq! ''new'' ''old'' ''tree''\n\n[[ChezScheme]]: linear update variant of [[substq]].\n\nSee also [[substq]], [[subst!]], [[substv!]]\n")
("numerator" . "(:ctime 1014857048 :cuser #f :mtime 1191219714 :muser #f)* [procedure] numerator ''q''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[denominator]], [[rationalize]].\n")
("list->vector" . "(:ctime 1014855620 :cuser #f :mtime 1191570197 :muser #f)* [procedure] list->vector ''list''\n\n[[R5RS]], [[R6RS]]: Returns a newly\ncreated vector initialized to the elements of the list ''list''.\n\nSee also [[vector->list]].\n")
("scrollok" . "(:ctime 1015877037 :cuser #f :mtime 1015877037 :muser #f)[[$$include clearok]]\n")
("current-environment" . "(:ctime 1015199741 :cuser #f :mtime 1015199741 :muser #f)* [procedure] current-environment\n\n[[Chicken]]: returns an alist of current environment variables.\nSee also [[setenv]], [[unsetenv]].\n\nThis is called [[environment-alist]] in some implementations.\n")
("keyboard-interrupt-handler" . "(:ctime 1014964500 :cuser #f :mtime 1014964531 :muser #f)* [procedure] keyboard-interrupt-handler\n\n[[ChezScheme]]: gets/sets the current interrupt handler.\n\nSee also [[timer-interrupt-handler]], [[disable-interrupts]],\n[[enable-interrupts]], [[critical-section]].\n\n")
("1-" . "(:ctime 1014954763 :cuser #f :mtime 1100163378 :muser #f)* [procedure] 1- ''num''\n\n[[ChezScheme]]\n\nSee also [[sub1]], [[-1+]].\n")
("R6RS" . "(:ctime 1191199228 :cuser #f :mtime 1346013585 :muser #f)Revised^6 Report on the Algorithmic Language Scheme. (2007)\n\nhttp://www.r6rs.org/\n\n[[R6RS:CompatibilityNotes]]\n\n[[$$toc]]\n----\n\n* Part 1.  Core\n\n** 4. Lexical syntax and datum syntax\n\nIn-string escape sequences: [[\\a]],[[\\b]],[[\\t]],[[\\n]],[[\\v]],[[\\f]],[[\\r]],[[\\\"]],[[\\\\]],[[\\<newline>]],[[\\x]]\n\nCharacter by code: [[#\\x]]\n\nAbbreviations: [[']], [[`]], [[,]], [[,@]], [[#']], [[#`]], [[#,]], [[#,@]]\n\nInfinity and nan: [[inf.0]], [[nan.0]]\n\n** 7. Library form\n\n[[library]], [[export]], [[import]], [[rename]], [[for]], [[meta]],\n[[only]], [[except]], [[prefix]], [[and]], [[or]], [[not]],\n[[<=]], [[>=]]\n\n** 11. Base library\n\n[[define]], [[define-syntax]], [[quote]], [[lambda]], [[if]], [[set!]]\n\n[[cond]], [[case]], [[and]], [[or]], [[let]], [[let*]], [[letrec]], [[letrec*]],\n[[let-values]], [[let*-values]], [[begin]]\n\n[[eqv?]], [[eq?]], [[equal?]]\n\n[[procedure?]]\n\n[[number?]], [[complex?]], [[real?]], [[rational?]], [[integer?]],\n[[real-valued?]], [[rational-valued?]], [[integer-valued?]], [[exact?]],\n[[inexact?]], [[exact]], [[inexact]], [[=]], [[<]], [[<=]], [[>]], [[>=]],\n[[zero?]], [[positive?]], [[negative?]], [[odd?]], [[even?]],\n[[finite?]], [[infinite?]], [[nan?]], [[max]], [[min]],\n[[+]], [[*]], [[-]], [[/]],\n[[abs]], [[div]], [[mod]], [[div-and-mod]], [[div0]], [[mod0]],\n[[div0-and-mod0]], [[gcd]], [[lcm]], [[numerator]], [[denominator]],\n[[floor]], [[ceiling]], [[truncate]], [[round]], [[rationalize]],\n[[exp]], [[log]], [[sin]], [[cos]], [[tan]], [[asin]], [[acos]], [[atan]],\n[[sqrt]], [[exact-integer-sqrt]], [[expt]],\n[[make-rectangular]], [[make-polar]], [[real-part]], [[imag-part]],\n[[magnitude]], [[angle]], [[number->string]], [[string->number]]\n\n[[not]], [[boolean?]], [[boolean=?]]\n\n[[pair?]], [[cons]], [[car]], [[cdr]], [[null?]], [[list?]],\n[[length]], [[append]], [[reverse]], [[list-tail]], [[list-ref]],\n[[map]], [[for-each]]\n\n[[symbol?]], [[symbol->string]], [[symbol=?]], [[string->symbol]],\n\n[[char?]], [[char->integer]], [[integer->char]], \n[[char=?]], [[char<?]], [[char>?]], [[char<=?]], [[char>=?]]\n\n[[string?]], [[make-string]], [[string]], [[string-length]], [[string-ref]],\n[[string=?]], [[string<?]], [[string>?]], [[string<=?]], [[string>=?]]\n[[substring]], [[string-append]], [[string->list]], [[list->string]],\n[[string-for-each]], [[string-copy]]\n\n[[vector?]], [[make-vector]], [[vector]], [[vector-length]], [[vector-ref]],\n[[vector-set!]], [[vector->list]], [[list->vector]], [[vector-fill!]],\n[[vector-map]], [[vector-for-each]]\n\n[[error]], [[assertion-violation]], [[assert]]\n\n[[apply]], [[call-with-current-continuation]], [[call/cc]],\n[[values]], [[call-with-values]], [[dynamic-wind]]\n\n[[quasiquote]], [[unquote]], [[unquote-splicing]]\n\n[[let-syntax]], [[letrec-syntax]],\n[[syntax-rules]], [[identifier-syntax]]\n\n\n* Part 2.  Standard Library\n\n** 1. Unicode\n\n[[char-upcase]], [[char-downcase]], [[char-titlecase]], [[char-foldcase]],\n[[char-ci=?]], [[char-ci<?]], [[char-ci>?]], [[char-ci<=?]], [[char-ci>=?]],\n[[char-alphabetic?]], [[char-numeric?]], [[char-whitespace?]],\n[[char-upper-case?]], [[char-lower-case?]], [[char-title-case?]],\n[[char-general-category]]\n\n[[string-upcase]], [[string-downcase]], [[string-titlecase]],\n[[string-foldcase]], \n[[string-ci=?]], [[string-ci<?]], [[string-ci>?]], [[string-ci<=?]], \n[[string-ci>=?]],\n[[string-normalize-nfd]], [[string-normalize-nfkd]],\n[[string-normalize-nfc]], [[string-normalize-nfkc]]\n\n** 2. Bytevectors\n\n[[endianness]], [[native-endianness]], [[bytevector?]], [[make-bytevector]],\n[[bytevector-length]], [[bytevector=?]], [[bytevector-copy!]],\n[[bytevector-copy]], [[bytevector-fill!]]\n\n[[bytevector-u8-ref]], [[bytevector-s8-ref]], [[bytevector-u8-set!]],\n[[bytevector-s8-set!]], [[bytevector->u8-list]], [[u8-list->bytevector]]\n\n[[bytevector-uint-ref]], [[bytevector-sint-ref]], [[bytevector-uint-set!]],\n[[bytevector-sint-set!]], [[bytevector->uint-list]], [[bytevector->sint-list]],\n[[uint-list->bytevector]], [[sint-list->bytevector]]\n\n[[bytevector-u16-ref]], [[bytevector-s16-ref]],\n[[bytevector-u16-set!]], [[bytevector-s16-set!]],\n[[bytevector-u16-native-ref]], [[bytevector-s16-native-ref]],\n[[bytevector-u16-native-set!]], [[bytevector-s16-native-set!]],\n[[bytevector-u32-ref]], [[bytevector-s32-ref]],\n[[bytevector-u32-set!]], [[bytevector-s32-set!]],\n[[bytevector-u32-native-ref]], [[bytevector-s32-native-ref]],\n[[bytevector-u32-native-set!]], [[bytevector-s32-native-set!]],\n[[bytevector-u64-ref]], [[bytevector-s64-ref]],\n[[bytevector-u64-set!]], [[bytevector-s64-set!]],\n[[bytevector-u64-native-ref]], [[bytevector-s64-native-ref]],\n[[bytevector-u64-native-set!]], [[bytevector-s64-native-set!]],\n[[bytevector-ieee-single-ref]], [[bytevector-ieee-single-native-ref]],\n[[bytevector-ieee-single-set!]], [[bytevector-ieee-single-native-set!]],\n[[bytevector-ieee-double-ref]], [[bytevector-ieee-double-native-ref]],\n[[bytevector-ieee-double-set!]], [[bytevector-ieee-double-native-set!]]\n\n[[string->utf8]], [[string->utf16]], [[string->utf32]],\n[[utf8->string]], [[utf16->string]], [[utf32->string]]\n\n** 3. List utilities\n\n[[find]], [[for-all]], [[exists]], [[filter]], [[partition]],\n[[fold-left]], [[fold-right]], \n[[remp]], [[remove]], [[remv]], [[remq]],\n[[memp]], [[member]], [[memv]], [[memq]],\n[[assp]], [[assber]], [[assv]], [[assq]],\n[[cons*]]\n\n** 4. Sorting\n\n[[list-sort]], [[vector-sort]], [[vector-sort!]]\n\n** 5. Control structures\n\n[[when]], [[unless]], [[do]], [[case-lambda]]\n\n** 6. Records\n\n[[define-record-type]], [[record-type-descriptor]],\n[[record-constructor-descriptor]]\n\n[[make-record-type-descriptor]], [[record-type-descriptor?]],\n[[make-record-constructor-descriptor]], [[record-constructor]],\n[[record-predicate]], [[record-accessor]], [[record-mutator]]\n\n[[record?]], [[record-rtd]], [[record-type-name]], [[record-type-parent]],\n[[record-type-uid]], [[record-type-generative?]], [[record-type-sealed?]],\n[[record-type-opaque?]], [[record-type-field-names]],\n[[record-field-mutable?]]\n\n** 7. Exceptions and conditions\n\n[[with-exception-handler]], [[guard]], [[raise]], [[raise-continuable]]\n\n[[&condition]], [[condition]], [[simple-conditions]], [[condition?]],\n[[condition-predicate]], [[condition-accessor]], [[define-condition-type]]\n\n[[&message]], [[make-message-condition]], [[message-condition?]],\n[[condition-message]]\n\n[[&warning]], [[make-warning]], [[warning?]]\n\n[[&serious]], [[make-serious-condition]], [[serious-condition?]]\n\n[[&error]], [[make-error]], [[error?]]\n\n[[&violation]], [[make-violation]], [[violation?]]\n\n[[&assertion]], [[make-assertion-violation]], [[assertion-violation?]]\n\n[[&irritants]], [[make-irritants-condition]],\n[[irritants-condition]], [[condition-irritants]]\n\n[[&who]], [[make-who-condition]], [[who-condition?]], [[condition-who]]\n\n[[&non-continuable]], [[make-non-continuable-violation]],\n[[non-continuable-violation?]]\n\n[[&implementation-restriction]], [[make-implementation-restriction-violation]],\n[[implementation-restriction-violation?]]\n\n[[&lexical]], [[make-lexical-violation]], [[lexical-violation?]]\n\n[[&syntax]], [[make-syntax-violation]], [[syntax-violation?]],\n[[syntax-violation-form]], [[syntax-violation-subform]]\n\n[[&undefined]], [[make-undefined-violation]], [[undefined-violation?]]\n\n** 8.  I/O\n\n[[&i/o]], [[make-i/o-error]], [[i/o-error?]], [[&i/o-read]],\n[[make-i/o-read-error]], [[i/o-read-error?]],\n[[&i/o-write]], [[make-i/o-write-error]], [[i/o-write-error?]],\n[[&i/o-invalid-position]], [[make-i/o-invalid-position-error]],\n[[i/o-invalid-position-error?]], [[i/o-error-position]],\n[[&i/o-filename]], [[make-i/o-filename-error]],\n[[i/o-filename-error]], [[i/o-error-filename]],\n[[&i/o-file-protection]], [[make-i/o-file-protection-error]],\n[[i/o-file-protection-error?]],\n[[&i/o-file-is-read-only]], [[make-i/o-file-is-read-only-error]],\n[[i/o-file-is-read-only-error?]],\n[[&i/o-file-already-exists]], [[make-i/o-file-already-exists-error]],\n[[i/o-file-already-exists-error?]],\n[[&i/o-file-does-not-exist]], [[make-i/o-file-does-not-exist-error]],\n[[i/o-file-does-not-exist-error?]],\n[[&i/o-port]], [[make-i/o-port-error]], [[i/o-port-error?]],\n[[i/o-error-port]]\n\n[[file-options]], [[buffer-mode]], \n[[latin-1-codec]], [[utf-8-codec]], [[utf-16-codec]], [[eol-style]],\n[[native-eol-style]],\n[[&i/o-decoding]], [[make-i/o-decoding-error]], [[i/o-decoding-error?]],\n[[&i/o-encoding]], [[make-i/o-encoding-error]], [[i/o-encoding-error?]],\n[[i/o-encoding-error-char]], [[error-handling-mode]],\n[[make-transcoder]], [[native-transcoder]], [[transcoder-codec]],\n[[transcoder-eol-style]], [[transcoder-error-handling-mode]],\n[[bytevector->string]], [[string->bytevector]]\n\n[[eof-object]], [[eof-object?]]\n\n[[port?]], [[port-transcoder]], [[textual-port?]], [[binary-port?]],\n[[transcoded-port]], [[port-has-port-position?]], [[port-position]],\n[[port-has-set-port-position!?]], [[set-port-position!]],\n[[close-port]], [[call-with-port]]\n\n[[input-port?]], [[port-eof?]], [[open-file-input-port]],\n[[open-bytevector-input-port]], [[open-string-input-port]],\n[[standard-input-port]], [[current-input-port]], \n[[make-custom-binary-input-port]], \n[[make-custom-textual-input-port]]\n\n[[get-u8]], [[lookahead-u8]], [[get-bytevector-n]], [[get-bytevector-n!]],\n[[get-bytevector-some]], [[get-bytevector-all]]\n\n[[get-char]], [[lookahead-char]], [[get-string-n]], \n[[get-string-n!]], [[get-string-all]], [[get-line]], [[get-datum]]\n\n[[output-port?]], [[flush-output-port]], [[output-port-buffer-mode]],\n[[open-file-output-port]], [[open-bytevector-output-port]],\n[[call-with-bytevector-output-port]], [[open-string-output-port]],\n[[call-with-string-output-port]], [[standard-output-port]],\n[[standard-error-port]], [[current-output-port]], [[current-error-port]],\n[[make-custom-binary-output-port]], [[make-custom-textual-output-port]]\n\n[[put-u8]], [[put-bytevector]], [[put-char]], [[put-string]], [[put-datum]]\n\n[[open-file-input/output-port]], [[make-custom-binary-input/output-port]],\n[[make-custom-textual-input/output-port]]\n\n[[call-with-input-file]], [[call-with-output-file]], [[input-port?]],\n[[output-port?]], [[current-input-port]], [[current-output-port]],\n[[current-error-port]], [[with-input-from-file]], [[with-output-to-file]],\n[[open-input-file]], [[open-output-file]], [[close-input-port]],\n[[close-output-port]], [[read-char]], [[peek-char]],\n[[read]], [[write-char]], [[newline]], [[display]], [[write]]\n\n** 9. File system\n\n[[file-exists?]], [[delete-file]]\n\n** 10. Command-line access and exit values\n\n[[command-line]], [[exit]]\n\n** 11. Arithmetic\n\n[[fixnum?]], [[fixnum-width]], [[least-fixnum]], [[greatest-fixnum]],\n[[fx=?]], [[fx<?]], [[fx>?]], [[fx<=?]], [[fx>=?]],\n[[fxzero?]], [[fxpositive?]], [[fxnegative?]], [[fxodd?]], [[fxeven?]],\n[[fxmax]], [[fxmin]], [[fx+]], [[fx*]], [[fx-]], [[fxdiv-and-mod]],\n[[fxdiv]], [[fxmod]], [[fxdiv0-and-mod0]], [[fxdiv0]], [[fxmod0]],\n[[fx+/carry]], [[fx-/carry]], [[fx*/carry]], [[fxnot]], \n[[fxand]], [[fxior]], [[fxxor]], [[fxif]], [[fxbit-count]], [[fxlength]],\n[[fxfirst-bit-set]], [[fxbit-set?]], [[fxcopy-bit]], [[fxbit-field]],\n[[fxcopy-bit-field]], [[fxarithmetic-shift]], [[fxarithmetic-shift-left]],\n[[fxarithmetic-shift-right]], [[fxrotate-bit-field]], [[fxreverse-bit-field]]\n\n[[flonum?]], [[real->flonum]], \n[[fl=?]], [[fl<?]], [[fl>?]], [[fl<=?]], [[fl>=?]],\n[[flinteger?]], [[flzero?]], [[flpositive?]], [[flnegative?]], [[flodd?]],\n[[fleven?]], [[flfinite?]], [[flinfinite?]], [[flnan?]],\n[[flmax]], [[flmin]], [[fl+]], [[fl*]], [[fl-]], [[fl/]], [[flabs]],\n[[fldiv-and-mod]], [[fldiv]], [[flmod]], [[fldiv0-and-mod0]],\n[[fldiv0]], [[flmod0]], [[flnumerator]], [[fldenominator]],\n[[flfloor]], [[flceiling]], [[fltruncate]], [[flround]],\n[[flexp]], [[fllog]], [[flsin]], [[flcos]], [[fltan]], [[flasin]],\n[[flacos]], [[flatan]], [[flsqrt]], [[flexpt]], \n[[&no-infinities]], [[make-no-infinities-violation]],\n[[no-infinities-violation?]], [[&no-nans]], [[make-no-nans-violation]],\n[[no-nans-violation?]], [[fixnum->flonum]]\n\n[[bitwise-not]], [[bitwise-and]], [[bitwise-ior]], [[bitwise-xor]],\n[[bitwise-if]], [[bitwise-bit-count]], [[bitwise-length]],\n[[bitwise-first-bit-set]], [[bitwise-bit-set?]], [[bitwise-copy-bit]],\n[[bitwise-bit-field]], [[bitwise-copy-bit-field]], [[bitwise-arithmetic-shift]],\n[[bitwise-arithmetic-shift-left]], [[bitwise-arithmetic-shift-right]],\n[[bitwise-rotate-bit-field]], [[bitwise-reverse-bit-field]]\n\n** 12.  Syntax-case\n\n[[make-variable-transformer]], [[syntax-case]], [[syntax]],\n[[identifier?]], [[bound-identifier=?]], [[free-identifier=?]],\n[[syntax->datum]], [[datum->syntax]], [[generate-temporaries]],\n[[with-syntax]], [[quasisyntax]], [[unsyntax]], [[unsyntax-splicing]],\n[[syntax-violation]]\n\n** 13.  Hashtables\n\n[[make-eq-hashtable]], [[make-eqv-hashtable]],\n[[make-hashtable]], [[hashtable?]], [[hashtable-size]],\n[[hashtable-ref]], [[hashtable-set!]], [[hashtable-delete!]],\n[[hashtable-contains?]], [[hashtable-update!]],\n[[hashtable-copy]], [[hashtable-clear!]],\n[[hashtable-keys]], [[hashtable-entries]],\n[[hashtable-equivalence-function]], [[hashtable-hash-function]],\n[[hashtable-mutable?]], [[equal-hash]], [[string-hash]], [[string-ci-hash]],\n[[symbol-hash]]\n\n** 14.  Enumerations\n\n[[make-enumeration]], [[enum-set-universe]], [[enum-set-indexer]],\n[[enum-set-constructor]], [[enum-set->list]], [[enum-set-member?]],\n[[enum-set-subset?]], [[enum-set=?]], [[enum-set-union]],\n[[enum-set-intersection]], [[enum-set-difference]],\n[[enum-set-complement]], [[enum-set-projection]],\n[[define-enumeration]]\n\n** 16.  Eval\n\n[[eval]], [[environment]]\n\n** 17.  Mutable pairs\n\n[[set-car!]], [[set-cdr!]]\n\n** 18.  Mutable strings\n\n[[string-set!]], [[string-fill!]]\n\n** 19.  R5RS compatibility\n\n[[exact->inexact]], [[inexact->exact]], \n[[quotient]], [[remainder]], [[modulo]],\n[[delay]], [[force]], [[null-environment]],\n[[scheme-report-environment]]\n\n* Part 3.  Non-normative appendices\n\n[[#!fold-case]], [[#!no-fold-case]]\n")
("pointer->address" . "(:ctime 1015273967 :cuser #f :mtime 1015273967 :muser #f)[[$$include address->pointer]]\n")
("with-stdio-ports" . "(:ctime 1018382373 :cuser #f :mtime 1018382381 :muser #f)[[$$include with-stdio-ports*]]\n")
("Index:r" . "(:ctime 1014846208 :cuser #f :mtime 1015014717 :muser #f)[[$$index r]]\n\n")
("executable-name" . "(:ctime 1046489168 :cuser #f :mtime 1046489168 :muser #f)* [procedure] executable-name\n\n[[Bigloo]]: returns the name of the running executable.\nSee also [[command-line]].\n")
("directory" . "(:ctime 1015105319 :cuser #f :mtime 1020222020 :muser #f)* [procedure] directory ''dirname''\n\n[[Chicken]]: returns list of all directory entries.\nSee [[Concept:FileSystem]].\n\nThis is called [[directory-files]], [[list-directory]],\n[[directory-list]]\nor [[sys-readdir]] in some implementations.\n")
("set-file-times" . "(:ctime 1023671689 :cuser #f :mtime 1023671689 :muser #f)* [procedure] set-file-times ''fname'' [''atime'' ''mtime'']\n\n[[Scsh]]: sets the file ''fname'''s access time and modification time.\n\nGauche has [[sys-utime]].\n")
("char-downcase" . "(:ctime 1014839349 :cuser #f :mtime 1192066328 :muser #f)* [procedure] char-downcase ''char''\n\n[[R5RS]], [[R6RS]]\n\nSee the note in [[char-upcase]].\n\n")
("scheme-start" . "(:ctime 1015024694 :cuser #f :mtime 1015024694 :muser #f)* [procedure] scheme-start [''proc'']\n\n[[ChezScheme]]: gets/sets the entry point.\n")
("partition!" . "(:ctime 1014869270 :cuser #f :mtime 1014869270 :muser #f)* [procedure] partition! ''pred'' ''list''\n\n[[SRFI-1]]: linear-update variant of [[partition]].\n")
("hash-table-size" . "(:ctime 1144494246 :cuser #f :mtime 1144494745 :muser #f)* [procedure] hash-table-size ''hash-table''\n\n[[SRFI-69]]: Returns the number of associations in ''hash-table''.\n")
("signal/vtalrm" . "(:ctime 1015076600 :cuser #f :mtime 1015076600 :muser #f)[[$$include signal/hup]]\n")
("#!optional" . "(:ctime 1100321311 :cuser #f :mtime 1161177714 :muser #f)* [reader syntax] #!optional\n* [reader syntax] #!rest\n\n[[MIT-Scheme]], [[Kawa]]: a special constant.  used in lambda list to mark\noptional and rest arguments (see [[lambda]]).\n")
("assv" . "(:ctime 1014838408 :cuser #f :mtime 1014838408 :muser #f)* [procedure] assv ''obj'' ''alist''\n\nSearch ''obj'' from an association list ''alist'' using [[eqv?]].  [[R5RS]]\n\nSee also [[assoc]], [[assq]].\n")
("a:floc128b" . "(:ctime 1144485145 :cuser #f :mtime 1144529182 :muser #f)* [procedure] a:floc128b [''z'']\n[[SRFI-63]]: Returns an inexact 128.bit flonum complex uniform-array prototype.\n")
("get-line-number" . "(:ctime 1015069769 :cuser #f :mtime 1015069769 :muser #f)* [procedure] get-line-number ''expr''\n\n[[Chicken]]\n")
("parent-process-id" . "(:ctime 1015184984 :cuser #f :mtime 1015184984 :muser #f)[[$$include current-process-id]]\n")
("module" . "(:ctime 1014926698 :cuser #f :mtime 1014926698 :muser #f)* [syntax] module [''module-name''] ''interface'' ''defn'' ... ''init'' ...\n\n[[ChezScheme]]: ''Interface'' is a list of ''exports'', and each\n''export'' is either an ''identifier'' or (''identifier'' ''export'' ...).\n\nChez's module can appear anywhere, and can close local variables\nvisible when created.\n\nSTk, STklos, Gauche and Guile uses [[define-module]] mechanism instead.\n\nSee also [[import]], [[import-only]].\n")
("Index:i" . "(:ctime 1014842887 :cuser #f :mtime 1015014547 :muser #f)[[$$index i]]\n\n")
("punctuation" . "(:ctime 1018071873 :cuser #f :mtime 1018071873 :muser #f)[[$$include lower-case]]\n")
("char-set:blank" . "(:ctime 1018082711 :cuser #f :mtime 1018082711 :muser #f)[[$$include char-set:lower-case]]\n")
("current-seconds" . "(:ctime 1015052184 :cuser #f :mtime 1201867128 :muser #f)* [procedure] current-seconds\n\n[[Chicken]]: returns the number of seconds passed since Unix Epoch\n(1970/1/1 00:00:00 GMT).  See also [[seconds->local-time]],\n[[seconds->utc-time]], [[time->string]].\n\n[[MzScheme]]: also has this, but the epoch is said to be platform-dependent.\n\nThis is called [[sys-time]] or [[posix-time]] in some\nimplementations.\n\nSee also: [[current-milliseconds]]\n")
("debug-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144505100 :muser #f)* [procedure] debug-compare ''compare''\n[[SRFI-67]]: Constructs a compare procedure equivalent to ''compare'' but with debugging code\nwrapped around the calls to ''compare''. The debugging code signals an error if it\ndetects a violation of the axioms of a compare function. For this it is assumed\nthat compare has no side-effects.\n")
("as8" . "(:ctime 1099398086 :cuser #f :mtime 1099398086 :muser #f)[[$$include ac64]]\n")
("fx*" . "(:ctime 1014950426 :cuser #f :mtime 1191224219 :muser #f)* [procedure] fx* ''fixnum'' ...\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[*]]\n\n* [procedure] fx* ''fixnum1'' ''fixnum2''\n\n[[R6RS]], [[Chicken]]: only binary operator is provided.\n\n")
("cp0-outer-unroll-limit" . "(:ctime 1015024097 :cuser #f :mtime 1015024097 :muser #f)* [procedure] cp0-outer-unroll-limit\n\n[[ChezScheme]]: compiler parameter.\n")
("julian-day->time-utc" . "(:ctime 1099301011 :cuser #f :mtime 1099301011 :muser #f)[[$$include julian-day->date]]\n")
("primitive-throw" . "(:ctime 1161201462 :cuser #f :mtime 1161207462 :muser #f)* [procedure] primitive-throw ''exception''\n\n[[Kawa]]: Throws an ''exception'', which must be an instance of\nsubclass of java.lang.Throwable.\n\n")
("slices" . "(:ctime 1201745661 :cuser #f :mtime 1201745661 :muser #f)* [procedure] slices ''list'' 'size'' [''fill?'' ''padding'']\n\n[[Gauche]]:\n Splits ''list'' into the sublists (slices) where the length of each\n slice is ''k''.  Provided in util.list module.\n")
("unwind-protect" . "(:ctime 1043984355 :cuser #f :mtime 1043984355 :muser #f)* [syntax] unwind-protect ''expr'' ''protect''\n\n[[Bigloo]]: Evaluates ''expr'', then ''protect'', then\nreturns the value of ''expr''.\nIf ''expr'' invokes an escape procedure\n(a procedure bounded by the [[bind-exit]] special form),\n''protect'' is evaluated before the control jump to the escape \nprocedure.\n\n(NB: Bigloo manual is not clear about interaction between \nunwind-protect and [[dynamic-wind]].)\n\n")
("pathname-directory-separator" . "(:ctime 1015051153 :cuser #f :mtime 1099741923 :muser #f)* [variable] pathname-directory-separator\n\n[[Chicken]]:\n\nSTklos has [[file-separator]].\n\n")
("fold-left" . "(:ctime 1293028540 :cuser #f :mtime 1293140670 :muser #f)* [procedure] fold-left ''combine'' ''nil'' ''list1'' ...\n\n[[R6RS]]: If one list ''list1'' == (''e0'' ''e1'' ... ''eN'') is given,\nthe result would be:\n\n  (''combine'' (... (''combine'' (''combine'' ''nil'' ''e0'') ''e1'') ... ) ''eN'')\n\nIf more than one list are given, ''combine'' takes as many arguments as the number of list plus 1.  Lengths of all lists must be the same.\n\nSee also: [[fold-right]], [[fold]].\n")
("pair-fold-right" . "(:ctime 1014866660 :cuser #f :mtime 1014866660 :muser #f)* [procedure] pair-fold-right ''kons'' ''knil'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Holds the same relationship with [[fold-right]] that \n[[pair-fold]] holds with [[fold]]. Obeys the recursion \n\n     (pair-fold-right kons knil lis) = \n         (kons lis (pair-fold-right kons knil (cdr lis)))\n     (pair-fold-right kons knil '()) = knil\n\nSee also [[pair-fold]].\n")
("null-environment" . "(:ctime 1014854930 :cuser #f :mtime 1191232681 :muser #f)* [procedure] null-environment ''version''\n\n[[R5RS]]: Returns the environment specifier that represents an environment\nwhich only contains syntactic bindings of the ''version''-th report of Scheme.\nIn R5RS, only 5 is the valid number for ''version''.\n\n[[R6RS]]: This is moved to R5RS compatibility library '''(rnrs r5rs (6))'''.\nOnly 5 is allowed as ''version''.   In R6RS, you can use [[environment]]\ninstead.\n\nSee also [[eval]], [[interaction-environment]], [[scheme-report-environment]].\n")
("thread-terminate!" . "(:ctime 1015927412 :cuser #f :mtime 1015928276 :muser #f)* [procedure] thread-terminate! ''thread''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("number-of-slots" . "(:ctime 1015281240 :cuser #f :mtime 1015281265 :muser #f)* [procedure] number-of-slots ''block''\n\n[[Chicken]]: returns the number of slots in ''block'', which may be\na vector, a record structure, a pair or a symbol.  See also\n[[block-ref]], [[block-set!]].\n")
("clear-hash-table!" . "(:ctime 1015070735 :cuser #f :mtime 1015070735 :muser #f)* [procedure] clear-hash-table! ''hash-table''\n\n[[ChezScheme]]\n\nSee [[make-hash-table]].\n")
("current-thread" . "(:ctime 1015927238 :cuser #f :mtime 1020749753 :muser #f)* [procedure] current-thread\n\n[[SRFI-18]], [[SRFI-21]]: Returns the current thread.\n\nAlso in [[Scsh]], [[MzScheme]].\n")
("force" . "(:ctime 1014854130 :cuser #f :mtime 1191228090 :muser #f)* [procedure] force ''obj''\n\n[[R5RS]]\n\nIn [[R6RS]] this is moved to the R5RS compatibility library '''(rnrs r5rs (6))'''.\n\n\nSee also [[delay]].\n")
("set-file-mode" . "(:ctime 1018346262 :cuser #f :mtime 1039755389 :muser #f)* [procedure] set-file-mode ''fname/fd/port'' ''mode''\n* [procedure] set-file-owner ''fname/fd/port'' ''uid''\n* [procedure] set-file-group ''fname/fd/port'' ''gid''\n\n[[Scsh]]: chmod(2) and chown(2).\n\nSome implementations have the same functionality\nwith the names like \n[[change-file-mode]]/[[change-file-owner]],\n[[sys-chmod]]/[[sys-chown]], or [[chmod]].\n")
("mod0" . "(:ctime 1191219523 :cuser #f :mtime 1191219523 :muser #f)* [procedure] mod0 ''x1'' ''x2''\n\n[[R6RS]]: See [[div0]].\n")
("time-process" . "(:ctime 1015208868 :cuser #f :mtime 1015208873 :muser #f)[[$$include time-duration]]\n")
("number?" . "(:ctime 1014854744 :cuser #f :mtime 1191210813 :muser #f)* [procedure] number? ''obj''\n\n[[R5RS]], [[R6RS]]\n\nNote: In R6RS, (number? +inf.0), (number? -inf.0), (number? +nan.0) are all #t.\n\nSee also [[complex?]], [[real?]], [[rational?]], [[integer?]].\n")
("_SidePane" . "(:ctime 1099262379 :cuser #f :mtime 1474476294 :muser #f)* About This Site\n\n[http: Home]~%\n[[WhatIsSchemeCrossReference]]~%\n[[EditGuideline]]~%\n[[Discussion]]~%\n[http:?c=rss RSS]~%\n\n* Alphabetical Index\n\n[http:?Index:a a]\n[http:?Index:b b]\n[http:?Index:c c]\n[http:?Index:d d]\n[http:?Index:e e]\n[http:?Index:f f]\n[http:?Index:g g]\n[http:?Index:h h]\n[http:?Index:i i]\n[http:?Index:j j]\n[http:?Index:k k]\n[http:?Index:l l]\n[http:?Index:m m]\n[http:?Index:n n]\n[http:?Index:o o]\n[http:?Index:p p]\n[http:?Index:q q]\n[http:?Index:r r]\n[http:?Index:s s]\n[http:?Index:t t]\n[http:?Index:u u]\n[http:?Index:v v]\n[http:?Index:w w]\n[http:?Index:x x]\n[http:?Index:y y]\n[http:?Index:z z]\n[http:?Index:punctuation other]\n\n* Concepts\n\n[[$$cindex Concept:]]\n\n* Implementations\n\n- [[RRS]]\n- [[RRRS]]\n- [[R3RS]]\n- [[R4RS]]\n- [[R5RS]]\n- [[R6RS]]\n- [[R7RS]]\n- [[SRFI]]:\n[http:?SRFI-0 0]\n[http:?SRFI-1 1]\n[http:?SRFI-2 2]\n[http:?SRFI-4 4]\n[http:?SRFI-5 5]\n[http:?SRFI-6 6]\n[http:?SRFI-7 7]\n[http:?SRFI-8 8]\n[http:?SRFI-9 9]\n[http:?SRFI-10 10]\n[http:?SRFI-11 11]\n[http:?SRFI-13 13]\n[http:?SRFI-14 14]\n[http:?SRFI-16 16]\n[http:?SRFI-17 17]\n[http:?SRFI-18 18]\n[http:?SRFI-19 19]\n[http:?SRFI-21 21]\n[http:?SRFI-22 22]\n[http:?SRFI-23 23]\n[http:?SRFI-25 25]\n[http:?SRFI-26 26]\n[http:?SRFI-27 27]\n[http:?SRFI-28 28]\n[http:?SRFI-29 29]\n[http:?SRFI-30 30]\n[http:?SRFI-31 31]\n[http:?SRFI-34 34]\n[http:?SRFI-35 35]\n[http:?SRFI-36 36]\n[http:?SRFI-37 37]\n[http:?SRFI-38 38]\n[http:?SRFI-39 39]\n[http:?SRFI-40 40]\n[http:?SRFI-41 41]\n[http:?SRFI-42 42]\n[http:?SRFI-43 43]\n[http:?SRFI-44 44]\n[http:?SRFI-45 45]\n[http:?SRFI-46 46]\n[http:?SRFI-47 47]\n[http:?SRFI-48 48]\n[http:?SRFI-49 49]\n[http:?SRFI-51 51]\n[http:?SRFI-54 54]\n[http:?SRFI-55 55]\n[http:?SRFI-57 57]\n[http:?SRFI-58 58]\n[http:?SRFI-59 59]\n[http:?SRFI-60 60]\n[http:?SRFI-61 61]\n[http:?SRFI-62 62]\n[http:?SRFI-63 63]\n[http:?SRFI-64 64]\n[http:?SRFI-66 66]\n[http:?SRFI-67 67]\n[http:?SRFI-69 69]\n[http:?SRFI-70 70]\n[http:?SRFI-71 71]\n[http:?SRFI-72 72]\n[http:?SRFI-74 74]\n[http:?SRFI-78 78]\n[http:?SRFI-86 86]\n[http:?SRFI-87 87]\n[http:?SRFI-88 88]\n[http:?SRFI-89 89]\n[http:?SRFI-90 90]\n[http:?SRFI-94 94]\n[http:?SRFI-95 95]\n[http:?SRFI-96 96]\n[http:?SRFI-97 97]\n[http:?SRFI-98 98]\n[http:?SRFI-99 99]\n[http:?SRFI-100 100]\n[http:?SRFI-101 101]\n[http:?SRFI-105 105]\n[http:?SRFI-106 106]\n[http:?SRFI-108 108]\n[http:?SRFI-109 109]\n[http:?SRFI-110 110]\n[http:?SRFI-111 111]\n- [[Bigloo]]\n- [[ChezScheme]]\n- [[Chicken]]\n- [[Foment]]\n- [[Gambit]]\n- [[Gauche]]\n- [[Guile]]\n- [[Ikarus]]\n- [[IronScheme]]\n- [[Kawa]]\n- [[Larceny]]\n- [[LispMe]]\n- [[MIT-Scheme]]\n- [[Mosh]]\n- [[MzScheme]]\n- [[Pika-Scheme]]\n- [[PLT-Scheme]]\n- [[Pocket-Scheme]]\n- [[Sagittarius]]\n- [[Scheme48]]\n- [[Schoca]]\n- [[Schluessel]]\n- [[SCM]]\n- [[Scsh]]\n- [[SigScheme]]\n- [[SISC]]\n- [[SLIB]]\n- [[Stalin]]\n- [[STk]]\n- [[STklos]]\n- [[T]]\n- [[Viivi]]\n- [[Ypsilon]]\n- [[Cross-Implementation Libraries]]\n\n* External Links\n\n[http://snow.iro.umontreal.ca/ Scheme Now!]\n\n[https://wayback.archive.org/web/20130705104404/http://scheme-punks.cyber-rush.org/wiki/index.php?title=Main_Page ERR5RS]\n\n[http://www.schemers.org Schemers.org]\n\n[http://community.schemewiki.org Community-Scheme-Wiki]\n\n[http://strader.xs4all.nl/csan/index.html CSAN]\n\n[http://www.schemecookbook.org Scheme Cookbook]\n")
("fp<" . "(:ctime 1191226804 :cuser #f :mtime 1191226804 :muser #f)[[$$include fp=]]\n")
("real-log" . "(:ctime 1170264990 :cuser #f :mtime 1170267309 :muser #f)* real-log ''y'' ''x''\n\n[[SRFI-94]]: returns logarithm of ''x'' base ''y''. signals error if the arguments ''x'' and ''y'' are both not real or the result is not real. (real-log y x) == (/ (real-ln x) (real-ln y)).\n\nSee also [[real-ln]].\n")
("=" . "(:ctime 1014954649 :cuser #f :mtime 1191216224 :muser #f)* [procedure] = ''z1'' ''z2'' ...\n* [procedure] < ''x1'' ''x2'' ...\n* [procedure] <= ''x1'' ''x2'' ...\n* [procedure] > ''x1'' ''x2'' ...\n* [procedure] >= ''x1'' ''x2'' ...\n\n[[R5RS]], [[R6RS]]\n\nIn R6RS:\n\n   (= +inf.0 +inf.0) => #t\n   (= -inf.0 +inf.0) => #f\n   (= -inf.0 -inf.0) => #t\n\n When ([[finite?]] ''x'') => #t, \n   (< -inf.0 ''x'' +inf.0) => #t \n   (> +inf.0 ''x'' -inf.0) => #t \n\n When ([[number?]] ''z'') => #t,\n   (= +nan.0 ''z'') => #f\n   (> +nan.0 ''z'') => #f\n   (< +nan.0 ''z'') => #f\n")
("delete-keyword" . "(:ctime 1138263996 :cuser #f :mtime 1138264577 :muser #f)* [procedure] delete-keyword ''keyword'' ''kv-list''\n* [procedure] delete-keyword! ''keyword'' ''kv-list''\n\n[[Gauche]]: deletes ''keyword'' and corresponding value from\n''kv-list''.\n\n{{{\n(delete-keyword :foo '(:bar 3 :foo 2 :boo 4)) => (:bar 3 :boo 4)\n}}}\n\nSTklos has [[key-delete]] and [[key-delete!]].\n")
("char-set<=" . "(:ctime 1015889926 :cuser #f :mtime 1015889926 :muser #f)[[$$include char-set=]]\n")
("nonnegative?" . "(:ctime 1014955193 :cuser #f :mtime 1014955193 :muser #f)* [procedure] nonnegative? ''real''\n\n[[ChezScheme]]\n\nSee also [[negative?]], [[nonpositive?]]\n")
("define-foreign-type" . "(:ctime 1015046252 :cuser #f :mtime 1015046252 :muser #f)* [syntax] define-foreign-type ''name'' ''type'' [''argconvert'' ''retconvert'']\n\n[[Chicken]]: defines alias for type ''type''.\n")
("idlok" . "(:ctime 1015877014 :cuser #f :mtime 1015877014 :muser #f)[[$$include clearok]]\n")
("ucs2-lower-case?" . "(:ctime 1039429486 :cuser #f :mtime 1039429486 :muser #f)[[$$include ucs2-alphabetic?]]\n")
("a:floc32b" . "(:ctime 1144485145 :cuser #f :mtime 1144529215 :muser #f)* [procedure] a:floc32b [''z'']\n[[SRFI-63]]: Returns an inexact 32.bit flonum complex uniform-array prototype.\n")
("name->signal" . "(:ctime 1020374074 :cuser #f :mtime 1020374074 :muser #f)* [procedure] name->signal ''symbol''\n\n[[Scheme48]]: convert signal name (such as 'abrt,\n'int, 'kill, etc) to a signal object.  Returns #f\nif the system doesn't have the signal.\nSee also [[integer->signal]], [[signal?]], \n[[signal-name]], [[signal-os-number]], [[signal=?]],\n[[signal-process]], [[make-signal-queue]].\n")
("list-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535191 :muser #f)* [syntax] list-ec ''qualifier'' ... ''expression''\n\n[[SRFI-42]]:\nThe list of values obtained by evaluating ''expression'' once for each\nbinding in the sequence defined by the ''qualifier''s. If there are no\n''qualifier''s the result is the list with the value of ''expression''.\n\n")
("ucs2-string=?" . "(:ctime 1039427950 :cuser #f :mtime 1039427950 :muser #f)* [procedure] ucs2-string=? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string<? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string<=? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string>? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string>=? ''ucs2stra'' ''ucs2strb''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("fx/" . "(:ctime 1014950527 :cuser #f :mtime 1191224278 :muser #f)* [procedure] fx/ ''fixnum1'' ''fixnum2'' ...\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[/]]\n\n* [procedure] fx/ ''fixnum1'' ''fixnum2''\n\n[[Chicken]]: only binary operator is provided.\n\nNote: R6RS doesn't provide fx/, instead it has [[fxdiv]] and [[fxdiv0]].\n")
("SRFI-43" . "(:ctime 1099302623 :cuser #f :mtime 1122428827 :muser #f)SRFI-43: Vector library\n\nhttp://srfi.schemers.org/srfi-43/srfi-43.html\n\n[[$$srfi-implementors]]\n\n----\n** Constructors\n\n[[make-vector]], [[vector]],\n[[vector-unfold]], [[vector-unfold-right]],\n[[vector-copy]], [[vector-reverse-copy]],\n[[vector-append]], [[vector-concatenate]]\n\n** Predicates\n\n[[vector?]],\n[[vector-empty?]],\n[[vector=]]\n\n** Selectors\n\n[[vector-ref]],\n[[vector-length]]\n\n** Iteration\n\n[[vector-fold]], [[vector-fold-right]],\n[[vector-map]], [[vector-map!]],\n[[vector-for-each]],\n[[vector-count]]\n\n** Searching\n\n[[vector-index]], [[vector-index-right]],\n[[vector-skip]], [[vector-skip-right]],\n[[vector-binary-search]],\n[[vector-any]], [[vector-every]]\n\n** Mutators\n\n[[vector-set!]], [[vector-swap!]],\n[[vector-fill!]],\n[[vector-reverse!]],\n[[vector-copy!]], [[vector-reverse-copy!]]\n\n** Conversion\n\n[[vector->list]], [[reverse-vector->list]],\n[[list->vector]], [[reverse-list->vector]] \n")
("setenv" . "(:ctime 1015199803 :cuser #f :mtime 1015964138 :muser #f)* [procedure] setenv ''variable'' ''name''\n\n[[Chicken]]: modify the environment variable.\nSee [[current-environment]], [[unsetenv]].\n\nAlso in [[Scsh]].\n\nThis is called [[setenv!]] or [[sys-putenv]] on some\nimplementations.\n")
("filesystem-root-list" . "(:ctime 1020222099 :cuser #f :mtime 1020222099 :muser #f)* [procedure] filesystem-root-list\n\n[[MzScheme]]: returns a list of all current\nroot directories.\n")
("truncate" . "(:ctime 1014853914 :cuser #f :mtime 1191219955 :muser #f)[[$$include floor]]\n")
("date-year-day" . "(:ctime 1023886331 :cuser #f :mtime 1023886331 :muser #f)[[$$include date-nanosecond]]\n")
("socket-output" . "(:ctime 1018343417 :cuser #f :mtime 1018343417 :muser #f)[[$$include socket-input]]\n")
("vector-copy" . "(:ctime 1014945695 :cuser #f :mtime 1327407123 :muser #f)* [procedure] vector-copy ''vector''\n\n[[ChezScheme]], [[STk]]\n\n* [procedure] vector-copy ''vector'' [''start'' ''end'' ''fill'']\n\n[[SRFI-43]]: can take optional start and end index.  Furthermore,\nif the range spans to outside of ''vector'', the corresponding\nelements of the new vector is filled by ''fill''.\n\n* [procedure] vector-copy ''vector'' [''start'' ''end'']\n\n[[Gauche]]: can take optional start and end index.\n\n* [procedure] vector-copy ''vector'' ''start'' ''end''\n\n[[Bigloo]]: requires start and end index.\n [http://www.obtenir-rio.info numero rio]\n")
("current-exception-handler" . "(:ctime 1015927793 :cuser #f :mtime 1063318259 :muser #f)* [procedure] current-exception-handler\n\n[[SRFI-18]], [[SRFI-21]]: Returns the current exception handler.\n\nAlso in [[MzScheme]], [[Gauche]].\n\nSee also [[with-exception-handler]], [[raise]], [[with-handlers]].\n\n")
("with-error-to-string" . "(:ctime 1018334311 :cuser #f :mtime 1039755533 :muser #f)* [procedure] with-error-to-string ''thunk''\n\n[[Bigloo]], [[STk]]: see also [[with-input-from-string]],\n[[with-output-to-string]].\n")
("let-optionals" . "(:ctime 1015043949 :cuser #f :mtime 1459596754 :muser #f)* [syntax] let-optionals ''args'' ((''var'' ''default'') ...) ''body'' ...\n\n[[Chicken]]: binds optional arguments.  See also [[let-optionals*]].\n\n\n")
("concatenate!" . "(:ctime 1014864471 :cuser #f :mtime 1014864471 :muser #f)* [procedure] concatenate! ''list-of-lists''\n\n[[SRFI-1]]: linear-update variant of [[concatenate]].\n")
("open/rdonly" . "(:ctime 1015106269 :cuser #f :mtime 1327433029 :muser #f)* [variable] open/rdonly\n* [variable] open/wronly \n* [variable] open/rdwr \n* [variable] open/read \n* [variable] open/write \n* [variable] open/creat \n* [variable] open/append \n* [variable] open/excl \n* [variable] open/noctty \n* [variable] open/nonblock \n* [variable] open/trunc \n* [variable] open/sync\n\n[[Chicken]] flags to use for [[file-open]].\n")
("with-current-input-port*" . "(:ctime 1018381715 :cuser #f :mtime 1036928269 :muser #f)* [procedure] with-current-input-port* ''port'' ''thunk''\n* [procedure] with-current-output-port* ''port'' ''thunk''\n* [procedure] with-error-output-port* ''port'' ''thunk''\n\n[[Scsh]]: use ''port'' as a current input/output/error\nport and executes ''thunk''.\nSee also [[with-current-input-port]], \n[[with-current-output-port]],\n[[with-error-output-port]],\n[[set-current-input-port!]],\n[[set-current-output-port!]],\n[[set-error-output-port!]].\n\n\nThese functions are called\n[[with-input-from-port]], [[with-output-to-port]]\nand [[with-error-to-port]]/[[with-error-output-to-port]]\nin some implementations.\n")
("fxnonnegative?" . "(:ctime 1014951168 :cuser #f :mtime 1014951168 :muser #f)* [procedure] fxnonnegative? ''fixnum''\n\n[[ChezScheme]]\n\nSee also [[fixnum?]]\n")
("infinite?" . "(:ctime 1191210530 :cuser #f :mtime 1191210530 :muser #f)* [procedure] infinite? ''x''\n\n[[R6RS]]: ''x'' must be a number object.  Returns #t iff ''x'' is an\ninfinity.\n\nSee also [[finite?]], [[nan?]], [[inf.0]].\n")
("open/creat" . "(:ctime 1015106357 :cuser #f :mtime 1015106357 :muser #f)[[$$include open/rdonly]]\n")
("nocbreak" . "(:ctime 1015877200 :cuser #f :mtime 1015877200 :muser #f)[[$$include cbreak]]\n")
("hashtable-equivalence-function" . "(:ctime 1191361033 :cuser #f :mtime 1191361034 :muser #f)* [procedure] hashtable-equivalence-function ''hashtable''\n\n[[R6RS]]: Returns the equivalence procedure of ''hashtable''.\n\nSee also [[Concept:HashTable]], [[hashtable-hash-function]].\n")
("EditGuideline" . "(:ctime 1014940242 :cuser #f :mtime 1100179688 :muser #f)* Editing Entries\n\n- Click ''Edit'' link on the top-right of any page and you're in\n  the editing mode.  The text formatting rule is shown below\n  the textarea.\n\n- Take a look at the editing screen of existing entries and it will give you\n  a good idea of how it works.\n\n- If your Scheme has the feature with the same name of existing  \n  entry but implements different interface/function, you can write\n  an entry like [[define-module]].\n\n- If somebody else edits the page simultaneously, both edits are merged\n  if possible.  If two modification conflicts, the one that commits later\n  will be notified so, and asked to edit again.\n\n- There are several macros to help to write entries.  See \n[http://www.shiro.dreamhost.com/scheme/wiliki/wiliki.cgi?WiLiKi:Macros&l=en WiLiKi:Macros].\n\n* Adding Entries\n\n- Use the procedure name or syntactic keyword name as ''WikiName''.\n  You can use most ASCII caracters as a WikiName in\n  [http://www.shiro.dreamhost.com/scheme/wiliki/wiliki.cgi WiLiKi].\n  One exception is '$': you can't create an entry with '$' in it (for now).\n\n- If you want to add an entry that is in the listed implementations,\n  go to that implmentation page, click ''Edit'', and add the entry\n  name like [''''''[''entry'']''''''] and commit.  It automatically becomes\n  a hyperlink.  If there's no ''entry'' yet, it shows a question mark\n  with a link after ''entry''; clicking a link brings up a new editing \n  screen.  (In order to add a new page, the page should already be referenced\n  from some other pages).\n\n- Your entry will appear in the relevant index page automatically.\n\n- To remove a page, just erase everything and commit.\n\n* Adding New Implementation\n\n- If you want to add a new implementation, you need more work.\n  First, go to the page [[_SidePane]] and adds a link to the implementation\n  name (e.g. [''''''[''my-scheme'']'''''']).  Commit it, then follow the\n  question mark to enter the data into the new page.  See other implementation's\n  pages to get ideas.\n\n- Even if some entries are already in the database, you want to\n  check it, for the function may work differently in other implementations.\n\n")
("apropos" . "(:ctime 1018344492 :cuser #f :mtime 1308084286 :muser #f)* [procedure] apropos ''symbol''\n\n[[STk]]: Returns a list of symbols whose name contains\n''symbol'' from the current environment.\n\n* [procedure] apropos ''symbol'' [''module'']\n\n[[STklos]]: takes optional module argument.\n\n* [syntax] apropos ''symbol-or-regexp'' [''module'']\n\n[[Gauche]]: prints the symbols and its defined modules\nwhose name contains (or matches) ''symbol-or-regexp''\nand visible from the current module.\nIf ''module'' is given, symbols are searched only in \nthe specified module.\n\n* [procedure] apropos ''regexp-string'' [''options...'']\n\n[[Guile]]: prints bindings matching ''regexp-string''.\n''options'' are combination of symbols: full, shadow, value. \nIf ''option'' 'value is supplied, bound values of constants are displayed.\n")
("boolean=?" . "(:ctime 1191313929 :cuser #f :mtime 1191313929 :muser #f)* [procedure] boolean=? ''bool1'' ''bool2'' ''bool3'' ...\n\n[[R6RS]]: Returns #t if all booleans are the same.\n")
("ucs2-downcase" . "(:ctime 1039429969 :cuser #f :mtime 1039429969 :muser #f)[[$$include ucs2-upcase]]\n")
("negate" . "(:ctime 1018037976 :cuser #f :mtime 1018038827 :muser #f)* [procedure] negate ''char-set''\n\n[[Scheme48]]: negates the character set.\nSee [[set]] about character sets.\n\nSRFI-14 calls this [[char-set-complement]].\n")
("begin0" . "(:ctime 1018676144 :cuser #f :mtime 1035601552 :muser #f)* [syntax] begin0 ''expr1'' ''expr2'' ...\n\n[[MzScheme]], [[Gauche]]: evaluates ''expr''s, then returns the\nresult(s) of evaluation of ''expr1''.\n")
("expt-mod" . "(:ctime 1014954963 :cuser #f :mtime 1014954963 :muser #f)* [procedure] expt-mod ''int1'' ''int2'' ''int3''\n\n[[ChezScheme]]: (lambda (x y z) (modulo (expt x y) z))\n\n")
("warning" . "(:ctime 1014963861 :cuser #f :mtime 1014963861 :muser #f)* [procedure] warning ''symbol'' ''string'' ''obj'' ...\n\n[[ChezScheme]]\n\nSee also [[error]]\n")
("current-pseudo-random-generator" . "(:ctime 1019619460 :cuser #f :mtime 1019619460 :muser #f)* [procedure] current-pseudo-random-generator [''newgen'']\n\n[[MzScheme]]: gets/sets the current pseudo random\ngenerator.\n\nSee also [[random]], [[make-pseudo-random-generator]],\n[[pseudo-random-generator?]]\n")
("&i/o-file-already-exists-error" . "(:ctime 1099273781 :cuser #f :mtime 1099273781 :muser #f)* [condition-type] &i/o-file-already-exists-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-file-already-exists-error &i/o-filename-error\n  i/o-file-already-exists-error?)\n}}}\n\nSee [[&condition]], [[&i/o-filename-error]].\n")
("magnitude-squared" . "(:ctime 1014955325 :cuser #f :mtime 1014955325 :muser #f)* [procedure] magnitude-squared ''number''\n\n[[ChezScheme]]: returns magnitude of ''number'' squared.\n\nSee also [[magnitude]], [[cfl-magnitude-squared]]\n")
("split-at!" . "(:ctime 1014863935 :cuser #f :mtime 1014863935 :muser #f)* [procedure] split-at! ''x'' ''k''\n\n[[SRFI-1]]: linear update variant of [[split-at]].\n\n")
("hash-table-values" . "(:ctime 1015915565 :cuser #f :mtime 1144494940 :muser #f)* [procedure] hash-table-values ''hash-table''\n\n[[SRFI-69]]: Returns a list of values in ''hash-table''.\nThe order of the values is unspecified, and is not guaranteed to match the order of keys in the result of [[hash-table-keys]].\n\n[[$$include hash-table-keys]]\n")
("define-module" . "(:ctime 1014927188 :cuser #f :mtime 1327407102 :muser #f)* [syntax] define-module ''name'' ''clause'' ...\n\n[[Chicken]]: ''clause'' should be a form with [[export]], [[import]],\n[[import-excluding]], [[files]], [[begin]], or [[unit]].\nDefines the module named ''name''.  Previous definition will be overwritten.\nSee also [[Chicken:ModuleSystem]].\n\n* [syntax] define-module ''name'' ''expr'' ...\n\n[[STk]], [[STklos]], [[Gauche]]: Creates module ''name'' (symbol) if\nit doesn't exist yet, then evaluates ''expr''s with making the new\nmodule the current module.  If there's already a module ''name'',\ndefinition will be added to the existing module.\n\nThe 'current module' is reset after this form.\n\nChezScheme has [[module]] that does similar thing.\n\nSee also [[import]], [[export]], [[export-all]], [[select-module]],\n[[current-module]], [[use]], [[Gauche:ModuleSystem]], [[STklos:ModuleSystem]].\n\n* [syntax] define-module ''name'' ''option'' ...\n\n[[Guile]]: Creates module ''name'' (a list) with specified ''options''.\n''Options'' include: :use-module, :use-syntax, :autoloat, :export,\n:no-backtrace.\n\nThe 'current module' is switched to ''name'' after this form.\n\nSee also [[export]], [[define-public]], [[use-module]], [[Guile:ModuleSystem]].\n\n [http://www.obtenir-rio.info B and You]\n")
("Pika-Scheme" . "(:ctime 1173770840 :cuser #f :mtime 1365112522 :muser #f)Pika Scheme is a new implementation of the Scheme programming language. It is a work-in-progress -- not yet a useful implementation.\n\nhttp://regexps.srparish.net/www/#pika\n")
("integer->string" . "(:ctime 1039409235 :cuser #f :mtime 1039409235 :muser #f)* [procedure] integer->string ''i'' [''radix'']\n\n[[Bigloo]]: number->string, but only accepts integers.\nSee [[elong->string]] and [[llong->string]].\nSee also [[string->integer]].\n\n")
("#;" . "(:ctime 1015041664 :cuser #f :mtime 1122431125 :muser #f)* [reader syntax] #;''expr''\n\n[[SRFI-62]], [[ChezScheme]], [[Chicken]], [[SISC]], [[Gauche]]: ignores ''expr''.\n")
("fprint" . "(:ctime 1039756381 :cuser #f :mtime 1039756381 :muser #f)* [procedure] fprint ''oport'' ''obj'' ...\n\n[[Bigloo]]: [[print]] with ''oport'' argument.\n")
("identifier?" . "(:ctime 1014962435 :cuser #f :mtime 1014962435 :muser #f)* [procedure] identifier? ''obj''\n\n[[ChezScheme]]: used in lower level macro.\n\n[[Gauche]] also has it, but it doesn't have other support of [[syntax-case]] \nyet, so there's little use of it.\n\nSee also [[syntax-case]]\n")
("with-errno-handler*" . "(:ctime 1036969864 :cuser #f :mtime 1036969864 :muser #f)* [procedure] with-errno-handler* ''handler'' ''thunk''\n\n[[Scsh]]: sets unix syscall error handler and calls ''thunk''.\nSee also [[with-errno-handler]], [[errno-error]].\n")
("werase" . "(:ctime 1015882769 :cuser #f :mtime 1015882769 :muser #f)* [procedure] werase ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("lcm" . "(:ctime 1014854209 :cuser #f :mtime 1191219686 :muser #f)* [procedure] lcm ''n1'' ...\n\n[[R5RS]], [[R6RS]]\n\nSee also [[gcd]].\n")
("files" . "(:ctime 1014882336 :cuser #f :mtime 1063413488 :muser #f)* [configuration language] files ''filename'' ...\n\n[[SRFI-7]], [[Scheme48]]\n\nSee also [[requires]], [[code]], [[feature-cond]], [[program]], [[Scheme48:ModuleSystem]].\n\n* [module clause] files ''filename'' ...\n\n[[Chicken]]: defines sources of module.  See [[define-module]].\n\n")
("sys-sleep" . "(:ctime 1038486288 :cuser #f :mtime 1038486375 :muser #f)* [procedure] sys-sleep ''seconds''\n\n[[Gauche]]: POSIX sleep().  See also [[sys-nanosleep]],\n[[sys-alarm]].\n\nMzScheme has [[sleep]].\n\nSRFI-18 and SRFI-21 have [[thread-sleep!]].\n")
("Schluessel" . "(:ctime 1307710236 :cuser #f :mtime 1324989958 :muser #f)A [[R5RS]] Scheme Implementation on Java\n\nhttp://schluessel.sourceforge.jp/\n----\n[[$$srfis 0 2 4 8 9 10 13 14 16 18 19 25 27 34 38 39 41 44 47 58 60 63 66 67 69 94 98]]\n")
("char-ready?" . "(:ctime 1014839589 :cuser #f :mtime 1015041417 :muser #f)* [procedure] char-ready? ''port''\n\n[[R5RS]]\n\nThis doesn't work well on some Scheme implementations (in such cases,\nthis just returns #t).  [[Chicken]] says this works only under\nDJGPP correctly.  [[Gauche]]'s char-ready? also behaves poorly.\n\n")
("errorf" . "(:ctime 1014963583 :cuser #f :mtime 1014963583 :muser #f)* [procedure] errorf ''format-string'' ''obj'' ...\n\n[[Gauche]]: like [[error]], but use [[format]] to format error\nmessages.   Equivalent to STk's [[error]].  Gauche's [[error]]\nis compatible to [[SRFI-23]]'s.\n\nSee also [[error]].\n")
("vector-every" . "(:ctime 1099388421 :cuser #f :mtime 1099388421 :muser #f)[[$$include vector-any]]\n")
("canonical-path" . "(:ctime 1018337394 :cuser #f :mtime 1099741535 :muser #f)* [procedure] canonical-path ''path''\n\n[[STk]]: Expands all symbolic links in ''path'' and\nreturns a canonical absolute pathname.\nSee also [[expand-file-name]].\n\nThis function is renamed to [[canonical-file-name]] in STklos.\n")
("primitive?" . "(:ctime 1018333789 :cuser #f :mtime 1019625055 :muser #f)* [procedure] primitive? ''obj''\n\n[[STk]]: returns #t if ''obj'' is a procedure and\nis not a closure.\nSee also [[closure?]], [[promise?]], [[continuation?]]\n\n[[MzScheme]]: returns #t if ''obj'' is a primitive\nprocedure.  See also [[primitive-name]],\n[[primitive-result-arity]], [[primitive-closure?]],\n[[simple-return-primitive?]].\n")
("sys-remove" . "(:ctime 1020321015 :cuser #f :mtime 1020321052 :muser #f)* [procedure] sys-remove ''path''\n\n[[Gauche]]: POSIX remove().  See also [[sys-unlink]].\n\nSome implementations have [[remove-file]],\n[[delete-file]].\n")
("define-record-resumer" . "(:ctime 1017983091 :cuser #f :mtime 1017983091 :muser #f)* [procedure] define-record-resumer ''record-type'' ''resumer''\n\n[[Scheme48]]: see [[define-record-type]].\n")
("time-nanosecond" . "(:ctime 1015209819 :cuser #f :mtime 1015209819 :muser #f)* [procedure] time-nanosecond ''time''\n* [procedure] set-time-nanosecond! ''time'' ''nanoseconds''\n\n[[SRFI-19]]: Getter and setter of ''nanosecond'' field of a time structure ''time''.\nSee also [[make-time]].\n")
("<=/<=?" . "(:ctime 1144494246 :cuser #f :mtime 1144503612 :muser #f)[[$$include </<?]]\n")
("max-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535980 :muser #f)* [syntax] max-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe maximum of all values of ''expression''. The sequence of\nvalues must be non-empty. Think of it as\n([[apply]] [[max]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n")
("queue-remove!" . "(:ctime 1015072038 :cuser #f :mtime 1015072038 :muser #f)* [procedure] queue-remove! ''queue''\n\n[[Chicken]]: removes and returns the first item of ''queue''.\n\nThis is called [[dequeue!]] in some implementations.\n\nSee also [[make-queue]], [[queue-add!]]\n")
("port-output-index" . "(:ctime 1014956395 :cuser #f :mtime 1014956413 :muser #f)* [procedure] port-output-index ''port''\n\n[[ChezScheme]]\n\nSee also [[make-output-port]], [[set-port-output-index!]]\n\n")
("_exit" . "(:ctime 1015200508 :cuser #f :mtime 1015200508 :muser #f)* [procedure] _exit [''code'']\n\n[[Chicken]]: calls POSIX _exit.\n\nGauche has [[sys-exit]] that does the same thing.\n")
("ucs2-string-ci=?" . "(:ctime 1039427999 :cuser #f :mtime 1039427999 :muser #f)* [procedure] ucs2-string-ci=? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string-ci<? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string-ci<=? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string-ci>? ''ucs2stra'' ''ucs2strb''\n* [procedure] ucs2-string-ci>=? ''ucs2stra'' ''ucs2strb''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("thread-priority-boost-set!" . "(:ctime 1015928205 :cuser #f :mtime 1015928205 :muser #f)[[$$include thread-priority-boost]]\n")
("string-index-right" . "(:ctime 1014893460 :cuser #f :mtime 1039752709 :muser #f)* [procedure] string-index-right ''s'' ''char/char-set/pred'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-index]]\n\nGuile has a limited functionality version, [[string-rindex]].\n")
("option-processor" . "(:ctime 1099274425 :cuser #f :mtime 1099274441 :muser #f)[[$$include option-names]]\n")
("mutex-state" . "(:ctime 1015927578 :cuser #f :mtime 1015963623 :muser #f)* [procedure] mutex-state ''mutex''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("signal/cont" . "(:ctime 1015076639 :cuser #f :mtime 1015076639 :muser #f)[[$$include signal/hup]]\n")
("stream-pair?" . "(:ctime 1099279749 :cuser #f :mtime 1099279749 :muser #f)* [procedure] stream-pair? ''obj''\n\n[[SRFI-40]]: Returns #t iff ''obj'' is a stream pair created by\n[[stream-cons]].\n")
("regexp-quote" . "(:ctime 1099777846 :cuser #f :mtime 1099777847 :muser #f)* [procedure] regexp-quote ''string''\n\n[[STklos]], [[Gauche]]: escapes characters special to regexp in ''string''.\nSee [[Concept:RegularExpression]].\n")
("set-car!" . "(:ctime 1014858797 :cuser #f :mtime 1191221006 :muser #f)* [procedure] set-car! ''pair'' ''obj''\n\n[[R5RS]]: Stores ''obj'' in the car field of ''pair''.\n\n[[R6RS]]: In R6RS, this procedure is moved to a library \n'''(rnrs mutable-pairs (6))''', which is ''not'' included \nin the composite library '''(rnrs (6))'''.\n\n\nSee also [[car]], [[set-cdr!]].\n")
("version" . "(:ctime 1018343825 :cuser #f :mtime 1099742740 :muser #f)* [procedure] version\n\n[[STk]]: returns a version string of the current STk.\n\n[[STklos]]: \n\nOther implimentations have similar features, like\n[[gauche-version]] in Gauche.\n")
("logor" . "(:ctime 1039637783 :cuser #f :mtime 1043984854 :muser #f)* [procedure] logor ''n'' ...\n\n[[SISC]]: logical (bitwise) or of exact integers.\nNote that SISC has range limitation in ''n'' (as of 1.6.4).\nSee also [[logand]], [[logxor]], [[lognot]],\n[[ashl]], [[ashr]].\n\nThis function is called [[logior]], [[bitwise-ior]] or\n[[bit-or]]\nin other implementations.\n")
("string->llong" . "(:ctime 1039409395 :cuser #f :mtime 1039409395 :muser #f)[[$$include string->elong]]\n")
("at1" . "(:ctime 1099398120 :cuser #f :mtime 1099398121 :muser #f)[[$$include ac64]]\n")
("file-info-last-access" . "(:ctime 1040727344 :cuser #f :mtime 1040727344 :muser #f)[[$$include file-info-name]]\n")
("ftell" . "(:ctime 1039750289 :cuser #f :mtime 1039750289 :muser #f)* [procedure] ftell ''fd/port''\n\n[[Guile]]: returns an integer for the current position\nof ''fd/port''.  equivalent to\n  (seek port 0 SEEK_CUR)\n\nSee also [[seek]].\n\nScsh has [[tell]].  Some other implementations have\n[[file-position]].\n")
("sys-mkdir" . "(:ctime 1020221889 :cuser #f :mtime 1020221889 :muser #f)* [procedure] sys-mkdir ''path'' ''mode''\n\n[[Gauche]]: POSIX mkdir(2).  See [[Concept:FileSystem]].\n\nThis is called [[make-directory]] or [[create-directory]]\non other implementations.\n")
("open/sync" . "(:ctime 1015106417 :cuser #f :mtime 1015106417 :muser #f)[[$$include open/rdonly]]\n")
("magnitude" . "(:ctime 1014854450 :cuser #f :mtime 1191312954 :muser #f)* [procedure] magnitude ''z''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[angle]], [[real-part]], [[imag-part]].\n")
("remv!" . "(:ctime 1014944924 :cuser #f :mtime 1014944924 :muser #f)* [procedure] remv! ''obj'' ''list''\n\n[[ChezScheme]]: Linear-update version of ''remv''.\nEquivalent to [[SRFI-1]]'s [[delete!]] with passing [[eqv?]] for\ncomparison predicate.\n\nSee also [[remove!]], [[remq!]], [[remv]].\n")
("grep" . "(:ctime 1015102147 :cuser #f :mtime 1015102147 :muser #f)* [procedure] grep ''regex'' ''list''\n\n[[Chicken]].  see [[pattern->regexp]]\n")
("SRFI-130" . "(:ctime 1474475670 :cuser #f :mtime 1474475670 :muser #f)SRFI-130: Cursor-based string library\n\nhttp://srfi.schemers.org/srfi-130/srfi-130.html\n\n[[$$srfi-implementors]]\n")
("input-port-reopen!" . "(:ctime 1039754880 :cuser #f :mtime 1039754880 :muser #f)* [procedure] input-port-reopen! ''iport''\n\n[[Bigloo]]: restart input stream; next read will start\nfrom the beginning of the port.\n")
("errno/mfile" . "(:ctime 1015077257 :cuser #f :mtime 1015077257 :muser #f)[[$$include errno/perm]]\n")
("macro?" . "(:ctime 1015069789 :cuser #f :mtime 1170797356 :muser #f)* [procedure] macro? ''symbol''\n\n[[Chicken]], [[LispMe]], [[MzScheme]], [[STk]].\n\nFor [[LispMe]]'s and [[STk]]'s API, see [[macro]].\n\n")
("file-read" . "(:ctime 1015184225 :cuser #f :mtime 1015184235 :muser #f)* [procedure] file-read ''fileno'' ''size'' [''buffer'']\n\n[[Chicken]]: low-level read(2) interface.   See also [[file-open]],\n[[port->fileno]].\n\nSome other implementation provides a way to read a chunk of data,\nbypassing buffering mechanism; see also [[block-read]] and\n[[read-block]].\n")
("record?" . "(:ctime 1014948683 :cuser #f :mtime 1017982393 :muser #f)* [procedure] record? ''obj''\n\n[[ChezScheme]], [[Scheme48]]\n\nSee also [[make-record-type]], [[define-record]],\n[[define-record-type]].\n")
("zero?" . "(:ctime 1014856704 :cuser #f :mtime 1191216249 :muser #f)* [procedure] zero? ''z''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[negative?]], [[positive?]].\n")
("unbox" . "(:ctime 1014946007 :cuser #f :mtime 1018692685 :muser #f)* [procedure] unbox ''box''\n\n[[ChezScheme]], [[SISC]], [[MzScheme]]: returns content of ''box''.  See [[box]].\n")
("set-port-input-size!" . "(:ctime 1014956605 :cuser #f :mtime 1014956605 :muser #f)* [procedure] set-port-input-size! ''port'' ''n''\n\n[[ChezScheme]]\n\nSee also [[port-input-size]]\n")
("make-absolute-pathname" . "(:ctime 1015100365 :cuser #f :mtime 1015100365 :muser #f)* [procedure] make-absolute-pathname ''directory'' ''filename'' [''extension'']\n\n[[Chicken]]: see also [[make-pathname]], [[decompose-pathname]],\n[[pathname-directory-separator]], [[pathname-extension-separator]].\n")
("select!" . "(:ctime 1018387373 :cuser #f :mtime 1018387373 :muser #f)[[$$include select]]\n")
("user-read-pass" . "(:ctime 1015041216 :cuser #f :mtime 1015041216 :muser #f)* [procedure] user-read-pass [''newval'']\n\n[[Chicken]]: compiler parameter.\n\nSee also [[user-option-pass]], [[user-preprocessor-pass]], [[user-pass]]\n")
("byte-vector->u32vector" . "(:ctime 1015075802 :cuser #f :mtime 1015075802 :muser #f)[[$$include byte-vector->u8vector]]\n")
("Kawa" . "(:ctime 1122430819 :cuser #f :mtime 1161177691 :muser #f)Kawa, the Java-based Scheme System\n\nhttp://www.gnu.org/software/kawa/\n\n[[$$srfis 0 1 4 6 8 9 11 16 17 23 25 26 28 30 37 39 69]]\n----\n\n* Syntax and conditional compilation\n\n[[defmacro]], [[gentemp]]\n\n* Multiple values\n\n[[let-values]], [[let*-values]], [[receive]], [[values-append]]\n\n* Special named constants\n\n[[#!optional]], [[#!rest]], [[#!key]], [[#!eof]], [[#!void]], [[#!null]]\n\n* Keywords\n\n[[keyword?]], [[keyword->string]], [[string->keyword]]\n\n* Procedures\n\n[[constant-fold]], [[procedure-property]], [[set-procedure-property!]],\n[[define-procedure]], [[make-procedure]], \n\n* Numbers\n\n** Quantities\nLike '10pt' or '5cm'.  Generalization of the quantities in DSSSL.\n\n[[quantity?]], [[quantity->number]], [[quantity->unit]],\n[[make-quantity]], [[define-base-unit]], [[define-unit]]\n\n** Extended Number Operations\n[[quotient]], [[remainder]], [[modulo]] - extended to arbitrary real numbers\n\n** Logical number operations\n[[logand]], [[logior]], [[logxor]], [[lognot]],\n[[logop]], [[logtest]], [[logbit?]], [[arithmetic-shift]],\n[[ash]], [[logcount]], [[integer-length]], [[bit-extract]].\n\n* Data structure\n** Lists\n[[reverse!]]\n** Strings\n[[string-upcase]], [[string-downcase]], [[string-capitalize]],\n[[string-upcase!]], [[string-downcase!]], [[string-capitalize!]]\n** Multi-dimensional arrays\nLike [[SRFI-25]].\n** Uniform vectors\nLike [[SRFI-4]]\n** Hash tables\n[[make-hash-table]], [[hash-table?]], [[alist->hash-table]],\n[[hash-table-equivalence-function]], [[hash-table-hash-function]],\n[[hash-table-ref]], [[hash-table-ref/default]],\n[[hash-table-set!]], [[hash-table-delete!]], \n[[hash-table-exists?]], [[hash-table-update!]],\n[[hash-table-update!/default]], [[hash-table-size]],\n[[hash-table-keys]], [[hash-table-values]],\n[[hash-table-walk]], [[hash-table-fold]], \n[[hash-table->alist]], [[hash-table-copy]],\n[[hash-table-merge!]], [[hash]], [[string-hash]], [[string-ci-hash]],\n[[hash-by-identity]]\n\n* Exception handling\n[[catch]], [[throw]], [[error]], [[primitive-throw]], [[try-finally]],\n[[try-catch]], [[dynamic-wind]]\n\n* Eval and environments\n[[eval]], [[environment-bound?]], [[fluid-let]],\n[[base-uri]], [[load-relative]]\n\n** Locations\n[[location]], [[define-alias]]\n\n* Debugging\n[[trace]], [[untrace]]\n\n* Threads\n[[future]], [[force]], [[runnable]], [[sleep]]\n\n* Processes\n[[make-process]], [[system]], [[command-parse]], [[tokenize-string-to-string-array]]\n\n* Miscellaneous\n[[scheme-implementation-version]],\n[[command-line-arguments]],\n[[home-directory]], [[exit]],\n[[scheme-window]], [[when]], [[unless]], [[vector-append]],\n[[instance?]], [[as]], [[synchronized]]\n\n* Input, output, files\n\n* Types\n\n* Object, classes and modules\n\n* Working with XML and HTML\n")
("pseudo-random-generator?" . "(:ctime 1019619526 :cuser #f :mtime 1019619526 :muser #f)* [procedure] pseudo-random-generator? ''obj''\n\n[[MzScheme]]: see [[make-pseudo-random-generator]].\n")
("copy-time" . "(:ctime 1015210004 :cuser #f :mtime 1015210004 :muser #f)* [procedure] copy-time ''time''\n\n[[SRFI-19]]: copies time structure.  See also [[make-time]], [[current-time]].\n")
("import-only" . "(:ctime 1014927698 :cuser #f :mtime 1014927698 :muser #f)* [syntax] import-only ''module-name''\n\n[[ChezScheme]]: imports binding exported from the named module,\nand hides all the other bindings.\n\nSee also [[import]].\n")
("temp-file-channel" . "(:ctime 1244511768 :cuser #f :mtime 1244511769 :muser #f)* [procedure] temp-file-channel\n\n[[Scsh]]: Returns two values, an input port and an output port, which\ncan be used for two processes to communicate.   Like pipe, anything\nwritten to the output port can be read from the output port.  But this\nprocedure uses a temporary file to do so (the file is immediately unliked\nafter created, so it isn't visible from outside).  Thus (1) the writer\nwon't block no matter how the unread data gets larger, and (2) the\nreader won't block if there's not enough data, but actually sees EOF.\n\nSee also: [[pipe]].\n")
("file-info-type" . "(:ctime 1040727290 :cuser #f :mtime 1040727290 :muser #f)[[$$include file-info-name]]\n")
("declare-bundle!" . "(:ctime 1099300170 :cuser #f :mtime 1099300513 :muser #f)* [procedure] declare-bundle! ''bundle-specifier'' ''alist''\n\n[[SRFI-29]]:  Used to prepare a bundle for srfi-29 based localization.\nDeclares a new bundle named by the given ''bundle-specifier''.  \nThe contents of the bundle are defined by ''alist'', which is an assoc list\nof Scheme symbol and message template (string).\n\nThe declared bundle may be saved in implementation-specific format\nby [[store-bundle]].   Once stored, an application can load the bundle\nby [[load-bundle!]], then use [[localized-template]] to obtain a message\ntemplate according to the current locale settings\n(e.g. [[current-language]], [[current-country]], and [[current-locale-details]]).\n\nThe following example is taken from srfi-29 document:\n{{{\n(let ((translations\n       '(((en) . ((time . \"Its ~a, ~a.\")\n                (goodbye . \"Goodbye, ~a.\")))\n         ((fr) . ((time . \"~1@*~a, c'est ~a.\")\n                (goodbye . \"Au revoir, ~a.\"))))))\n  (for-each (lambda (translation)\n              (let ((bundle-name (cons 'hello-program (car translation))))\n                (if (not (load-bundle! bundle-name))\n                    (begin\n                     (declare-bundle! bundle-name (cdr translation))\n                     (store-bundle! bundle-name)))))\n             translations))\n\n(define localized-message\n  (lambda (message-name . args)\n    (apply format (cons (localized-template 'hello-program\n                                            message-name)\n                        args))))\n\n(let ((myname \"Fred\"))\n  (display (localized-message 'time \"12:00\" myname))\n  (display #\\newline)\n\n  (display (localized-message 'goodbye myname))\n  (display #\\newline))\n\n;; Displays (English):\n;; Its 12:00, Fred.\n;; Goodbye, Fred.\n;;\n;; French:\n;; Fred, c'est 12:00.\n;; Au revoir, Fred.\n}}}\n\n\n\n")
("procedure-body" . "(:ctime 1018333998 :cuser #f :mtime 1018333998 :muser #f)* [procedure] procedure-body ''procedure''\n\n[[STk]]: returns the body of ''procedure'', if it is\na closure created by evaluation of a lambda form.\n")
("current-milliseconds" . "(:ctime 1015052099 :cuser #f :mtime 1202874368 :muser #f)* [procedure] current-milliseconds\n\n[[Chicken]], [[MzScheme]]: returns time since the machine or process startup, in milliseconds.  May wrap-around.\n\nSee also: [[current-time]], [[current-seconds]], [[current-microseconds]]\n")
("signal/io" . "(:ctime 1015076616 :cuser #f :mtime 1015076616 :muser #f)[[$$include signal/hup]]\n")
("pathname-replace-file" . "(:ctime 1015100619 :cuser #f :mtime 1015100619 :muser #f)* [procedure] pathname-replace-file ''pathname'' ''file''\n\n[[Chicken]]: see also [[pathname-file]], [[pathname-replace-directory]],\n[[pathname-replace-extension]]\n \n")
("block-write" . "(:ctime 1014958579 :cuser #f :mtime 1014958579 :muser #f)* [procedure] block-write ''output-port'' ''string'' ''count''\n\n[[ChezScheme]]: perform block write, with flushing buffer if\nthe port is buffered.\n\nSee also [[block-read]]\n")
("SRFI-63" . "(:ctime 1122429285 :cuser #f :mtime 1145787458 :muser #f)SRFI 63: Homogeneous and Heterogeneous Arrays\n\nhttp://srfi.schemers.org/srfi-63/srfi-63.html\n\n[[$$srfi-implementors]]\n----\n\n[[array?]]\n\n[[equal?]]\n\n[[array-rank]],\n[[array-dimensions]]\n\n[[make-array]],\n[[make-shared-array]]\n\n[[list->array]],\n[[array->list]],\n[[vector->array]],\n[[array->vector]]\n\n[[array-in-bounds?]]\n\n[[array-ref]], [[array-set!]]\n\n[[a:floc128b]],\n[[a:floc64b]],\n[[a:floc32b]],\n[[a:floc16b]],\n[[a:flor128b]],\n[[a:flor64b]],\n[[a:flor32b]],\n[[a:flor16b]],\n[[a:floq128d]],\n[[a:floq64d]],\n[[a:floq32d]],\n[[a:fixz64b]],\n[[a:fixz32b]],\n[[a:fixz16b]],\n[[a:fixz8b]],\n[[a:fixn64b]],\n[[a:fixn32b]],\n[[a:fixn16b]],\n[[a:fixn8b]],\n[[a:bool]]\n")
("quasiquote" . "(:ctime 1014858051 :cuser #f :mtime 1391811206 :muser #f)* [syntax] quasiquote ''template''\n\n[[R5RS]], [[R6RS]]: \"Backquote\" or \"quasiquote\" expressions are useful for\nconstructing a list or vector structure when most but not all of the\ndesired structure is known in advance. If no commas appear within \nthe ''template'', the result of evaluating `''template'' is\nequivalent to the result of evaluating ' ''template''. If a comma appears within the <qq template>, however, the expression\nfollowing the comma is evaluated (\"unquoted\") and its result is inserted\ninto the structure instead of the comma and the\nexpression. If a comma appears followed immediately by an at-sign (@),\nthen the following expression must evaluate to a list;\nthe opening and closing parentheses of the list are then \"stripped away\"\nand the elements of the list are inserted in place of the\ncomma at-sign expression sequence. A comma at-sign should only appear \nwithin a list or vector ''template''.\n\nNote: Differences between [[R5RS]] and [[R6RS]]:\n- In [[R6RS]], it is a syntax violation if [[quasiquote]], [[unquote]] \nand [[unquote-splicing]] are used other than the way explicitly defined.\nIn [[R5RS]] it was implementation-dependent.\n- In [[R6RS]], it is explicitly stated that the portion of the template\nthat do not need to be rebuilt at runtime are always literal.\n- In [[R6RS]], [[unquote]] and [[unquote-splicing]] forms\nmay have zero or more ''datums'' if they appear in the splicing\nposition.\n\nSee also [[quote]], [[`]].\n")
("&serious" . "(:ctime 1099267681 :cuser #f :mtime 1099267682 :muser #f)* [condition-type] &serious\n\n[[SRFI-35]]: \n\n{{{\n(define-condition-type &serious &condition\n  serious-condition?)\n}}}\n\nSee also [[&condition]], [[serious-condition?]].\n")
("execpath" . "(:ctime 1015888300 :cuser #f :mtime 1015888322 :muser #f)* [procedure] execpath [''newpath'']\n\n[[SCM]]: returns that pathname of the currently executing process, or sets it to ''newpath''.\n")
("sorted?" . "(:ctime 1015072571 :cuser #f :mtime 1015072571 :muser #f)* [procedure] sorted? ''sequence'' ''predicate''\n\n[[Chicken]]: ''sequence'' should be a list or a vector.  ''predicate'' behaves\nlike [[<]].\n\nSee also [[sort]].\n")
("wclear" . "(:ctime 1015882790 :cuser #f :mtime 1015882790 :muser #f)* [procedure] wclear ''win''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("delete" . "(:ctime 1014871041 :cuser #f :mtime 1018333161 :muser #f)* [procedure] delete ''x'' ''list'' [''='']\n\n[[SRFI-1]]: delete uses the comparison procedure ''='', \nwhich defaults to [[equal?]], to find all elements of ''list'' \nthat are equal to ''x'', and\ndeletes them from ''list''. The dynamic order in which the \nvarious applications of ''='' are made is not specified. \n\nNote that some implementations calls this [[remove]].\n\nSee also [[remove]], [[delete!]].\n")
("SRFI-112" . "(:ctime 1474475217 :cuser #f :mtime 1474475217 :muser #f)SRFI-112: Environment Inquiry \n\nhttp://srfi.schemers.org/srfi-112/srfi-112.html\n\n[[$$srfi-implementors]]\n")
("bye" . "(:ctime 1018344651 :cuser #f :mtime 1018344651 :muser #f)* [procedure] bye [''code'']\n\n[[STk]]: synonym to [[quit]].\n")
("glob" . "(:ctime 1015105420 :cuser #f :mtime 1099742015 :muser #f)* [procedure] glob ''pattern'' ...\n\n[[Chicken]], [[Scsh]], [[STk]], [[STklos]]: \nSee [[Concept:FileSystem]].\n\nGauche has [[sys-glob]].\n")
("expt" . "(:ctime 1014853838 :cuser #f :mtime 1191312859 :muser #f)* [procedure] expt ''z1'' ''z2''\n\n[[R5RS]], [[R6RS]]: Returns ''z1'' raised to the power of ''z2''.\n\nR6RS defines these boundary cases:\n\n  (expt 0.0 0.0)  => 1.0\n  (expt 0.0 ''z2'')   => 0.0 if (real-part ''z2'') is positive\n                  => unspecified otherwise\n\nSee also [[log]].\n\n")
("x->char-set" . "(:ctime 1018084996 :cuser #f :mtime 1018084996 :muser #f)[[$$include ->char-set]]\n")
("canonical-file-name" . "(:ctime 1099741595 :cuser #f :mtime 1099741595 :muser #f)* [procedure] canonical-file-name ''path''\n\n[[STklos]]: resolves symlinks in ''path'' and returns\ncanonicalized absolute path.  It was called [[canonical-path]]\nin STk.\n\nSome implementations have [[resolve-path]].\n")
("scheme-report-environment" . "(:ctime 1014854892 :cuser #f :mtime 1191232746 :muser #f)* [procedure] scheme-report-environment ''version''\n\n[[R5RS]]: Returns the environment specifier that represents an environment\nwhich contains bindings defined in the ''version''-th report of Scheme.\nIn R5RS, only 5 is the valid number for ''version''.\n\n[[R6RS]]: This is moved to R5RS compatibility library '''(rnrs r5rs (6))'''.\nOnly 5 is allowed as ''version''.   In R6RS, you can use [[environment]]\ninstead.\n\nSee also [[eval]], [[interaction-environment]], [[null-environment]].\n")
("exact-integer-sqrt" . "(:ctime 1191312438 :cuser #f :mtime 1191312438 :muser #f)* [procedure] exact-integer-sqrt ''k''\n\n[[R6RS]]: Returns two non-negative exact integers ''s'' and ''r'', where\n  ''k'' = ''s''^2 + ''r''\nand\n  ''k'' < (''s''+1)^2\n\nSee also [[sqrt]].\n")
("get-file/link-info" . "(:ctime 1020403957 :cuser #f :mtime 1020404002 :muser #f)[[$$include get-file-info]]\n")
("errno/noent" . "(:ctime 1015077092 :cuser #f :mtime 1015077092 :muser #f)[[$$include errno/perm]]\n")
("input-string-port?" . "(:ctime 1018334116 :cuser #f :mtime 1099726076 :muser #f)* [procedure] input-string-port? ''obj''\n* [procedure] output-string-port? ''obj''\n\n[[STk]], [[STklos]]: see also [[input-file-port?]], [[input-virtual-port?]], etc.\n\nGauche has [[port-type]] to check the type of the port.\n")
("ucs2-string<=?" . "(:ctime 1039428031 :cuser #f :mtime 1039428031 :muser #f)[[$$include ucs2-string=?]]\n")
("i/o-closed-error?" . "(:ctime 1099273461 :cuser #f :mtime 1099273461 :muser #f)* [procedure] i/o-closed-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-closed-error]].\n")
("lset-xor" . "(:ctime 1014875078 :cuser #f :mtime 1014875078 :muser #f)* [procedure] lset-xor ''elt='' ''list1'' ...\n\n[[SRFI-1]]\n")
("mod" . "(:ctime 1170264990 :cuser #f :mtime 1191219372 :muser #f)* mod ''x1'' ''x2''\n\n[[R6RS]]: See [[div]].\n\n[[SRFI-94]]:\n{{{\n(define (mod x1 x2) (- x1 (* x2 (floor (/ x1 x2)))))\n}}}\n\nSee also [[floor]], [[quo]], [[rem]].\n")
("blob-s64-native-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144711758 :muser #f)[[$$include blob-u64-ref]]\n")
("&i/o-closed-error" . "(:ctime 1099273403 :cuser #f :mtime 1099273404 :muser #f)* [condition-type] &i/o-closed-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-closed-error &i/o-port-error\n  i/o-closed-error?)\n}}}\n\nSee [[&condition]], [[&i/o-port-error]].\n")
("pair-compare-car" . "(:ctime 1144494246 :cuser #f :mtime 1144500074 :muser #f)* [procedure] pair-compare-car ''compare''\n[[SRFI-67]]: Construct a compare procedure on pairs which only uses the car, and ignores the other. One could define\n{{{\n(define (pair-compare-car compare)\n  (lambda (x y) (compare (car x) (car y))))\n}}}\n")
("group-id=?" . "(:ctime 1018124401 :cuser #f :mtime 1018124401 :muser #f)[[$$include group-id?]]\n")
("procedure-arity-includes?" . "(:ctime 1019624966 :cuser #f :mtime 1022544076 :muser #f)* [procedure] procedure-arity-includes? ''procedure'' ''k''\n\n[[MzScheme]], [[Gauche]]: returns #t if ''procedure'' can take ''k''\narguments.  See also [[arity]].\n")
("sys-tmpnam" . "(:ctime 1099741192 :cuser #f :mtime 1099741219 :muser #f)* [procedure] sys-tmpnam\n\n[[Gauche]]: creates a temporary file name.  POSIX tmpnam(3).\nHowever, it is known that use of this function may create a race\ncondition.  Use [[sys-mkstemp]] whenever possible.\n\nThis function is called [[temporary-file-name]], \n[[create-temporary-file]], [[create-temp-file]]\nin other implementations.\n")
("a:fixz8b" . "(:ctime 1144485145 :cuser #f :mtime 1144529306 :muser #f)* [procedure] a:fixz8b [''n'']\n[[SRFI-63]]: Returns an exact binary fixnum uniform-array prototype with at least 8 bits of precision.\n")
("eval-string" . "(:ctime 1015889534 :cuser #f :mtime 1018343986 :muser #f)* [procedure] eval-string ''str''\n\n[[SCM]]: reads from ''str'' and evaluates it.\n\n* [procedure] eval-string ''str'' ''environment''\n\n[[STk]]: reads from ''str'' and evaluates it in\n''environment''.  See [[the-environment]].\n")
("modified-julian-day->time-monotonic" . "(:ctime 1099301079 :cuser #f :mtime 1099301079 :muser #f)[[$$include modified-julian-day->date]]\n")
("record-type-descriptor" . "(:ctime 1014948718 :cuser #f :mtime 1014948718 :muser #f)* [procedure] record-type-descriptor ''record''\n\n[[ChezScheme]]\n\nSee also [[make-record-type]], [[define-record]]\n")
("sys-system" . "(:ctime 1038190172 :cuser #f :mtime 1038190172 :muser #f)* [procedure] sys-system ''command''\n\n[[Gauche]]: POSIX system() API.\n\nSome implementations simply calls this [[system]].\n\nSee [[Concept:Process]].\n")
("ucs2-string-length" . "(:ctime 1039427860 :cuser #f :mtime 1039427860 :muser #f)* [procedure] ucs2-string-length ''ucs2-string''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("string-map!" . "(:ctime 1014894725 :cuser #f :mtime 1014894725 :muser #f)* [procedure] string-map! ''proc'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-map]]\n")
("SRFI-22" . "(:ctime 1015066322 :cuser #f :mtime 1122428668 :muser #f)SRFI-22 : Running Scheme Scripts on Unix\n\nhttp://srfi.schemers.org/srfi-22/srfi-22.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[main]], [[#!]]\n")
("struct-type-name" . "(:ctime 1099725546 :cuser #f :mtime 1099725546 :muser #f)* [procedure] struct-type-name ''structtype''\n* [procedure] struct-type-slots ''structtype''\n\n[[STklos]]: see [[make-struct-type]].\n")
("string-complete->incomplete" . "(:ctime 1015805914 :cuser #f :mtime 1015805914 :muser #f)* [procedure] string-complete->incomplete ''string''\n* [procedure] string-incomplete->complete ''string''\n\n[[Gauche]]: conversion between complete strings and incomplete strings.\n''Incomplete string'' in Gauche means a string that contains a byte sequence\nwhich is not valid in the native multibyte encoding.\n[[string-incomplete->complete]] returns #f if ''string'' can't be\nrepresented by a complete string.\nSee also [[string-incomplete?]]\n\n\n")
("autoload" . "(:ctime 1015040903 :cuser #f :mtime 1018334890 :muser #f)* [syntax] autoload ''filename'' (''symbol'' ...)\n\n[[Chicken]]: Sets up ''symbols'' so that the first invocation of\nany of them as a global procedure causes loading ''filename'' that\nprovides the actual definition of the symbol.\n\n* [syntax] autoload ''filename'' ''symbol1'' ''symbol2'' ...\n\n[[STk]]: slightly different syntax from [[Chicken]]'s.\n\n* [syntax] autoload ''file/module'' ''entry'' ...\n\n[[Gauche]]: ''entry'' may be a symbol or a form '(:macro ''symbol'')'.\n''file/module'' may be a string (filename) or a symbol (module name).\n''symbol'' doesn't need to be a procedure---just referencing it as\na variable causes loading of file/module.\n\n")
("last" . "(:ctime 1014864006 :cuser #f :mtime 1014864006 :muser #f)* [procedure] last ''pair''\n\n[[SRFI-1]]: returns the last element of the non-empty, finite list ''pair''.\n\nSee also [[last-pair]].\n")
("SRFI-117" . "(:ctime 1474475372 :cuser #f :mtime 1474475372 :muser #f)SRFI-117: Queues based on lists \n\nhttp://srfi.schemers.org/srfi-117/srfi-117.html\n\n[[$$srfi-implementors]]\n")
("string->keyword" . "(:ctime 1015051758 :cuser #f :mtime 1203990944 :muser #f)* [procedure] string->keyword ''obj''\n\n[[SRFI-88]], [[Chicken]], [[Bigloo]], [[Kawa]]\n\nSee also [[#:]], [[keyword->string]], [[string?]].\n\nSTk and Gauche have [[make-keyword]].\n")
("time-resolution" . "(:ctime 1015209367 :cuser #f :mtime 1015209367 :muser #f)* [procedure] time-resolution [''time-type'']\n\n[[SRFI-19]]: see also [[current-time]].\n")
("sys-ttyname" . "(:ctime 1015725973 :cuser #f :mtime 1015725973 :muser #f)* [procedure] sys-ttyname ''port-or-fd''\n\n[[Gauche]]: POSIX ttyname().\n\nThis is called [[terminal-name]] or [[port-terminal-name]]\non some implementations.\n")
("port-file-name" . "(:ctime 1099726819 :cuser #f :mtime 1099726867 :muser #f)* [procedure] port-file-name ''port''\n\n[[STklos]]: returns the file name ''port'' refers, if it is a file port.\n\nOther implementations call this [[port-name]], [[port-filename]], or [[input-port-name]].\n")
("array-rank" . "(:ctime 1036933955 :cuser #f :mtime 1144487675 :muser #f)* [procedure] array-rank ''array''\n\n[[SRFI-25]]: returns the number of demensions of the array.\n\n* [procedure] array-rank ''obj''\n\n[[SRFI-47]], [[SRFI-63]]: Returns the number of dimensions of ''obj''. If ''obj'' is not an array, 0 is returned.\n\nSee also [[make-array]].\n\n")
("errno/fault" . "(:ctime 1015077212 :cuser #f :mtime 1015077212 :muser #f)[[$$include errno/perm]]\n")
("gauche-library-directory" . "(:ctime 1015904891 :cuser #f :mtime 1015904891 :muser #f)[[$$include gauche-architecture]]\n")
("fp-" . "(:ctime 1191226930 :cuser #f :mtime 1191226930 :muser #f)[[$$include fp+]]\n")
("if>?" . "(:ctime 1144494246 :cuser #f :mtime 1144502903 :muser #f)[[$$include if=?]]\n")
("fxlognot" . "(:ctime 1014951254 :cuser #f :mtime 1191224968 :muser #f)* [procedure] fxlognot ''fixnum''\n\n[[ChezScheme]]: Bitwise NOT of a fixnum.\nSee [[fixnum?]] for other fixnum-specific operations.\n\nIn R6RS this operation is [[fxnot]].\n")
("terminal-name" . "(:ctime 1015200737 :cuser #f :mtime 1015725932 :muser #f)* [procedure] terminal-name ''port''\n\n[[Chicken]]: POSIX ttyname.\n\nThis is called [[sys-ttyname]], [[port-terminal-name]] in some implementations.\n\n")
("port-file-number" . "(:ctime 1015806666 :cuser #f :mtime 1018390915 :muser #f)* [procedure] port-file-number ''port''\n\n[[Gauche]]: returns the file descriptor number if ''port'' is a file port, or #f.\n\nThis is called [[port->fileno]] or [[port->fdes]] in some implementations.\n")
("numeric" . "(:ctime 1018071846 :cuser #f :mtime 1018071846 :muser #f)[[$$include lower-case]]\n")
("keyword?" . "(:ctime 1015051695 :cuser #f :mtime 1203994126 :muser #f)* [procedure] keyword? ''obj''\n\n[[SRFI-88]],\n[[Chicken]], [[STk]], [[STklos]], [[Gauche]], [[Bigloo]], [[Kawa]]\n\nSee also [[#:]], [[keyword->string]], [[string->keyword]].\n\n----\n\n** Keyword syntax variations\n\nThere are several variations in the literal keyword syntax.\nSee the [http://srfi.schemers.org/srfi-88/mail-archive/threads.html discussion thread] on SRFI-88 for different views.\n\n*** Prefix colon\n\nLike :foo.  This syntax makes keywords look like Common Lisp's.\nThe disadvantage is that there are existing code that uses\ncolon-prefixed symbols ([[SRFI-42]]).   Implementations using\nthis syntax must have special handling in such code.\n\nImplementations: [[Gauche]], [[STk]], [[STklos]] (also accepts postfix colon), [[Bigloo]](also accepts postfix colon), [[Guile]] (by an reader option)\n\n*** Prefix hash-colon\n\nLike #:foo.   This syntax does not conflict with existing\nsymbols.  But some implementations use this syntax for uninterned\nsymbols, a la Common Lisp.\n\nImplementations: [[Guile]], [[Chicken]]\n\n*** Postfix colon\n\nLike foo:.  This also overlaps with valid symbol syntax,\nbut it's less likely to conflict with existing code.\n\nImplementations: [[DSSSL]], [[Kawa]], [[SRFI-88]], [[STklos]] (also accepts postfix colon), [[Bigloo]](also accepts prefix colon).\n\nNote: in Kawa, a colon in identifier foo:bar is read as ($lookup$ foo 'bar),\nand the keyword is just a special case of it.\n\n\n\n")
("complement" . "(:ctime 1015075242 :cuser #f :mtime 1015075242 :muser #f)* [procedure] complement ''proc''\n\n[[Chicken]]: (lambda (proc) (lambda (x) (not (proc x))))\n")
("#x" . "(:ctime 1014846932 :cuser #f :mtime 1014846932 :muser #f)* [reader syntax] #x''nnn...''\n\n[[R5RS]] number literal in hexadecimal.\n\nSee also [[#b]], [[#d]], [[#o]].\n")
("file-executable?" . "(:ctime 1015905721 :cuser #f :mtime 1015905721 :muser #f)[[$$include file-readable?]]\n")
("uncaught-exception?" . "(:ctime 1015927938 :cuser #f :mtime 1015927938 :muser #f)[[$$include join-timeout-exception?]]\n")
("signal/urg" . "(:ctime 1015076624 :cuser #f :mtime 1015076624 :muser #f)[[$$include signal/hup]]\n")
("+fx" . "(:ctime 1040351392 :cuser #f :mtime 1040351434 :muser #f)* [procedure] +fx ''i1'' ''i2''\n* [procedure] -fx ''i1'' ''i2''\n* [procedure] *fx ''i1'' ''i2''\n* [procedure] /fx ''i1'' ''i2''\n\n[[Bigloo]]: fixnum-specialized numeric ops.\nSee also [[=fx]] etc.  Flonum versions are [[+fl]] etc.\n\nChicken and ChezScheme have [[fx+]] etc.\n")
("make-rectangular" . "(:ctime 1014856191 :cuser #f :mtime 1191312922 :muser #f)* [procedure] make-rectangular ''x'' ''y''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[make-polar]], [[real-part]], [[imag-part]].\n\n[[SRFI-94]]: If an argument is not real, this procedure signals error.\n")
("features" . "(:ctime 1015051515 :cuser #f :mtime 1015051515 :muser #f)* [procedure] features\n\n[[Chicken]]: returns a list of feature identifiers that can be used in\n[[cond-expand]].\n\nSee also [[register-feature!]], [[unregister-feature!]]\n")
("hashtable-mutable?" . "(:ctime 1191361279 :cuser #f :mtime 1191361279 :muser #f)* [procedure] hashtable-mutable? ''hashtable''\n\n[[R6RS]]: Returns #t iff ''hashtable'' is mutable.\nImmutable hashtables can be created by [[hashtable-copy]].\n\nSee also [[Concept:HashTable]].\n")
("time-tai->time-monotonic!" . "(:ctime 1099301419 :cuser #f :mtime 1099301419 :muser #f)[[$$include time-tai->date]]\n")
("open/append" . "(:ctime 1015106364 :cuser #f :mtime 1015106364 :muser #f)[[$$include open/rdonly]]\n")
("lset-diff+intersection" . "(:ctime 1014874649 :cuser #f :mtime 1014874649 :muser #f)* [procedure] lset-diff+intersection ''elt='' ''list1'' ''list2'' ...\n\n[[SRFI-1]]\n\nSee also [[lset-diff+intersection!]], [[lset-difference]], [[lset-intersection]].\n")
("load-string" . "(:ctime 1038091452 :cuser #f :mtime 1038091452 :muser #f)* [procedure] load-string ''str''\n\n[[SCM]]: Reads and evaluates all the expressions from ''str''.\nSee also [[eval-string]].\n")
("block-read" . "(:ctime 1014957921 :cuser #f :mtime 1014958589 :muser #f)* [procedure] block-read ''input-port'' ''string'' ''count''\n\n[[ChezScheme]]: read characters from ''input-port'' up to ''count''\nand fill ''string'' with them.\n\nGauche has similar function [[read-block]].\n\nSee also [[block-write]]\n\n")
("time=?" . "(:ctime 1015317849 :cuser #f :mtime 1015318399 :muser #f)* [procedure] time=? ''time1'' ''time2''\n* [procedure] time<? ''time1'' ''time2''\n* [procedure] time<=? ''time1'' ''time2''\n* [procedure] time>? ''time1'' ''time2''\n* [procedure] time>=? ''time1'' ''time2''\n\n[[SRFI-19]]: compares two time objects.  See also [[current-time]].\n\n[[Scheme48]] also has these, but its time record differs from\nSRFI-19's.  See [[make-time]].\n\n")
("Index:z" . "(:ctime 1014846502 :cuser #f :mtime 1015014855 :muser #f)[[$$index z]]\n\n")
("nonpositive?" . "(:ctime 1014955216 :cuser #f :mtime 1014955216 :muser #f)* [procedure] nonpositive? ''real''\n\n[[ChezScheme]]\n\nSee also [[positive?]], [[nonnegative?]]\n")
("string-concatenate/shared" . "(:ctime 1014888557 :cuser #f :mtime 1014888557 :muser #f)* [procedure] string-concatenate/shared ''string-list''\n\n[[SRFI-13]]\n\nSee also [[string-append/shared]], [[string-concatenate]].\n")
("time-utc->time-tai!" . "(:ctime 1099301571 :cuser #f :mtime 1099301571 :muser #f)[[$$include time-utc->date]]\n")
("requires" . "(:ctime 1014882242 :cuser #f :mtime 1014882255 :muser #f)* [configuration language] requires ''feature-identifier'' ...\n\n[[SRFI-7]]\n\nSee also [[program]], [[files]], [[code]], [[feature-cond]].\n")
("negfl" . "(:ctime 1191227054 :cuser #f :mtime 1191227055 :muser #f)* [procedure] negfl ''flonum''\n\n[[Bigloo]]: (- ''flonum'').  See [[flonum?]] for other flonum operations.\n\nIn R6RS you can use [[fl-]].\n\nIn Chicken this is [[fpneg]].\n")
("macro" . "(:ctime 1018336821 :cuser #f :mtime 1170797261 :muser #f)* [primitive] macro ''name'' ''pattern'' ''body''\n[[RRS]]: just like [[schmac]], except that ''body'' is scheme code rather than meta-language code. Macros defined with this should be completely transportable.\n\n* [syntax] macro ''formals'' ''body''\n\n[[STk]]: creates a macro.  See also [[macro?]],\n[[macro-expand]], [[macro-expand-1]], [[macro-body]],\n[[define-macro]].\n\n[[LispMe]]: creates a macro.  See also [[macro?]].\n")
("r5rs-syntax" . "(:ctime 1015023410 :cuser #f :mtime 1015023410 :muser #f)* [module] r5rs-syntax\n\n[[ChezScheme]]: a module containing syntactic bindings of R5RS.\n\nSee also [[r5rs]], [[scheme]], [[ieee]], [[module]]\n")
("match-let" . "(:ctime 1015101772 :cuser #f :mtime 1144597738 :muser #f)* [syntax] match-let ((''pat'' ''exp'') ...) ''body''\n* [syntax] match-let* ((''pat'' ''exp'') ...) ''body''\n* [syntax] match-letrec ((''pat'' ''exp'') ...) ''body''\n\n[[Chicken]], [[Gauche]]: Andrew Wright's pattern matching package. See [[match]].\n")
("char-set-size" . "(:ctime 1039169089 :cuser #f :mtime 1039169089 :muser #f)* [procedure] char-set-size ''char-set''\n\n[[SRFI-14]]: returns the number of elements in ''char-set''.\n")
("break!" . "(:ctime 1014870127 :cuser #f :mtime 1014870127 :muser #f)* [procedure] break! ''pred'' ''list''\n\n[[SRFI-1]]: linear-update variant of [[break]].\n")
("bitwise-arithmetic-shift-right" . "(:ctime 1191715355 :cuser #f :mtime 1191715355 :muser #f)[[$$include bitwise-arithmetic-shift]]\n")
("catch" . "(:ctime 1018333962 :cuser #f :mtime 1161201463 :muser #f)* [magic form] catch ''identifier'' ''form''\n\n[[RRS]]: evaluates the ''form'' in an environment where the ''identifier'' is bound to an '''escape object'''.\n\n* [syntax] catch ''expression1'' ''expression2'' ...\n\n[[STk]]: Evaluates ''expression''s.  If an error\noccurs, the evaluation of the rest of ''expression''s\nare aborted and the form returns #t.  Otherwise, the\nform returns #f.\n\n* [syntax] catch ''key'' ''thunk'' ''handler''\n\n[[Kawa]]: Set ''handler'' as an exception handler associated with ''key''\nand evaluate ''thunk'' in such dynamic context.\n''handler'' is called as (''handler'' ''key'' ''args'' ...).\n\nSee also [[throw]].\n")
("*script*" . "(:ctime 1015888398 :cuser #f :mtime 1015888398 :muser #f)* [variable] *script*\n\n[[SCM]]: keeps the script name.\n\n\nThis is called [[*program-name*]] in some implementations.\n")
("standard-output-port" . "(:ctime 1015806773 :cuser #f :mtime 1015806773 :muser #f)[[$$include standard-input-port]]\n")
("iota" . "(:ctime 1015016841 :cuser #f :mtime 1039510700 :muser #f)* [procedure] iota ''cont'' [''start'' ''stop'']\n\n[[SRFI-1]]: Returns a list containing the elements\n\n  (start start+step ... start+(count-1)*step)\n\nAlso in [[SISC]], but it doesn't take optional args.\n")
("make-hashtable" . "(:ctime 1045089123 :cuser #f :mtime 1464705150 :muser #f)* [procedure] make-hashtable ''hash-function'' ''equiv'' [''initial-size'']\n\n[[R6RS]]: Creates a hashtable with the given hash function\nand equivalence function.\n\nSee also [[Concept:HashTable]].\n\n* [procedure] make-hashtable [''bucket-len'' ''max-bucket-len'']\n\n[[Bigloo]]: creates a hash table.\n\nSome implementations have [[make-hash-table]].\n")
("make-date" . "(:ctime 1023885844 :cuser #f :mtime 1023885844 :muser #f)* [procedure] make-date ''nanosecond'' ''second'' ''minute'' ''hour'' ''day'' ''month'' ''year'' ''zone-offset''\n\n[[SRFI-19]]: creates a date structure.\nSee also [[date?]], [[date-nanosecond]], [[date-second]],\n[[date-minute]], [[date-hour]], [[date-day]],\n[[date-month]], [[date-year]], [[date-zone-offset]],\n[[date-year-day]], [[date-week-day]], [[date-week-number]]\n\n* [procedure] make-date ''second'' ''minute'' ''hour'' ''month-day'' ''month'' ''year'' [''tz-name'' ''tz-secs'' ''summer?'' ''week-day'' ''year-day'']\n\n[[Scsh]]: Scsh's date structure is rather parallel to\nPOSIX struct tm, i.e. second resolution, ''month'' is\nbetween 0 and 11, and ''year'' is number of years from\n1900.\n\nGauche has [[<sys-tm>]] class which corresponds to\nScsh's date structure.\n")
("alist->hash-table" . "(:ctime 1144485145 :cuser #f :mtime 1161207390 :muser #f)* [procedure] alist->hash-table ''alist'' [''equal?'' ''hash'' ''args'' ...]\n\n[[SRFI-69]]: Takes an `association list' ''alist'' and\ncreates a hash table hash-table which maps the car of every element\nin ''alist'' to the cdr of corresponding elements in ''alist''.\n''equal?'', ''hash'', and ''args'' are interpreted as in [[make-hash-table]].\nIf some key occurs multiple times in ''alist'',\nthe value in the first association will take precedence over later ones.\n(Note: the choice of using cdr (instead of\ncadr) for values tries to strike balance between the two approaches: using cadr\nwould render this procedure unusable for cdr alists, but not vice versa.)\n\nThe rest ''args'' are passed to [[make-hash-table]] and can thus be used for\nimplementation-specific extensions.\n\n* [procedure] alist->hash-table ''alist'' [''equal?'' ''hash'' ''size-hint'']\n\n[[Kawa]]:\n\n* [procedure] alist->hash-table ''alist'' [''cmp'']\n[[Gauche]]:\n")
("string-length" . "(:ctime 1014859564 :cuser #f :mtime 1191566671 :muser #f)* [procedure] string-length ''string''\n\n[[R5RS]], [[R6RS]]: Returns the number of characters in the given ''string''. \n\n")
("string-count" . "(:ctime 1014894143 :cuser #f :mtime 1014894143 :muser #f)* [procedure] string-count ''s'' ''char/char-set/pred'' [''start'' ''end'']\n\n[[SRFI-13]]\n\n")
("code" . "(:ctime 1014882396 :cuser #f :mtime 1014882396 :muser #f)* [configuration language] code ''scheme-expression'' ...\n\n[[SRFI-7]]\n\nSee also [[program]], [[requires]], [[files]], [[feature-cond]].\n")
("sRGB->e-sRGB" . "(:ctime 1364806477 :cuser #f :mtime 1364806477 :muser #f)Rasterized\n")
("abs" . "(:ctime 1014837787 :cuser #f :mtime 1191218998 :muser #f)* [procedure] abs ''x''\n\n[[R5RS]], [[R6RS]]:\nReturns the absolute value of its argument.\n\n[[R6RS]], [[SRFI-94]]: If an argument is not real, this procedure ''must'' \nsignals error.\n")
("fl-make-rectangular" . "(:ctime 1014953036 :cuser #f :mtime 1014953036 :muser #f)* [procedure] fl-make-rectangular ''flonum1'' ''flonum2''\n\n[[ChezScheme]]\n\nSee also [[flonum?]], [[cflonum?]], [[make-rectangular]]\n")
("arity-at-least-value" . "(:ctime 1019624922 :cuser #f :mtime 1022544065 :muser #f)* [procedure] arity-at-least-value ''arity-at-least''\n\n[[MzScheme]], [[Gauche]]: an accessor of arity-at-least structure\nreturned from [[arity]].\n\nsee also [[procedure-arity-includes?]]\n")
("os-name" . "(:ctime 1020375174 :cuser #f :mtime 1046489254 :muser #f)* [procedure] os-name\n* [procedure] os-node-name\n* [procedure] os-release-name\n* [procedure] os-version-name\n* [procedure] machine-name\n\n[[Scheme48]]: returns strings for the current OS and \nmachine.  Corresponds to POSIX uname().\n\n[[Bigloo]]: also has [[os-name]], but not others.\nSee also [[os-class]], [[os-arch]], [[os-version]], and [[os-tmp]].\n\nGauche has direct interface of uname as [[sys-uname]].\nOther scheme implementations have simiar interface.\n\n")
("register-feature!" . "(:ctime 1015051501 :cuser #f :mtime 1015051501 :muser #f)* [procedure] register-feature! ''feature'' ...\n\n[[Chicken]]:\n\nSee also [[features]], [[unregister-feature!]], [[cond-expand]]\n")
("SchemeCrossReference" . "(:ctime 1014939089 :cuser #f :mtime 1330810218 :muser #f)* Scheme Cross Reference Directory\n\nThis site is a directory of Scheme syntax, procedures, and variables found in\n[http://dmoz.org/Computers/Programming/Languages/Lisp/Scheme/Implementations/ Scheme implementations].\nSee [[WhatIsSchemeCrossReference]] for further explanations of this site.\n\nThe entire directory is on a ''Wiki'' - anybody can edit\nany pages.  If you find errors, want to add entries, or\nwant to add descriptions, please feel free to click ''Edit''\nbutton above and fix things.  See [[EditGuideline]] for some\nguidelines.  The Wiki engine used here is\n[http://www.shiro.dreamhost.com/scheme/wiliki/wiliki.cgi?l=en WiLiKi],\na Scheme-based wiki clone.\n\nIf you have something to say about this Wiki site itself\n(like ideas for improvements), please drop a line in the\n[[Discussion]] page.\n\nYou can monitor the update information of this site using RDF site summary,\nfrom http://practical-scheme.net/wiliki/schemexref.cgi?c=rss .\n\n''This site is a part of [http://practical-scheme.net/ Practical Scheme], maintained by Shiro Kawai (shiro at acm dot org).''\n\n(Recently, some people try to download entire contents of this site using some kind of web spider tool.  It's not an efficient way to get the contents.\nIf you want to browse the contents locally, drop me an e-mail and I'll send you the snapshot of database).\n")
("inspect/object" . "(:ctime 1014896390 :cuser #f :mtime 1014896390 :muser #f)* [procedure] inspect/object ''object''\n\n[[ChezScheme]]\n\nSee also [[inspect]]\n")
("errno/acces" . "(:ctime 1015077204 :cuser #f :mtime 1015077204 :muser #f)[[$$include errno/perm]]\n")
("make-struct" . "(:ctime 1099725640 :cuser #f :mtime 1099725716 :muser #f)* [procedure] make-struct ''structtype'' ''value'' ...\n\n[[STklos]]: returns a new struct of type ''structtype''.\nRelated: [[struct-type]], [[struct?]], [[struct-ref]], [[struct-set!]],\n[[struct-is-a?]], [[struct-list]].\n\nSee also [[make-struct-type]], [[define-struct]].\n")
("file-info-last-modification" . "(:ctime 1040727352 :cuser #f :mtime 1040727352 :muser #f)[[$$include file-info-name]]\n")
("bit-invert!" . "(:ctime 1206383782 :cuser #f :mtime 1206383782 :muser #f)1\n")
("unregister-feature!" . "(:ctime 1015051518 :cuser #f :mtime 1015051518 :muser #f)* [procedure] unregister-feature! ''feature'' ...\n\n[[Chicken]]:\n\nSee also [[features]], [[register-feature!]], [[cond-expand]]\n")
("port->list" . "(:ctime 1018335102 :cuser #f :mtime 1018335102 :muser #f)* [procedure] port->list ''reader'' ''port''\n\n[[Scsh]], [[STk]], [[Gauche]]: apply ''reader'' to\n''port'' repeatedly until it returns EOF, then\nreturns a list of results.\nSee also [[port->string-list]], [[port->sexp-list]].\n")
("test-with-runner" . "(:ctime 1151049296 :cuser #f :mtime 1151079038 :muser #f)* [syntax] test-with-runner ''runner'' ''decl-or-expr'' ...\n\n[[SRFI-64]]: evalueates ''decl-or-expr'' in order using ''runner'' as the current test runner.\n")
("string-capitalize" . "(:ctime 1015073922 :cuser #f :mtime 1039752793 :muser #f)* [procedure] string-capitalize ''string''\n* [procedure] string-capitalize! ''string''\n\n[[Chicken]], [[Bigloo]], [[Guile]]\n\n\n")
("terms" . "(:ctime 1015889582 :cuser #f :mtime 1015889582 :muser #f)* [procedure] terms\n\n[[SCM]]: prints GPL.\n")
("char->ucs2" . "(:ctime 1039428695 :cuser #f :mtime 1039428695 :muser #f)[[$$include ucs2->char]]\n")
("read-line" . "(:ctime 1015073280 :cuser #f :mtime 1125140771 :muser #f)* [procedure] read-line [''input-port'']\n\n[[Bigloo]], [[Chicken]], [[Gauche]], [[STk]]\n\nSee also [[write-line]], [[read-lines]]\n\n")
("char-set:hex-digit" . "(:ctime 1018082705 :cuser #f :mtime 1018082705 :muser #f)[[$$include char-set:lower-case]]\n")
("call-with-input-pipe" . "(:ctime 1015105772 :cuser #f :mtime 1015105772 :muser #f)* [procedure] call-with-input-pipe ''cmdline'' ''proc'' [''mode'']\n* [procedure] call-with-output-pipe ''cmdline'' ''proc'' [''mode'']\n\n[[Chicken]]: see also [[open-input-pipe]], [[open-output-pipe]],\n[[with-input-from-pipe]], [[with-output-to-pipe]].\n\nSome implementations allow to use \"| cmdline\" or \"cmdline |\" as\nthe filename in [[call-with-input-file]] and [[call-with-output-file]]\nto achieve the same effects as these.\n\nGauche has [[call-with-input-process]] and [[call-with-output-process]]\nwhich do the same thing.\n")
("string-take-right" . "(:ctime 1014889169 :cuser #f :mtime 1014889169 :muser #f)* [procedure] string-take-right ''s'' ''nchars''\n\n[[SRFI-13]]\n\nSee also [[string-take]], [[string-drop-right]]\n")
("trace-let" . "(:ctime 1015023057 :cuser #f :mtime 1015023057 :muser #f)* [syntax] trace-let ''name'' ((''var'' ''varl'') ...) ''exp1'' ''exp2'' ...\n\n[[ChezScheme]]: named-let with tracing.\n\nSee also [[trace-lambda]], [[trace-define]]\n")
("hash-table-push!" . "(:ctime 1015303849 :cuser #f :mtime 1015303849 :muser #f)* [procedure] hash-table-push! ''hash-table'' ''key'' ''value''\n\n[[Gauche]]: conses ''value'' to the list kept in the hash table with ''key''.\nSee also [[hash-table-pop!]], [[Concept:HashTable]].\n")
("#o" . "(:ctime 1014846887 :cuser #f :mtime 1014846887 :muser #f)* [reader syntax] #o''nnn...''\n\n[[R5RS]] number literal in octal.\n\nSee also [[#b]], [[#d]], [[#x]].\n")
("fxzero?" . "(:ctime 1014951084 :cuser #f :mtime 1191225985 :muser #f)* [procedure] fxzero? ''fixnum''\n\n[[R6RS]], [[ChezScheme]]\n\nSee also [[fixnum?]], [[zero?]]\n")
("library-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074702 :muser #f)* [procedure] library-vicinity\n\n[[SRFI-59]]: Returns the vicinity of the shared Scheme library.\n")
("open-socket" . "(:ctime 1017993216 :cuser #f :mtime 1017993304 :muser #f)* [procedure] open-socket [''port-number'']\n\n[[Scheme48]]: creates a new server socket, bound to\nthe INET domain port, and listening.\nSee also [[socket-port-number]], [[close-socket]],\n[[socket-accept]], [[socket-client]].\n\nSome implementations have [[make-server-socket]].\n")
("record-field-accessible?" . "(:ctime 1014948427 :cuser #f :mtime 1014948427 :muser #f)* [procedure] record-field-accessible? ''rtd'' ''field-name''\n\n[[ChezScheme]]\n\nSee also [[make-record-type]], [[define-record]].\n")
("export-symbol" . "(:ctime 1018335991 :cuser #f :mtime 1018335991 :muser #f)* [procedure] export-symbol ''symbol'' ''module''\n\n[[STk]]: exports ''symbol'' from ''module''\n")
("reverse!" . "(:ctime 1014864533 :cuser #f :mtime 1099724627 :muser #f)* [procedure] reverse! ''list''\n\n[[SRFI-1]]: linear update variant of [[reverse]].\n\nAlso in [[ChezScheme]], [[Gauche]], [[STklos]], [[MzScheme]], [[Bigloo]]\n")
("lookup-environment-variable" . "(:ctime 1018124811 :cuser #f :mtime 1018124811 :muser #f)* [procedure] lookup-environment-variable ''string''\n\n[[Scheme48]]: getenv.\n\nThis is called [[getenv]] or [[sys-getenv]] in some\nimplementations.\n")
("fxmin" . "(:ctime 1014950726 :cuser #f :mtime 1191226143 :muser #f)[[$$include fxmax]]\n")
("arithmetic-shift" . "(:ctime 1015049202 :cuser #f :mtime 1191715073 :muser #f)* [procedure] arithmetic-shift ''n'' ''count''\n\n[[Chicken]], [[Scheme48]], [[Scsh]], [[MzScheme]]: shift fixnum.\n\nSee also [[bitwise-ior]], [[bitwise-xor]], [[bitwise-and]], [[bitwise-not]].\n\nR6RS calls this [[bitwise-arithmetic-shift]].\nThis is [[ash]] in some other implementations.\n")
("Pocket-Scheme" . "(:ctime 1138153292 :cuser #f :mtime 1144037229 :muser #f)A R4RS Scheme for Windows CE Handheld PCs and Windows CE or Windows Mobile Pocket PCs.  (See [[LispMe]] for PDAs running the Palm OS.)\n\nhttp://www.mazama.net/scheme/pscheme.htm\n\nThe current version is 1.3.\n\n[[$$srfis 0 6 23]]\n")
("simplify-path" . "(:ctime 1020225325 :cuser #f :mtime 1020581436 :muser #f)* [procedure] simplify-path ''path''\n\n[[MzScheme]], [[Gauche]]: eliminates up-directory and same-directory\ncomponents in ''path''.\n\nGauche's [[sys-normalize-pathname]] does similar thing.\n")
("bit-xor" . "(:ctime 1043984916 :cuser #f :mtime 1043984916 :muser #f)[[$$include bit-or]]\n")
("date-day" . "(:ctime 1023886207 :cuser #f :mtime 1023886217 :muser #f)[[$$include date-nanosecond]]\n")
("run-cp0" . "(:ctime 1015024016 :cuser #f :mtime 1015024016 :muser #f)* [procedure] run-cp0 [''newval'']\n\n[[ChezScheme]]: compiler parameter.\n")
("lset-intersection!" . "(:ctime 1014874962 :cuser #f :mtime 1014874962 :muser #f)* [procedure] lset-intersection! ''elt='' ''list1'' ''list2'' ...\n\n[[SRFI-1]]: linear-update variant of [[lset-intersection]].\n")
("<=fx" . "(:ctime 1039346163 :cuser #f :mtime 1039346163 :muser #f)[[$$include =fx]]\n")
("a:fixn64b" . "(:ctime 1144485145 :cuser #f :mtime 1144529316 :muser #f)* [procedure] a:fixn64b [''k'']\n[[SRFI-63]]: Returns an exact non-negative binary fixnum uniform-array prototype with at least 64 bits of precision.\n")
("with-error-to-port" . "(:ctime 1015073712 :cuser #f :mtime 1099726291 :muser #f)* [procedure] with-error-to-port ''port'' ''thunk''\n\n[[Gauche]], [[SCM]], [[STk]], [[STklos]]\n\nThis is called [[with-error-output-to-port]]\nor [[with-error-output-port*]] in some implementations.\n\nSee also [[with-input-from-port]], [[with-output-to-port]].\n")
("a:floq64d" . "(:ctime 1144527545 :cuser #f :mtime 1144529104 :muser #f)* [procedure] a:floq64d [''z'']\n[[SRFI-63]]:\nReturns an exact 64.bit decimal flonum rational uniform-array prototype.\n")
("fxarithmetic-shift" . "(:ctime 1191225666 :cuser #f :mtime 1191225677 :muser #f)* [procedure] fxarithmetic-shift ''fx1'' ''fx2''\n* [procedure] fxarithmetic-shift-left ''fx1'' ''fx2''\n* [procedure] fxarithmetic-shift-right ''fx1'' ''fx2''\n\n[[R6RS]]: fixnum-specific bitwise shifts.\nSee [[fixnum?]] for other fixnum operations.\nSee [[arithmetic-shift]] for generic shift operations.\n\nOther implementations have [[fxshl]], [[fxshr]], [[fxsll]], [[fxsrl]], [[fxsra]].\n")
("overwrite" . "(:ctime 1015882593 :cuser #f :mtime 1015882593 :muser #f)[[$$include overlay]]\n")
("let*-values" . "(:ctime 1014882785 :cuser #f :mtime 1191209670 :muser #f)* [syntax] let*-values ((''formals'' ''expression'') ...) ''body''\n\n[[R6RS]], [[SRFI-11]], [[Chicken]], [[MzScheme]], [[Kawa]]\n\nSee also [[let-values]], [[receive]].\n\nChicken and MzScheme also has [[letrec-values]].\n")
("byte-vector->u16vector" . "(:ctime 1015075787 :cuser #f :mtime 1015075787 :muser #f)[[$$include byte-vector->u8vector]]\n")
("substring-move-left!" . "(:ctime 1152518355 :cuser #f :mtime 1152527683 :muser #f)[[$$include substring-move-right!]]\n")
("create-temporary-file" . "(:ctime 1015100064 :cuser #f :mtime 1018346668 :muser #f)* [procedure] create-temporary-file [''extension'']\n\n[[Chicken]]: creats temporary file and returns its pathname.\n''extension'' defaults \".tmp\".  Honors environment variable \"TMPDIR\",\n\"TEMP\" or \"TMP\".\n\nGauche has [[sys-tmpnam]] and [[sys-mkstemp]].\nSTk has [[temporary-file-name]].\nScsh has [[create-temp-file]].\n")
("string-hash-ci" . "(:ctime 1014892979 :cuser #f :mtime 1014892979 :muser #f)* [procedure] string-hash-ci ''s'' [''bound'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-hash]]\n")
("sub-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074768 :muser #f)* [procedure] sub-vicinity ''vicinity'' ''name''\n\n[[SRFI-59]]: Returns the vicinity of ''vicinity'' restricted to ''name''. This is used for large systems where names of files in subsystems could conflict. On systems with directory structure sub-vicinity will return a pathname of the subdirectory ''name'' of ''vicinity''.\n")
("constantly" . "(:ctime 1015075204 :cuser #f :mtime 1015075204 :muser #f)* [procedure] constantly ''x''\n\n[[Chicken]]: (lambda (x) (lambda args x))\n")
("pair-or-null?" . "(:ctime 1039408604 :cuser #f :mtime 1039408604 :muser #f)* [procedure] pair-or-null? ''obj''\n\n[[Bigloo]]: returns true if ''obj'' is a pair or an empty list.\n")
("open-input-pipe" . "(:ctime 1015105768 :cuser #f :mtime 1015105768 :muser #f)* [procedure] open-input-pipe ''cmdline'' [''mode'']\n* [procedure] open-output-pipe ''cmdline'' [''mode'']\n\n[[Chicken]]: see also [[call-with-input-pipe]], [[call-with-output-pipe]],\n[[with-input-from-pipe]], [[with-output-to-pipe]].\n\nSome implementations allow to use \"| cmdline\" or \"cmdline |\" as\nthe filename in [[open-input-file]] and [[open-output-file]]\nto achieve the same effects as these.\n\nGauche has [[open-input-process-port]] and [[open-output-process-port]]\nwhich do the same thing.\n")
("if" . "(:ctime 1014854279 :cuser #f :mtime 1191208988 :muser #f)* [syntax] if ''test'' ''consequent''\n* [syntax] if ''test'' ''consequent'' ''alternate''\n\n[[R5RS]], [[R6RS]]:\n\n\n\nSee also [[cond]], [[and]], [[or]], [[when]], [[unless]].\n")
("remprop" . "(:ctime 1014947079 :cuser #f :mtime 1039345666 :muser #f)* [procedure] remprop ''symbol'' ''key''\n\n[[ChezScheme]]: remove property value associated to ''key'' form\nthe property list of ''symbol''.\n\nSee also [[putprop]], [[getprop]], [[property-list]]\n\nBigloo calls this [[remprop!]].\n\n\n")
("char-filter" . "(:ctime 1018389753 :cuser #f :mtime 1018389753 :muser #f)* [procedure] char-filter ''filter''\n\n[[Scsh]]: Given a char->char procedure ''filter'',\nthis returns a procedure that when called, repeatedly\nreads a character from the current input port,\napplies ''filter'' on the character, then writes the\nresult to the current output port.\n\nSee also [[string-filter]].\n")
("fx<?" . "(:ctime 1191225923 :cuser #f :mtime 1191225923 :muser #f)[[$$include fx=?]]\n")
("crc-12-polynomial" . "(:ctime 1377679644 :cuser #f :mtime 1377679644 :muser #f)0xFAC00\n")
("string-concatenate-reverse/shared" . "(:ctime 1014894640 :cuser #f :mtime 1014894640 :muser #f)* [procedure] string-concatenate-reverse/shared ''string-list'' [''final-string'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-concatenate-reverse]]\n")
("port->string-list" . "(:ctime 1018335163 :cuser #f :mtime 1099727248 :muser #f)* [procedure] port->string-list ''port''\n\n[[Scsh]], [[STk]], [[STklos]], [[Gauche]]: Equivalent to\n(port->list read-line ''port'').\nSee also [[port->list]], [[port->string]], [[port->sexp-list]].\n")
("accessible?" . "(:ctime 1020397737 :cuser #f :mtime 1020397866 :muser #f)* [procedure] accessible? ''path'' ''access-mode'' ''more-mode'' ...\n* [syntax] access-mode ''mode-name''\n\n[[Scheme48]]: checks if ''path'' can be accessed w.r.t.\n''access-mode''.  ''Access-mode'' is constructed by\n[[access-mode]] syntax from a symbol 'read, 'write,\n'execute or 'exists.\n\nGauche has [[sys-access]] which is a direct interface to\nPOSIX access().   Many implementations have separate\npredicates for each access mode, e.g.\n[[file-exists?]], [[file-readable?]], [[file-is-readable?]],\n[[file-read-access?]], etc.\n")
("group-info-name" . "(:ctime 1018125289 :cuser #f :mtime 1018125289 :muser #f)[[$$include group-info?]]\n")
("socket-client" . "(:ctime 1017993597 :cuser #f :mtime 1017993597 :muser #f)* [procedure] socket-client ''host-name'' ''port-number''\n\n[[Scheme48]]: creates an INET domain TCP socket and\nconnects to the given server, and returns input and\noutput ports.  See also [[open-socket]].\n\nSome implementations have [[make-client-socket]].\n")
("string-parse-final-start+end" . "(:ctime 1014895179 :cuser #f :mtime 1014895179 :muser #f)* [procedure] string-parse-final-start+end ''proc'' ''s'' ''args''\n\n[[SRFI-13]]\n\nSee also [[string-parse-start+end]], [[let-string-start+end]]\n")
("vector->list" . "(:ctime 1014855660 :cuser #f :mtime 1191570179 :muser #f)* [procedure] vector->list ''vector''\n\n[[R5RS]], [[R6RS]]: Returns a newly allocated list of the \nobjects contained in the elements of ''vector''.\n\nSee also [[list->vector]].\n\n* [procedure] vector->list ''vector'' [''start'' ''end'']\n\n[[SRFI-43]]: Takes optional start and end indexes.\n")
("vector-any" . "(:ctime 1099388401 :cuser #f :mtime 1099388401 :muser #f)* [procedure] vector-any ''pred'' ''vec1'' ''vec2'' ...\n* [procedure] vector-every ''pred'' ''vec1'' ''vec2'' ...\n\n[[SRFI-43]]: Like [[any]] or [[every]], but ''pred'' applied to the\nelements of vectors, instead of lists.\n")
("string" . "(:ctime 1014856266 :cuser #f :mtime 1191566649 :muser #f)* [procedure] string ''char'' ...\n\n[[R5RS]], [[R6RS]]: Creates a string that consists of given characters.\n\nSee also [[make-string]].\n")
("string-translate" . "(:ctime 1015074932 :cuser #f :mtime 1015074932 :muser #f)* [procedure] string-translate ''string'' ''from'' [''to'']\n\n[[Chicken]]: subset of tr(1).\n\nGauche has more complete set of tr(1) functionality as [[tr]] in \ntext.tr module.\n")
("write-char" . "(:ctime 1014861057 :cuser #f :mtime 1014861057 :muser #f)* [procedure] write-char ''char'' [''port'']\n\n[[R5RS]]: Writes the character ''char'' (not an external \nrepresentation of the character) to the given ''port'' and \nreturns an unspecified value. The\nport argument may be omitted, in which case it defaults \nto the value returned by [[current-output-port]].\n")
("load-from-port" . "(:ctime 1015807123 :cuser #f :mtime 1015807123 :muser #f)* [procedure] load-from-port ''port''\n\n[[Gauche]]\n")
("make-pathname" . "(:ctime 1015100372 :cuser #f :mtime 1015100372 :muser #f)* [procedure] make-pathname ''directory'' ''filename'' [''extension'']\n\n[[Chicken]]: see also [[make-absolute-pathname]], [[decompose-pathname]],\n[[pathname-directory-separator]], [[pathname-extension-separator]].\n")
("thread-specific" . "(:ctime 1015927325 :cuser #f :mtime 1015928102 :muser #f)* [procedure] thread-specific ''thread''\n* [procedure] thread-specific-set! ''thread'' ''obj''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("vector-skip" . "(:ctime 1099388027 :cuser #f :mtime 1327407316 :muser #f)[[$$include vector-index]]\n [http://www.obtenir-rio.info rio orange]\n")
("partition-to" . "(:ctime 1099651452 :cuser #f :mtime 1099651452 :muser #f)[[$$include filter-to]]\n")
("set-sstats-gc-cpu!" . "(:ctime 1015029014 :cuser #f :mtime 1015029014 :muser #f)* [procedure] set-sstats-gc-cpu! ''sstats'' ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[sstats-gc-cpu]].\n")
("file-is-regular?" . "(:ctime 1015905426 :cuser #f :mtime 1099741355 :muser #f)* [procedure] file-is-regular? ''pathname''\n\n[[STk]], [[STklos]], [[Gauche]].\n\nThis is called [[file-regular?]] in some implementations.\n")
("raise" . "(:ctime 1015927838 :cuser #f :mtime 1063320075 :muser #f)* [procedure] raise ''obj''\n\n[[SRFI-18]], [[SRFI-21]], [[SRFI-34]]: \n\nFrom SRFI-18:\n<<<\nCalls the current exception handler (see [[current-exception-handler]] \nwith ''obj'' as the single argument.\n>>>\nFrom SRFI-34:\n<<<\nInvokes the current exception handler on obj. The handler is called in the dynamic environment of the call to raise, except that the current exception handler is that in place for the call to with-exception-handler  that installed the handler being called. The handler's continuation is otherwise unspecified.\n>>>\n\n''Note'': there is a subtle issue about with what dynamic environment the current\nexception handler is called: whether the current exception handler value is restored\nto the previous one, or it should be the same as where ''raise'' is called?  The difference\nis visible when you do\n\n  (with-exception-handler \n      (lambda (e) (current-exception-handler))\n    (lambda () (raise #t)))\n\nSRFI-34 is clear about it.  ''raise'' calls the current exception handler with\ndynamic enviornment where (current-exception-handler) is restored, so the above\nexpression returns the handler which is installed outside of [[with-exception-handler]].\n\nSRFI-18 is a bit ambiguous.  It says nothing about dynamic envionment in the description\nof ''raise'', but in  'Primitives and exceptions' section it says\n''When one of the primitives defined in this SRFI raises an exception defined in this SRFI, the exception handler is called with the same continuation as the primitive''.\nIf we think ''raise'' as a primitive, it shouldn't change the continuation where\nthe current exception handler is called, and since the dynamic enviornment is a part of\na continuation, the current exception handler should see itself as a current exception\nhandler---i.e. above expression returns the procedure created by (lambda (e) (current-exception-handler)).   However, SRFI-18 is confusing since it doesn't define\nwhat is primitive.\n\nThis difference surfaces when you do cascading raise:\n\n  (with-exception-handler (lambda (e) (raise e)) (lambda () (raise #t)))\n\nIn SRFI-34, this exits from [[with-exception-handler]] form by invoking the exception\nhandler defined outside of the form.   In SRFI-18 model, ''if we think raise as a primitive'',\nthis form loops infinitely, since ''(raise e)'' calls ''(lambda (e) (raise e))'' again.\n\nSee the discussion thread beginning with \n[http://srfi.schemers.org/srfi-34/mail-archive/msg00013.html Marc Feeley's message].\n\nThe behavior is also ambiguous when you return from the exception handler.\nSRFI-34 explicitly says the continuation of the exception handler is undefined\n(except the alteration of the current exception handler). \n\n[[raise]] is also in [[MzScheme]], [[Gauche]].\n\nSee also [[current-exception-handler]], [[with-handlers]]\n\n")
("xsubstring" . "(:ctime 1014884490 :cuser #f :mtime 1014884519 :muser #f)* [procedure] xsubstring ''s'' ''from'' [''to'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-xcopy!]]\n\n")
("log10" . "(:ctime 1039750654 :cuser #f :mtime 1039750654 :muser #f)* [procedure] log10 ''z''\n\n[[Guile]]: 10-based log.  See [[log]].\n")
("char-set:title-case" . "(:ctime 1018082641 :cuser #f :mtime 1018082641 :muser #f)[[$$include char-set:lower-case]]\n")
("block-set!" . "(:ctime 1015281338 :cuser #f :mtime 1015281345 :muser #f)[[$$include block-ref]]\n")
("parent-environment" . "(:ctime 1018336567 :cuser #f :mtime 1018336567 :muser #f)* [procedure] parent-environment ''env''\n\n[[STk]]: returns the parent environment of ''env''.\nSee [[the-environment]].\n")
("signal/winch" . "(:ctime 1015076703 :cuser #f :mtime 1015076703 :muser #f)[[$$include signal/hup]]\n")
("STklos" . "(:ctime 1014942285 :cuser #f :mtime 1327806718 :muser #f)Erick Gallesio's R5RS Scheme implementation with CLOS-like object system.\n\nhttp://www.stklos.net/\n\n[[$$srfis 0 1 2 4 6 7 8 9 10 11 13 14 16 17 18 22 23 26 27 28 30 31 34 35 36 38 39 45 48 55 59 60 62 66 69 70 74 88 89 96 98 100]]\n----\nthis list is taken from the document of version 0.72 (Jan 2006).\nhttp://www.stklos.net/Doc/html/index.html\n\n** Expressions\n\n[[lambda]], [[closure?]], [[case-lambda]], [[when]], [[unless]],\n[[fluid-let]], [[dotimes]], [[while]], [[until]],\n[[promise?]], [[define-macro]], [[macro-expand]]\n\n** Program structure\n\n[[define-module]], [[current-module]], [[find-module]],\n[[module?]], [[export]], [[import]], [[select-module]],\n[[symbol-value]], [[symbol-value*]], [[module-name]],\n[[module-imports]], [[module-exports]], [[module-symbols]],\n[[all-modules]], [[in-module]]\n\n** Standard procedures\n\n[[bignum?]], [[bit-and]], [[bit-or]], [[bit-xor]], [[bit-not]], [[bit-shift]],\n[[random-integer]], [[random-real]]\n\n[[pair-mutable?]], [[list*]], [[append!]], [[reverse!]], [[last-pair]],\n[[copy-tree]], [[filter]], [[filter!]], [[remove]], [[delete]], [[delete!]]\n\n[[string->uninterned-symbol]], [[gensym]], [[string-split]], [[string-index]],\n[[string-find]], [[string-fill!]], [[string-mutable?]],\n[[string-downcase]], [[string-downcase!]], [[string-upcase]], [[string-upcase!]],\n[[string-titlecase]], [[string-titlecase!]]\n\n[[vector-copy]], [[vector-resize]], [[vector-mutable?]], [[sort]]\n\n[[define-struct]], [[make-struct-type]], [[struct-type?]], [[struct-type-slots]],\n[[struct-type-name]], [[struct-type-change-writer!]], [[make-struct]],\n[[struct?]], [[struct-type]], [[struct-ref]], [[struct-set!]], [[struct-is-a?]],\n[[struct-list]]\n\n[[every]], [[any]], [[receive]], [[eval]]\n\n[[call-with-input-string]], [[call-with-output-string]],\n[[input-string-port?]], [[output-string-port?]],\n[[interactive-port?]], [[current-error-port]],\n[[with-error-to-file]], [[with-input-from-string]], [[with-output-to-string]],\n[[with-input-from-port]], [[with-output-to-port]], [[with-error-to-port]],\n[[open-input-string]], [[open-output-string]], [[get-output-string]],\n[[close-port]], [[rewind-file-port]], [[port-current-line]],\n[[port-current-position]], [[port-file-name]],\n[[port-idle-register!]], [[port-idle-unregister!]], [[port-idle-reset!]],\n[[port-closed?]]\n\n[[read-with-shared-structure]], [[define-reader-ctor]], [[read-from-string]],\n[[port->string]], [[port->sexp-list]], [[port->string-list]], [[write*]],\n[[write-with-shared-structure]], [[format]], [[flush-output-port]]\n\n[[try-load]], [[find-path]], [[require]], [[provide]], [[provided?]]\n\n[[keyword?]], [[make-keyword]], [[keyword->string]], [[key-get]],\n[[key-set!]], [[key-delete]], [[key-delete!]]\n\n[[make-hash-table]], [[hash-table?]], [[hash-table-hash]], [[hash-table-put!]],\n[[hash-table-get]], [[hash-table-remove!]], [[hash-table-update!]],\n[[hash-table-for-each]], [[hash-table-map]], [[hash-table->list]],\n[[hash-table-stats]]\n\n[[run-process]], [[process?]], [[process-alive?]], [[process-pid]],\n[[process-input]], [[process-output]], [[process-error]], [[process-wait]],\n[[process-exit-status]], [[process-send-signal]], [[process-kill]],\n[[process-stop]], [[process-continue]], [[process-list]],\n[[fork]]\n\n[[make-client-socket]], [[make-server-socket]], [[socket-shutdown]],\n[[socket-accept]], [[socket?]], [[socket-server?]], [[socket-client?]],\n[[socket-host-name]], [[socket-host-address]], [[socket-local-address]],\n[[socket-port-number]], [[socket-input]], [[socket-output]]\n\n[[temporary-file-name]], [[rename-file]], [[remove-file]], [[copy-file]],\n[[file-is-directory?]], [[file-is-regular?]], [[file-is-readable?]],\n[[file-is-writable?]], [[file-is-executable?]], [[file-exists?]],\n[[getcwd]], [[chmod]], [[chdir]], [[expand-file-name]],\n[[canonical-file-name]], [[decompose-file-name]], [[winify-file-name]],\n[[basename]], [[dirname]], [[file-separator]], [[make-path]],\n[[glob]]\n\n[[getenv]], [[setenv!]], [[running-os]], [[hostname]], [[argc]], [[argv]],\n[[program-name]], [[version]], [[machine-type]], [[clock]], [[date]],\n[[current-time]], [[full-current-time]], [[sleep]], [[seconds->date]],\n[[time]], [[getpid]], [[parse-arguments]]\n\n[[system]], [[exec]], [[exec-list]], [[register-exit-function!]],\n[[exit]], [[die]], [[address-of]], [[gc]], [[void]], [[error]],\n[[apropos]], [[trace]], [[untrace]], [[pretty-print]], [[pp]],\n[[uri-parse]], [[string->html]]\n\n[[make-parameter]], [[parameterize]], [[parameter?]]\n\n* Regular Expressions\n\n[[string->regexp]], [[regexp?]], [[regexp-match]], [[regexp-match-positions]],\n[[regexp-replace]], [[regexp-replace-all]], [[regexp-quote]]\n\n* Pattern Matching\n\n[[match-case]], [[match-lambda]]\n\n* Exceptions and conditions\n\n[[with-handler]], [[with-exception-handler]], [[raise]], [[guard]]\n\n[[make-condition-type]], [[condition-type?]], [[make-compound-condition-type]],\n[[make-condition]], [[condition?]], [[condition-has-type?]],\n[[condition-ref]], [[make-compound-condition]], [[extract-condition]]\n\n* STklos Object System\n\n[[define-class]], [[define-generic]], [[define-method]]\n\n* Customization\n\n[[real-precision]], [[load-path]], [[load-suffixes]], [[load-verbose]]\n\n\n")
("-fx" . "(:ctime 1040351481 :cuser #f :mtime 1040351481 :muser #f)[[$$include +fx]]\n")
("make-table-immutable!" . "(:ctime 1017984878 :cuser #f :mtime 1017984878 :muser #f)* [procedure] make-table-immutable! ''table''\n\n[[Scheme48]]: makes hash table ''table'' immutable.\nSee also [[make-table]], [[Concept:HashTable]].\n")
("make-string-table" . "(:ctime 1017984732 :cuser #f :mtime 1017984732 :muser #f)[[$$include make-table]]\n")
("vector-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144505932 :muser #f)* [procedure] vector-compare [''compare''] ''x'' ''y'' [''size'' ''ref'']\n* [procedure] vector-compare-as-list [''compare''] ''x'' ''y'' [''size'' ''ref'']\n* [procedure] list-compare [''compare''] ''x'' ''y'' [''empty?'' ''head'' ''tail'']\n* [procedure] list-compare-as-vector [''compare''] ''x'' ''y'' [''empty?'' ''head'' ''tail'']\n\n[[SRFI-67]]: Compare two sequences ''x'' and ''y'', using ''compare'' for comparing elements. The result is an exact integer in {-1, 0, 1}. If ''compare'' is not supplied, [[default-compare]] is used.\n\nThe procedure named ''access''-compare-as-''order'' accesses the objects like ''access''\nand compares them with respect to the order given by ''order''. The names ''type''-compare are abbreviations for ''type''-compare-as-''type''.\n\nIndependent of the way the elements are accessed, the natural ordering of\nvectors and lists differs: Sequences are compared as vectors if shorter\nsequences are smaller than longer sequences, and sequences of the same size are\ncompared lexicographically. Sequences are compared as lists if the empty\nsequence is smallest, and two non-empty sequences are compared by their first\nelements, and only if the first elements are equal the residual sequences are\ncompared, recursively.\n\nAn object ''x'' can be accessed like a vector if there are procedures ''size'' and ''ref''\nsuch that (size x) is a non-negative integer n indicating the number of\nelements, and (''ref'' ''x'' ''i'') is the ''i''-th element of ''x'' for\n0 <= i < n. The default vector access procedures are [[vector-length]] and\n[[vector-ref]].\n\nAn object ''x'' can be accessed like a (proper) list if there are procedures\n''empty?'', ''head'', and ''tail'' such that (''empty?'' ''x'') is a boolean indicating that there\nare no elements in ''x'', (''head'' ''x'') is the first element of ''x'', and (''tail'' ''x'') is an\nobject representing the residual elements of ''x''. The default list access\nprocedures are [[null?]], [[car]], and [[cdr]].\n")
("char-titlecase" . "(:ctime 1192066367 :cuser #f :mtime 1192066368 :muser #f)* [procedure] char-titlecase ''char''\n\n[[R6RS]]\n\nSee the note in [[char-upcase]].\n")
("hash-table-delete!" . "(:ctime 1015915404 :cuser #f :mtime 1144494335 :muser #f)* [procedure] hash-table-delete! ''hash-table'' ''key''\n\n[[SRFI-69]]: This procedure removes any association to ''key'' in ''hash-table''.\nIt is not an error if no association for that ''key'' exists; in this case, nothing is done.\n\n* [procedure] hash-table-delete! ''hash-table'' ''key''\n\n[[Gauche]]: See [[Concept:HashTable]].\n\nThis is called [[hash-table-remove!]] or [[hashtable-remove!]]\nin other implementations.\n\n\n")
("#f" . "(:ctime 1014848381 :cuser #f :mtime 1168124315 :muser #f)* [constant] #f\n\n[[R5RS]] boolean false value.\n\n* [reader syntax] #f32(''number'' ...)\n* [reader syntax] #f64(''number'' ...)\n\n[[SRFI-4]]: denote homogeneous numeric vectors.\n\nSee also [[#s]], [[#u]].\n\n")
("blob-s64-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144711693 :muser #f)[[$$include blob-u64-ref]]\n")
("sys-access" . "(:ctime 1020397817 :cuser #f :mtime 1020397817 :muser #f)* [procedure] sys-access ''path'' ''mode''\n\n[[Gauche]]: POSIX access().  Four variables are\npredefined for ''mode'': F_OK, R_OK, W_OK, X_OK.\n\nGauche also provides [[file-exists?]], [[file-is-readable?]],\n[[file-is-writable?]] and [[file-is-executable?]].\n\nScheme48 has [[accessible?]].\n")
("r5rs" . "(:ctime 1015023331 :cuser #f :mtime 1015023331 :muser #f)* [module] r5rs\n\n[[ChezScheme]]: bindings defined in R5RS.\n\nThis module is called [[scheme]] in Gauche.\n\nSee also [[r5rs-syntax]], [[scheme]], [[ieee]], [[module]]\n")
("create-fifo" . "(:ctime 1015106104 :cuser #f :mtime 1036970260 :muser #f)* [procedure] create-fifo ''pathname'' [''mode'']\n\n[[Chicken]]: POSIX mkfifo().  See [[Concept:FileSystem]].\n\nThis is called [[make-fifo]] or [[sys-mkfifo]]\nin some implementations.\n\n* [procedure] create-fifo ''pathname'' [''perms'' ''override?'']\n\n[[Scsh]]: takes extra flag ''override?'' to control\nbehavior when ''pathname'' already exists.\n")
("port-output-buffer" . "(:ctime 1014956422 :cuser #f :mtime 1014956422 :muser #f)* [procedure] port-output-buffer ''port''\n\n[[ChezScheme]]\n\nSee also [[make-output-port]]\n")
("bitwise-arithmetic-shift" . "(:ctime 1191715325 :cuser #f :mtime 1327407294 :muser #f)* [procedure] bitwise-arithmetic-shift ''e1'' ''e2''\n* [procedure] bitwise-arithmetic-shift-left ''e1'' ''e2''\n* [procedure] bitwise-arithmetic-shift-right ''e1'' ''e2''\n\n[[R6RS]]: Bitwise shift operations on 2's complement representation of\nan exact integer ''e1''.    ''E2'' specifies the amount of shift.\nFor [[bitwise-arithmetic-shift]], positive ''e2'' shifts left and\nnegative ''e2'' shifts right.  For [[bitwise-arithmetic-shift-left]]\nand [[bitwise-arithmetic-shift-right]], ''e2'' must be a non-negative\nexact integer.\n\nSee [[fxarithmetic-shift]] etc for fixnum-only ops.\nSee [[bitwise-and]] etc. for bitwise logical ops.\n\nOther implementations have [[arithmetic-shift]], [[ash]].\n [http://www.obtenir-rio.info numero rio]\n")
("cfl/" . "(:ctime 1014954010 :cuser #f :mtime 1014954010 :muser #f)* [procedure] cfl/ ''cflonum'' ...\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[/]], [[fl/]]\n")
("uncaught-exception-reason" . "(:ctime 1015927946 :cuser #f :mtime 1015927946 :muser #f)[[$$include join-timeout-exception?]]\n")
("backquote" . "(:ctime 1014838622 :cuser #f :mtime 1014838622 :muser #f)* [syntax] backquote ''form''\n\n[[R5RS]]\n")
("ucs-range->char-set" . "(:ctime 1018084777 :cuser #f :mtime 1018084777 :muser #f)* [procedure] ucs-range->char-set ''lower'' ''upper'' [''error?'' ''base-cs'']\n* [procedure] ucs-range->char-set ''lower'' ''upper'' ''error?'' ''base-cs''\n\n[[SRFI-14]]\n")
("R4RS" . "(:ctime 1152356044 :cuser #f :mtime 1346013230 :muser #f)Revised^4 Report on the Algorithmic Language Scheme. (1991)\n\nhttp://www.swiss.csail.mit.edu/~jaffer/r4rs_toc.html\n\n----\n\n* Expressions\n\n[[quote]], [[lambda]], [[if]], [[set!]]\n\n* Derived expression types\n\n[[cond]], [[case]], [[and]], [[or]], [[let]], [[let*]], [[letrec]], [[begin]], [[do]], [[delay]], [[quasiquote]]\n\n\n* Program Structure\n\n[[define]]\n\n\n* Standard Procedures\n\n** Booleans\n[[not]], [[boolean?]]\n\n** Equivalence Predicates\n[[eqv?]], [[eq?]], [[equal?]]\n\n** Pairs and Lists\n[[pair?]], [[cons]], [[car]], [[cdr]], [[set-car!]], [[set-cdr!]], [[null?]], [[list?]], [[list]], [[length]], [[append]], [[reverse]], [[list-tail]], [[list-ref]], [[memq]], [[memv]], [[member]], [[assq]], [[assv]], [[assoc]]\n\n** Symbols\n[[symbol?]], [[symbol->string]], [[string->symbol]]\n\n\n** Numbers\n[[number?]], [[complex?]], [[real?]], [[rational?]], [[integer?]], [[exact?]], [[inexact?]], [[=]], [[<]], [[>]], [[<=]], [[>=]], [[zero?]], [[positive?]], [[negative?]], [[odd?]], [[even?]], [[max]], [[min]], [[+]], [[*]], [[-]], [[/]], [[abs]], [[quotient]], [[remainder]], [[modulo]], [[gcd]], [[lcm]], [[numerator]], [[denominator]], [[floor]], [[ceiling]], [[truncate]], [[round]], [[rationalize]], [[exp]], [[log]], [[sin]], [[cos]], [[tan]], [[asin]], [[acos]], [[atan]], [[sqrt]], [[expt]], [[make-rectangular]], [[make-polar]], [[real-part]], [[imag-part]], [[magnitude]], [[angle]], [[exact->inexact]], [[inexact->exact]], [[number->string]], [[string->number]]\n\n** Characters\n[[char?]], [[char=?]], [[char<?]], [[char>?]], [[char<=?]], [[char>=?]], [[char-ci=?]], [[char-ci<?]], [[char-ci>?]], [[char-ci<=?]], [[char-ci>=?]], [[char-alphabetic?]], [[char-numeric?]], [[char-whitespace?]], [[char-upper-case?]], [[char-lower-case?]], [[char->integer]], [[integer->char]], [[char-upcase]], [[char-downcase]]\n\n** Strings\n[[string?]], [[make-string]], [[string]], [[string-length]], [[string-ref]], [[string-set!]], [[string=?]], [[string-ci=?]], [[string<?]], [[string>?]], [[string<=?]], [[string>=?]], [[string-ci<?]], [[string-ci>?]], [[string-ci<=?]], [[string-ci>=?]], [[substring]], [[string-append]], [[string->list]], [[list->string]], [[string-copy]], [[string-fill!]]\n\n** Vectors\n[[vector?]], [[make-vector]], [[vector]], [[vector-length]], [[vector-ref]], [[vector-set!]], [[vector->list]], [[list->vector]], [[vector-fill!]]\n\n** Control features\n[[procedure?]], [[apply]], [[map]], [[for-each]], [[force]], [[call-with-current-continuation]]\n\n** Input and output\n[[call-with-input-file]], [[call-with-output-file]], [[input-port?]], [[output-port?]], [[current-input-port]], [[current-output-port]], [[with-input-from-file]], [[with-output-to-file]], [[open-input-file]], [[open-output-file]], [[close-input-port]], [[close-output-port]],\n[[read]], [[read-char]], [[peek-char]], [[eof-object?]], [[char-ready?]]\n[[write]], [[display]], [[newline]], [[write-char]]\n[[load]], [[transcript-on]], [[transcript-off]]\n")
("1+" . "(:ctime 1014954735 :cuser #f :mtime 1100163261 :muser #f)* [procedure] 1+ ''num''\n\n[[ChezScheme]], [[MIT-Scheme]]:\n\nSee also [[add1]], [[-1+]]\n")
("refine-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144500723 :muser #f)* [syntax] refine-compare ''c1'' ...\n\n[[SRFI-67]]: Expression ''c1'' ... are evaluated from left to right until a\nnon-zero value is found (which then is the value) or until there are no more\narguments to evaluate (in which case the value is 0). It is allowed that there\nare no arguments at all.\n\nNote: This macro is the preferred way to define a compare procedure as a\nrefinement.\n")
("nodelay" . "(:ctime 1015877046 :cuser #f :mtime 1015877046 :muser #f)[[$$include clearok]]\n")
("|#" . "(:ctime 1020229461 :cuser #f :mtime 1020229461 :muser #f)[[$$include #|]]\n")
("PLT-Scheme" . "(:ctime 1122430833 :cuser #f :mtime 1122430833 :muser #f)[[$$include MzScheme]]\n")
("tell" . "(:ctime 1036970129 :cuser #f :mtime 1039776995 :muser #f)* [procedure] tell ''fd/port''\n\n[[Scsh]]: tell(2).  See also [[seek]].\n\nSome implementations have [[file-position]], [[ftell]], [[port-tell]] or [[set-file-position!]].\n")
("Index:q" . "(:ctime 1014846161 :cuser #f :mtime 1015014697 :muser #f)[[$$index q]]\n\n")
("*program-name*" . "(:ctime 1015311819 :cuser #f :mtime 1015888417 :muser #f)* [variable] *program-name*\n\n[[STk]], [[Gauche]]: this value is bount to the script name.\n\nGauche also supports [[SRFI-22]], with which you can get\nthe script name as the first element of the list passed to [[main]].\n\nThis is called [[*script*]] in SCM.\n")
("register-signal-handler" . "(:ctime 1014964895 :cuser #f :mtime 1014964895 :muser #f)* [procedure] register-signal-handler ''sig'' ''proc''\n\n[[ChezScheme]]\n\nGauche has [[with-signal-handlers]]\n")
("lower-case" . "(:ctime 1018038362 :cuser #f :mtime 1018082465 :muser #f)* [variable] lower-case\n* [variable] upper-case\n* [variable] alphabetic\n* [variable] numeric\n* [variable] alphanumeric\n* [variable] punctuation\n* [variable] graphic\n* [variable] printing\n* [variable] control\n* [variable] blank\n* [variable] whitespace\n* [variable] hexdigit\n\n[[Scheme48]]: predefined character sets.\n\nSRFI-14 defines [[char-set:lower-case]],\n[[char-set:upper-case]], [[char-set:letter]],\n[[char-set:digit]], [[char-set:letter+digit]],\n[[char-set:punctuation]], [[char-set:graphic]],\n[[char-set:printing]], [[char-set:iso-control]],\n[[char-set:blank]], [[char-set:whitespace]] and\n[[char-set:hex-digit]].\n")
("remove-signal-queue-signal!" . "(:ctime 1020375019 :cuser #f :mtime 1020375019 :muser #f)[[$$include add-signal-queue-signal!]]\n")
("date-second" . "(:ctime 1023886171 :cuser #f :mtime 1023886171 :muser #f)[[$$include date-nanosecond]]\n")
("remove-foreign-entry" . "(:ctime 1014926161 :cuser #f :mtime 1014926161 :muser #f)* [procedure] remove-foreign-entry ''entry-name''\n\n[[ChezScheme]]\n\nSee also [[foreign-procedure]].\n")
("sys-unlink" . "(:ctime 1018337921 :cuser #f :mtime 1018337921 :muser #f)* [procedure] sys-unlink ''pathname''\n\n[[Gauche]]: see also [[sys-remove]].\n\nThis is called [[unlink]], [[remove-file]]\nor [[delete-file]] in some implementations.\n")
("date-hour" . "(:ctime 1023886195 :cuser #f :mtime 1023886195 :muser #f)[[$$include date-nanosecond]]\n")
("Index:h" . "(:ctime 1015014060 :cuser #f :mtime 1015014060 :muser #f)[[$$index h]]\n")
("join-timeout-exception?" . "(:ctime 1015927901 :cuser #f :mtime 1015963791 :muser #f)* [procedure] join-timeout-exception? ''obj''\n* [procedure] abandoned-mutex-exception? ''obj''\n* [procedure] terminated-thread-exception? ''obj''\n* [procedure] uncaught-exception? ''obj''\n* [procedure] uncaught-exception-reason ''exception''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("set-file-group" . "(:ctime 1018346324 :cuser #f :mtime 1018346324 :muser #f)[[$$include set-file-mode]]\n")
("char->ascii" . "(:ctime 1017981233 :cuser #f :mtime 1017981376 :muser #f)* [procedure] char->ascii ''char''\n* [procedure] ascii->char ''integer''\n\n[[Scheme48]]: identical to [[char->integer]] and\n[[integer->char]], except these uses ASCII encodings.\n\nSee also [[ascii-limit]] and [[ascii-whitespaces]].\n")
("STk" . "(:ctime 1014942237 :cuser #f :mtime 1163857064 :muser #f)Erick Gallesio's R4RS Scheme implementation with Tk binding.\n\nhttp://kaolin.unice.fr/STk/\n\nSuccessor of STk is available as [[STklos]].\n\n----\n\n* Lexical conventions\n\n[[#.]], [[#1=]], [[#1#]]\n\n* Expressions\n\n[[when]], [[unless]], [[fluid-let]], [[dotimes]],\n[[while]], [[until]]\n\n* Standard Procedures\n\n[[append!]], [[remq]], [[remv]], [[remove]], [[last-pair]],\n[[list*]], [[copy-tree]]\n\n[[string->uninterned-symbol]], [[gensym]]\n\n[[string-find?]], [[string-index]], [[split-string]],\n[[string-lower]], [[string-upper]]\n\n[[vector-copy]], [[vector-resize]]\n\n[[closure?]], [[primitive?]], [[promise?]], [[continuation?]],\n[[catch]], [[procedure-body]]\n\n[[call-with-input-string]], [[call-with-output-string]],\n[[input-file-port?]], [[output-file-port?]], \n[[input-string-port?]], [[output-string-port?]],\n[[input-virtual-port?]], [[output-virtual-port?]],\n[[current-error-port]], [[with-error-to-file]],\n[[with-input-from-port]], [[with-output-to-port]],\n[[with-error-to-port]], [[with-input-from-string]],\n[[with-output-to-string]], [[with-error-to-string]],\n[[open-input-string]], [[open-output-string]], \n[[get-output-string]], [[open-input-virtual]],\n[[open-output-virtual]], [[read-line]], [[write*]],\n[[format]], [[flush]], [[when-port-readable]],\n[[when-port-writable]], [[load]], [[try-load]],\n[[autoload]], [[autoload?]], [[require]],\n[[provide]], [[provided?]], [[open-file]], [[close-port]],\n[[copy-port]], [[port-closed?]], [[port->string]],\n[[port->list]], [[port->string-list]], [[port->sexp-list]],\n\n[[keyword?]], [[make-keyword]], [[keyword->string]],\n[[get-keyword]]\n\n[[tk-command?]], [[widget?]], [[widget->string]],\n[[string->widget]], [[widget-name]], [[set-widget-data!]],\n[[get-widget-data]]\n\n[[define-module]], [[find-module]], [[module?]],\n[[export]], [[import]], [[export-symbol]],\n[[export-all-symbols]], [[with-module]], [[current-module]],\n[[select-module]], [[module-name]], [[module-imports]],\n[[module-exports]], [[module-symbols]], [[all-modules]]\n\n[[environment?]], [[the-environment]], [[global-environment]],\n[[parent-environment]], [[environment->list]],\n[[procedure-environment]], [[module-environment]],\n[[symbol-bound?]]\n\n[[macro]], [[macro?]], [[macro-expand-1]], [[macro-expand]],\n[[macro-body]], [[define-macro]]\n\n[[expand-file-name]], [[canonical-path]], [[dirname]],\n[[basename]], [[file-is-directory?]], [[file-is-regular?]],\n[[file-is-readable?]], [[file-is-writable?]],\n[[file-is-executable?]], [[file-exists?]], [[glob]],\n[[remove-file]], [[rename-file]], [[temporary-file-name]],\n[[getcwd]], [[chdir]], [[getpid]], [[system]], [[!]],\n[[exec]], [[getenv]], [[setenv!]]\n\n[[address-of]], [[address?]]\n\n[[set-signal-handler!]], [[add-signal-handler!]],\n[[get-signal-handlers]], [[send-signal]]\n\n[[make-hash-table]], [[hash-table?]], [[hash-table-hash]],\n[[hash-table-put!]], [[hash-table-get]], [[hash-table-remove!]],\n[[hash-table-for-each]], [[hash-table-map]],\n[[hash-table->list]], [[hash-table-stats]]\n\n[[string->regexp]], [[regexp?]], [[regexp-replace]],\n[[regexp-replace-all]]\n\n[[match-case]], [[match-lambda]]\n\n\n[[run-process]], [[process?]], [[process-alive?]],\n[[process-pid]], [[process-input]], [[process-output]],\n[[process-error]], [[process-wait]], [[process-exit-status]],\n[[process-send-signal]], [[process-kill]],\n[[process-stop]], [[process-continue]], [[process-list]]\n\n[[make-client-socket]], [[socket?]], [[socket-host-name]],\n[[socket-host-address]], [[socket-local-address]],\n[[socket-port-number]], [[socket-input]], [[socket-output]],\n[[make-server-socket]], [[socket-accept-connection]],\n[[socket-shutdown]], [[socket-down?]], [[socket-dup]],\n[[when-socket-ready]]\n\n[[define-external]], [[external-exists?]], \n[[c-string->string]]\n\n[[eval]], [[version]], [[machine-type]], [[random]],\n[[set-random-seed!]], [[eval-string]],\n[[read-from-string]], [[dump]], [[trace-var]],\n[[untrace-var]], [[error]], [[gc]], [[gc-stats]],\n[[expand-heap]], [[get-internal-info]], [[sort]],\n[[uncode]], [[time]], [[apropos]], [[inspect]],\n[[view]], [[detail]], [[quit]], [[exit]], [[bye]]\n\n* Tk bindings\n\n* Differences with R4RS\n\n[[*debug*]], [[*gc-verbose*]], [[*load-verbose*]],\n[[*load-path*]], [[*load-suffixes*]], [[*argc*]], [[*argv*]],\n[[*program-name*]], [[*print-banner*]], [[*stk-library*]],\n[[*root*]], [[*help-path*]], [[*image-path*]],\n[[*start-withdrawn*]], [[*tk-version*]],\n[[*tk-patch-level*]]\n\n[[report-error]], [[repl-display-prompt]], [[repl-display-result]]\n\n* STklos\n\n[[define-class]], [[define-generic]], [[define-method]],\n[[next-method]], \n")
(">=fx" . "(:ctime 1039346175 :cuser #f :mtime 1039346175 :muser #f)[[$$include =fx]]\n")
("static-byte-vector->pointer" . "(:ctime 1015280195 :cuser #f :mtime 1015280195 :muser #f)* [procedure] static-byte-vector->pointer ''pbyte-vector''\n\n[[Chicken]]: see also [[make-static-byte-vector]], [[byte-vector]].\n")
("user-info-group" . "(:ctime 1018125261 :cuser #f :mtime 1018125261 :muser #f)[[$$include user-info?]]\n")
("ucs-range->char-set!" . "(:ctime 1018085025 :cuser #f :mtime 1018085025 :muser #f)[[$$include ucs-range->char-set]]\n")
("sys-rmdir" . "(:ctime 1020221829 :cuser #f :mtime 1020221829 :muser #f)* [procedure] sys-rmdir ''path''\n\n[[Gauche]]: POSIX rmdir(2).  See [[Concept:FileSystem]].\n\nThis is called [[delete-directory]] or [[remove-directory]]\non other implementations.\n")
("blob-u64-native-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144711748 :muser #f)[[$$include blob-u64-ref]]\n")
("substring-index" . "(:ctime 1015075081 :cuser #f :mtime 1015075172 :muser #f)* [procedure] substring-index ''s1'' ''s2'' [''start'']\n* [procedure] substring-index-ci ''s1'' ''s2'' [''start'']\n\n[[Chicken]]: searches ''s2'' in ''s1'' and returns index if found.\n\nThese are equivalent ot SRFI-13's [[string-contains]] and\n[[string-contains-ci]] except that substring-index[-ci]\ndon't take extra three optional arguments.\n\n")
("file-size" . "(:ctime 1015184736 :cuser #f :mtime 1037015045 :muser #f)* [procedure] file-size ''filename''\n\n[[Bigloo]], [[Chicken]], [[MzScheme]]: returns size of the given file name.\n\nSee also [[file-modification-time]], [[file-position]].  See [[Concept:FileSystem]].\n\nChezScheme has [[file-length]], which takes a port instead of\na pathname.\n\n* [procedure] file-size ''fname/fd/port'' [''chase?'']\n\n[[Scsh]]: see also [[file-info]].\n\n* [procedure] file-size ''filename'' &keyword ''follow-link?''\n\n[[Gauche]]: see also [[sys-stat]].\n")
("atanh" . "(:ctime 1014955511 :cuser #f :mtime 1015237322 :muser #f)[[$$include asinh]]\n\n")
("null" . "(:ctime 1015023556 :cuser #f :mtime 1015023556 :muser #f)* [module] null\n\n[[Gauche]]: a module contains syntactic bindings of R5RS.\nIt is called [[r5rs-syntax]] in ChezScheme.  See also\n[[scheme]], [[gauche]], [[user]], [[define-module]].\n")
("print" . "(:ctime 1015052787 :cuser #f :mtime 1039756315 :muser #f)* [procedure] print ''exp'' ...\n* [procedure] print* ''exp'' ...\n\n[[Chicken]]: prints ''exp''s to the current output port using [[display]].\n[[print]] prints newline after it.\n\n[[SCM]], [[Gauche]] have [[print]], but not [[print*]].\n\n[[Bigloo]] has [[print]], but no-newline counterpart is\ncalled [[display*]].\nBigloo also has [[fprint]].\n\n")
("port-is-a-terminal?" . "(:ctime 1015725692 :cuser #f :mtime 1099726217 :muser #f)* [procedure] port-is-a-terminal? ''port''\n\n[[Scheme48]]: POSIX isatty().\n\nThis is called [[terminal-port?]], [[interactive-port?]],\n[[sys-isatty]], [[isatty?]] in\nsome Scheme implementations.\n")
("errno/pipe" . "(:ctime 1015077283 :cuser #f :mtime 1015077283 :muser #f)[[$$include errno/perm]]\n")
("char-set-filter!" . "(:ctime 1018084533 :cuser #f :mtime 1018084533 :muser #f)[[$$include char-set-filter]]\n")
("file-write-access?" . "(:ctime 1015197067 :cuser #f :mtime 1015197067 :muser #f)[[$$include file-read-access?]]\n")
("SRFI-42" . "(:ctime 1099285674 :cuser #f :mtime 1144537740 :muser #f)SRFI-42: Eager Comprehensions\n\nhttp://srfi.schemers.org/srfi-42/srfi-42.html\n\n[[$$srfi-implementors]]\n\n----\n\n* Comprehensions\n\n[[do-ec]], [[list-ec]], [[append-ec]], [[string-ec]], \n[[string-append-ec]], [[vector-ec]], [[vector-of-length-ec]],\n[[sum-ec]], [[product-ec]], [[min-ec]], [[max-ec]], \n[[any?-ec]], [[every?-ec]], [[first-ec]], [[last-ec]],\n[[fold-ec]], [[fold3-ec]]\n\n* Generators\n\n[[:]], [[:list]], [[:string]], [[:vector]], [[:integers]], [[:range]], [[:real-range]],\n[[:char-range]], [[:port]], [[:dispatched]], [[:do]], [[:let]],\n[[:parallel]], [[:while]], [[:until]]\n")
("wmove" . "(:ctime 1015882673 :cuser #f :mtime 1015882673 :muser #f)* [procedure] wmove ''win'' ''y'' ''x''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("fpmax" . "(:ctime 1191227891 :cuser #f :mtime 1191227891 :muser #f)[[$$include fpmin]]\n")
("thread-running?" . "(:ctime 1020749869 :cuser #f :mtime 1020749869 :muser #f)* [procedure] thread-running? ''thread''\n\n[[MzScheme]]: returns #t if ''thread'' is running.\n")
("vector-fold-right" . "(:ctime 1099365286 :cuser #f :mtime 1099365286 :muser #f)[[$$include vector-fold]]\n")
("</<?" . "(:ctime 1144494246 :cuser #f :mtime 1144503545 :muser #f)* [procedure] </<? [''compare''] [''x'' ''y'' ''z'']\n* [procedure] </<=? [''compare''] [''x'' ''y'' ''z'']\n* [procedure] <=/<? [''compare''] [''x'' ''y'' ''z'']\n* [procedure] <=/<=? [''compare''] [''x'' ''y'' ''z'']\n* [procedure] >/>? [''compare''] [''x'' ''y'' ''z'']\n* [procedure] >/>=? [''compare''] [''x'' ''y'' ''z'']\n* [procedure] >=/>? [''compare''] [''x'' ''y'' ''z'']\n* [procedure] >=/>=? [''compare''] [''x'' ''y'' ''z'']\n\n[[SRFI-67]]: Test if ''x'', ''y'', and ''z'' form a chain with the two relations specified by the name of the procedure ''rel1''/''rel2''?, with respect to the compare procedure ''compare''.\n\nIf ''compare'' is not provided, [[default-compare]] is used. If ''x'' ''y'' ''z'' are not provided,\na predicate procedure of three arguments is constructed. The order in which the\nvalues are compared is unspecified, but each value is compared at least once.\n")
("time-thread" . "(:ctime 1015208890 :cuser #f :mtime 1015208890 :muser #f)[[$$include time-duration]]\n")
("graphic" . "(:ctime 1018071885 :cuser #f :mtime 1018071885 :muser #f)[[$$include lower-case]]\n")
("hash-table-exists?" . "(:ctime 1015915365 :cuser #f :mtime 1144494396 :muser #f)* [procedure] hash-table-exists? ''hash-table'' ''key''\n\n[[SRFI-69]]: This predicate tells whether there is any association to ''key'' in ''hash-table''.\n\n* [procedure] hash-table-exists? ''hash-table'' ''key''\n\n[[Gauche]]: returns #t if hash table contains an entry for ''key''.\nSee [[Concept:HashTable]].\n")
("fixnum->flonum" . "(:ctime 1014951888 :cuser #f :mtime 1191226492 :muser #f)* [procedure] fixnum->flonum ''fixnum''\n\n[[R6RS]], [[ChezScheme]], [[Bigloo]]\n\nSee also [[fixnum->flonum]], [[fixnum?]]\n")
("port-input-size" . "(:ctime 1014956181 :cuser #f :mtime 1014956181 :muser #f)* [procedure] port-input-size ''port''\n\n[[ChezScheme]]\n\nSee also [[make-input-port]], [[set-port-input-size!]]\n")
("filter-to" . "(:ctime 1099651412 :cuser #f :mtime 1099651480 :muser #f)* [generic] filter-to ''class'' ''pred'' ''collection''\n* [generic] remove-to ''class'' ''pred'' ''collection''\n* [generic] partition-to ''class'' ''pred'' ''collection''\n\n[[Gauche]]: generic versions of [[filter]], [[remove]], and [[partition]],\nwith which you can specify the type of the result collection.\n\n{{{\n(filter-to <vector> even? '#(1 2 3 4)) => #(2 4)\n(filter-to <string> char-upper-case? \"Hello, World\")\n   => \"HW\"\n}}}\n\n\nSee also [[map-to]], [[coerce-to]].\n")
("vms-debug" . "(:ctime 1015883588 :cuser #f :mtime 1015883588 :muser #f)* [procedure] vms-debug\n\n[[SCM]]: invoke VMS debugger.\n")
("port-revealed" . "(:ctime 1018391037 :cuser #f :mtime 1018391037 :muser #f)* [procedure] port-revealed ''port''\n\n[[Scsh]]: returns a ''revealed count'' of the ''port''.\n[[release-port-handle]] decrements the revealed count.\nAny operation that reveales file descriptor of ''port''\nincrements teh revealed count.\n\n")
("working-directory" . "(:ctime 1018126543 :cuser #f :mtime 1018126543 :muser #f)* [procedure] working-directory\n* [procedure] set-working-directory! ''name''\n\n[[Scheme48]]: getcwd and chdir.\nSee also [[Concept:FileSystem]].\n\nOther implementations call this\n[[current-directory]] and [[change-directory]],\n[[sys-getcwd]] and [[sys-chdir]], etc.\n")
("remove" . "(:ctime 1014869381 :cuser #f :mtime 1018333138 :muser #f)* [procedure] remove ''pred'' ''list''\n\n[[SRFI-1]]: Returns ''list'' without the elements that satisfy predicate ''pred''.\n\nSee also [[remove!]], [[filter]], [[partition]].\n\n* [generic] remove ''pred'' ''coll''\n\n[[Gauche]] extends this to take arbitrary collection\n(with gauche.collection module).\n\n* [procedure] remove ''obj'' ''list''\n\n[[ChezScheme]], [[STk]]: removes ''obj'' from ''list'', using [[equal?]] to \ncompare.  This is equivalent to [[SRFI-1]]'s [[delete]].\n\nSee also [[remq]], [[remv]].\n")
("drop-while" . "(:ctime 1014869899 :cuser #f :mtime 1014869899 :muser #f)* [procedure] drop-while ''pred'' ''clist''\n\n[[SRFI-1]]: Drops the longest initial prefix of ''clist'' whose \nelements all satisfy the predicate ''pred'', and returns the rest \nof the ''list''. \n\nSee also [[take-while]].\n")
("chain<?" . "(:ctime 1144494246 :cuser #f :mtime 1144504103 :muser #f)[[$$include chain=?]]\n")
("reset-handler" . "(:ctime 1015024649 :cuser #f :mtime 1015047928 :muser #f)* [procedure] reset-handler [''newhandler'']\n\n[[ChezScheme]], [[Chicken]]: gets/sets current reset handler.\n\nSee also [[reset]]\n")
("define-macro" . "(:ctime 1015044887 :cuser #f :mtime 1327407087 :muser #f)* [syntax] define-macro (''name'' ''formals'') ''exp'' ...\n* [syntax] define-macro ''name'' ''transformer-exp''\n\n[[Chicken]], [[MzScheme]]: defines macro.  See also [[let-macro]].\n\n[[Gauche]], [[SigScheme]]: defines legacy (non-hygienic) macro.\n\n[[STk]], [[STklos]]: defines macro.  See also [[macro]].\n\nSee also [[define-syntax]]\n\nSome implementations have [[defmacro]].\n [http://www.obtenir-rio.info rio orange]\n")
("byte-vector->list" . "(:ctime 1015275555 :cuser #f :mtime 1015275555 :muser #f)* [procedure] byte-vector->list ''byte-vector''\n* [procedure] list->byte-vector ''list''\n\n[[Chicken]]: byte vector conversion routines.  See also [[byte-vector]].\n\n")
("hashtable-get" . "(:ctime 1045572061 :cuser #f :mtime 1106765587 :muser #f)* [procedure] hashtable-get ''table'' ''key''\n\n[[Bigloo]]: Returns the entry that has ''key'' from ''table''.\nIf no entry is found with ''key'', #f is returned.\nSee also [[make-hashtable]], [[Concept:HashTable]].\nIn other implementations, this is called [[hash-table-get]].\n")
("hashtable-remove!" . "(:ctime 1046488093 :cuser #f :mtime 1046488093 :muser #f)* [procedure] hashtable-remove! ''table'' ''key''\n\n[[Bigloo]]: removes item with ''key'' from a hashtable ''table''.\nReturns #t if the object with ''key'' was in ''table'', #f otherwise.\nSee also [[make-hashtable]], [[Concept:HashTable]].\n\nOther implementations have [[hash-table-remove!]] or [[hash-table-delete!]].\n\n")
("make-condition-type" . "(:ctime 1063369143 :cuser #f :mtime 1063369143 :muser #f)* [procedure] make-condition-type ''id'' ''parent'' ''field-names''\n\n[[SRFI-35]]: Returns a new condition type.  ''id'' is a symbol\nas the name of the condition type.  ''parent'' is the parent\ncondition type.  ''field-names'' are a list of symbols for\nthe condition's fields.\n\nA condition can be instantiated by [[make-condition]].\n\nSee also [[define-condition-type]].\n")
("print-brackets" . "(:ctime 1014960411 :cuser #f :mtime 1014960411 :muser #f)* [procedure] print-brackets [''newval'']\n\n[[ChezScheme]]: a parameter for [[write]] and [[pretty-print]]\n")
("weak-pair?" . "(:ctime 1015030817 :cuser #f :mtime 1015030817 :muser #f)* [procedure] weak-pair? ''obj''\n\n[[ChezScheme]]: see [[weak-cons]]\n")
("ar32" . "(:ctime 1099398056 :cuser #f :mtime 1099398056 :muser #f)[[$$include ac64]]\n")
("test-runner-on-final!" . "(:ctime 1151049296 :cuser #f :mtime 1151083411 :muser #f)[[$$include test-runner-on-final]]\n")
("unzip1" . "(:ctime 1014864961 :cuser #f :mtime 1014864982 :muser #f)* [procedure] unzip1 ''list''\n\n[[SRFI-1]]\n\nSee also [[zip]].\n")
("eof-object" . "(:ctime 1211800317 :cuser #f :mtime 1211800317 :muser #f)* [procedure] eof-object\n\n[[R6RS]]: Returns the end-of-file object.\nNB: The end-of-file object is not a datum value, and thus has no external representation.\n\nSee also: [[eof-object?]]\n")
("delete-duplicates" . "(:ctime 1014871212 :cuser #f :mtime 1014871212 :muser #f)* [procedure] delete-duplicates ''list'' [''='']\n\n[[SRFI-1]]: delete-duplicates removes duplicate elements from \nthe ''list'' argument. If there are multiple equal elements in the\nargument list, the result list only contains the first or leftmost \nof these elements in the result. The order of these surviving\nelements is the same as in the original list -- delete-duplicates \ndoes not disorder the list (hence it is useful for\n\"cleaning up\" association lists). \n\nThe ''='' parameter is used to compare the elements of the list; \nit defaults to [[equal?]]. If x comes before y in list, then the\ncomparison is performed (= x y). The comparison procedure will \nbe used to compare each pair of elements in list no\nmore than once; the order in which it is applied to the various \npairs is not specified. \n\nSee also [[delete-duplicates!]]\n")
("fold-right" . "(:ctime 1014865657 :cuser #f :mtime 1327407227 :muser #f)* [procedure] fold-right ''kons'' ''knil'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: The fundamental list recursion operator. \n\n     (fold-right kons knil lis) = (kons (car lis) (fold-right kons knil (cdr lis)))\n     (fold-right kons knil '()) = knil\n\nSee also [[fold]], [[pair-fold-right]], [[reduce-right]].\n [http://www.obtenir-rio.info rio orange]\n")
("compile-interpret-simple" . "(:ctime 1015023827 :cuser #f :mtime 1015023827 :muser #f)* [procedure] compile-interpret-simple [''newval'']\n\n[[ChezScheme]]\n")
("not-pair?" . "(:ctime 1014862503 :cuser #f :mtime 1014862503 :muser #f)* [procedure] not-pair? ''obj''\n\n[[SRFI-1]]: (lambda (obj) (not (pair? obj)))\n\n")
("ucs2?" . "(:ctime 1039428591 :cuser #f :mtime 1039428591 :muser #f)* [procedure] ucs2? ''obj''\n\n[[Bigloo]]: returns true if ''obj'' is a UCS2 character.\n\nBigloo has distinct type for UCS2 character and\nsingle-byte character.\nUCS2 character can be denoted by a syntax #u''<unicode>''.\n(See [[#u]]).\n\nUCS2 character and standard character can be converted\nby [[ucs2->char]] and [[char->ucs2]].\n\nUCS2 character has specialized operations reflecting\nstandard character operations: [[ucs2=?]], [[ucs2-ci=?]],\n[[ucs2<?]], [[ucs2-ci<?]], [[ucs2<=?]], [[ucs2-ci<=?]],\n[[ucs2>?]], [[ucs2-ci>?]], [[ucs2>=?]], [[ucs2-ci>=?]],\n[[ucs2-alphabetic?]], [[ucs2-numeric?]],\n[[ucs2-whitespace?]], [[ucs2-upper-case?]],\n[[ucs2-lower-case?]], [[ucs2->integer]], [[integer->ucs2]],\n[[ucs2-upcase]], [[ucs2-downcase]].\n")
("pretty-maximun-lines" . "(:ctime 1014960037 :cuser #f :mtime 1014960122 :muser #f)\n")
("port-idle-reset!" . "(:ctime 1099727073 :cuser #f :mtime 1099727073 :muser #f)[[$$include port-idle-register!]]\n")
("rxmatch" . "(:ctime 1015899590 :cuser #f :mtime 1018083246 :muser #f)* [procedure] rxmatch ''regexp'' ''string''\n\n[[Gauche]]: regular expression matcher.   Returns [[<regmatch>]] object if match,\nor #f otherwise.  See [[Concept:RegularExpression]], [[#/]].\n\nSome implementations call this [[match]].\n")
("string-interpolate" . "(:ctime 1015806072 :cuser #f :mtime 1015806090 :muser #f)* [syntax] string-interpolate ''string''\n\n[[Gauche]]: Expands to a form that evaluates to a string, which is ''string''\nexcept the character sequences \",''expr''\" in ''string'' are replaced\nby the value of ''expr''s.\n\n  (string-interpolate \"The result is ,(* 2 5).\")\n   ==> (string-append \"The result is \" (x->string (* 2 5)) \".\")\n\nSee also [[#`]].\n")
("try" . "(:ctime 1045088188 :cuser #f :mtime 1099301658 :muser #f)* [syntax] try ''exp'' ''handler''\n\n[[Bigloo]]: Evaluates ''exp'' and returns its value(s).  If an error is\nraised during evaluation of ''exp'', ''handler'' is called\nwith four arguments; the continuation of [[try]], the name of the\nprocedure that raised the error, an error message and an object\nthat caused the error.   ''Handler'' is evaluated in the dynamic\nscope outside of [[try]].\n\nSee also [[error]], [[error/location]], [[bind-exit]].\n\nSee also [[guard]] of [[SRFI-34]].\n")
("random-integer" . "(:ctime 1038272774 :cuser #f :mtime 1038272774 :muser #f)* [procedure] random-integer ''n''\n\n[[SRFI-27]]: returns a random integer in [''0'', ''n-1''].\nSee also [[random-real]].\n\nSome implementations have built-in procedure like\n[[random]].\n")
("exec-with-alias" . "(:ctime 1015285352 :cuser #f :mtime 1015285352 :muser #f)[[$$include exec]]\n")
("pp" . "(:ctime 1099776861 :cuser #f :mtime 1099776861 :muser #f)[[$$include pretty-print]]\n")
("list-directory" . "(:ctime 1018126429 :cuser #f :mtime 1020222005 :muser #f)* [procedure] list-directory ''name''\n\n[[Scheme48]]: returns a list of entries in the named\ndirectory.  See also [[Concept:FileSystem]].\n\nThis is called [[directory]], [[directory-files]],\n[[directory-list]] or [[sys-readdir]]\nin some other implementations.\n")
("vector-empty?" . "(:ctime 1099364375 :cuser #f :mtime 1099364375 :muser #f)* [procedure] vector-empty? ''vector''\n\n[[SRFI-43]]: Returns #t iff ''vector'' is an empty vector, i.e. #().\n\nConceptually, this is parallel to [[null?]] and [[string-null?]].\n")
("conjugate" . "(:ctime 1014955271 :cuser #f :mtime 1100162999 :muser #f)* [procedure] conjugate ''number''\n\n[[ChezScheme]], [[MIT-Scheme]]: returns complex conjugate of ''number''.\n\nSee also [[cfl-conjugate]]\n")
("substring-move!" . "(:ctime 1039752381 :cuser #f :mtime 1039752529 :muser #f)* [procedure] substring-move! ''str1'' ''start1'' ''end1'' str2'' ''start2''\n\n[[Guile]]: Copy the substring of ''str1'' between\n''start1'' and ''end1'' into ''str2'' beginning at\n''start2''.\n\nThe same function can be achieved by SRFI-13's\n[[string-copy!]], but the different API:\n\n  (string-copy! ''str2'' ''start2'' ''str1'' ''start1'' ''end1'')\n")
("object-unhash" . "(:ctime 1152518355 :cuser #f :mtime 1152527988 :muser #f)* [procedure] object-unhash ''n''\n\n[[RRRS]]: takes an integer and returns the object associated with that integer if there is one, returning #!false otherwise.\n\nSee also [[object-hash]].\n")
("signal/segv" . "(:ctime 1015076561 :cuser #f :mtime 1015076561 :muser #f)[[$$include signal/hup]]\n")
("circular-list?" . "(:ctime 1014862181 :cuser #f :mtime 1014862181 :muser #f)* [procedure] circular-list? ''obj''\n\n[[SRFI-1]]: True if ''obj'' is a circular list. \n\nSee also: [[proper-list?]], [[dotted-list?]], [[circular-list]].\n")
("ed" . "(:ctime 1015883621 :cuser #f :mtime 1015883621 :muser #f)* [procedure] ed ''arg1'' ...\n\n[[SCM]]: invoke an editor.\n")
("open/rdwr" . "(:ctime 1015106299 :cuser #f :mtime 1015106307 :muser #f)[[$$include open/rdonly]]\n\n")
("string-ci=" . "(:ctime 1014892902 :cuser #f :mtime 1014892902 :muser #f)* [procedure] string-ci= ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string-ci<> ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string-ci< ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string-ci<= ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string-ci> ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n* [procedure] string-ci>= ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-compare-ci]]\n")
("record-type?" . "(:ctime 1017982753 :cuser #f :mtime 1017982753 :muser #f)* [procedure] record-type? ''obj''\n\n[[Scheme48]].  See [[define-record-type]].\n")
("llong?" . "(:ctime 1039409133 :cuser #f :mtime 1039409133 :muser #f)[[$$include elong?]]\n")
("until" . "(:ctime 1018333063 :cuser #f :mtime 1018333063 :muser #f)[[$$include while]]\n")
("generate-interrupt-trap" . "(:ctime 1015023788 :cuser #f :mtime 1015023788 :muser #f)* [procedure] generate-interrupt-trap [''newval'']\n\n[[ChezScheme]]: gets/sets a flag to control compilation.\n\nSee also [[compile]]\n")
("set-fdes-flags" . "(:ctime 1018386668 :cuser #f :mtime 1018386668 :muser #f)[[$$include fdes-flags]]\n")
("fixnum?" . "(:ctime 1014950102 :cuser #f :mtime 1191227991 :muser #f)* [procedure] fixnum? ''obj''\n\n[[R6RS]], [[ChezScheme]], [[Chicken]], [[Gauche]],\n[[Bigloo]]: Returns #t iff ''obj'' is a fixnum.\n\nSee also [[bignum?]], [[ratnum?]], [[flonum?]], [[cflonum?]].\n\nImplementations have specialized operations on fixnums.  The set of such operations differ among them.\n\n:[[R6RS]]: \n[[fixnum-width]], [[least-fixnum]], [[greatest-fixnum]],\n[[fx=?]], [[fx<?]], [[fx>?]], [[fx<=?]], [[fx>=?]],\n[[fxzero?]], [[fxpositive?]], [[fxnegative?]], [[fxodd?]], [[fxeven?]],\n[[fxmax]], [[fxmin]], [[fx+]], [[fx*]], [[fx-]], [[fxdiv-and-mod]],\n[[fxdiv]], [[fxmod]], [[fxdiv0-and-mod0]], [[fxdiv0]], [[fxmod0]],\n[[fx+/carry]], [[fx-/carry]], [[fx*/carry]], [[fxnot]], \n[[fxand]], [[fxior]], [[fxxor]], [[fxif]], [[fxbit-count]], [[fxlength]],\n[[fxfirst-bit-set]], [[fxbit-set?]], [[fxcopy-bit]], [[fxbit-field]],\n[[fxcopy-bit-field]], [[fxarithmetic-shift]], [[fxarithmetic-shift-left]],\n[[fxarithmetic-shift-right]], [[fxrotate-bit-field]], [[fxreverse-bit-field]]\n:[[ChezScheme]]:\n[[most-positive-fixnum]],\n[[most-negative-fixnum]], [[fx=]], [[fx<]], [[fx<=]], [[fx>]], \n[[fx>=]], [[fxzero?]], [[fxpositive?]], [[fxnegative?]],\n[[fxnonpositive?]], [[fxnonnegative?]], [[fxeven?]],\n[[fxodd?]], [[fx+]], [[fx-]], [[fx*]], [[fx/]],\n[[fx1+]], [[fx1-]], [[fxquotient]], [[fxremainder]], \n[[fxmodulo]], [[fxabs]], [[fxneg]], [[fxmax]], [[fxmin]], [[fxlogand]],\n[[fxlogor]], [[fxlogior]], [[fxlogxor]], [[fxlognot]], \n[[fxlogbit?]], [[fxlogtest]], [[fxlogbit1]], [[fxlogbit0]], [[fxsll]],\n[[fxsrl]], [[fxsra]], [[fixnum->flonum]]\n:[[Chicken]]:\n[[fx+]], [[fx-]], [[fx*]], [[fx/]], [[fxmod]], [[fxneg]],\n[[fxmin]], [[fxmax]], [[fx=]], [[fx>]], [[fx<]], [[fx<=]], [[fx>=]],\n[[fxand]], [[fxior]], [[fxxor]], [[fxnot]], [[fxshl]], [[fxshr]]\n:[[Gauche]]:\n:[[Bigloo]]:\n[[=fx]], [[>fx]], [[<fx]], [[>=fx]],\n[[<=fx]], [[+fx]], [[*fx]], [[-fx]], [[/fx]], [[negfx]].\n\n\n\n")
("fxlogior" . "(:ctime 1191224904 :cuser #f :mtime 1191224904 :muser #f)[[$$include fxlogand]]\n")
("string-index" . "(:ctime 1014893428 :cuser #f :mtime 1099724878 :muser #f)* [procedure] string-index ''s'' ''char/char-set/pred'' [''start'' ''end'']\n\n[[SRFI-13]]  \n\nSee also [[string-index-right]], [[string-contains]].\n\n* [procedure] string-index ''s'' ''char'' [''start'' ''end'']\n\n[[Guile]]: similar to SRFI-13's, but only accepts \na character to search.  Guile also has [[string-rindex]].\n\n* [procedure] string-index ''proc'' ''string1'' ''string2'' ...\n\n[[Chicken]] implements different functionality.\n\n* [procedure] string-index ''string1'' ''string2''\n\n[[STk]], [[STklos]]: This is similar to SRFI-13's [[string-contains]].\n")
("use" . "(:ctime 1014928543 :cuser #f :mtime 1099655621 :muser #f)* [syntax] use ''module-name''\n\n[[Gauche]]: Loads and imports named modules.\n\nGuile has [[use-modules]] that does similar job and more.\n\nSee also [[define-module]], [[Gauche:ModuleSystem]].\n\nSee also [[require-extension]].\n\n")
("string-size" . "(:ctime 1015772388 :cuser #f :mtime 1015772401 :muser #f)* [procedure] string-size ''string''\n\n[[Gauche]]: returns number of bytes ''string'' occupies in memory.\nThe value depends on the internal string encoding.\n")
("system-name" . "(:ctime 1038278058 :cuser #f :mtime 1099742519 :muser #f)* [procedure] system-name\n\n[[Scsh]]: returns the host name on which the program\nis executed.\n\nSome implementations have [[get-host-name]], [[hostname]], [[sys-gethostname]].\n")
("string-titlecase!" . "(:ctime 1014894344 :cuser #f :mtime 1014894344 :muser #f)* [procedure] string-titlecase! ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-titlecase]]\n")
("with-output-to-file" . "(:ctime 1014860919 :cuser #f :mtime 1409241830 :muser #f)* [procedure] with-output-to-file ''string'' ''thunk''\n\n[[R5RS]]\n\nSee also [[call-with-output-file]], [[with-input-from-file]].\n\n* [procedure] with-output-to-file ''string'' ''thunk'' [''if-exists'']\n\n[[ChezScheme]] extends R5RS to take optional argument.\n\n* [procedure] with-output-to-file ''string'' ''thunk'' [''mode'']\n\n[[Chicken]] extends R5RS to take mode argument: #:text, #:binary or #:append.\n\n* [procedure] with-output-to-file ''string'' ''thunk'' [''options'' ...]\n\n[[Gauche]] extends R5RS to take optional keyword arguments.\n")
("fresh-line" . "(:ctime 1017989646 :cuser #f :mtime 1017989646 :muser #f)* [procedure] fresh-line ''output-port''\n\n[[Scheme48]]: see also [[current-row]].\n")
("record-set!" . "(:ctime 1017982692 :cuser #f :mtime 1017982692 :muser #f)[[$$include record-ref]]\n")
("perm/ixgrp" . "(:ctime 1015099808 :cuser #f :mtime 1015099808 :muser #f)[[$$include perm/irusr]]\n")
("acons" . "(:ctime 1015312107 :cuser #f :mtime 1015889563 :muser #f)* [procedure] acons ''a'' ''b'' ''c''\n\n[[Gauche]], [[SCM]]: (cons (cons ''a'' ''b'') ''c'').\n\n[[SRFI-1]] defines this as [[alist-cons]].\n")
("suppress-greeting" . "(:ctime 1015024710 :cuser #f :mtime 1015024710 :muser #f)* [procedure] suppress-greeting\n\n[[ChezScheme]]\n")
("string-ci<=" . "(:ctime 1015066229 :cuser #f :mtime 1015066229 :muser #f)[[$$include string-ci=]]\n")
("errno/nomem" . "(:ctime 1015077188 :cuser #f :mtime 1015077188 :muser #f)[[$$include errno/perm]]\n")
("initscr" . "(:ctime 1015876904 :cuser #f :mtime 1015876904 :muser #f)* [procedure] initscr\n\n[[SCM]]: curses interface for initialization and cleanup.  Most routines returns #t \non success and #f on failure.  (NB: guile-ncurses returns ERR (= -1) on error and\nOK (= 0) on success).   Provided functions are: [[endwin]], [[clearok]], [[idlok]], [[leaveok]], [[scrollok]],\n[[nodelay]], [[cbreak]], [[nocbreak]], [[raw]], [[noraw]], [[echo]], [[noecho]],\n[[nl]], [[nonl]], [[resetty]], [[savetty]], [[newwin]], [[subwin]], [[close-port]],\n[[refresh]], [[force-output]], [[mvwin]], [[overlay]], [[overwrite]],[[touchwin]],\n[[touchline]], [[wmove]], [[display]], [[wadd]], [[werase]], [[wclear]],\n[[wclrtobot]], [[wclrtoeol]], [[wdelch]], [[wdeleteln]], \n[[winsch]], [[winsertln]], [[scroll]], [[read-char]], [[winch]],\n[[getyx]], [[wstandout]], [[wstandend]], [[box]], [[unctrl]]\n")
("date-zone-offset" . "(:ctime 1023886252 :cuser #f :mtime 1023886262 :muser #f)[[$$include date-nanosecond]]\n")
("errno/notdir" . "(:ctime 1015077231 :cuser #f :mtime 1015077231 :muser #f)[[$$include errno/perm]]\n")
("test-begin" . "(:ctime 1151049296 :cuser #f :mtime 1151074915 :muser #f)* [syntax]: test-begin ''suite-name'' [''count'']\n\n[[SRFI-64]]: enters new test group named ''suite-name''.\nOptional ''count'' must match number of tests executed in this group (nested group is counted as single test case).\nIf not match, an error is signaled on [[test-end]].\n")
("install-expander" . "(:ctime 1015033774 :cuser #f :mtime 1015033774 :muser #f)* [procedure] install-expander ''keyword'' ''expander''\n\n[[ChezScheme]]: expansion-passing style macros.\nSee also [[define-syntax-expander]], [[eps-expand]].\n")
("let-struct" . "(:ctime 1063246382 :cuser #f :mtime 1063246382 :muser #f)* [syntax] let-struct ''name'' (''field'' ...) ''body'' ...\n* [syntax] let-struct (''name'' ''parent'') (''field'' ...) ''body'' ...\n\n[[MzScheme]]: locally defines a struct ''name''.   See [[define-struct]].\n")
(":do" . "(:ctime 1144527545 :cuser #f :mtime 1144538597 :muser #f)* [syntax] :do (''lb'' ...) ''ne1?'' (''ls'' ...)\n* [syntax] :do (let (''ob'' ...) ''oc'' ...) (''lb'' ...) ''ne1?'' (let (''ib'' ...) ''ic'' ...) ''ne2?'' (''ls'' ...)\n[[SRFI-42]]:\nDefines a generator in terms of a named-let, optionally decorated with\ninner and outer lets. This generator is for defining other generators.  \nThe generator is a compromise between\nexpressive power (more flexible loops) and fixed structure (necessary for\nmerging and modifying generators). In the fully decorated form, the\nsyntactic variables ''ob'' (outer binding), ''oc'' (outer command), ''lb'' (loop\nbinding), ''ne1?'' (not-end1?), ''ib'' (inner binding), ''ic'' (inner command),\n''ne2?'' (not-end2?), and ''ls'' (loop step) define the following loop\nskeleton:\n{{{\n(let (ob ...)\n  oc ...\n  (let loop (lb ...)\n    (if ne1?\n        (let (ib ...)\n          ic ...\n          payload\n          (if ne2?\n              (loop ls ...) ))))),\n}}}\nwhere ''oc'' ... and ''ic'' ... are syntactically equivalent to ''command'' ..., i.e. they do not begin with a ''definition''. The latter requirement allows the code generator to produce more efficient code for special cases by removing empty let-expressions altogether.\n")
("time-utc" . "(:ctime 1015208899 :cuser #f :mtime 1015208899 :muser #f)[[$$include time-duration]]\n")
("string-mutable?" . "(:ctime 1099725014 :cuser #f :mtime 1099725146 :muser #f)* [procedure] string-mutable? ''obj''\n\n[[STklos]]: return #t iff ''obj'' is a mutable string.\n\nSee also [[pair-mutable?]]. [[vector-mutable?]]\n\n")
("compare-by<=" . "(:ctime 1144494246 :cuser #f :mtime 1144504981 :muser #f)[[$$include compare-by<]]\n")
("cpu-time" . "(:ctime 1015028534 :cuser #f :mtime 1015028534 :muser #f)* [procedure] cpu-time\n\n[[ChezScheme]]: statistics\n\n")
("SRFI-62" . "(:ctime 1122429260 :cuser #f :mtime 1145787423 :muser #f)SRFI 62: S-expression comments\n\nhttp://srfi.schemers.org/srfi-62/srfi-62.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[#;]]\n")
("make-input-port" . "(:ctime 1014955874 :cuser #f :mtime 1015072936 :muser #f)* [procedure] make-input-port ''handler'' ''input-buffer''\n\n[[ChezScheme]]: creates a generic port for input\n\nSee also [[make-output-port]], [[make-input/output-port]],\n[[port-handler]], [[port-input-buffer]], [[port-input-size]],\n[[port-input-index]], [[set-port-input-size!]], [[set-port-input-index!]].\n\n* [procedure] make-input-port ''read'' ''ready'' ''close'' [''peek'']\n\n[[Chicken]]\n\nSee also [[make-output-port]]\n\n")
("errno/io" . "(:ctime 1015077145 :cuser #f :mtime 1015077145 :muser #f)[[$$include errno/perm]]\n")
("subst" . "(:ctime 1014945143 :cuser #f :mtime 1014945143 :muser #f)* [procedure] subst ''new'' ''old'' ''tree''\n\n[[ChezScheme]]: traverses ''tree'', replacing all objects equivalent\n([[equal?]]) to ''obj'' with the object ''new''.\n\nSee also [[substq]], [[substv]], [[subst!]]\n")
("char?" . "(:ctime 1014840966 :cuser #f :mtime 1191565497 :muser #f)* [procedure] char? ''obj''\n\n[[R5RS]], [[R6RS]]: Returns #t if ''obj'' is a character.\n\nIn R6RS, a character is an object thet represents a Unicode scalar value.\n\n\n\n")
("cell?" . "(:ctime 1017980956 :cuser #f :mtime 1017980956 :muser #f)* [procedure] cell? ''value''\n\n[[Scheme48]]: see [[make-cell]].\n")
("print-args" . "(:ctime 1015883716 :cuser #f :mtime 1015883716 :muser #f)* [syntax] print-args ''name'' ...\n\n[[SCM]]: Writes ''name''s, then writes out the values of the closest lexical bindings.\n")
("file-group" . "(:ctime 1037015002 :cuser #f :mtime 1037015002 :muser #f)* [procedure] file-group ''fname/fd/port'' [''chase?'']\n\n[[Scsh]]: returns gid of the file.  see also [[file-info]].\n\nGauche has [[file-gid]].\n")
("record-type" . "(:ctime 1017982576 :cuser #f :mtime 1017982576 :muser #f)* [procedure] record-type ''record''\n\n[[Scheme48]]: low-level record accessor.\nSee [[define-record-type]].\n")
("SRFI-125" . "(:ctime 1474475515 :cuser #f :mtime 1474475516 :muser #f)SRFI-125:  Intermediate hash tables \n\nhttp://srfi.schemers.org/srfi-125/srfi-125.html\n\n[[$$srfi-implementors]]\n")
("seconds->local-time" . "(:ctime 1015200224 :cuser #f :mtime 1015200310 :muser #f)* [procedure] seconds->local-time ''seconds''\n* [procedure] seconds->utc-time ''seconds''\n\n[[Chicken]]: POSIX localtime and gmtime..  Returns a vector.\nSee [[current-seconds]].\n\nThis is called [[posix-localtime]], [[posix-gmtime]] or \n[[sys-localtime]], [[sys-gmtime]]\nin some implementations.\n")
("Concept:ExtendedLambdaList" . "(:ctime 1203994031 :cuser #f :mtime 1245541038 :muser #f)* How to specify optional and/or named arguments\n\nOriginal Scheme's handling of variable number arguments via dotted-list\nin formals has its own beauty---it is naturally understood that argument\nbinding in terms of (limited) pattern matching.  And you can add\noptional/named arguments on top of that, by parsing 'rest' arguments\nby yourself (see [[let-optionals*]] and [[let-keywords*]], for example).\nHowever, in production code where you write lots of functions with\nsuch arguments, it tends to be clumsy.\n\nThere are several extensions that allow you to directly express\noptional/named arguments in the 'formals' position of the\nlambda form. \n\n** [[SRFI-89]]\n\nUsing [[lambda*]], optional positional arguments, required named arguments\nand optional named arguments can be specified as followings:\n\n- optional positional argument:  (<variable> <expression>)\n- required named argument: (<keyword> <variable>)\n- optional named argument: (<keyword> <variable> <expression>)\n\nIt appears that there's no way to allow arbitrary keyword arguments\nwhile specifying some of them (a la &allow-other-keys semantics in CL).\n\n** [[Guile]]\n\nUsing [[lambda*]], optional positional arguments and\noptional named arguments can be specified in CL way, except\nGuile uses #:optional, #:key, and #:rest to delimit these\nparameters in the ''formals''.\n\nIt can also accept #:allow-other-keys.\n\n** [[Chicken]], [[Kawa]], [[DSSSL]]\n\nThe [[lambda]] syntax is extended to accept optional positional\nand named arguments in CL way, except using\n#!optional, #!key, and #!rest to delimit these parameters.\n\nIt doesn't appear to have &allow-other-keys equivalent.\n\n** [[STklos]]\n\nThe [[lambda]] syntax is extended to accept optional positional\nand named arguments in CL way, except \nusing :optional, :key, and :rest to delimit these parameters.\n\nIn optional and named arguments you can specify guard predicate\nas well, in the form:\n\n  (<var> <expression> <guard>)\n\nWhen the procedure is called, the value of the argument\nthat is a candidate of matching this parameter <var> \nis first passed to <guard>, and bound to <var> only iff\n<guard> returns a true value; otherwise, the value of\n<expression> is used as if the argument is not supplied.\n\n")
("third" . "(:ctime 1014863385 :cuser #f :mtime 1014863385 :muser #f)* [procedure] third ''pair''\n\n[[SRFI-1]]\n")
("integer->group-id" . "(:ctime 1018124424 :cuser #f :mtime 1018124424 :muser #f)[[$$include group-id?]]\n")
("#2#" . "(:ctime 1416210012 :cuser #f :mtime 1416210012 :muser #f)* [reader syntax] #''digits''#\n\n[[SRFI-38]]: Shared structure reference.  Refer to the object\ndefined by [[#0#]](,[[#1#]],[[#2#]]...[[#n#]].)\n")
("module?" . "(:ctime 1015725019 :cuser #f :mtime 1099722921 :muser #f)* [procedure] module? ''obj''\n\n[[STk]], [[STklos]], [[Gauche]]: returns true iff ''obj'' is an module object.\nSee [[define-module]].\n\n")
("process-kill" . "(:ctime 1018342630 :cuser #f :mtime 1099738005 :muser #f)* [procedure] process-kill ''process''\n* [procedure] process-stop ''process''\n* [procedure] process-continue ''process''\n\n[[STk]], [[STklos]], [[Gauche]]: sends SIGKILL, SIGSTOP and\nSIGCONT to the process.  See [[run-process]].\n")
("ceiling" . "(:ctime 1014839217 :cuser #f :mtime 1191219936 :muser #f)[[$$include floor]]\n")
("dec!" . "(:ctime 1015311748 :cuser #f :mtime 1015311748 :muser #f)[[$$include inc!]]\n")
("blob-length" . "(:ctime 1144700986 :cuser #f :mtime 1144710027 :muser #f)* [procedure] blob-length ''blob''\n\n[[SRFI-74]]: Returns the number of octets in ''blob'' as an exact integer.\n")
("trace-var" . "(:ctime 1018344140 :cuser #f :mtime 1018344140 :muser #f)* [procedure] trace-var ''symbol'' ''thunk''\n* [procedure] untrace-var ''symbol''\n\n[[STk]]: trace-var arranges ''thunk'' to be called\nwhenever the value bound to ''symbol'' is changed.\n\nSome implementations have [[trace]] and [[untrace]].\n")
("test-approximate" . "(:ctime 1151049296 :cuser #f :mtime 1151074235 :muser #f)* [syntax] test-approximate [''test-name''] ''expected'' ''expr'' ''error''\n\n[[SRFI-64]]: equivalent to (except that each argument is only evaluated once):\n{{{\n(test-assert [test-name]\n  (and (>= test-expr (- expected error))\n       (<= test-expr (+ expected error))))\n}}}\n\nSee also [[test-assert]].\n")
("string-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535599 :muser #f)* [syntax] string-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe string of all values of ''expression''.\nThink of it as ([[list->string]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n")
("butlast" . "(:ctime 1015070127 :cuser #f :mtime 1327407324 :muser #f)* [procedure] butlast ''list''\n\n[[Chicken]]: returns a fresh list with all elements except the last of ''list''.\n\nEquivalent to (drop-right ''list'' 1), see [[drop-right]].\n [http://www.obtenir-rio.info rio orange]\n")
("substring/shared" . "(:ctime 1014889506 :cuser #f :mtime 1014889506 :muser #f)* [procedure] substring/shared ''s'' ''start'' [''end'']\n\n[[SRFI-13]]\n\nSee also [[substring]], [[string-copy]].\n")
("chain=?" . "(:ctime 1144494246 :cuser #f :mtime 1144504065 :muser #f)* [procedure] chain=? ''compare'' ''x1'' ...\n* [procedure] chain<? ''compare'' ''x1'' ...\n* [procedure] chain>? ''compare'' ''x1'' ...\n* [procedure] chain<=? ''compare'' ''x1'' ...\n* [procedure] chain>=? ''compare'' ''x1'' ...\n[[SRFI-67]]: Test if the values ''x1'' ...(zero or more values) form a chain with\nrespect to\nthe relation specified by the name of the procedure, and with respect to the\ncompare procedure ''compare''. The result is a boolean (either #t or #f.) The order\nin which the values are compared is unspecified, but each value is compared at\nleast once (even if there is just one.)\n\nA sequence of values ''x1'', ..., ''x''[''n''] forms a chain with respect to the relation\n''rel?'' if (''rel?'' ''compare'' ''x''[''i''] ''x''[''j'']) for all 1 < ''i'' < ''j'' < ''n''.\n")
("match-lambda*" . "(:ctime 1015101898 :cuser #f :mtime 1015101898 :muser #f)[[$$include match-lambda]]\n")
("system->string" . "(:ctime 1046488819 :cuser #f :mtime 1046488819 :muser #f)* [procedure] system->string ''string'' ...\n\n[[Bigloo]]: Appends all ''string''s, then calls the result string as\na command, and collects the output from the command into a string\nto be returned.  See [[system]].\n\nThis is called [[process-output->string]] in some other implementations.\n\n")
("lset-difference!" . "(:ctime 1014874856 :cuser #f :mtime 1014874856 :muser #f)* [procedure] lset-difference! ''elt='' ''list1'' ''list2'' ...\n\n[[SRFI-1]]: linear-update variant of [[lset-difference]].\n")
("relative-path?" . "(:ctime 1020224826 :cuser #f :mtime 1020224826 :muser #f)[[$$include absolute-path?]]\n")
("log" . "(:ctime 1014856062 :cuser #f :mtime 1191312178 :muser #f)* [procedure] log ''z''\n\n[[R5RS]], [[R6RS]]: Natural logarithm of ''z''.\n\n* [procedure] log ''z1'' ''z2''\n\n[[R6RS]]: Also has two-arguments version.  Computes base-''z2'' logarithm of ''z1''.\n\nR6RS defines these boundary cases:\n (log +inf.0) => +inf.0\n (log 0.0)    => -inf.0\n (log 0)      => &assertion exception\n (log -inf.0) => +inf.0+πi\n (log -1.0+0.0i) => 0.0+πi\n (log -1.0-0.0i) => 0.0-πi  ;; if -0.0 is distinguished\n\n\nSee also [[exp]], [[expt]], [[log10]].\n")
("read-file" . "(:ctime 1015073227 :cuser #f :mtime 1015073227 :muser #f)* [procedure] read-file [''input-port'']\n\n[[Chicken]]\n\n  (let loop ((expr (read''input-port'')))\n    (if (eof-object? expr)\n        '()\n        (cons expr (loop (read ''input-port'')))))\n\nSee also [[port->sexp-list]]\n")
("letrec*" . "(:ctime 1191209572 :cuser #f :mtime 1191209573 :muser #f)* [syntax] letrec* ((''var'' ''init'') ...) ''body'' ...\n\n[[R6RS]]: Like [[letrec]], but ''var''s are bound in the order of appearance,\nso that the value of ''var''s can be used to compute the subsequent ''init''s.\n\nSee also [[letrec]].\n")
("perm/irusr" . "(:ctime 1015099750 :cuser #f :mtime 1015196869 :muser #f)* [variable] perm/irusr\n* [variable] perm/iwusr\n* [variable] perm/ixusr\n* [variable] perm/irgrp\n* [variable] perm/iwgrp\n* [variable] perm/ixgrp\n* [variable] perm/iroth\n* [variable] perm/iwoth\n* [variable] perm/ixoth\n* [variable] perm/irwxu\n* [variable] perm/irwxg\n* [variable] perm/irwxo\n* [variable] perm/isvtx\n* [variable] perm/isuid\n* [variable] perm/isgid\n\n[[Chicken]]: permission bits.  See [[file-permissions]].\nSee also [[Concept:FileSystem]].\n\n\n")
("unzip2" . "(:ctime 1014865071 :cuser #f :mtime 1014865071 :muser #f)* [procedure] unzip2 ''list''\n\n[[SRFI-1]]\n\nSee also [[zip]].\n")
("SRFI-21" . "(:ctime 1015206873 :cuser #f :mtime 1122428658 :muser #f)SRFI-21: Real-time Multithreading support\n\nhttp://srfi.schemers.org/srfi-21/srfi-21.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[current-thread]], [[thread?]], [[make-thread]],\n[[thread-name]], [[thread-specific]], [[thread-specific-set!]],\n[[thread-base-priority]], [[thread-base-priority-set!]],\n[[thread-priority-boost]], [[thread-priority-boost-set!]],\n[[thread-quantum]], [[thread-quantum-set!]],\n[[thread-start!]], [[thread-yield!]], [[thread-sleep!]],\n[[thread-terminate!]], [[thread-join!]]\n\n[[mutex?]], [[make-mutex]], [[mutex-name]], [[mutex-specific]],\n[[mutex-specific-set!]], [[mutex-state]], [[mutex-lock!]],\n[[mutex-unlock!]]\n\n[[condition-variable?]], \n[[make-condition-variable]], [[condition-variable-name]],\n[[condition-variable-specific]], [[condition-variable-specific-set!]],\n[[condition-variable-signal!]], [[condition-variable-broadcast!]]\n\n[[current-time]], [[time?]], [[time->seconds]], [[seconds->time]]\n\n[[current-exception-handler]], [[with-exception-handler]],\n[[raise]], [[join-timeout-exception?]], [[abandoned-mutex-exception?]],\n[[terminated-thread-exception?]], [[uncaught-exception?]],\n[[uncaught-exception-reason]]\n")
("with-fluids*" . "(:ctime 1014929615 :cuser #f :mtime 1017989885 :muser #f)* [procedure] with-fluids* ''fluids'' ''values'' ''thunk''\n\n[[Guile]]: temporary changes the values of one or more fluids,\nso that the given procedure and each procedure called by it access the\ngiven values.  After the procedure returns, the old values are restored.\n\nThis is analogous to ChezScheme's [[parameterize]], for\nGuile's fluids are like Chez's parameters.\n\nScheme48 has [[let-fluid]] and [[let-fluids]].\n\nSee also [[make-fluid]], [[fluid-ref]], [[fluid-set!]].\n")
("make-condition" . "(:ctime 1063369422 :cuser #f :mtime 1063369422 :muser #f)* [procedure] make-condition ''type'' ''field-name'' ''value'' ...\n\n[[SRFI-35]]: creates a condition instance.  ''type'' is a condition\ntype object (see [[make-condition-type]]).  ''field-name'' and ''value''\ngive initial values of the condition's fields.\n\nThe field value can be referenced by [[condition-ref]].\n\nType of the given condition can be queried by [[condition-has-type?]].\n")
("set-cdr!" . "(:ctime 1014858840 :cuser #f :mtime 1191221026 :muser #f)* [procedure] set-cdr! pair obj\n\n[[R5RS]]: Stores ''obj'' in the cdr field of ''pair''.\n\n[[R6RS]]: In R6RS, this procedure is moved to a library \n'''(rnrs mutable-pairs (6))''', which is ''not'' included \nin the composite library '''(rnrs (6))'''.\n\n\nSee also [[cdr]], [[set-car!]].\n")
("list-compare-as-vector" . "(:ctime 1144494246 :cuser #f :mtime 1144505891 :muser #f)[[$$include vector-compare]]\n")
("hash-table-stats" . "(:ctime 1018341419 :cuser #f :mtime 1099737733 :muser #f)* [procedure] hash-table-stats ''hash''\n\n[[STk]], [[STklos]]: returns stats info of the hash table.\nSee also [[make-hash-table]], [[Concept:HashTable]].\n")
("vector-fill!" . "(:ctime 1014860448 :cuser #f :mtime 1191570219 :muser #f)* [procedure] vector-fill! ''vector'' ''fill''\n\n[[R5RS]], [[R6RS]]: Stores ''fill'' in every element of ''vector''. \nThe value returned by vector-fill! is unspecified. \n\n* [procedure] vector-fill! ''vector'' ''fill'' [''start'' ''end'']\n\n[[SRFI-43]]: Extends R5RS's [[vector-fill!]] to take optional\nstart and end indexes.\n")
("julian-day->time-monotonic" . "(:ctime 1099300994 :cuser #f :mtime 1099300994 :muser #f)[[$$include julian-day->date]]\n")
("top-level-value" . "(:ctime 1014930114 :cuser #f :mtime 1014930114 :muser #f)* [procedure] top-level-value ''symbol'' \n\n[[ChezScheme]]: returns top level value of ''symbol''.\n\nSee also [[define-top-level-value]], [[set-top-level-value!]].\n")
("aset'" . "(:ctime 1152535011 :cuser #f :mtime 1152542215 :muser #f)* [magic form] aset' ''identifier'' ''form''\n[[RRS]]: the same as [[set!]] in [[R5RS]].\n")
("blob-s16-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144717749 :muser #f)* [procedure] blob-s16-set! ''endianness'' ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: equivalent to (blob-sint-set! 2 ''endianness'' ''blob'' ''k'' ''n'').\n\nSee also [[blob-sint-set!]].\n")
("ucs2-ci=?" . "(:ctime 1039428771 :cuser #f :mtime 1039428930 :muser #f)* [procedure] ucs2-ci=? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2-ci<? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2-ci<=? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2-ci>? ''ucs2a'' ''ucs2b''\n* [procedure] ucs2-ci>=? ''ucs2a'' ''ucs2b''\n\n[[Bigloo]]: UCS2 counterparts of\n[[char-ci=?]], [[char-ci<?]], [[char-ci<=?]],\n[[char-ci>?]], and [[char-ci>=?]].\n\nSee [[ucs2?]]\n")
("widget?" . "(:ctime 1018335665 :cuser #f :mtime 1018335665 :muser #f)* [procedure] widget? ''obj''\n\n[[STk]]: returns #t if ''obj'' is a widget.\n")
("make-executable-byte-vector" . "(:ctime 1015280079 :cuser #f :mtime 1015280079 :muser #f)* [procedure] make-executable-byte-vector ''size'' [''init'']\n\n[[Chicken]]: see also [[executable-byte-vector->procedure]], [[byte-vector]].\n")
("/fx" . "(:ctime 1040351497 :cuser #f :mtime 1040351497 :muser #f)[[$$include +fx]]\n")
("SRFI-11" . "(:ctime 1014882647 :cuser #f :mtime 1122428595 :muser #f)SRFI-11: Syntax for receiving multiple values\n\nhttp://srfi.schemers.org/srfi-11/srfi-11.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[let-values]], [[let*-values]]\n\n")
("list->byte-vector" . "(:ctime 1015275570 :cuser #f :mtime 1015275570 :muser #f)[[$$include byte-vector->list]]\n")
("process-output->string" . "(:ctime 1201741689 :cuser #f :mtime 1201741766 :muser #f)* [procedure] process-output->string ''cmd&args'' &keyword ''error'' ''encoding'' ''conversion-buffer-size'' ''on-abnormal-exit''\n* [procedure] process-output->string-list ''cmd&args'' &keyword ''error'' ''encoding'' ''conversion-buffer-size'' ''on-abnormal-exit''\n\n[[Gauche]]: Available in gauche.process module.\nRuns a ''cmd&args'' in a separate process (if it is a string,\nit is passed to shell; if it is a list, it's used as argument array,\nand the process is directly [[sys-exec]]ed.),\nand collects its output.  [[process-output->string]] returns\na single string; where all output lines are concatenated by a\nwhitespace (like backtick escape in the shell).\n[[process-output->string-list]] returns a list of strings,\neach string is a output line, newline removed.\n\n''error'' keyword arg specifies how to handle the error output.\n''on-abmormal-exit'' keyword arg specifies how to behave if\nthe process exits with non-zero status.\n\nIt is built on top of [[run-process]].\n")
("hashtable-update!" . "(:ctime 1046488241 :cuser #f :mtime 1327407182 :muser #f)* [procedure] hashtable-update! ''table'' ''key'' ''update-fun'' ''init-value''\n\n[[Bigloo]]: If ''key'' is already in ''table'', replaces its value\nwith (''update-fun'' ''value'').  Otherwise, the new entry with ''key''\nand ''init-value'' is put into the ''table''.\n\n[[R6RS]]: Slighly differs when the entry doesn't already exist.\nIn such case, (''update-fun'' ''init-value'') is evaluated and\nthe result is put into the table with ''key''.\n\nSee also [[make-hashtable]], [[Concept:HashTable]].\n\nOther implementations have [[hash-table-update!]], [[hash-table-update!/default]].\n [http://www.obtenir-rio.info B and You]\n")
("output-string-port?" . "(:ctime 1018334151 :cuser #f :mtime 1018334151 :muser #f)[[$$include input-string-port?]]\n")
("#'" . "(:ctime 1015042008 :cuser #f :mtime 1191206533 :muser #f)* [reader syntax] #' ''datum''\n\n[[R6RS]], [[ChezScheme]], [[SRFI-72]]: (syntax ''datum'').  \n\nSee also [[syntax]], [[']], [[#`]], [[#,]], [[#,@]].\n\n")
("name->group-info" . "(:ctime 1018125066 :cuser #f :mtime 1018125066 :muser #f)[[$$include group-id->group-info]]\n")
("address?" . "(:ctime 1018340537 :cuser #f :mtime 1018340537 :muser #f)* [procedure] address? ''obj''\n\n[[STk]]: see also [[address-of]].\n")
("set-buffering-mode!" . "(:ctime 1015201386 :cuser #f :mtime 1015201386 :muser #f)* [procedure] set-buffering-mode! ''port'' ''mode'' [''bufsize'']\n\n[[Chicken]]\n")
("i/o-no-such-file-error?" . "(:ctime 1099273594 :cuser #f :mtime 1099273594 :muser #f)* [procedure] i/o-no-such-file-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-no-such-file-error]].\n")
("pwd" . "(:ctime 1129235979 :cuser #f :mtime 1129235979 :muser #f)ls -la\n")
("date->string" . "(:ctime 1038161808 :cuser #f :mtime 1038189595 :muser #f)* [procedire] date->string ''date'' [''format-string'']\n\n[[SRFI-19]]: format date.  \nSee also [[make-date]], [[string->date]].\n\n")
("obj->0..2^x-1" . "(:ctime 1045088994 :cuser #f :mtime 1045088994 :muser #f)[[$$include string->0..255]]\n")
("subtract-duration!" . "(:ctime 1015409061 :cuser #f :mtime 1015409061 :muser #f)[[$$include subtract-duration]]\n")
("%macroexpand-1" . "(:ctime 1015312016 :cuser #f :mtime 1015312016 :muser #f)[[$$include %macroexpand]]\n")
("cddr" . "(:ctime 1201704101 :cuser #f :mtime 1201704101 :muser #f)[[$$include caar]]\n")
("SRFI-120" . "(:ctime 1474475404 :cuser #f :mtime 1474475404 :muser #f)SRFI-120: Timer APIs\n\nhttp://srfi.schemers.org/srfi-120/srfi-120.html\n\n[[$$srfi-implementors]]\n")
("&" . "(:ctime 1015041106 :cuser #f :mtime 1015041106 :muser #f)* [procedure] & [''index'']\n\n[[Chicken]]: returns result of entry number ''index'' of the history list.\n\n* [procedure] & ''obj'' ...\n\n[[STk]]: returns a string that is a concatenation of string representaiton\nof ''objs''.\n")
("exact?" . "(:ctime 1014848022 :cuser #f :mtime 1191211233 :muser #f)* [procedure] exact? ''z''\n\n[[R5RS]], [[R6RS]]\n\n\nSee also [[inexact?]], [[#e]], [[#i]].\n\n")
("ln" . "(:ctime 1170264990 :cuser #f :mtime 1170268483 :muser #f)* ln ''x''\n\n[[SRFI-94]]: returns natural logarithm of ''x''. same as [[R5RS]] [[log]].\n")
("dup->fdes" . "(:ctime 1036970065 :cuser #f :mtime 1036970065 :muser #f)[[$$include dup->inport]]\n")
("exact" . "(:ctime 1191211428 :cuser #f :mtime 1191211429 :muser #f)* [procedure] exact ''z''\n* [procedure] inexact ''z''\n\n[[R6RS]]: Returns exact or inexact representation of ''z'', respectively.\nIf the conversion cannot be represented as exact or inexact numbers,\n[[&implementation-violation]] condition may be raised.\n\nSee also [[inexact->exact]], [[exact->inexact]].\n")
("read-from-string" . "(:ctime 1018344008 :cuser #f :mtime 1099727147 :muser #f)* [procedure] read-from-string ''string''\n\n[[STk]], [[STklos]]: read from string.\n\n* [procedure] read-from-string ''string'' [''start'' ''end'']\n\n[[Gauche]]: takes optional start and end arguments.\n\nSee also [[write-to-string]].\n")
("uniform-array-write" . "(:ctime 1440711699 :cuser #f :mtime 1440711699 :muser #f)(define arr (make-array '1 3 3))\n")
("signal/xfsz" . "(:ctime 1015076683 :cuser #f :mtime 1015076683 :muser #f)[[$$include signal/hup]]\n")
("export-all" . "(:ctime 1014928097 :cuser #f :mtime 1063421568 :muser #f)* [syntax] export-all\n\n[[Gauche]]: make all bindings in the current module\navailable for other modules to import.\n\nSome implementations call this [[export-all-symbols]].\n\nSee also [[export]], [[import]], [[define-module]], [[Gauche:ModuleSystem]].\n")
("sstats-gc-cpu" . "(:ctime 1015028861 :cuser #f :mtime 1015028861 :muser #f)* [procedure] sstats-gc-cpu ''sstats''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[set-sstats-gc-cpu!]].\n")
("flush-output" . "(:ctime 1015050940 :cuser #f :mtime 1015303329 :muser #f)* [procedure] flush-output [''output-port'']\n\n[[Chicken]]: flush output port.\n\nThis is called [[flush-output-port]], [[flush]], [[force-output]] on some\nScheme implementations.\n")
("trace-output-port" . "(:ctime 1014896234 :cuser #f :mtime 1014896234 :muser #f)* [procedure] trace-output-port [''newval'']\n\n[[ChezScheme]]\n\nSee also [[trace]], [[trace-print]]\n")
("SRFI-72" . "(:ctime 1144170496 :cuser #f :mtime 1145841582 :muser #f)SRFI 72: Simple hygienic macros.\n\nhttp://srfi.schemers.org/srfi-72/srfi-72.html\n\n[[$$srfi-implementors]]\n----\n\n[[define-syntax]], [[let-syntax]], [[letrec-syntax]]\n\n[[identifier?]], [[bound-identifier=?]], [[free-identifier=?]], [[literal-identifier=?]]\n\n[[syntax]], [[quasisyntax]], [[#']], [[#`]]\n\n[[datum->syntax-object]], [[syntax-object->datum]], [[make-capturing-identifier]]\n\n[[begin-for-syntax]], [[around-syntax]]\n\n[[syntax-error]]\n\n[[syntax-case]], [[with-syntax]], [[syntax-rules]]\n")
("fl<=" . "(:ctime 1014952339 :cuser #f :mtime 1014952339 :muser #f)* [procedure] fl<= ''flonum'' ...\n\n[[ChezScheme]]\n\nSee also [[flonum?]], [[<=]], [[fx<=]]\n")
("Discussion" . "(:ctime 1014940803 :cuser #f :mtime 1245540710 :muser #f)Discussion area on ideas abut this Wiki site.\n\n----\nShould (Would it be OK if I added) usage examples were added to\nvarious entries?\n\n--Julian Fondren\n\nNo problem.  I was just too lazy to do that.  --Shiro\n\n----\nHow about references to third-party libraries? I'm thinking specifically of Alex Shinn's formatting library. These sorts of things are hard to find for a newbie like myself. I'd like to put a \"See Also\" link under format and printf to this.\n\n--Ozzi Lee\n\nGood idea.  I added [[Cross-Implementation Libraries]] page and start adding\nAlex's fmt library entries ([[Library:Fmt]]).  Feel free to add entries.\n--Shiro\n\n----\nThis may or may not be appropriate for a site like this, but as a newb I often find myself looking for an equivalent to functions from other languages. Ruby's split and join are one example (string-split and string-intersperse in Scheme). It would be nice to have, perhaps, a listing of Ruby (and Python, PHP, Perl...) functions with their Scheme equivalents. I know it would have saved me quite a bit of time over the past couple of weeks.\n\n--Ozzi Lee\n\nI also think it's useful; actually, [http://practical-scheme.net/gauche/man/gauche-refe.html Gauche's user reference] has an appendix\nchapter that lists POSIX C functions and corresponding Gauche library\nfunctions (see Appendix B).\nI think it's too much to create entry pages for each function from\nother languages, but it'll be ok to have a page per language that lists\nthe correspondence.  I don't have time to do that (catching up\nthe existing Scheme implementation is more than enough work), but if\nyou can enter the content, it'll be great.\n\n--Shiro\n")
("one-of" . "(:ctime 1018082890 :cuser #f :mtime 1018082890 :muser #f)* [procedure] one-of ''regexp'' ...\n\n[[Scheme48]]: compose a regexp that matches one\nof ''regexp''s.   See [[Concept:RegularExpression]], [[match]].\n")
("make-list" . "(:ctime 1014861772 :cuser #f :mtime 1327407271 :muser #f)* [procedure] make-list ''k'' [''fill'']\n\n[[SRFI-1]]: Returns a ''k''-element list, whose elements are \nall the value ''fill''. If the ''fill'' argument is not given, \nthe elements of the list\nmay be arbitrary values. \n\nAlso in [[ChezScheme]].\n\n [http://www.obtenir-rio.info B and You]\n")
("fxshr" . "(:ctime 1191225717 :cuser #f :mtime 1191225718 :muser #f)[[$$include fxshl]]\n")
("string->0..2^x-1" . "(:ctime 1045088967 :cuser #f :mtime 1045088967 :muser #f)[[$$include string->0..255]]\n")
("circular?" . "(:ctime 1170794282 :cuser #f :mtime 1170796754 :muser #f)* [procedure] circular? ''obj''\n\n[[LispMe]]\n\nTrue if ''obj'' is a circular list. \n")
("char-ci=?" . "(:ctime 1014839327 :cuser #f :mtime 1192066506 :muser #f)* [procedure] char-ci=? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char-ci<=? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char-ci<? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char-ci>=? ''char1'' ''char2'' ''char3'' ...\n* [procedure] char-ci>? ''char1'' ''char2'' ''char3'' ...\n\n[[R6RS]], [[MzScheme]]\n\nCompares characters by case-folding them first (see [[char-foldcase]]).\nSee the notes in [[char-upcase]].\n\n\n* [procedure] char-ci=? ''char1'' ''char2''\n* [procedure] char-ci<=? ''char1'' ''char2''\n* [procedure] char-ci<? ''char1'' ''char2''\n* [procedure] char-ci>=? ''char1'' ''char2''\n* [procedure] char-ci>? ''char1'' ''char2''\n\n[[R5RS]]\n")
("string-fold" . "(:ctime 1014894838 :cuser #f :mtime 1014894838 :muser #f)* [procedure] string-fold ''kons'' ''knil'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-fold-right]], [[string-unfold]]\n")
("date->julian-day" . "(:ctime 1099300828 :cuser #f :mtime 1099300828 :muser #f)* [procedure] date->julian-day ''date''\n* [procedure] date->modified-julian-day ''date''\n* [procedure] date->time-monotonic ''date''\n* [procedure] date->time-tai ''date''\n* [procedure] date->time-utc ''date''\n\n[[SRFI-19]]: Converts ''date'' object to the specified\nday number or time object.\n\nSee also [[make-date]] and [[current-date]].\n")
("string-unfold-right" . "(:ctime 1014894917 :cuser #f :mtime 1014894917 :muser #f)* [procedure] string-unfold-right ''p'' ''f'' ''g'' ''seed'' [''base'' ''make-final'']\n\n[[SRFI-13]]\n\nSee also [[string-fold]], [[string-unfold]]\n")
("collect" . "(:ctime 1015030251 :cuser #f :mtime 1015030251 :muser #f)* [procedure] collect [''generation'']\n\n[[ChezScheme]]: kicks garbage collector.\n\nOn some Scheme implementations this is called [[gc]].\n\nSee also [[collect-notify]], [[collect-maximum-generation]],\n[[collect-request-handler]], [[collect-trip-bytes]].\n")
("pretty-standard-indent" . "(:ctime 1014960024 :cuser #f :mtime 1014960024 :muser #f)* [procedure] pretty-standard-indent [''newval'']\n\n[[ChezScheme]]: a parameter for [[pretty-print]]\n")
("match-case" . "(:ctime 1018341646 :cuser #f :mtime 1099777868 :muser #f)* [syntax] match-case ''key'' ''clause1'' ''clause2'' ...\n\n[[Bigloo]], [[STk]], [[STklos]]: pattern matcher.  See also [[match-lambda]].\n\nSome other implementations also have pattern matcher, but\nunder the name [[match]].\n")
("blob-s64-native-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144711714 :muser #f)[[$$include blob-u64-ref]]\n")
("alist-cons" . "(:ctime 1014873945 :cuser #f :mtime 1014873945 :muser #f)* [procedure] alist-cons ''key'' ''datum'' ''alist''\n\n[[SRFI-1]]: (lambda (key datum alist) (cons (cons key datum) alist))\n\nSome implementation have a procedure [[acons]] which does the same thing.\n")
("errno/intr" . "(:ctime 1015077135 :cuser #f :mtime 1015077135 :muser #f)[[$$include errno/perm]]\n")
("mutex-specific-set!" . "(:ctime 1015927556 :cuser #f :mtime 1015927556 :muser #f)[[$$include mutex-specific]]\n")
("elong->string" . "(:ctime 1039409116 :cuser #f :mtime 1039409116 :muser #f)* [procedure] elong->string ''i'' [''radix'']\n* [procedure] llong->string ''i'' [''radix'']\n\n[[Bigloo]]: convert ''elong'' or ''llong'' integers\nto string.  See [[elong?]], [[llong?]].\nSee also [[integer->string]].\n\n\n")
("Index:punctuation" . "(:ctime 1014847335 :cuser #f :mtime 1099267534 :muser #f)Entries begin with non-alphabetic characters\n\n[[$$index !]]\n[[$$index #]]\n[[$$index %]]\n[[$$index &]]\n[[$$index *]]\n[[$$index +]]\n[[$$index -]]\n[[$$index /]]\n[[$$index <]]\n[[$$index =]]\n[[$$index >]]\n[[$$index 1]]\n\n\n")
("default-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144500518 :muser #f)* [procedure] default-compare ''obj1'' ''obj2''\n[[SRFI-67]]: compares its arguments by type using the ordering\nnull < pair < boolean < char < string < symbol < number < vector < other.\n\nTwo objects of the same type ''type'' are compared as ''type''-compare would, if there is such a procedure.\nThe type null consists of the empty list '(). The effect\nof comparing two other objects or of comparing cyclic structures (made from\nlists or vectors) is unspecified. (Implementations are encouraged to add\ncomparisons for other built-in types, e.g. records, regexps, etc.)\n")
("fluid-let" . "(:ctime 1014929271 :cuser #f :mtime 1099722651 :muser #f)* [syntax] fluid-let ((''var'' ''val'') ...) ''exp1'' ''exp2'' ...\n\n[[ChezScheme]]: simulates dynamically scoped variables.\n[[fluid-let]] doesn't create new bindings; \n''var'' ... should have defined in the lexical scope where [[fluid-let]]\nappears.\n\n[[Chicken]], [[MzScheme]], [[Gauche]], [[STk]] and [[STklos]] also has this.\n\nGuile has [[make-fluid]], [[fluid-ref]], [[fluid-set!]] and [[with-fluids*]]\nto do similar job.\n\nSome implementations have a mechanism called ''parameter'', which can\nalso be used to realize (sort of) dynamic scope.  See\n[[make-parameter]], [[parameterize]].\n")
("os-class" . "(:ctime 1443189740 :cuser #f :mtime 1443189740 :muser #f)http://a2tek.fr\n")
("fl>?" . "(:ctime 1191226773 :cuser #f :mtime 1191226773 :muser #f)[[$$include fl=?]]\n")
("struct-type-change-writer!" . "(:ctime 1099725588 :cuser #f :mtime 1099725589 :muser #f)* [procedure] struct-type-change-writer! ''structtype'' ''proc''\n\n[[STklos]]: change the default write of ''structtype''.\nSee [[make-struct-type]].\n")
("gc-stats" . "(:ctime 1018344215 :cuser #f :mtime 1018344215 :muser #f)* [procedure] gc-stats\n\n[[STk]]: reports some statistics of current memory usage.\n")
("i/o-error?" . "(:ctime 1099268598 :cuser #f :mtime 1099268598 :muser #f)* [procedure] i/o-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-error]].\n")
("chain>?" . "(:ctime 1144494246 :cuser #f :mtime 1144504130 :muser #f)[[$$include chain=?]]\n")
("define-entry-point" . "(:ctime 1015046965 :cuser #f :mtime 1015046965 :muser #f)* [syntax] define-entry-point ''index'' ((''var'' ''type'') ...) (''rtype'' ...) ''exp1'' ''exp2'' ...\n\n[[Chicken]]\n")
("=?" . "(:ctime 1144494246 :cuser #f :mtime 1144501741 :muser #f)* [procedure] =? [''compare''] [''x'' ''y'']\n* [procedure] <? [''compare''] [''x'' ''y'']\n* [procedure] >? [''compare''] [''x'' ''y'']\n* [procedure] <=? [''compare''] [''x'' ''y'']\n* [procedure] >=? [''compare''] [''x'' ''y'']\n* [procedure] not=? [''compare''] [''x'' ''y'']\n[[SRFI-67]]: If the values ''x'' and ''y'' are given, test if ''x'' and ''y'' are in the relation specified\nby the name of the procedure ''rel?'', with respect to compare procedure ''compare'';\notherwise construct a predicate procedure.\n\nIn the forms (''rel?'' [''compare''] ''x'' ''y''), the result is a boolean (either #t or #f)\ndepending on (''compare'' ''x'' ''y'') and the test ''rel?'' as specified for [[if<?]] etc. If ''compare'' is not supplied, [[default-compare]] is used.\n\nIn the form (''rel?'' [''compare'']), the predicate procedure (lambda (x y) (''rel?'' ''compare'' ''x'' ''y'')) is constructed. Again, if ''compare'' is not supplied,\n[[default-compare]] is used.\n")
("winsertln" . "(:ctime 1015882920 :cuser #f :mtime 1015882920 :muser #f)[[$$include winsch]]\n")
("register-exit-function!" . "(:ctime 1046488572 :cuser #f :mtime 1099773207 :muser #f)* [procedure] register-exit-function! ''proc''\n\n[[Bigloo]], [[STklos]]: arrange ''proc'' to be called just before the execution of\nthe program terminates by [[exit]] call.  A numerical exit code is\npassed to ''proc''.\n")
("x->integer" . "(:ctime 1015725103 :cuser #f :mtime 1383097744 :muser #f)* [generic] x->integer ''obj''\n\n[[Gauche]]: generic function to convert ''obj'' to an integer.\nSee also [[x->number]], [[x->string]].\n\n[[Sagittarius]] and [[T]] have [[->integer]].\n")
("SRFI-31" . "(:ctime 1062494627 :cuser #f :mtime 1122428744 :muser #f)SRFI-31: A special form rec for recursive evaluation\n\nhttp://srfi.schemers.org/srfi-31/srfi-31.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[rec]]\n")
("unzip3" . "(:ctime 1014865248 :cuser #f :mtime 1014865248 :muser #f)* [procedure] unzip3 ''list''\n\n[[SRFI-1]]\n\nSee also [[zip]].\n")
("acos" . "(:ctime 1014837902 :cuser #f :mtime 1191312259 :muser #f)* [procedure] acos ''z''\n\n[[R5RS]], [[R6RS]]: arccosine of a complex number ''z''.\n\nSee also [[cos]], [[asin]], [[atan]].\n\n")
("with-output-to-string" . "(:ctime 1015070435 :cuser #f :mtime 1015070435 :muser #f)[[$$include with-input-from-string]]\n")
("SigScheme" . "(:ctime 1131191883 :cuser #f :mtime 1189671291 :muser #f)Small implementation aiming at embedded usage.  Used in\n[http://code.google.com/p/uim/ uim], a multilingual input method framework.\n\nhttp://code.google.com/p/sigscheme/\n\n[[$$srfis 0 1 2 6 8 9 22 23 28 34 38 43 48 55 60 69 95]]\n\n----\n")
("make-promise" . "(:ctime 1019625291 :cuser #f :mtime 1019625291 :muser #f)* [procedure] make-promise ''thunk''\n\n[[MzScheme]]: returns a new promise.  See also [[promise?]]\n")
("terminal-port?" . "(:ctime 1015200769 :cuser #f :mtime 1099726204 :muser #f)* [procedure] terminal-port? ''port''\n\n[[Chicken]]: POSIX isatty\n\nThis is called [[isatty?]], [[sys-isatty]], [[interactive-port?]], [[port-is-a-terminal?]]\nin some implementations.\n\n")
("address-of" . "(:ctime 1018340520 :cuser #f :mtime 1099776351 :muser #f)* [procedure] address-of ''obj''\n\n[[STk]], [[STklos]]: returns the address of ''obj''.  See also [[address?]].\n")
("port-position" . "(:ctime 1015051083 :cuser #f :mtime 1017989540 :muser #f)* [procedure] port-position ''port''\n\n[[Chicken]]: returns the current port position in two values; row and column\nnumber.\n\nScheme48 has [[current-row]] and [[current-column]].\n")
("substv!" . "(:ctime 1014945218 :cuser #f :mtime 1014945218 :muser #f)* [procedure] substv! ''new'' ''old'' ''tree''\n\n[[ChezScheme]]: linear update variant of [[substv]].\n\nSee also [[substv]], [[substq!]], [[subst!]]\n")
("argv" . "(:ctime 1015051835 :cuser #f :mtime 1099742640 :muser #f)* [procedure] argv\n\n[[Chicken]], [[STklos]]: returns a list of command line arguments, including\nthe name of the executing string as the first element.\nSee also [[command-line-arguments]], [[argc]], [[*argv*]].\n\n* [procedure] argv ''n'' [''default'']\n\n[[Scsh]]: returns ''n''-th command-line arguments.\nThe index is 0-based.  The argument list doesn't contain\nthe program name.  See also [[arg]], [[arg*]],\n[[command-line]].\n")
("vector-concatenate" . "(:ctime 1099364240 :cuser #f :mtime 1099364265 :muser #f)* [procedure] vector-concatenate ''list-of-vectors''\n\n[[SRFI-43]]: equivalent to:\n{{{\n(apply vector-append list-of-vectors)\n}}}\n\nSee also [[vector-append]], [[concatenate]], [[string-concatenate]].\n")
("socket-input-port" . "(:ctime 1099738421 :cuser #f :mtime 1099738421 :muser #f)* [procedure] socket-input-port ''socket''\n* [procedure] socket-output-port ''socket''\n\n[[Gauche]]: returns an input port or an output port associated to\nthe socket.  See [[make-client-socket]], [[make-server-socket]],\n[[make-server-sockets]].\n")
("select-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144501103 :muser #f)* [syntax] select-compare ''x1'' ''x2'' ''clause1'' ...\n\n[[SRFI-67]]: Each ''clause'', with the possible exception of the last, is of the form\n(''type?'' ''c1'' ...) where ''type?'' is an expression evaluating to a predicate\nprocedure, and ''c[i]'' are expressions evaluating to an exact integer in\n{ -1, 0, 1}.\nThe last ''clause'' may be an ``else clause'', which has the form (else\n''c1'' ...).\n\nSelect-compare is a conditional for defining hierarchical extensions\nand refinements of compare procedures.\nIt compares the values of ''x1'' and ''x2'' by trying the type tests in order, and applies an\nimplict [[refine-compare]] on the consequences upon a match.\n")
("printf" . "(:ctime 1014960677 :cuser #f :mtime 1015070598 :muser #f)* [procedure] printf ''format-string'' ''obj'' ...\n\n[[ChezScheme]]: formats ''obj'' ... using [[format]], and writes\nthe result to the current output port.\n\n[[Chicken]]: formats ''obj''s by ''format-spec'' and writes out to\nthe current output port. Recognizes \"~%\", \"~S\", \"~A\", \"~\\n\", \"~B\", \"~O\", \"~X\", \"~C\",\n\"~~\", \"~!\", \"~?\".\n \nThis differs to the [[SLIB]]'s printf.\n\nSee also [[fprintf]], [[sprintf]].\n\n* [procedure] printf ''format'' ''arg1'' ...\n\n[[SLIB]]: formats ''obj'' ... accodording to ''format''.\nThe formatting specification resembles C's printf, rather than\nScheme/Lisp's [[format]].   Note that Chez's printf uses\ndifferent formatting specification.\n\nSee also [[fprintf]], [[sprintf]].\n")
("run-process" . "(:ctime 1018342020 :cuser #f :mtime 1201741817 :muser #f)* [procedure] run-process ''command'' ''p1'' ''p2'' ''p3'' ...\n\n[[STk]], [[STklos]]: run command in a child process, either synchronously\n(caller waits child's termination) or asynchronously.\nYou can redirect stdin, stdout and/or stderr of the\nchild process, or even invoke the command on the other\nhost (via rsh(1) or ssh(1)).\n\nSee also [[Concept:Process]], [[process?]],\n[[process-alive?]], [[process-pid]], [[process-input]],\n[[process-output]], [[process-error]], [[process-wait]],\n[[process-exit-status]], [[process-send-signal]],\n[[process-kill]], [[process-stop]], [[process-continue]],\n[[process-list]].\n\n[[Gauche]] also has this in [[gauche.process]] module.\nIt is upper compatible with STk.\n")
("hash-table-count" . "(:ctime 1015071008 :cuser #f :mtime 1045572103 :muser #f)* [procedure] hash-table-count ''hash-table''\n\n[[Chicken]]: returns the number of entries in ''hash-table''.  See also\n[[make-hash-table]], [[Concept:HashTable]].\n\n")
("sys-getuid" . "(:ctime 1038189875 :cuser #f :mtime 1038189922 :muser #f)* [procedure] sys-getuid\n* [procedure] sys-geteuid\n\n[[Gauche]]: POSIX getuid() and geteuid() interface.\nSee also [[sys-setuid]], [[Concept:UserGroup]]\n")
("string-ci<=?" . "(:ctime 1015063607 :cuser #f :mtime 1015063607 :muser #f)[[$$include string-ci=?]]\n")
("set-random-seed!" . "(:ctime 1018343911 :cuser #f :mtime 1018343911 :muser #f)* [procedure] set-random-seed! ''seed''\n\n[[STk]]: sets random seed.\n\nThis is called [[randomize]] or [[random-seed]]\nin some implementations.\n")
("errno/srch" . "(:ctime 1015077105 :cuser #f :mtime 1015077105 :muser #f)[[$$include errno/perm]]\n")
("set-signal-handler!" . "(:ctime 1015199587 :cuser #f :mtime 1026112736 :muser #f)* [procedure] set-signal-handler! ''signum'' ''proc'' [''disabled'']\n\n[[ChezScheme]]:  ''signum'' is [[signal/int]] etc.\nSee also [[set-signal-mask!]].\n\nGauche has [[with-signal-handlers]].\nBigloo has [[signal]].\n\n* [procedure] set-signal-handler! ''sig'' ''handler''\n\n[[STk]]: ''sig'' is an integer signal number.\n''handler'' can be a one parameter procedure, #t or #f.\nSee also [[add-signal-handler!]], [[get-signal-handlers]], [[send-signal]].\n\n")
("amaplist" . "(:ctime 1152535011 :cuser #f :mtime 1152535904 :muser #f)* [syntactic extension] amaplist ''f'' ''list1'' ''list2'' ...\n[[RRS]]: analogous to [[amapcar]], but ''f'' is applied to each successive tails of the lists.\n")
("vector-append" . "(:ctime 1099360831 :cuser #f :mtime 1099360831 :muser #f)* [procedure] vector-append ''vector'' ...\n\n[[SRFI-43]]: Returns a new vector that contains all elements of\n''vector'' ...\n\nSee also [[vector-concatenate]], [[append]]. [[string-append]].\n\n")
("raw" . "(:ctime 1015877222 :cuser #f :mtime 1015877222 :muser #f)* [procedure] raw\n* [procedure] noraw\n\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("blob-u64-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144711648 :muser #f)* [procedure] blob-u64-ref ''endianness'' ''blob'' ''k''\n* [procedure] blob-s64-ref ''endianness'' ''blob'' ''k''\n* [procedure] blob-u64-native-ref ''blob'' ''k''\n* [procedure] blob-s64-native-ref ''blob'' ''k''\n* [procedure] blob-u64-set! ''endianness'' ''blob'' ''k'' ''n''\n* [procedure] blob-s64-set! ''endianness'' ''blob'' ''k'' ''n''\n* [procedure] blob-u64-native-set! ''blob'' ''k'' ''n''\n* [procedure] blob-s64-native-set! ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: ''K'' must be a valid index of ''blob''; so must the indices {''k'', ..., ''k''+7}\n.\n''Endianness'' must be an endianness object (See [[endianness]]).\n\nThese retrieve and set eight-octet representations of numbers at indices\n{''k'', ..., ''k''+ 7}, according to the endianness specified by ''endianness''. The\nprocedures with u64 in their names deal with the unsigned representation,\nthose with s64 with the two's complement representation.\n\nThe procedures with native in their names employ the native endianness, and\nonly work at aligned indices: ''k'' must be a multiple of 8. It is an error to\nuse them at non-aligned indices.\n")
("positive?" . "(:ctime 1014856665 :cuser #f :mtime 1191216264 :muser #f)* [procedure] positive? ''x''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[negative?]], [[zero?]].\n")
("make-symbol-table" . "(:ctime 1017984720 :cuser #f :mtime 1017984720 :muser #f)[[$$include make-table]]\n")
("date-minute" . "(:ctime 1023886183 :cuser #f :mtime 1023886183 :muser #f)[[$$include date-nanosecond]]\n")
("sstats-real" . "(:ctime 1015028816 :cuser #f :mtime 1015028816 :muser #f)* [procedure] sstats-real ''sstats''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[set-sstats-real!]].\n")
("trace" . "(:ctime 1014896020 :cuser #f :mtime 1099776722 :muser #f)* [syntax] trace ''var'' ...\n\n[[ChezScheme]], [[Chicken]]\n\nSee also [[untrace]], [[trace-lambda]]\n\nSTk has [[trace-var]].\n\n* [syntax] trace [''procedure-name'' ...]\n\n[[SCM]], [[STklos]].\n\nSee also [[untrace]]\n\n")
("fifo?" . "(:ctime 1015106122 :cuser #f :mtime 1015189636 :muser #f)* [procedure] fifo? ''pathname''\n\n[[Chicken]]: See [[Concept:FileSystem]].\n")
("fxquotient" . "(:ctime 1014951022 :cuser #f :mtime 1191225182 :muser #f)* [procedure] fxquotient ''fixnum1'' ''fixnum2''\n* [procedure] fxremainder ''fixnum1'' ''fixnum2''\n* [procedure] fxmodulo ''fixnum1'' ''fixnum2''\n\n[[ChezScheme]]: fixnum specific [[quotient]], [[remainder]], and [[modulo]]\noperations.  See [[fixnum?]] for other fixnum-specific operations.\n\nIn R6RS, [[fxdiv]], [[fxdiv0]], [[fxmod]] or [[fxmod0]] can be used instead.\n\n")
("#d" . "(:ctime 1014846847 :cuser #f :mtime 1014846847 :muser #f)* [reader syntax] #d''nnnn....''\n\n[[R5RS]] number literal in decimal.\n\nSee also [[#b]], [[#o]], [[#x]].\n")
("string-trim" . "(:ctime 1014889350 :cuser #f :mtime 1015074661 :muser #f)* [procedure] string-trim ''s'' [''char/char-set/pred'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-trim-right]], [[string-trim-both]].\n\n* [procedure] string-trim ''s'' ''trimchars''\n\n[[Chicken]]: ''trimchars'' should be a string, and must be present.\nThis actually trims character from both side.\nSee also [[string-right-trim]], [[string-left-trim]]\n\n")
("logior" . "(:ctime 1014951510 :cuser #f :mtime 1043984840 :muser #f)* [procedure] logior ''n1'' ''n2''\n\n[[SLIB]], [[Guile]]: bitwise inclusive or of two integers.\n\nThis is called [[bitwise-ior]] or [[bit-or]] in some implementations.\n\nSISC calls this [[logor]].\n\nChez has [[fxlogor]] that works for fixnum range.\n\n* [procedure] logior ''n1'' ...\n\n[[Gauche]] allows arbitrary number of integer arguments.\n\nSee also [[logand]], [[logxor]], [[lognot]], [[ash]]\n")
("string?" . "(:ctime 1014859807 :cuser #f :mtime 1191566352 :muser #f)* [procedure] string? ''obj''\n\n[[R5RS]], [[R6RS]]: Returns #t if ''obj'' is a string, otherwise returns #f. \n")
("process-output" . "(:ctime 1018342305 :cuser #f :mtime 1018342305 :muser #f)[[$$include process-pid]]\n")
("complex-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499865 :muser #f)[[$$include integer-compare]]\n")
("extended-procedure?" . "(:ctime 1015274496 :cuser #f :mtime 1015274496 :muser #f)* [procedure] extended-procedure? ''procedure''\n\n[[Chicken]]: see if ''procedure'' is an extended procedure.  See [[extend-procedure]].\n")
("Index:y" . "(:ctime 1015014832 :cuser #f :mtime 1015014832 :muser #f)[[$$index y]]\n")
("hashtable->list" . "(:ctime 1106766278 :cuser #f :mtime 1106768163 :muser #f)* [procedure] hashtable->list ''hash-table''\n\n[[Bigloo]]: returns a new list containing all values. Some implementations call\nthis [[hash-table-values]].\n")
("test-passed?" . "(:ctime 1151049296 :cuser #f :mtime 1151079800 :muser #f)* test-passed? ''runner''\n\n[[SRFI-64]]: equivalent to\n{{{\n(memq (test-result-kind runner) '(pass xpass))\n}}}\n\nSee also [[test-result-kind]].\n")
("copy-bit" . "(:ctime 1015805494 :cuser #f :mtime 1015805545 :muser #f)* [procedure] copy-bit ''index'' ''n'' ''bit''\n\n[[SLIB]], [[Gauche]]: returns an integer which is the same as an integer ''n'' except\nthe ''index''-th bit is set to ''bit''.  See also [[logbit?]], [[bit-field]],\n[[copy-bit-field]].\n")
("perm/irwxo" . "(:ctime 1015099872 :cuser #f :mtime 1015099872 :muser #f)[[$$include perm/irusr]]\n")
("if>=?" . "(:ctime 1144494246 :cuser #f :mtime 1144502929 :muser #f)[[$$include if=?]]\n")
("fx+" . "(:ctime 1014950490 :cuser #f :mtime 1191224140 :muser #f)* [procedure] fx+ ''fixnum'' ...\n\n[[ChezScheme]]\n\nSee also [[fixnum?]], [[+]]\n\n* [procedure] fx+ ''fixnum1'' ''fixnum2''\n\n[[R6RS]], [[Chicken]]: only binary operator is provided.\n\nBigloo has [[+fx]] etc.\n")
("take-right" . "(:ctime 1014863600 :cuser #f :mtime 1014863600 :muser #f)* [procedure] take-right! ''flist'' ''k''\n\n[[SRFI-1]]: returns the last ''k'' elemetns of ''flist''.\n\nSee also [[take]], [[drop-right]].\n")
("symbol-bound?" . "(:ctime 1018336734 :cuser #f :mtime 1018336765 :muser #f)* [procedure] symbol-bound? ''symbol'' [''environment'']\n\n[[STk]]: returns #t if ''symbol'' has a value in the\ngiven ''environment''.\n\n")
("create-symbolic-link" . "(:ctime 1015185611 :cuser #f :mtime 1018345946 :muser #f)* [procedure] create-symbolic-link ''oldname'' ''newname''\n\n[[Chicken]]: symlink(2).  See also [[read-symbolic-link]].\nSee [[Concept:FileSystem]].\n\nThis is called [[create-symlink]] or [[sys-symlink]]\nin some implementations.\n")
("equal-hash" . "(:ctime 1191361462 :cuser #f :mtime 1191361462 :muser #f)* [procedure] equal-hash ''obj''\n\n[[R6RS]]: Calculates a hash value of ''obj'' suitable for [[equal?]] hashtable.\n\nSee also [[Concept:HashTable]].\n\nSome implmenetations provide equal?-hash function as [[hash]].\n")
("make-array" . "(:ctime 1017981709 :cuser #f :mtime 1144487882 :muser #f)* [procedure] make-array ''shape'' [''obj'']\n\n[[SRFI-25]]: Array.  See also [[array]], [[array?]],\n[[shape]], [[array-rank]], [[array-start]], [[array-end]],\n[[array-ref]], [[array-set!]], [[share-array]].\n\n* [procedure] make-array ''prototype'' ''k1'' ''k2'' ...\n\n[[SRFI-47]], [[SRFI-63]]: Creates and returns an array of type ''prototype'' with dimensions \n''k1'', ''k2'', ... and filled with elements from ''prototype''. \n''prototype'' must be an array, vector, or string. \n\n* [procedure] make-array ''value'' ''dimension0'' ...\n\n[[Scheme48]]: Array.  See also [[array]], [[copy-array]],\n[[array?]], [[array-ref]], [[array-set!]], [[array->vector]],\n[[array-dimensions]], [[make-shared-array]]\n\nScheme48's array differs from SRFI-25's in the following aspects besides API:\n- array indices are zero based.\n- array shape is specified by a list of length for each dimension, rather than a shape array.\n- array-ref and array-set! only takes individual indices\nand not the index objects as SRFI-25.\n")
("Index:p" . "(:ctime 1014845977 :cuser #f :mtime 1015014677 :muser #f)[[$$index p]]\n")
("blob-u64-native-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144711704 :muser #f)[[$$include blob-u64-ref]]\n")
("record-ref" . "(:ctime 1017982657 :cuser #f :mtime 1017982657 :muser #f)* [procedure] record-ref ''record'' ''i''\n* [procedure] record-set! ''record'' ''i'' ''value''\n\n[[Scheme48]]: low-level record accessor and modifier.\nSee [[define-record-type]].\n")
("hash-table-hash" . "(:ctime 1018341077 :cuser #f :mtime 1099737628 :muser #f)* [procedure] hash-table-hash ''obj''\n\n[[STk]], [[STklos]]: default hash function.  See [[make-hash-table]],\n[[Concept:HashTable]].\n")
("condition-variable-specific-set!" . "(:ctime 1015927723 :cuser #f :mtime 1015927723 :muser #f)[[$$include condition-variable-specific]]\n")
("socket-host-name" . "(:ctime 1018343053 :cuser #f :mtime 1099738282 :muser #f)* [procedure] socket-host-name ''socket''\n\n[[STk]], [[STklos]]: If ''socket'' is connected, returns the remote\nhost name.  See also [[make-client-socket]],\n[[make-server-socket]], [[socket-host-address]],\n[[socket-local-address]].\n")
("integer?" . "(:ctime 1014854684 :cuser #f :mtime 1191210935 :muser #f)* [procedure] integer? ''obj''\n\n[[R5RS]], [[R6RS]]\n\nNote: in R6RS, (integer? +inf.0), (integer? -inf.0) and (integer? +nan.0) are all #f.\n\nSee also [[number?]], [[complex?]], [[real?]], [[rational?]].\n")
("char-set:punctuation" . "(:ctime 1018082692 :cuser #f :mtime 1018082692 :muser #f)[[$$include char-set:lower-case]]\n")
("test-result-clear" . "(:ctime 1151049296 :cuser #f :mtime 1151080964 :muser #f)* [syntax] test-result-clear ''runner''\n\n[[SRFI-64]]: removes all test result property of ''runner''.\nImplementation calls it automatically at the beginning of [[test-assert]] etc.\n")
("repeat" . "(:ctime 1018083000 :cuser #f :mtime 1018083000 :muser #f)* [procedure] repeat ''regexp''\n* [procedure] repeat ''count'' ''regexp''\n* [procedure] repeat ''min'' ''max'' ''regexp''\n\n[[Scheme48]]: returns a regexp that matches the\nrepetition of ''regexp''s.\nSee [[Concept:RegularExpression]], [[match]].\n")
("fp=" . "(:ctime 1191226730 :cuser #f :mtime 1191226746 :muser #f)* [procedure] fp= ''flonum1'' ''flonum2''\n* [procedure] fp< ''flonum1'' ''flonum2''\n* [procedure] fp<= ''flonum1'' ''flonum2''\n* [procedure] fp> ''flonum1'' ''flonum2''\n* [procedure] fp>= ''flonum1'' ''flonum2''\n\n[[Chicken]]: flonum specific comparison routines.\nSee [[flonum?]] for other flonum operations.\n\nR6RS has [[fl=?]] etc.\n")
("link-exists?" . "(:ctime 1020222261 :cuser #f :mtime 1020222261 :muser #f)* [procedure] link-exists? path\n\n[[MzScheme]]: like [[file-exists?]], but does not follow\nthe symlink of the last part of the path.\n")
("map-in-order" . "(:ctime 1014868685 :cuser #f :mtime 1014868685 :muser #f)* [procedure] map-in-order ''f'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: A variant of the map procedure that guarantees to \napply ''f'' across the elements of the ''listi'' arguments in a \nleft-to-right order.\nThis is useful for mapping procedures that both have side effects \nand return useful values. \n\nAt least one of the list arguments must be finite. \n\nSee also [[map]].\n")
("read-with-shared-structure" . "(:ctime 1099277782 :cuser #f :mtime 1099277782 :muser #f)* [procedure] read-with-shared-structure [''port'']\n\n[[SRFI-38]]: Parses the external representation of a Scheme object\nreading from ''port'', possibly handling the shared structure\nnotation such as [[#1=]] and [[#1#]].\n\nSome implementations may have a shorter name [[read/ss]] as well.\n\nSome implementations extend its builtin [[read]] to handle the\nshared structure.\n")
("string-drop-right" . "(:ctime 1014889193 :cuser #f :mtime 1014889193 :muser #f)* [procedure] string-drop-right ''s'' ''nchars''\n\n[[SRFI-13]]\n\nSee also [[string-drop]], [[string-take-right]].\n")
("file-info-link-count" . "(:ctime 1040727312 :cuser #f :mtime 1040727312 :muser #f)[[$$include file-info-name]]\n")
("lambda*" . "(:ctime 1203984022 :cuser #f :mtime 1203991868 :muser #f)* [macro] lambda* ''extended-formals'' ''body''\n\n[[SRFI-89]]: Adds optional positional arguments and named arguments\nsupport.\n{{{\n    <extended formals> --> <variable> | ( <extended def formals> )\n\n    <extended def formals> --> <positional section> <named section>? <rest section>\n                            |  <named section>? <positional section> <rest section>\n\n    <positional section> --> <required positional>* <optional positional>*\n\n    <required positional> --> <variable>\n\n    <optional positional> --> ( <variable> <expression> )\n\n    <named section> --> <named>+\n\n    <named> --> <required named>\n             |  <optional named>\n\n    <required named> --> ( <keyword> <variable> )\n\n    <optional named> --> ( <keyword> <variable> <expression> )\n\n    <rest section> --> . <variable>\n                    |  <empty>\n}}}\n\nSee also [[define*]].\n\n[[Guile]]: Also supports extended lambda list by [[lambda*]], but separates optional arguments, keyword arguments and rest arguments by\n#:optional, #:key, and #:rest, a la Common Lisp.\n\nSee [[Concept:ExtendedLambdaList]] for more discussion.\n")
("list->char-set" . "(:ctime 1018084351 :cuser #f :mtime 1018084435 :muser #f)* [procedure] list->char-set ''char-list'' [''base-cs'']\n* [procedure] list->char-set! ''char-list'' ''base-cs''\n\n[[SRFI-14]]: charset constrctor/updator.\nSee also [[char-set]].\n")
("define-structures" . "(:ctime 1063413754 :cuser #f :mtime 1063413754 :muser #f)* [configuration language] define-structures ((''name'' ''interface'') ...) ''clause'' ...\n\n[[Scheme48]]: defines multiple bindings of program structure to the ''name''s.\nThis is a part of Scheme48's configuration language.  See [[Scheme48:ModuleSystem]] for the details.\n")
(":char-range" . "(:ctime 1144527545 :cuser #f :mtime 1144537913 :muser #f)* [syntax] :char-range ''vars'' ''min'' ''max''\n[[SRFI-42]]:\nRuns through a range of characters. First ''min'' and ''max'' are evaluated,\nwhich must result in two characters a and b. Then the sequence of\ncharacters a, a+1, a+2, ..., b is enumerated in the order defined by\n[[char<=?]] in the sense of [ [[R5RS]] 6.3.4.]. If b is smaller than a then the\nsequence is empty. (Note that b is included in the sequence.)\n")
("path->complete-path" . "(:ctime 1020224988 :cuser #f :mtime 1020224988 :muser #f)* [procedure] path->complete-path ''path'' [''base-path'']\n\n[[MzScheme]]: see also [[Concept:FileSystem]]\n")
("sys-glob" . "(:ctime 1015905037 :cuser #f :mtime 1015905037 :muser #f)* [procedure] sys-glob ''pattern''\n\n[[Gauche]]: glob().\n\nThis is called [[glob]] in some implementations.\n")
("sys-getpid" . "(:ctime 1038190098 :cuser #f :mtime 1038190098 :muser #f)* [procedure] sys-getpid\n* [procedure] sys-getppid\n\n[[Gauche]]: POSIX getpid() and getppid() interface.\nSee [[Concept:Process]].\n")
("concatenate" . "(:ctime 1014864436 :cuser #f :mtime 1014864436 :muser #f)* [procedure] concatenate ''list-of-lists''\n\n[[SRFI-1]]: (apply append ''list-of-lists'').\n\nSee also [[append]], [[concatenate!]].\n")
("current-julian-day" . "(:ctime 1015209279 :cuser #f :mtime 1015209279 :muser #f)* [procedure] current-julian-day\n* [procedure] current-modified-julian-day\n\n[[SRFI-19]]: see [[current-date]], [[current-time]].\n")
("list->array" . "(:ctime 1144485145 :cuser #f :mtime 1144488292 :muser #f)* [procedure] list->array ''rank'' ''proto'' ''list''\n\n[[SRFI-63]]: Returns an array of ''rank'' rank and type ''proto'' consisting of all the elements, in row-major order, of ''list''. When ''rank'' is 0, ''list'' is the lone array element; not necessarily a list.\n\n")
("string->immutable-string" . "(:ctime 1019619834 :cuser #f :mtime 1019619834 :muser #f)* [procedure] string->immutable-string ''string''\n\n[[MzScheme]]: returns an immutable string with the same\ncontent as ''string''.\n")
("list->string" . "(:ctime 1014855538 :cuser #f :mtime 1191568452 :muser #f)* [procedure] list->string ''list''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[string->list]].\n")
("user-preprocessor-pass" . "(:ctime 1015041230 :cuser #f :mtime 1015041230 :muser #f)* [procedure] user-preprocessor-pass [''newval'']\n\n[[Chicken]]: compiler parameter.\n\nSee also [[user-read-pass]], [[user-option-pass]], [[user-pass]]\n")
("unfold" . "(:ctime 1014867861 :cuser #f :mtime 1014867861 :muser #f)* [procedure] unfold ''p'' ''f'' ''g'' ''seed'' [''tail-gen'']\n\n[[SRFI-1]]:\n\n    (unfold p f g seed) = \n       (if (p seed) (tail-gen seed)\n         (cons (f seed)\n           (unfold p f g (g seed))))\n\nSee also [[fold]], [[unfold-right]].\n")
("make-string-input-port" . "(:ctime 1017989082 :cuser #f :mtime 1018345638 :muser #f)* [procedure] make-string-input-port ''string''\n* [procedure] make-string-output-port\n* [procedure] string-output-port-output ''string-port''\n\n[[Scheme48]], [[Scsh]]: string ports.\n\nThese procedures are called\n[[open-input-string]], [[open-output-string]] and\n[[get-output-string]] on some implementations.\n")
("*fl" . "(:ctime 1040351588 :cuser #f :mtime 1040351588 :muser #f)[[$$include +fl]]\n")
("oblist" . "(:ctime 1014947272 :cuser #f :mtime 1014947272 :muser #f)* [procedure] oblist\n\n[[ChezScheme]]: returns a list of interned symbols\n")
("floor" . "(:ctime 1014853888 :cuser #f :mtime 1191220006 :muser #f)* [procedure] floor ''x''\n* [procedure] ceiling ''x''\n* [procedure] truncate ''x''\n* [procedure] round ''x''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[floor->exact]]\n")
("ucs2-string<?" . "(:ctime 1039428015 :cuser #f :mtime 1039428015 :muser #f)[[$$include ucs2-string=?]]\n")
("unzip4" . "(:ctime 1014865288 :cuser #f :mtime 1014865288 :muser #f)* [procedure] unzip4 ''list''\n\n[[SRFI-1]]\n\nSee also [[zip]].\n")
("fdes-flags" . "(:ctime 1018386650 :cuser #f :mtime 1018386650 :muser #f)* [procedure] fdes-flags ''fd/port''\n* [procedure] set-fdes-flags ''fd/port'' ''integer''\n\n[[Scsh]]: sets file descrpitor flags.\n")
("SRFI-41" . "(:ctime 1307821485 :cuser #f :mtime 1307821485 :muser #f)SRFI-41: Streams\n\nhttp://srfi.schemers.org/srfi-41/srfi-41.html\n\n[[$$srfi-implementors]]\n\n----\n\n*** (streams primitive) library\n\n[[stream-null]], [[stream-cons]], [[stream?]],\n[[stream-null?]], [[stream-pair?]], [[stream-car]],\n[[stream-cdr]], [[stream-lambda]]\n\n*** (streams derived) library\n\n[[define-stream]], [[list->stream]], [[port->stream]],\n[[stream]], [[stream->list]], [[stream-append]],\n[[stream-concat]], [[stream-constant]], [[stream-drop]],\n[[stream-drop-while]], [[stream-filter]], [[stream-fold]],\n[[stream-for-each]], [[stream-from]], [[stream-iterate]],\n[[stream-length]], [[stream-let]], [[stream-map]],\n[[stream-match]], [[stream-of]], [[stream-range]],\n[[stream-ref]], [[stream-reverse]], [[stream-scan]],\n[[stream-take]], [[stream-take-while]],\n[[stream-unfold]], [[stream-unfolds]], [[stream-zip]].\n\n")
("send-signal" . "(:ctime 1018340744 :cuser #f :mtime 1018340744 :muser #f)* [procedure] send-signal ''sig''\n\n[[STk]]: sends the signal ''sig'' to the running program.\nSee also [[set-signal-handler!]].\n")
("struct-list" . "(:ctime 1099725980 :cuser #f :mtime 1099725981 :muser #f)* [procedure] struct-list ''struct''\n\n[[STklos]]: returns an alist of structure slot name and its value.\nSee also [[make-struct]].\n")
("array?" . "(:ctime 1017981784 :cuser #f :mtime 1144487427 :muser #f)* [procedure] array? ''obj''\n\n[[SRFI-25]], [[SRFI-47]], [[SRFI-63]], [[Scheme48]]: Returns #t if the obj is an array, and #f if not.\n\nSee also [[make-array]].\n")
("set!" . "(:ctime 1014858649 :cuser #f :mtime 1191209019 :muser #f)* [syntax] set! ''variable'' ''expression''\n\n[[R5RS]], [[R6RS]]: ''Expression'' is evaluated, and the resulting value is \nstored in the location to which ''variable'' is bound. ''Variable'' must be\nbound either in some region enclosing the set! expression or at top level. \nThe result of the set! expression is unspecified.\n\n* [syntax] set! (''proc'' ''arg'' ...) ''expression''\n\n[[SRFI-17]]: A syntax sugar of the following expression: \n\n ((setter ''proc'') ''arg'' ...) ''expression'')\n\nSee also [[setter]], [[getter-with-setter]].\n")
("blob-u16-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144717682 :muser #f)* [procedure] blob-u16-set! ''endianness'' ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: equivalent to (blob-uint-set! 2 ''endianness'' ''blob'' ''k'' ''n'').\n\nSee also [[blob-uint-set!]].\n")
("array" . "(:ctime 1017981741 :cuser #f :mtime 1017981741 :muser #f)* [procedure] array ''dimensions'' ''element0'' ...\n\n[[Scheme48]]: array constructor.  See [[make-array]].\n")
("check-ec" . "(:ctime 1144485145 :cuser #f :mtime 1144492328 :muser #f)* [syntax] check-ec ''qualifier'' ... ''expr'' (=> ''equal'') ''expected'' (''argument'' ...))\n* [syntax] check-ec ''qualifier'' ... ''expr'' => ''expected'' (''argument'' ...))\n* [syntax] check-ec ''qualifier'' ... ''expr'' (=> ''equal'') ''expected'')\n* [syntax] check-ec ''qualifier'' ... ''expr'' => ''expected'')\n\n[[SRFI-78]]:\nan eager comprehension for executing a parametric sequence of checks.\n\nEnumerates the sequence of bindings specified by ''qualifier'' ... .\nFor each binding evaluates ''equal'' and ''expected'' in unspecified order.\nThen evalues ''expr'' and compares the value obtained to the value of\n''expected'' using the value of ''equal'' as predicate, which is [[equal?]] when omitted.\nThe comprehension stops after the first failed check, if there is any.\nThen a report is printed according to the current mode setting\n(see [[check-set-mode!]]) and the outcome is recorded in a global state\nto be used in [[check-report]].\nThe entire check-ec counts as a single check.\n\nIn case the check fails ''argument'' ... is used for constructing an informative\nmessage with the argument values.\nUse ''argument'' ... to list the relevant free variables of ''expr''\nthat you want to have printed.\n\nA ''qualifier'' is any qualifier of an eager comprehension as specified in [[SRFI-42]].\n")
("fasl-file" . "(:ctime 1014961762 :cuser #f :mtime 1014961762 :muser #f)* [procedure] fasl-file ''ifn'' ''ofn''\n\n[[ChezScheme]]\n\nSee also [[fasl-write]]\n")
("global-environment" . "(:ctime 1018336547 :cuser #f :mtime 1018336547 :muser #f)* [procedure] global-environment\n\n[[STk]]: returns the global environment.\nSee [[the-environment]].\n")
("ormap" . "(:ctime 1014941272 :cuser #f :mtime 1327407219 :muser #f)* [procedure] ormap ''procedure'' ''list1'' ''list2'' ...\n\n[[ChezScheme]], [[MzScheme]]: Applies procedure to corresponding elements of the \n''lists'' in sequence until either the ''lists'' run out or\n''procedure'' returns a true value.\n\nThis is equivalent to [[SRFI-1]]'s [[any]], except that [[ormap]]\nrequires all the list be the same length.\n\nSee also [[any]], [[andmap]].\n\n [http://www.obtenir-rio.info code rio]\n")
("define-id-macro" . "(:ctime 1015044654 :cuser #f :mtime 1020284800 :muser #f)* [syntax] define-id-macro ''name'' ''exp''\n\n[[Chicken]], [[MzScheme]]: defines identifier macro.  The occurrence of ''name''\nis substituted by ''exp''.   See also [[let-id-macro]].\n\n")
("i/o-file-protection-error?" . "(:ctime 1099273536 :cuser #f :mtime 1099273536 :muser #f)* [procedure] i/o-file-protection-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-file-protection-error]].\n")
("parameterize" . "(:ctime 1015029626 :cuser #f :mtime 1099777198 :muser #f)* [syntax] parameterize ((''param'' ''val'') ...) ''exp1'' ''exp2'' ...\n\n[[SRFI-39]], [[ChezScheme]], [[Chicken]], [[MzScheme]], [[Gauche]],\n[[SISC]], [[STklos]]: \nevaluates expressions with binding parameters\n''params'' to the ''vals''.   It's like [[fluid-let]] for parameters.\n\nGuile has [[with-fluids*]], which does similar thing.\n\nSee also [[make-parameter]].\n")
("test-error" . "(:ctime 1151136447 :cuser #f :mtime 1151145099 :muser #f)* test-error [[''test-name''] ''error-type''] ''test-expr''\n\n[[SRFI-64]]: assert that an error is signaled during the evaluation of ''test-expression''.\n''error-type'' indicates the type of error. If ''error-type'' is not specified or #t,\nit means ''some kind of exception should be raised''.\nThe value of ''error-type'' is implementation dependent.\nHowever all implementation must allows #t.\n\nAn implementation that cannot catch exceptions should skip [[test-error]].\n")
("Library:Fmt" . "(:ctime 1191265522 :cuser #f :mtime 1191265522 :muser #f)Alex Shinn's combinator formatting library.\n\nhttp://synthcode.com/scheme/fmt/\n\n----\n\n[[fmt]]\n\n[[dsp]], [[wrt]], [[wrt/unshared]], [[pretty]], [[pretty/unshared]],\n[[slashified]], [[maybe-slashified]]\n\n[[num]], [[num/comma]], [[num/si]], [[num/fit]]\n\n[[nl]], [[fl]], [[space-to]], [[tab-to]], [[fmt-null]]\n\n[[cat]], [[apply-cat]], [[join]], [[join/prefix]], [[join/suffix]],\n[[join/last]], [[join/dot]]\n\n[[pad]], [[pad/left]], [[pad/both]], [[trim]], [[trim/left]], [[trim/both]],\n[[trim/length]], [[fit]], [[fit/left]], [[fit/both]]\n\n[[fmt-let]], [[fmt-bind]], [[fmt-if]], [[radix]], [[fix]],\n[[comma-char]], [[decimal-char]], [[pad-char]], [[ellipse]], [[with-width]]\n\n[[columnar]], [[fmt-columns]], [[wrap-lines]], [[justify]],\n[[fmt-file]], [[line-numbers]]\n\n[[c-if]], [[c-for]], [[c-while]], [[c-fun]], [[c-prototype]],\n[[c-begin]], [[c-switch]], [[c-case]], [[c-case/fallthrough]], [[c-default]],\n[[c-label]], [[c-goto]], [[c-return]], [[c-break]], [[c-continue]],\n[[c-const]], [[c-static]], [[c-volatile]], [[c-restrict]],\n[[c-register]], [[c-auto]], [[c-inline]], [[c-extern]],\n[[c-extern/C]], [[c-var]], [[c-cast]], [[c-typedef]], [[c-struct]],\n[[c-union]], [[c-class]], [[c-attribute]], [[c-enum]], [[c-comment]],\n[[cpp-include]], [[cpp-if]], [[cpp-define]], [[cpp-ifdef]],\n[[cpp-ifndef]], [[cpp-elif]], [[cpp-else]], [[cpp-line]], [[cpp-pragma]],\n[[cpp-error]], [[cpp-warning]], [[cpp-stringify]], [[cpp-sym-cat]], \n[[cpp-wrap-header]]\n\n[[fmt-red]], [[fmt-blue]], [[fmt-green]], [[fmt-cyan]], [[fmt-yellow]],\n[[fmt-magenta]], [[fmt-white]], [[fmt-black]], [[fmt-bold]],\n[[fmt-underline]], [[fmt-color]], [[fmt-in-html]]\n\n[[fmt-unicode]]\n\n")
("%macroexpand" . "(:ctime 1015311999 :cuser #f :mtime 1015311999 :muser #f)* [syntax] %macroexpand ''form''\n* [syntax] %macroexpand-1 ''form''\n\n[[Gauche]]: expands ''form''.  These are syntax in order to\ncapture the local syntactic bindings.\n\nSee also [[macroexpand]], [[macroexpand-1]].\n")
("socket-down?" . "(:ctime 1018343508 :cuser #f :mtime 1018343508 :muser #f)* [procedure] socket-down? ''socket''\n\n[[STk]]: see also [[make-client-socket]], [[make-server-socket]].\n")
("file-length" . "(:ctime 1014956771 :cuser #f :mtime 1015189319 :muser #f)* [procedure] file-length ''port''\n\n[[ChezScheme]]: returns the length of the file\n''port'' refers\n\nSee also [[file-position]].\n\nSome othe Scheme implementations provide a way to know\nfile size of given ''pathname''.  See [[file-size]].\nSee also [[Concept:FileSystem]].\n")
("map" . "(:ctime 1014854095 :cuser #f :mtime 1191315138 :muser #f)* [procedure] map ''proc'' ''list1'' ''list2'' ...\n\n[[R5RS]]: The ''lists'' must be lists, and ''proc'' must be a procedure taking \nas many arguments as there are ''lists'' and returning a single value. If\nmore than one ''list'' is given, then they must all be the same length. \nMap applies ''proc'' element-wise to the elements of the ''lists'' and\nreturns a list of the results, in order. The dynamic order \nin which ''proc'' is applied to the elements of the ''lists'' is unspecified.\n\n[[SRFI-1]] extends R5RS allow the arguments to be of unequal length; \nit terminates when the shortest list runs out. \n\n[[R6RS]]: The implementation ''should'' check all the lists have the same\nlength (it is a recommendation; so srfi-1 semantics and r6rs semantics\ncan coexist, IMHO --shiro).~%\nR6RS explicitly requires that if ''proc'' returns multiple times\nbecause of call/cc, the values returned by earlier returns are not \nmutated (it prohibits the implementation that destructively appends\nthe results to construct the list to return.)\n\nSee also [[for-each]], [[map-in-order]].\n\n* [generic] map ''proc'' ''coll1'' ''coll2'' ...\n\n[[Gauche]] extends this to take arbitrary collections\n(with gauche.collection module).\n")
("match" . "(:ctime 1015101659 :cuser #f :mtime 1144597491 :muser #f)* [syntax] match ''exp'' ''clause'' ...\n\n[[Chicken]], [[Gauche]]: Andrew Wright's pattern matching package.\nSee http://www.intertrust.com/star/wright/match.ps.gz .\nSee also [[match-lambda]], [[match-lambda*]],\n[[match-let]], [[match-let*]], [[match-letrec]], [[match-define]].\n\n* [procedure] match ''regexp'' ''string''\n\n[[Scheme48]]: Regular expression matcher.\nSee also [[any-match?]], [[Concept:RegularExpression]].\n\nThis is called [[rxmatch]] in Gauche.\n")
("warning-handler" . "(:ctime 1014963905 :cuser #f :mtime 1014963905 :muser #f)* [procedure] warning-handler [''newval'']\n\n[[ChezScheme]]: gets/sets the current warning handler.\n\nSee also [[warning]]\n")
("byte-vector-fill!" . "(:ctime 1015275502 :cuser #f :mtime 1015275502 :muser #f)* [procedure] byte-vector-fill! ''byte-vector'' ''n''\n\n[[Chicken]]: fills byte vector by fixnum ''n''.  See also [[byte-vector]].\n")
("critical-section" . "(:ctime 1014964832 :cuser #f :mtime 1015045690 :muser #f)* [syntax] critical-section ''exp1'' ''exp2'' ...\n\n[[ChezScheme]], [[Chicken]]\n\nSee also [[disable-interrupts]], [[enable-interrupts]],\n[[keyboard-interrupt-handler]], [[timer-interrupt-handler]]\n")
("when" . "(:ctime 1014941030 :cuser #f :mtime 1039510353 :muser #f)* [syntax] when ''test-exp'' ''exp1'' ''exp2'' ...\n\n[[ChezScheme]], [[Chicken]], [[STk]], [[STklos]], [[Gauche]],\n[[MzScheme]], [[SISC]]\n\nSee also [[unless]].\n")
("port-output-size" . "(:ctime 1014956264 :cuser #f :mtime 1014956264 :muser #f)* [procedure] port-output-size ''port''\n\n[[ChezScheme]]\n\nSee also [[make-output-port]], [[set-port-output-size!]]\n")
("test-result-kind" . "(:ctime 1151049296 :cuser #f :mtime 1151079628 :muser #f)* [syntax] test-result-kind ''runner''\n\n[[SRFI-64]]: returns the following result code of the most recent test.\nIf the result is not available yet, the result of the test expected to fail is 'xfail,\nthe result of the test expected to skip is 'skip, or otherwise #f.\n\n:'pass: passed as expected\n:'fail: failed but was unexpected\n:'xpass: passed but was unexpected\n:'xfail: failed as expected\n:'skip: skipped\n:#f: no tests have been run\n\n")
("errno/noexec" . "(:ctime 1015077154 :cuser #f :mtime 1015077154 :muser #f)[[$$include errno/perm]]\n")
("string<>" . "(:ctime 1015063820 :cuser #f :mtime 1015063820 :muser #f)[[$$include string=]]\n")
("#,@" . "(:ctime 1191208753 :cuser #f :mtime 1191208753 :muser #f)* [reader syntax] #,@ ''template''\n\n[[R6RS]]: Abbreviation of ([[unsyntax-splicing]] ''template'').\n\nSee [[unsyntax-splicing]], [[quasisyntax]].\n")
("proper-list?" . "(:ctime 1014862080 :cuser #f :mtime 1039510267 :muser #f)* [procedure] proper-list? ''obj''\n\n[[SRFI-1]]: Returns true iff ''obj'' is a proper list -- \na finite, nil-terminated list.  Equivalent to R5RS [[list?]].\n\nSee also [[circular-list?]], [[dotted-list?]].\n\nAlso in [[SISC]].\n")
("gauche-site-library-directory" . "(:ctime 1015904918 :cuser #f :mtime 1015904918 :muser #f)[[$$include gauche-architecture]]\n")
("bit-and" . "(:ctime 1043984884 :cuser #f :mtime 1043984884 :muser #f)[[$$include bit-or]]\n")
("second" . "(:ctime 1014862905 :cuser #f :mtime 1014862905 :muser #f)* [procedure] second ''pair''\n\n[[SRFI-1]]\n")
("*" . "(:ctime 1014846978 :cuser #f :mtime 1191218783 :muser #f)* [procedure] * ''z'' ...\n\n[[R5RS]], [[R6RS]]\n\nSee also [[+]], [[-]], [[/]], [[*.]].\n\n\n")
("*scm-version*" . "(:ctime 1015888249 :cuser #f :mtime 1015888249 :muser #f)* [constant] *scm-version*\n\n[[SCM]]: version.\n")
("unctrl" . "(:ctime 1015883095 :cuser #f :mtime 1015883095 :muser #f)* [procedure] unctrl ''c''\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("logcount" . "(:ctime 1015805382 :cuser #f :mtime 1217865778 :muser #f)* [procedure] logcount ''n''\n\n[[SLIB]], [[Gauche]], [[Guile]]: returns the number of ''1'' bits (if ''n'' is positive)\nor ''0'' bits (if ''n'' is negative) of an integer ''n''.\n\n[[R6RS]] offers [[bitwise-bit-count]] which is identical for positive integers but different for negative.\n")
("with-current-output-port*" . "(:ctime 1018381771 :cuser #f :mtime 1018381771 :muser #f)[[$$include with-current-input-port*]]\n")
("test-match-nth" . "(:ctime 1151049296 :cuser #f :mtime 1151076445 :muser #f)* [syntax] test-match-nth ''n'' [''count'']\n\n[[SRFI-64]]: returns the specifier matches the test case from ''n''-th to (''n'' + ''count'' - 1)-th,\nwhere ''count'' defaults to 1.\n\nSee also [[test-skip]] and [[test-expect-fail]].\n")
("string-skip-right" . "(:ctime 1014894099 :cuser #f :mtime 1014894099 :muser #f)* [procedure] string-skip-right ''s'' ''char/char-set/pred'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-skip]].\n")
("string-ci<>" . "(:ctime 1015066181 :cuser #f :mtime 1015066191 :muser #f)[[$$include string-ci=]]\n")
("error/location" . "(:ctime 1045088338 :cuser #f :mtime 1045088338 :muser #f)* [procedure] error/location ''symbol'' ''message'' ''obj'' ''file'' ''location''\n\n[[Bigloo]]: Like [[error]], except you can also pass the information \nof source file.\n")
("random-source-pseudo-randomize!" . "(:ctime 1038273446 :cuser #f :mtime 1038273446 :muser #f)* [procedure] random-source-pseudo-randomize! ''s'' ''i'' ''j''\n\n[[SRFI-27]]: Changes the state of the random source ''s'' into the initial state of the (''i'', ''j'')-th independent random source, where ''i'' and ''j'' are non-negative integers.\n")
("string-prefix-ci?" . "(:ctime 1014893337 :cuser #f :mtime 1014893337 :muser #f)* [procedure] string-prefix-ci? ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' 'end2'']\n\n[[SRFI-13]]\n\nSee also [[string-prefix?]], [[string-prefix-length-ci]]\n")
("char-set-cursor" . "(:ctime 1039168601 :cuser #f :mtime 1039168601 :muser #f)* [procedure] char-set-cursor ''char-set''\n\n[[SRFI-14]]: returns a ''cursor'' (an interator\nover given character set).  See also [[char-set-ref]],\n[[char-set-cursor-next]] and [[end-of-char-set?]].\n")
("ascii-whitespaces" . "(:ctime 1017981387 :cuser #f :mtime 1017981387 :muser #f)* [variable] ascii-whitespaces\n\n[[Scheme48]]: list of the ASCII values of whitespace\ncharacters.  See also [[char->ascii]], [[ascii->char]].\n")
("throw" . "(:ctime 1161201462 :cuser #f :mtime 1161201542 :muser #f)* [procedure] throw ''key'' ''arg'' ...\n\n[[Kawa]]: raise an exception with ''key''.  ''args'' are passed to\nthe handler associated with ''key''.\n\nSee also [[catch]].\n\nNote: The 'standard' mechanism to raise an exception appears converging to\n[[raise]].\n")
("string-kmp-partial-search" . "(:ctime 1014895340 :cuser #f :mtime 1014895340 :muser #f)* [procedure] string-kmp-partial-search ''pat'' ''rv'' ''s'' ''i'' [''c='' ''p-start'' ''s-start'' ''s-end'']\n\n[[SRFI-13]]\n\nSee also [[make-kmp-restart-vector]], [[kmp-step]]\n\n")
("file-info-inode" . "(:ctime 1040727305 :cuser #f :mtime 1040727305 :muser #f)[[$$include file-info-name]]\n")
("char-set-filter" . "(:ctime 1018084518 :cuser #f :mtime 1018084518 :muser #f)* [procedure] char-set-filter ''pred'' ''cs'' [''base-cs'']\n* [procedure] char-set-filter! ''pred'' ''cs'' ''base-cs''\n\n[[SRFI-14]]:  Returns a character set containing every character c in ''cs'' such that (''pred'' c) returns true.\nIf ''base-cs'' is given, the selected characters are\nadded to it.\n")
("fx<=?" . "(:ctime 1191225950 :cuser #f :mtime 1191225950 :muser #f)[[$$include fx=?]]\n")
("random-source-make-reals" . "(:ctime 1038272979 :cuser #f :mtime 1038272979 :muser #f)* [procedure] random-source-make-reals ''source'' [''unit'']\n\n[[SRFI-27]]: returns a procedure that generates random\nreal numbers using the random source ''source''.\nSee also [[random-source-make-integers]].\n")
("SRFI-133" . "(:ctime 1474476434 :cuser #f :mtime 1474476434 :muser #f)SRFI-133:  Vector Library (R7RS-compatible) \n\nhttp://srfi.schemers.org/srfi-133/srfi-133.html\n\n[[$$srfi-implementors]]\n")
("fork" . "(:ctime 1015282206 :cuser #f :mtime 1099738171 :muser #f)* [procedure] fork\n\n[[Scheme48]]: calls fork() and returns child process id to the parent,\nand #f to the child.  See also [[fork-and-forget]].\nNote: Scheme48's process id is a structure, not just an integer pid.\nSee also [[process-id?]], [[process-id=?]], [[process-id->integer]],\n[[integer->process-id]].\n\nSee also [[Concept:Process]]\n\n\nThis is called [[process-fork]], [[posix-fork]], [[sys-fork]]\non some implementations.\n\n* [procedure] fork [''thunk'']\n\n[[STklos]]: without ''thunk'', it works like fork(2), except that\nthe return value is a process object of the child process (for parent\nprocess) or #f (for child process).  If ''thunk'' is given, child process\nexecutes it and exits; the parent process gets a process object of\nthe child process.  See also [[run-process]].\n")
("if-not=?" . "(:ctime 1144494246 :cuser #f :mtime 1144502941 :muser #f)[[$$include if=?]]\n")
("console-output-port" . "(:ctime 1014957430 :cuser #f :mtime 1014957430 :muser #f)* [procedure] console-output-port [''newval'']\n\n[[ChezScheme]]: gets/sets the output port used by the waiter\nand interactive debugger.\n\nSee also [[console-input-port]]\n\n")
("add1" . "(:ctime 1014954809 :cuser #f :mtime 1018692551 :muser #f)* [procedure] add1 ''num''\n\n[[ChezScheme]], [[Chicken]], [[MzScheme]]\n\nSee also [[1+]], [[sub1]]\n")
("hash-table-ref" . "(:ctime 1015071290 :cuser #f :mtime 1144494236 :muser #f)* [procedure] hash-table-ref ''hash-table'' ''key'' [''thunk'']\n\n[[SRFI-69]]: This procedure returns the value associated to ''key'' in\n''hash-table''.\nIf no value is associated to ''key'' and ''thunk'' is given,\nit is called with no arguments and its value is returned;\nif ''thunk'' is not given, an error is signalled.\n\n* [procedure] hash-table-ref ''hash-table'' ''key'' [''default'']\n\n[[Chicken]]: if no entry is found, #f is returned.\nSee also [[hash-table-set!]].\n\nThis is called [[hash-table-get]] in some implementations.\n")
("WhatIsSchemeCrossReference" . "(:ctime 1015201884 :cuser #f :mtime 1245540732 :muser #f)There are lots of Scheme implementations, and each implementation extends\nScheme standard in some way.  It is a good thing to have variations,\nfor it allows people to explore various implementation techniques.\nDownside is, however, the compatibility.  Sometimes the same functionality\nis implemented in different names, or different functionalities are named the same.\n\nIt is not only a problem when you want to port a Scheme program from\none implementation to another.  When you start to write a set\nof general libraries, you need to think about the names, and you'll\nwonder---do those names conflict against some existing functions\nin other implementations?   You can look at SRFIs and some\npopular implementations, but you may missing some.\n\nThis site is an attempt to help the situation.\nYou can use this site in number of ways:\n\n- You can look for particular procedures/syntaxes by name, to see\nif it is available on other Scheme implementations.  Start from the alphabetical\nindex on the side.\n- Each implementation provides a particular ''view'' of certain system\ncomponents (e.g. filesystem) and a set of APIs based on it.  Some of such\nconcepts are categorized.  Start from the ''concepts'' index on the side.\n- You can also start from a particular implementation to check what kind\nof extensions it has.  However, note that it'll take long time to cover\nall aspects of all implementations, so even if you don't find a particular\nprocedure/syntax in the implementation page, it doesn't mean the implementation\nlacks it.  Active implementations evolve, so it's also likely that\nsome part of this site is out of date.  (You can fix it by yourself,\nin case if you noticed.  See below).\n\nIt won't be completed soon, or more likely\nit will never be; but this is ''Wiki'', so \n'''anybody who find something to be added or updated can do so'''.\nYou're welcome to improve this site.  See [[EditGuideline]] for how to\nmodify and create entries.\n\nAlso it should be noted that\n'''this is not a reference manual'''.  I have no intention to cover\nall aspects of all existing Scheme implementations.  Some entries have\nbrief description of what they do, but it is just for convenience,\nand you should see the implementation's documentation.\nHowever, you're welcome to start editing entries to add more\nexplanations if you feel like it.\n\nEnjoy.\n")
("char-set-intersection!" . "(:ctime 1099288547 :cuser #f :mtime 1099288547 :muser #f)[[$$include char-set-intersection]]\n")
("perm/iwgrp" . "(:ctime 1015099800 :cuser #f :mtime 1015099800 :muser #f)[[$$include perm/irusr]]\n")
("hash-table-ref/default" . "(:ctime 1144485145 :cuser #f :mtime 1144494108 :muser #f)* [procedure] hash-table-ref/default ''hash-table'' ''key'' ''default''\n\n[[SRFI-69]]: Evaluates to the same value as\n([[hash-table-ref]] ''hash-table'' ''key'' (lambda () ''default'')).\n")
("lset-difference" . "(:ctime 1014874803 :cuser #f :mtime 1014874803 :muser #f)* [procedure] lset-difference ''elt='' ''list1'' ''list2'' ...\n\n[[SRFI-1]]: Returns the difference of the lists, using ''elt='' for the \nelement-equality procedure -- all the elements of ''list1'' that are \nnot ''elt='' to\nany element from one of the other ''listi'' parameters.\n\nSee also [[lset-difference!]], [[lset-diff+intersection]].\n")
("fxand" . "(:ctime 1191224586 :cuser #f :mtime 1191224586 :muser #f)* [procedure] fxand ''fixnum'' ...\n* [procedure] fxior ''fixnum'' ...\n* [procedure] fxxor ''fixnum'' ...\n\n[[R6RS]]: bitwise and, ior and xor of fixnums.   See [[fixnum?]] for\nother fixnum operations.\n\nIn ChezScheme, these are [[fxlogand]], [[fxlogior]] and [[fxlogxor]].\n\n* [procedure] fxand ''fx1'' ''fx2''\n* [procedure] fxior ''fx1'' ''fx2''\n* [procedure] fxxor ''fx1'' ''fx2''\n\n[[Chicken]]: In Chicken, these are binary operators.\n")
("div0" . "(:ctime 1191219503 :cuser #f :mtime 1191396881 :muser #f)* [procedure] div0 ''x1'' ''x2''\n\n[[R6RS]]: \n\n ''x1'' div0 ''x2'' = ''nd''\n ''x1'' mod0 ''x2'' = ''xm''\n   where\n     ''x1'' = ''nd'' * ''x2'' + ''xm''\n     -|''x2''/2| <= ''xm'' < |''x2''/2|\n\nSee also [[div0-and-mod0]], [[mod0]], [[div]], [[mod]].\n")
("with-error-output-port" . "(:ctime 1018381898 :cuser #f :mtime 1018381898 :muser #f)[[$$include with-current-input-port]]\n")
("new-cafe" . "(:ctime 1015024268 :cuser #f :mtime 1015024268 :muser #f)* [procedure] new-cafe [''eval-proc'']\n\n[[ChezScheme]]: start new repl.\n\nSee also [[transcript-cafe]], [[waiter-prompt-string]],\n[[waiter-prompt-and-read]], [[waiter-write]], [[abort]], [[reset]], [[exit]]\n")
("open-output-string" . "(:ctime 1014881647 :cuser #f :mtime 1327407212 :muser #f)* [procedure] open-output-string\n\n[[SRFI-6]]:  Returns an output port that will accumulate \ncharacters for retrieval by [[get-output-string]]. The port can be closed \nby the procedure [[close-output-port]], though its storage will be reclaimed by \nthe garbage collector if it becomes inaccessible.\n\nAlso in [[Bigloo]],\n[[ChezScheme]], [[Chicken]], [[Gauche]], [[STk]], [[STklos]]\n\nSee also [[open-input-string]], [[get-output-string]].\n\nSome implementations call this [[make-string-output-port]].\n [http://www.obtenir-rio.info numero rio]\n")
("signal/hup" . "(:ctime 1015076448 :cuser #f :mtime 1015076483 :muser #f)* [variable] signal/hup\n* [variable] signal/term\n* [variable] signal/kill\n* [variable] signal/int\n* [variable] signal/fpe\n* [variable] signal/ill\n* [variable] signal/segv\n* [variable] signal/abrt\n* [variable] signal/trap\n* [variable] signal/quit\n* [variable] signal/alrm\n* [variable] signal/vtalrm\n* [variable] signal/prof\n* [variable] signal/io\n* [variable] signal/urg\n* [variable] signal/chld\n* [variable] signal/cont\n* [variable] signal/stop\n* [variable] signal/tstp\n* [variable] signal/pipe\n* [variable] signal/xcpu\n* [variable] signal/xfsz\n* [variable] signal/usr1\n* [variable] signal/usr2\n* [variable] signal/winch\n\n[[Chicken]]: signal codes.  See [[set-signal-mask!]], [[set-signal-handler]].\n\n[[Gauche]] defines variables with the same name as POSIX (e.g. SIGHUP).\n")
("pretty-file" . "(:ctime 1014959538 :cuser #f :mtime 1014959538 :muser #f)* [procedure] pretty-file ''ifn'' ''ofn''\n\n[[ChezScheme]]\n\nSee also [[pretty-print]]\n")
("cfl-conjugate" . "(:ctime 1014954127 :cuser #f :mtime 1014954127 :muser #f)* [procedure] cfl-conjugate ''cflonum''\n\n[[ChezScheme]]\n\nSee also [[cflonum?]], [[conjugate]]\n")
("#@" . "(:ctime 1014961801 :cuser #f :mtime 1014961801 :muser #f)* [reader syntax] #@\n\n[[ChezScheme]] uses this prefix for fasl object.  See [[fasl-write]]\n")
("compile-profile" . "(:ctime 1015023877 :cuser #f :mtime 1015023877 :muser #f)* [procedure] compile-profile [''newval'']\n\n[[ChezScheme]]: compiler parameter.\n")
("try-load" . "(:ctime 1015889205 :cuser #f :mtime 1099727562 :muser #f)* [procedure] try-load ''filename''\n\n[[SCM]], [[STklos]]: if ''filename'' exists, loads it and returns #t; otherwise, returns #f.\n\nIn Gauche, this behavior is achieved by:\n\n  (load ''filename'' :paths '() :error-if-not-found #f)\n\n* [procedure] try-load ''filename'' [''module'']\n\n[[STk]]: you can specify a module in which \nthe forms in ''filename'' are evaluated.  See [[load]].\n\nCuriously, [[STklos]] dropped the optional module argument.\n")
("syntax-object->datum" . "(:ctime 1014963056 :cuser #f :mtime 1014963056 :muser #f)* [procedure] syntax-object->datum ''obj''\n\n[[ChezScheme]]\n\nSee [[syntax-case]], [[datum->syntax-object]]\n")
("print-gensym" . "(:ctime 1014960257 :cuser #f :mtime 1014960257 :muser #f)* [procedure] print-gensym [''newval'']\n\n[[ChezScheme]]: a parameter for [[write]] and [[pretty-print]]\n")
("SISC" . "(:ctime 1018397287 :cuser #f :mtime 1152232476 :muser #f)SISC is a freely-available Java based interpreter.  SISC is R5RS compliant\nand highly extensible.\n\nhttp://sisc.sourceforge.net\n\n[[$$srfis 0 1 2 5 6 7 8 9 11 13 14 16 18 19 22 23 25 26 27 28 29 30 31 34 35 37 38 39 40 42 43 45 48 51 54 55 59 60 61 62 66 67 69 78]]\n----\n\n* Scheme Language\n\n[[min-precision]], [[max-precision]], [[#\\u]]\n[[string->uninterned-symbol]],\n[[case-sensitive]], [[proper-list?]],\n[[vector-length-prefixing]], [[box]], [[unbox]],\n[[set-box!]], [[box?]], [[#&]],\n[[parameterize]], [[#0=]], [[#0#]], [[#;]],\n[[when]], [[unless]], [[with-failure-continuation]],\n[[with/fc]], [[call-with-failure-continuation]], [[call/fc]],\n[[make-error]], [[make-nested-error]], [[error-location]],\n[[error-message]], [[error-parent-error]], \n[[error-parent-continuation]], [[throw]], [[error]],\n[[make-exception]], [[exception-error]],\n[[exception-continuation]], [[exception?]],\n[[getprop]], [[putprop]], [[sisc-internal-environment]],\n[[get-symbol-environment]], [[set-symbol-environment!]],\n[[circular?]], [[compose]], [[iota]], [[time]]\n\n* Debugging Facilities\n\n[[get-last-exception]], [[stack-trace]], [[print-stack-trace]],\n[[print-exception]], [[emit-annotations]],\n[[trace-lambda]], [[trace-let]], [[trace]], [[untrace]]\n\n* I/O\n\n[[current-url]], [[with-current-url]], [[normalize-url]],\n[[block-read]], [[block-write]], [[open-input-string]],\n[[open-output-string]], [[get-output-string]],\n[[call-with-input-file]], [[call-with-output-file]],\n[[call-with-input-string]], [[call-with-output-string]],\n[[with-input-from-port]], [[with-output-to-port]],\n[[with-input-from-file]], [[with-output-to-file]],\n[[with-input-from-string]], [[with-output-to-string]],\n[[get-host-by-ip-name]], [[get-host-name-by-ip]],\n[[get-local-host]], [[socket?]], [[open-socket-input-port]],\n[[open-socket-output-port]], [[close-socket]],\n[[open-tcp-socket]], [[open-tcp-listener]],\n[[server-socket?]], [[accept-tcp-socket]], [[set-so-timeout!]],\n[[open-udp-listen-socket]], [[open-udp-socket]],\n[[open-multicast-socket]], [[join-multicast-group]],\n[[leave-multicast-group]], [[set-multicast-ttl!]],\n[[pretty-print]], [[open-source-input-file]],\n[[input-port-location]], [[find-resource]], \n[[find-resources]]\n\n* Threads and concurrency\n\n[[thread?]], [[thread/new]], [[thread/start]],\n[[thread/state]], [[thread/join]], [[thread/interrupt]],\n[[thread/result]], [[parallel]], [[thread/priority]],\n[[thread/priority!]], [[thread/yield]], \n[[monitor?]], [[monitor/new]], [[monitor-of]],\n[[monitor/lock]], [[monitor/unlock]], [[monitor/wait]],\n[[monitor/notify]], [[monitor/notify-all]],\n[[monitor/synchronize]], [[monitor/synchronize-unsafe]]\n\n* Java interaction\n\n[[java-object?]], [[java-class?]], [[java-interface?]],\n[[java-array?]], [[java-null?]], [[generic-java-constructor]],\n[[java-array-new]], [[generic-java-procedure]],\n[[java-mangle-method-name]], [[java-mangle-field-name]],\n[[java-class]], [[java-class-of]], [[java-instance?]],\n[[java-assignable?]], [[->]], [[->jarray]],\n[[java-wrap]], [[java-unwrap]], [[java-null]],\n[[define-java-proxy]], [[java-synchronized]],\n\n[[meta]], [[type<=]], [[instance-of?]], [[type-of]],\n[[class-direct-superclasses]], [[class-direct-slots]],\n[[class-precedence-list]], [[define-generic]],\n[[make-generic-procedure]], [[generic-procedure-methos]],\n[[generic-procedure-next]], [[define-method]],\n[[make-method]], [[add-method]], [[method-procedure]],\n[[method-types]], [[method-rest?]], [[define-constructor]],\n[[make-generic-constructor]], [[constructor]],\n[[applicable-methods]], [[methods-applicable?]],\n\n\n* Additional libraries\n\n[[logand]], [[logor]], [[logxor]], [[lognot]],\n[[ashl]], [[ashr]], \n[[make-hashtable]], [[hashtable?]], [[alist->hashtable]],\n[[hashtable->alist]], [[hashtable/put!]], [[hashtable/get]],\n[[hashtable/get!]], [[hashtable/remove!]],\n[[hashtable/clear!]], [[hashtable/keys]], \n[[hashtable/for-each]], [[hashtable/map]],\n[[buffer?]], [[make-buffer]], [[buffer]],\n[[buffer-length]], [[buffer-ref]], [[buffer-set!]],\n[[buffer-copy!]]\n[[procedure-property]], [[set-procedure-property!]],\n[[procedure-property!]],\n[[require-library]], [[library-exists?]], [[library-loaded?]],\n[[create-library-from-module]]\n\n* Modules and Extensibility\n\n")
("test-runner-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151078118 :muser #f)* [syntax] test-runner-simple\n\n[[SRFI-64]]: creates and returns new default simple test runner.\n\nSee also [[test-runner-null]] and [[test-runner-factory]].\n")
("Index:g" . "(:ctime 1014842830 :cuser #f :mtime 1015014527 :muser #f)[[$$index g]]\n\n")
("inexact->exact" . "(:ctime 1014854481 :cuser #f :mtime 1191211514 :muser #f)* [procedure] inexact->exact ''z''\n\n[[R5RS]]\n\nIn [[R6RS]], this procedure is in the R5RS compatibility module (rnrs r5rs (6)).\nYou may use the [[exact]] procedure instead.\n\nSee also [[exact->inexact]].\n")
("expand-path" . "(:ctime 1020225260 :cuser #f :mtime 1020225260 :muser #f)[[$$include resolve-path]]\n")
("MIT-Scheme" . "(:ctime 1100162976 :cuser #f :mtime 1334473802 :muser #f)http://groups.csail.mit.edu/mac/projects/scheme/\n\n[[$$srfis 0 1 2 6 8 9 23 27 30 62 69]]\n\n\n----\n** Lexical conventions\n\n[[#|]], [[#!optional]], [[#!rest]], [[#*]], [[#[]], [[#@]], [[#1=]], [[#1#]]\n\n** Special forms\n\n[[lambda]], [[named-lambda]], [[fluid-let]], \n[[define-structure]], [[sc-macro-transformer]], [[rsc-macro-transformer]],\n[[make-syntactic-closure]], [[close-syntax]], [[capture-syntactic-environment]],\n[[identifier?]], [[identifier=?]], [[make-synthetic-identifier]],\n[[er-macro-transformer]]\n\n** Equivalence predicates\n\n** Numbers\n\n[[exact-integer?]], [[exact-nonnegative-integer?]], [[exact-rational?]],\n[[1+]], [[-1+]], [[integer-floor]], [[integer-ceiling]], [[integer-truncate]],\n[[integer-round]], [[integer-divide]], [[integer-divide-quotient]],\n[[integer-divide-remainder]], [[floor->exact]], [[ceiling->exact]],\n[[truncate->exact]], [[round->exact]], [[rationalize->exact]],\n[[simplest-rational]], [[simplest-exact-rational]], [[conjugate]],\n[[flonum-parser-fast?]], [[flonum-unparser-cutoff]], \n\n[[fix:fixnum?]], [[fix:=]], [[fix:<]], [[fix:<=]], [[fix:>]], [[fix:>=]],\n[[fix:zero?]], [[fix:positive?]], [[fix:negative?]], \n[[fix:+]], [[fix:-]], [[fix:*]], [[fix:quotient]], [[fix:remainder]],\n[[fix:gcd]], [[fix:1+]], [[fix:-1+]], [[fix:divide]], [[fix:not]],\n[[fix:and]], [[fix:andc]], [[fix:or]], [[fix:xor]], [[fix:lsh]]\n\n[[flo:flonum?]], [[flo:=]], [[flo:<]], [[flo:<=]], [[flo:>]], [[flo:>=]],\n[[flo:zero?]], [[flo:positive?]], [[flo:negative?]],\n[[flo:+]], [[flo:-]], [[flo:*]], [[flo:/]], [[flo:finite?]], [[flo:negate]],\n[[flo:abs]], [[flo:exp]], [[flo:log]], [[flo:sin]], [[flo:cos]],\n[[flo:tan]], [[flo:asin]], [[flo:acos]], [[flo:atan]], [[flo:sqrt]],\n[[flo:expt]], [[flo:floor]], [[flo:ceiling]], [[flo:truncate]],\n[[flo:round]], [[flo:floor->exact]], [[flo:ceiling->exact]],\n[[flo:truncate->exact]], [[flo:round->exact]], [[flo:atan2]]\n\n[[random]], [[flo:random-unit]], [[*random-state*]], [[make-random-state]],\n[[random-state?]]\n\n... more to come ...\n\n \n")
("hash-table->alist" . "(:ctime 1144494246 :cuser #f :mtime 1144596448 :muser #f)* [procedure] hash-table->alist ''hash-table''\n\n[[SRFI-69]]: Returns an association list such that the car of each element in al\nist is a key in ''hash-table'' and the corresponding cdr of each element in alist is the value associated to the key in ''hash-table''. The order of the elements is unspecified.\n\nThe following should always produce a hash table with the same mappings as a\nhash table ''h'':\n\n{{{\n(alist->hash-table (hash-table->alist h)\n                   (hash-table-equivalence-function h)\n                   (hash-table-hash-function h))\n}}}\n\n* [procedure] hash-table->alist ''hash-table''\n[[Gauche]]: (hash-table-map hash-table cons)\n\nSee also [[hash-table-map]].\n")
("blob-copy" . "(:ctime 1144700986 :cuser #f :mtime 1144712088 :muser #f)* [procedure] blob-copy ''blob''\n\n[[SRFI-74]]: Returns a newly allocated copy of blob ''blob''.\n")
("t" . "(:ctime 1152518355 :cuser #f :mtime 1152527060 :muser #f)* [variable] t\n[[RRRS]]: defined as [[#!true]].\n\n[[R3RS]], [[SLIB]]: defined as [[#t]].\n\nSee also [[nil]].\n")
("errno" . "(:ctime 1015052311 :cuser #f :mtime 1015211952 :muser #f)* [procedure] errno\n\n[[Chicken]]: returns errno of the last system call.\n\nSTk has a variable [[*errno*]].\n\n* [procedure] errno [''newval'']\n\n[[SCM]] allows to set the errno as well.\n\n")
("select-module" . "(:ctime 1014928203 :cuser #f :mtime 1014928203 :muser #f)* [syntax] select-module ''module-name''\n\n[[STk]], [[STklos]], [[Gauche]]: Switch the current module\nto ''module-name''.\n\nSee also [[define-module]], [[current-module]].\n")
("abort-handler" . "(:ctime 1015024463 :cuser #f :mtime 1015024463 :muser #f)* [procedure] abort-handler [''newhandler'']\n\n[[ChezScheme]]: gets/sets abort handler.\n\nSee also [[abort]].\n")
("SRFI-115" . "(:ctime 1474475312 :cuser #f :mtime 1474475312 :muser #f)SRFI-115: Scheme Regular Expressions\n\nhttp://srfi.schemers.org/srfi-115/srfi-115.html\n\n[[$$srfi-implementors]]\n")
("os-node-name" . "(:ctime 1020375194 :cuser #f :mtime 1020375194 :muser #f)[[$$include os-name]]\n")
("SRFI-51" . "(:ctime 1099394913 :cuser #f :mtime 1327717126 :muser #f)SRFI-51: Handling rest list\n\nhttp://srfi.schemers.org/srfi-51/srfi-51.html\n\n[[$$srfi-implementors]]\n\n----\n[[rest-values]], [[arg-and]], [[arg-ands]], [[err-and]], [[err-ands]], [[arg-or]], [[arg-ors]], [[err-or]], [[err-ors]]\n")
("unzip5" . "(:ctime 1014865337 :cuser #f :mtime 1014865337 :muser #f)* [procedure] unzip5 ''list''\n\n[[SRFI-1]]\n\nSee also [[zip]].\n")
("pretty-line-length" . "(:ctime 1014960063 :cuser #f :mtime 1014960063 :muser #f)* [procedure] pretty-line-length [''newval'']\n\n[[ChezScheme]]: a parameter for [[pretty-print]]\n")
("date-week-day" . "(:ctime 1023886342 :cuser #f :mtime 1023886356 :muser #f)[[$$include date-nanosecond]]\n")
("print-to-string" . "(:ctime 1015051290 :cuser #f :mtime 1015051290 :muser #f)* [procedure] print-to-string ''exp'' ...\n\n[[Chicken]]\n\nSee also [[write-to-string]].\n")
("sys-pause" . "(:ctime 1038485574 :cuser #f :mtime 1038485574 :muser #f)* [procedure] sys-pause\n\n[[Gauche]]: Suspends the process until it receives a signal whose\naction is to either execute a signal-catching function or to\nterminate the process.  This function only returns when the\nsignal-catching function returns.\nSee also [[sys-sleep]], [[sys-alarm]].\n")
("fl<" . "(:ctime 1014952322 :cuser #f :mtime 1014952322 :muser #f)* [procedure] fl< ''flonum'' ...\n\n[[ChezScheme]]\n\nSee also [[flonum?]], [[<]], [[fx<]]\n")
("fllp" . "(:ctime 1014952800 :cuser #f :mtime 1014952800 :muser #f)* [procedure] fllp ''flonum''\n\n[[ChezScheme]]: returns the 12-bit integer consisting of the exponent\nplus highest order represented bit of a \nflonum (ieee 64-bit floating point number).\n\nSee also [[flonum?]]\n")
("define-top-level-value" . "(:ctime 1014929983 :cuser #f :mtime 1014929983 :muser #f)* [procedure] define-top-level-value ''symbol'' ''obj''\n\n[[ChezScheme]]: inserts top-level bindings of variable ''symbol''\nwith value ''obj''.\n\nSee also [[set-top-level-value!]], [[top-level-value]], \n[[top-level-bound?]]\n")
("test-match-any" . "(:ctime 1151049296 :cuser #f :mtime 1151076955 :muser #f)* [syntax] test-match-any ''specifier'' ...\n\n[[SRFI-64]]: returns the specifier matches the test case which any ''specifier'' matches.\nEach ''specifier'' is always applied even if former ''specifier'' results true.\n\nSee also [[test-skip]] and [[test-expect-fail]].\n")
("current-group-id" . "(:ctime 1015198595 :cuser #f :mtime 1015198595 :muser #f)* [procedure] current-group-id\n* [procedure] current-effective-group-id\n\n[[Chicken]]: getgid and getegid.  See [[Concept:UserGroup]].\n\nSome implementations have [[get-group-id]], [[getgid]], [[sys-getgid]] etc.\n")
("ensure" . "(:ctime 1161172503 :cuser #f :mtime 1161176441 :muser #f)* [syntax] ensure ''predicate'' ''exp'' [''arguments'' ...]\n\n[[Chicken]]: Evaluate ''exp'' and apply the result to ''predicate''.\nIf ''predicate'' returns #f an error is signalled.\nOmitted in unsafe mode.  ''arguments'' ... are passed to [[error]] procedure.\n")
("current-load-history" . "(:ctime 1015807066 :cuser #f :mtime 1015807066 :muser #f)[[$$include current-load-port]]\n")
("bit-field" . "(:ctime 1015805200 :cuser #f :mtime 1015805200 :muser #f)* [procedure] bit-field ''n'' ''start'' ''end''\n\n[[SLIB]], [[Gauche]]: extract ''start''-th bit to ''end''-th bit of integer ''n''.\nSee also [[copy-bit-field]].\n")
("define-public" . "(:ctime 1014928412 :cuser #f :mtime 1014928412 :muser #f)* [syntax] define-public ''var'' ''expr''\n\n[[Guile]]: equivalent to (begin (define ''var'' ''expr'') (export ''var''))\n\nSee also [[export]].\n")
("symbol?" . "(:ctime 1014860005 :cuser #f :mtime 1191564941 :muser #f)* [procedure] symbol? ''obj''\n\n[[R5RS]], [[R6RS]]: Returns #t if ''obj'' is a symbol, otherwise returns #f.\n\n\n")
("*argv*" . "(:ctime 1015201237 :cuser #f :mtime 1015211564 :muser #f)* [variable] *argv*\n\n[[STk]], [[Gauche]], [[SCM]]: keeps a list of command line arguments\n(without the script name itself).   See also [[*program-name*]].\n\nSome implementations have procedural access to this information.\nSee [[program-arguments]], [[command-line-arguments]], [[argv]].\n\nGauche also supports [[SRFI-22]].\n")
("signal/quit" . "(:ctime 1015076585 :cuser #f :mtime 1015076585 :muser #f)[[$$include signal/hup]]\n")
("get-output-string" . "(:ctime 1014881727 :cuser #f :mtime 1099726513 :muser #f)* [procedure] get-output-string ''output-port''\n\n[[SRFI-6]]:  Given an output port created by [[open-output-string]], \nreturns a string consisting of the characters that have been output \nto the port so far.\n\nAlso in [[Bigloo]],\n[[ChezScheme]], [[Chicken]], [[Gauche]], [[STk]], [[STklos]]\n\nSee also [[open-output-string]].\n\nSome implementaions call this [[string-output-port-output]].\n")
("#[" . "(:ctime 1015303272 :cuser #f :mtime 1100163123 :muser #f)* [reader syntax] #[''char-set-spec'']\n\n[[Gauche]]: represents character set, e.g. #[a-zA-Z].\n\nSee also [[char-set]], [[SRFI-14]].\n\n* [reader syntax] #[''object description'']\n\n[[MIT-Scheme]], [[STklos]]: representation of unreadable objects.\n")
("signal/xcpu" . "(:ctime 1015076675 :cuser #f :mtime 1015076675 :muser #f)[[$$include signal/hup]]\n")
("record-field-mutator" . "(:ctime 1014948456 :cuser #f :mtime 1014949655 :muser #f)* [procedure] record-field-mutator ''rts'' ''field-name''\n\n[[ChezScheme]]\n\nSLIB has equivalent procedure as [[record-modifier]].\n\nSee also [[make-record-type]], [[define-record]].\n")
("asinh" . "(:ctime 1014955487 :cuser #f :mtime 1039750678 :muser #f)* [procedure] asinh ''z''\n* [procedure] acosh ''z''\n* [procedure] atanh ''z''\n\n[[ChezScheme]], [[Gauche]], [[SCM]], [[Guile]]: hyperbolic arc sine, arc cosine and arc tangent.\n\nSee also [[sinh]], [[cosh]], [[tanh]]\n")
("fileno/stderr" . "(:ctime 1015106228 :cuser #f :mtime 1015106228 :muser #f)[[$$include fileno/stdin]]\n")
("file-options" . "(:ctime 1020397225 :cuser #f :mtime 1020397225 :muser #f)* [syntax] file-options ''file-option-name'' ...\n\n[[Scheme48]]: construct a file option set from\n''file-option-name''s.  The result can be passed to\n[[open-file]].   The following symbols can be used:\n\n  create, exclusive, no-controlling-tty, truncate, append,\n  nonblocking, read-only, read-write, write-only\n\nSee [[file-options-on?]], [[open-file]].\n")
("rational-valued?" . "(:ctime 1191211200 :cuser #f :mtime 1191211200 :muser #f)[[$$include real-valued?]]\n")
("procedure-environment" . "(:ctime 1018336638 :cuser #f :mtime 1018336638 :muser #f)* [procedure] procedure-environment ''procedure''\n\n[[STk]]: returns the environment associated with\n''procedure''.\nSee [[the-environment]].\n")
("string-delete" . "(:ctime 1014895123 :cuser #f :mtime 1014895123 :muser #f)* [procedure] string-delete ''s'' ''char/char-set/pred'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-filter]]\n")
("SRFI-19" . "(:ctime 1015208578 :cuser #f :mtime 1331196667 :muser #f)SRFI-19:  Time Data Types and Procedures\n\nhttp://srfi.schemers.org/srfi-19/srfi-19.html\n\n[[$$srfi-implementors]]\n\n----\n[[time-duration]], [[time-monotonic]], [[time-process]], [[time-tai]],\n[[time-thread]], [[time-utc]]\n\n[[current-date]], [[current-julian-day]], [[current-modified-julian-day]],\n[[current-time]], [[time-resolution]]\n\n[[make-time]], [[time?]], [[time-type]], [[time-nanosecond]],\n[[time-second]], [[set-time-type!]], [[set-time-nanosecond!]],\n[[set-time-second!]], [[copy-time]]\n\n[[time<=?]], [[time<?]], [[time=?]], [[time>?]], [[time>=?]]\n\n[[time-difference]], [[time-difference!]], [[add-duration]], [[add-duration!]],\n[[subtract-duration]], [[subtract-duration!]]\n\n[[make-date]], [[date?]], [[date-nanosecond]], [[date-second]],\n[[date-minute]], [[date-hour]], [[date-day]], [[date-month]], [[date-year]],\n[[date-zone-offset]], [[date-year-day]], [[date-week-day]], [[date-week-number]]\n\n[[date->julian-day]], [[date->modified-julian-day]], [[date->time-monotonic]],\n[[date->time-tai]], [[date->time-utc]], [[julian-day->date]], [[julian-day->time-monotonic]],\n[[julian-day->time-tai]], [[julian-day->time-utc]], [[modified-julian-day->date]],\n[[modified-julian-day->time-monotonic]], [[modified-julian-day->time-tai]], \n[[modified-julian-day->time-utc]], [[time-monotonic->date]],\n[[time-monotonic->julian-day]], [[time-monotonic->modified-julian-day]],\n[[time-monotonic->time-tai]], [[time-monotonic->time-tai!]],\n[[time-monotonic->time-utc]], [[time-monotonic->time-utc!]],\n[[time-tai->date]], [[time-tai->julian-day]], [[time-tai->modified-julian-day]],\n[[time-tai->time-monotonic]], [[time-tai->time-monotonic!]],\n[[time-tai->time-utc]], [[time-tai->time-utc!]],\n[[time-utc->date]], [[time-utc->julian-day]], [[time-utc->modified-julian-day]],\n[[time-utc->time-monotonic]], [[time-utc->time-monotonic!]],\n[[time-utc->time-tai]], [[time-utc->time-tai!]]\n\n[[date->string]], [[string->date]]\n")
("string-ci<?" . "(:ctime 1015063592 :cuser #f :mtime 1015063592 :muser #f)[[$$include string-ci=?]]\n")
("end-of-char-set?" . "(:ctime 1039168772 :cuser #f :mtime 1039168772 :muser #f)* [procedure] end-of-char-set? ''cursor''\n\n[[SRFI-14]]: returns true if ''cursor'' points ''past the end''\nof the character set.  See [[char-set-cursor]].\n")
("," . "(:ctime 1191205261 :cuser #f :mtime 1191205261 :muser #f)* [reader syntax] ,''datum''\n\n[[R5RS]], [[R6RS]]: Abbreviation of ([[unquote]] ''datum'')\n\n* [reader syntax] ,@''datum''\n\n[[R5RS]], [[R6RS]]: Abbreviation of ([[unquote-splicing]] ''datum'')\n\nSee also [[`]], [[#,]], [[#,@]].\n")
("number->string" . "(:ctime 1014856952 :cuser #f :mtime 1191313629 :muser #f)* [procedure] number->string ''z'' [''radix'']\n\n[[R5RS]]: The implementation must support at least 2, 8, 10 and 16 as ''radix''\nfor exact ''z'', and 10 for inexact ''z''.\n\nSee also [[string->number]].\n\n* [procedure] number->string ''z'' [''radix'' [''precision'']]\n\n[[R6RS]]: Adds optional ''precision'' argument to specify mantissa width\nof an inexact number ''z''.  The implementation need only support radix 10\nif ''precision'' is given.  The result must contain \"|p\" notation.\n\n* [procedure] number->string ''number'' ''format''\n[[RRRS]], [[R3RS]]\n\nSee also [[int]], [[rat]], [[fix]], [[flo]], [[sci]], [[rect]], [[polar]], [[heur]], [[exactness]] and [[radix]].\n\n* [procedure] number->string ''z'' [''radix'' ''use-upper?'']\n\n[[Gauche]] adds optional ''user-upper?'' that indicates uppercase\nletters for digits over 10.\n\n\n")
("read-symbolic-link" . "(:ctime 1015185662 :cuser #f :mtime 1018346101 :muser #f)* [procedure] read-symbolic-link ''filename''\n\n[[Chicken]]: readlink(2).  See also [[create-symbolic-link]].\nSee [[Concept:FileSystem]].\n\nThis is called [[read-symlink]] or [[sys-readlink]]\nin some implementations.\n")
("provided?" . "(:ctime 1018083940 :cuser #f :mtime 1018083940 :muser #f)[[$$include require]]\n")
("null-list?" . "(:ctime 1014862462 :cuser #f :mtime 1014862462 :muser #f)* [procedure] null-list? ''list''\n\n[[SRFI-1]]: ''List'' is a proper or circular list. \nThis procedure returns true if the argument is the empty list (), \nand false otherwise. It is an error to pass this procedure a \nvalue which is not a proper or circular list. This procedure is \nrecommended as the\ntermination condition for list-processing procedures \nthat are not defined on dotted lists.\n\nSee also [[null?]].\n")
("memq" . "(:ctime 1014856487 :cuser #f :mtime 1014856487 :muser #f)* [procedure] memq ''obj'' ''list''\n\n[[R5RS]]\n\nSee also [[memv]], [[member]].\n")
("SRFI-10" . "(:ctime 1014882970 :cuser #f :mtime 1122428587 :muser #f)SRFI-10: Sharp-Comma External Form\n\n\nhttp://srfi.schemers.org/srfi-10/srfi-10.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[#,]]\n\n[[define-reader-ctor]]\n\n")
("literal-identifier=?" . "(:ctime 1014962680 :cuser #f :mtime 1014962680 :muser #f)* [procedure] literal-identifier=? ''id1'' ''id2''\n\n[[ChezScheme]]\n\nSee [[syntax-case]]\n")
("make-path" . "(:ctime 1099741973 :cuser #f :mtime 1099741973 :muser #f)* [procedure] make-path ''dirname'' ''name''\n\n[[STklos]]: builds a file name.\n\nThis is called [[build-path]] in some implementations.\n")
("time-utc->modified-julian-day" . "(:ctime 1099301539 :cuser #f :mtime 1099301539 :muser #f)[[$$include time-utc->date]]\n")
("a:flor16b" . "(:ctime 1144485145 :cuser #f :mtime 1144529268 :muser #f)* [procedure] a:flor16b [''z'']\n[[SRFI-63]]: Returns an inexact 16.bit flonum real uniform-array prototype.\n")
("shape" . "(:ctime 1036933910 :cuser #f :mtime 1036933910 :muser #f)* [procedure] shape ''bound'' ...\n\n[[SRFI-25]]: returns a shape, which is a special form of\narray to specify the shape of the array.  See [[make-array]].\n")
("uncode" . "(:ctime 1018344305 :cuser #f :mtime 1018344305 :muser #f)* [procedure] uncode ''form''\n\n[[STk]]: recovers original form from the compiled form.\n")
("string-trim-both" . "(:ctime 1014889427 :cuser #f :mtime 1014889427 :muser #f)* [procedure] string-trim-both ''s'' [''char/char-set/pred'' ''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-trim]], [[string-trim-right]].\n")
("test-runner-on-bad-count" . "(:ctime 1151049296 :cuser #f :mtime 1151082650 :muser #f)* [syntax] test-runner-on-bad-count ''runner''\n* [syntax] test-runner-on-bad-count! ''runner'' ''function''\n\n[[SRFI-64]]: gets or sets the callback function for on-bad-count.\n''function'' is called from [[test-end]] (before on-group-end function)\nif ''expected-count'' specified by the corresponding [[test-begin]] does not match the ''actual-count''\nof the actually executed/skipped test cases.\n\nSee also [[test-runner-on-group-end]] and [[test-on-bad-count-simple]].\n")
("ucs2-upcase" . "(:ctime 1039429954 :cuser #f :mtime 1039429954 :muser #f)* [procedure] ucs2-upcase ''ucs2''\n* [procedure] ucs2-downcase ''ucs2''\n\n[[Bigloo]]: UCS2 counterparts of [[char-upcase]]\nand [[char-downcase]].\n\nSee [[ucs2?]]\n")
("release" . "(:ctime 1015280300 :cuser #f :mtime 1015280300 :muser #f)* [procedure] release ''x'' [''releaser'']\n\n[[Chicken]]: used to free memory explicitly.  See [[evict]], \n[[make-static-byte-vector]].\n")
("port-closed?" . "(:ctime 1014956508 :cuser #f :mtime 1099727089 :muser #f)* [procedure] port-closed? ''port''\n\n[[ChezScheme]], [[Gauche]], [[STk]], [[STklos]]\n\nSee also [[close-port]], [[mark-port-closed!]]\n")
("software-type" . "(:ctime 1015069404 :cuser #f :mtime 1015069404 :muser #f)* [procedure] software-type\n\n[[Chicken]]\n\n")
("cp0-effort-limit" . "(:ctime 1015024044 :cuser #f :mtime 1015024044 :muser #f)* [procedure] cp0-effort-limit [''newval'']\n\n[[ChezScheme]]: compiler parameter.\n")
("sleep" . "(:ctime 1020749845 :cuser #f :mtime 1193170664 :muser #f)* [procedure] sleep [''x'']\n\n[[Bigloo]]: sleeps for ''x'' microseconds.\n\n[[Chicken]]: Puts the process to sleep for ''x'' seconds. Returns either 0 if the time has completely elapsed, or the number of remaining seconds, if a signal occurred.\n\n[[MzScheme]]: causes the current thread to sleep for ''x'' seconds.\n\n[[SRFI-18]] and [[SRFI-21]] have [[thread-sleep!]].\n\n[[Gauche]] has [[sys-sleep]].\n\n* [procedure] sleep ''x''\n\n[[STklos]]: the argument is mandatory.\n")
("string-upcase" . "(:ctime 1014894379 :cuser #f :mtime 1039752817 :muser #f)* [procedure] string-upcase ''s'' [''start'' ''end'']\n* [procedure] string-downcase ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-upcase!]], [[string-titlecase]]\n\nSome implementations call these [[string-upper]] and\n[[string-lower]].\n\n* [procedure] string-upcase ''s'' \n* [procedure] string-downcase ''s'' \n\n[[Chicken]], [[Guile]], [[Bigloo]]:\n doesn't take optional arguments.\n\nSee also [[string-capitalize]]\n\n")
("table-ref" . "(:ctime 1017984950 :cuser #f :mtime 1017984950 :muser #f)* [procedure] table-ref ''table'' ''key''\n* [procedure] table-set! ''table'' ''key'' ''value''\n\n[[Scheme48]]: hash table accessor and modifier.\ntable-ref returns #f if the ''key'' is not found.\nSee also [[make-table]], [[Concept:HashTable]].\n")
("schmac" . "(:ctime 1152535011 :cuser #f :mtime 1152536756 :muser #f)* [primitive] schmac ''name'' ''pattern'' ''body''\n[[RRS]]: defines syntactic extension named ''name''. When (''name'' . ''rest'') is evaluated, ''rest'' is matched againt the ''pattern'', which is (possibly dotted) list of variables. The ''body'' is then evaluated in an environment where the variables in the ''pattern'' have as values the corresponding parts of ''rest''.\n\nThe ''body'' is written in the meta-language used to write the evaluator. In the PDP-10 MacLISP implementation, the ''body'' is MacLISP code.\n\nSee also [[macro]].\n")
("syntax-error" . "(:ctime 1015772299 :cuser #f :mtime 1015772299 :muser #f)* [syntax] syntax-error ''reason'' ''arg'' ...\n* [syntax] syntax-errorf ''format-string'' ''arg'' ...\n\n[[Gauche]]: like [[error]] and [[errorf]], but signals\nan error at compile time.  Useful to signal an error in the\nR5RS macro.\n")
(":list" . "(:ctime 1144527545 :cuser #f :mtime 1144538801 :muser #f)* [syntax] :list   ''vars'' ''arg1'' ''arg'' ...\n* [syntax] :string ''vars'' ''arg1'' ''arg'' ...\n* [syntax] :vector ''vars'' ''arg1'' ''arg'' ...\n[[SRFI-42]]:\nRun through one or more lists, strings, or vectors. First all expressions\nin ''arg1'' ''arg'' ... are evaluated and then all elements of the resulting\nvalues are enumerated from left to right. One can think of it as first\nappending all arguments and then enumerating the combined object. As a\nclarifying example, consider\n(list-ec (:string c (index i) \"a\" \"b\") (cons c i)) => ((#\\a . 0) (#\\b . 1)).\n")
("Gambit" . "(:ctime 1122430748 :cuser #f :mtime 1406954937 :muser #f)Gambit Scheme System\n\nhttp://www.iro.umontreal.ca/~gambit/\n\nThe current version is Gambit-C 4.7.3 (Jul 23, 2014).\n\n[[$$srfis 0 4 6 8 9 18 21 22 23 27 39]]\n\nThe previous list was taken from the announcement of the release of\nGambit-C 4.0 beta 22 (July 07, 2007).\n")
("rename-file-or-directory" . "(:ctime 1020222345 :cuser #f :mtime 1020222345 :muser #f)* [procedure] rename-file-or-directory ''oldpath'' ''newpath''\n\n[[MzScheme]]:\n\nThis is called [[rename]], [[rename-file]], [[sys-rename]]\nin other implementations.\n")
("user-info-home-directory" . "(:ctime 1018125269 :cuser #f :mtime 1018125269 :muser #f)[[$$include user-info?]]\n")
("min-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144504443 :muser #f)* [procedure] min-compare ''compare'' ''x1'' ''x2'' ...\n[[SRFI-67]]: Returns minimum of the values ''x1'' ''x2'' ...(one or more values) with respect to the compare procedure ''compare''.\n")
("blob?" . "(:ctime 1144700986 :cuser #f :mtime 1144709905 :muser #f)* [procedure] blob? ''obj''\n\n[[SRFI-74]]: Returns #t if ''obj'' is a blob, otherwise returns #f.\n")
("SRFI-110" . "(:ctime 1381734950 :cuser #f :mtime 1381734950 :muser #f)SRFI-110: SRFI Libraries\n\nhttp://srfi.schemers.org/srfi-110/srfi-110.html\n\n[[$$srfi-implementors]]\n")
("find-executable-path" . "(:ctime 1020225731 :cuser #f :mtime 1020225731 :muser #f)* [procedure] find-executable-path ''program-sub-path'' ''related-sub-path''\n\n[[MzScheme]]: \n")
("caar" . "(:ctime 1201704067 :cuser #f :mtime 1201704068 :muser #f)* [procedure] caar ''pair''\n* [procedure] cadr ''pair''\n* [procedure] cdar ''pair''\n* [procedure] cddr ''pair''\n\n[[R5RS]], [[R6RS]]: (car (car ''pair'')) etc.\n\n\n")
("pretty-initial-indent" . "(:ctime 1014960070 :cuser #f :mtime 1014960070 :muser #f)* [procedure] pretty-initial-indent [''newval'']\n\n[[ChezScheme]]: a parameter for [[pretty-print]]\n")
("process-fork" . "(:ctime 1015185132 :cuser #f :mtime 1015285393 :muser #f)* [procedure] process-fork [''thunk'']\n\n[[Chicken]]: fork(2).  See also [[process-execute]], [[process-run]],\n[[process-wait]].\n\nSee also [[Concept:Process]].\n\nScheme48 has [[fork]].\n\nGauche has [[sys-fork]].\n")
("open-output-pipe" . "(:ctime 1015105826 :cuser #f :mtime 1015105826 :muser #f)[[$$include open-input-pipe]]\n")
("file-truncate" . "(:ctime 1015200654 :cuser #f :mtime 1015200654 :muser #f)* [procedure] file-truncate ''filename-or-fd'' ''offset''\n\n[[Chicken]].\n")
("vector-resize" . "(:ctime 1018333692 :cuser #f :mtime 1464705070 :muser #f)* [procedure] vector-resize ''vector'' ''size''\n\n[[STk]]: Resize vector.\n\nSCM has [[vector-set-length!]].\n\n* [procedure] vector-resize ''vector'' ''size'' [''fill'']\n\n[[STklos]],[[Chicken]]: Resize vector.\n")
("supported-character-encodings" . "(:ctime 1015773203 :cuser #f :mtime 1015773203 :muser #f)* [procedure] supported-character-encodings\n\n[[Gauche]]\n")
("random-source-make-integers" . "(:ctime 1038272937 :cuser #f :mtime 1038272937 :muser #f)* [procedure] random-source-make-integers ''source''\n\n[[SRFI-27]]: Returns a procedure that generates random\nintegers, using random source ''source''.\nSee also [[random-source-make-reals]].\n")
("string-split-fields" . "(:ctime 1015104976 :cuser #f :mtime 1015104976 :muser #f)* [procedure] string-split-fields ''regexp'' ''string'' [''mode'' ''start'']\n\n[[Chicken]]: see [[Concept:RegularExpression]].\n")
("file-permissions" . "(:ctime 1015196846 :cuser #f :mtime 1037014854 :muser #f)* [procedure] file-permissions ''pathname''\n\n[[Chicken]]: returns permission bits.  See [[perm/irusr]] etc.\nSee also [[Concept:FileSystem]], [[file-read-access?]],\n[[file-write-access?]], [[file-execute-access?]].\n\nOther implementations have [[file-mode]].\n")
("print-length" . "(:ctime 1014960326 :cuser #f :mtime 1014960326 :muser #f)* [procedure] print-length [''newval'']\n\n[[ChezScheme]]: a parameter for [[write]] and [[pretty-print]]\n")
("#2=" . "(:ctime 1416209916 :cuser #f :mtime 1416209916 :muser #f)* [reader syntax] #''digits''=\n\n[[SRFI-38]]: Shared structure definition.  The next item of this syntax\ncan be referred afterwards by [[#0=]](,[[#1=]],[[#2=]]...[[#n=]].)\n")
("make-signal-queue" . "(:ctime 1020374756 :cuser #f :mtime 1020374756 :muser #f)* [procedure] make-signal-queue ''signals''\n\n[[Scheme48]]: signals are queued by Scheme system and\ncan be retrieved explicitly by the Scheme program.\nThis creates a new signal queue monitoring signals\nlisted in ''signals''.\n\nSee also [[signal-queue?]], [[signal-queue-monitored-signals]],\n[[dequeue-signal!]], [[maybe-dequeue-signal!]],\n[[add-signal-queue-signal!]], [[remove-signal-queue-signal!]].\n\nAbout signal objects, see [[name->signal]], [[integer->signal]].\n")
("vector-reverse-copy" . "(:ctime 1099360738 :cuser #f :mtime 1099360739 :muser #f)* [procedure] vector-reverse-copy ''vector'' [''start'' ''end'']\n\n[[SRFI-43]]: copies the vector ''vector'' in reverse order.\nSee also [[vector-copy]].\n")
("letrec-syntax" . "(:ctime 1014855352 :cuser #f :mtime 1191844167 :muser #f)* [syntax] letrec-syntax ((''keyword'' ''transformer-spec'') ...) ''body''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[let-syntax]], [[define-syntax]].\n")
("string-split" . "(:ctime 1015074856 :cuser #f :mtime 1358892664 :muser #f)* [procedure] string-split ''string'' [''delimiter-string'' ''keepempty'']\n\n[[Chicken]]: ''delimiter-string'' works like a character set.\n\nExample: (string-split \"/var/tmp/archive.tar.gz\" \"./\" ) => (\"var\" \"tmp\" \"archive\" \"tar\" \"gz\")\n\n* [procedure] string-split ''string'' [''delimiter-string'']\n\n[[STklos]], [[Bigloo]]: ''delimiter-string'' works like a character set.\nIf omitted, whitespace characters are assumed.\n\nNote: STk has [[split-string]].\n\n* [procedure] string-split ''string'' ''delim''\n\n[[Gauche]]: ''delim'' can be a character, a char-set,\na string, a regexp, or a predicate procedure that takes a\ncharacter.\n\n* [procedure] string-split ''string'' ''char''\n\n[[Guile]]: accepts only a character as a delimiter.\n")
("call-with-output-pipe" . "(:ctime 1015105792 :cuser #f :mtime 1015105800 :muser #f)[[$$include call-with-input-pipe]]\n")
("socket-local-address" . "(:ctime 1018343165 :cuser #f :mtime 1099738639 :muser #f)* [procedure] socket-local-address ''socket''\n\n[[STk]], [[STklos]]: returns a string that contains the IP address\nof the locak host attached to ''socket''.\nSee also [[make-client-socket]], [[make-server-socket]],\n[[socket-host-name]], [[socket-host-address]].\n\nGauche has [[socket-address]], similar but returns an address object.\n")
("SRFI-61" . "(:ctime 1122429233 :cuser #f :mtime 1145787395 :muser #f)SRFI 61: A more general cond clause\n\nhttp://srfi.schemers.org/srfi-61/srfi-61.html\n\n[[$$srfi-implementors]]\n----\n\n[[cond]]\n")
("#." . "(:ctime 1018332903 :cuser #f :mtime 1018332903 :muser #f)* [reader syntax] #.''expr''\n\n[[STk]]: is read as the evaluation of the Scheme expression\n''expr''.\n\nSee also [[#,]].\n")
("eps-expand-once" . "(:ctime 1014965846 :cuser #f :mtime 1014965846 :muser #f)* [procedure] eps-expand-once ''obj'' [''env-spec'']\n\n[[ChezScheme]]\n\nSee also [[eps-expand]], [[current-expand]], [[expand]]\n")
("&i/o-no-such-file-error" . "(:ctime 1099273807 :cuser #f :mtime 1099273807 :muser #f)* [condition-type] &i/o-no-such-file-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-no-such-file-error &i/o-filename-error\n  i/o-no-such-file-error?)\n}}}\n\nSee [[&condition]], [[&i/o-filename-error]].\n")
("string-prefix-length" . "(:ctime 1014893049 :cuser #f :mtime 1014893049 :muser #f)* [procedure] string-prefix-length ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-prefix?]], [[string-suffix-length]]\n")
("condition-variable-specific" . "(:ctime 1015927707 :cuser #f :mtime 1015963698 :muser #f)* [procedure] condition-variable-specific ''cv''\n* [procedure] condition-variable-specific-set! ''cv'' ''obj''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("append-map" . "(:ctime 1014868437 :cuser #f :mtime 1014868437 :muser #f)* [procedure] append-map ''f'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Equivalent to (apply append (map f clist1 clist2 ...)) \n\nSee also [[append-map!]].\n")
("char-upcase" . "(:ctime 1014840545 :cuser #f :mtime 1192066299 :muser #f)* [procedure] char-upcase ''char''\n\n[[R5RS]], [[R6RS]]\n\nIn R6RS, the character case conversion routines ([[char-upcase]],\n[[char-downcase]], [[char-titlecase]], and [[char-foldcase]]) give\nan approximation of locale-independent case conversion.\n(see [http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-2.html#node_sec_1.1 R6RS library document] for more details).\n\nSee also [[char-downcase]].\n")
("hash-table-copy" . "(:ctime 1144494246 :cuser #f :mtime 1144495450 :muser #f)* [procedure] hash-table-copy ''hash-table''\n\n[[SRFI-69]]: Returns a new hash table with the same equivalence predicate, hash\nfunction and mappings as in ''hash-table''.\n")
("fileno/stdin" . "(:ctime 1015106187 :cuser #f :mtime 1015106187 :muser #f)* [variable] fileno/stdin\n* [variable] fileno/stdout\n* [variable] fileno/stderr\n\n[[Chicken]]\n\n\n")
("name->user-info" . "(:ctime 1018124560 :cuser #f :mtime 1018124560 :muser #f)[[$$include user-id->user-info]]\n")
("errobj" . "(:ctime 1015883761 :cuser #f :mtime 1015883761 :muser #f)* [variable] errobj\n\n[[SCM]]: keeps the object that caused the most recent error.\n")
("pointer?" . "(:ctime 1015273989 :cuser #f :mtime 1015273989 :muser #f)* [procedure] pointer? ''obj''\n\n[[Chicken]]: see [[address->pointer]].\n")
("input-virtual-port?" . "(:ctime 1018334137 :cuser #f :mtime 1018334137 :muser #f)* [procedure] input-virtual-port? ''obj''\n* [procedure] output-virtual-port? ''obj''\n\n[[STk]]: see also [[input-string-port?]], [[input-file-port?]], etc.\n\n")
("byte-vector" . "(:ctime 1015275438 :cuser #f :mtime 1017981581 :muser #f)* [procedure] byte-vector ''fixnum'' ...\n\n[[Chicken]]: byte vector.  See also [[byte-vector?]], [[byte-vector-fill!]],\n[[byte-vector->list]], [[list->byte-vector]], [[byte-vector-length]],\n[[byte-vector-ref]], [[byte-vector-set!]], [[executable-byte-vector->procedure]],\n[[make-byte-vector]], [[make-executable-byte-vector]], \n[[make-static-byte-vector]], [[static-byte-vector->pointer]].\n\n[[Scheme48]]: byte vector.  See also [[byte-vector?]],\n[[make-byte-vector]], [[byte-vector-length]],\n[[byte-vector-ref]], [[byte-vector-set!]].\n\nSee also [[SRFI-4]].\n")
("make-integer-table" . "(:ctime 1017984743 :cuser #f :mtime 1017984743 :muser #f)[[$$include make-table]]\n")
("ucs2-string-ci>?" . "(:ctime 1039428123 :cuser #f :mtime 1039428123 :muser #f)[[$$include ucs2-string-ci=?]]\n")
("thread-start!" . "(:ctime 1015927351 :cuser #f :mtime 1015928241 :muser #f)* [procedure] thread-start! ''thread''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("load-foreign" . "(:ctime 1014925849 :cuser #f :mtime 1014926047 :muser #f)* [procedure] load-foreign ''files'' [''libraries'']\n\n[[ChezScheme]]: Links given object (.o) files ''files''.\n''Libraries'' defaults to [[default-foreign-libraries]].\n\nSee also [[load-shared-object]], [[foreign-procedure]].\n")
("macroexpand-1" . "(:ctime 1015069869 :cuser #f :mtime 1015069869 :muser #f)[[$$include macroexpand]]\n")
("rewind-file-port" . "(:ctime 1099726745 :cuser #f :mtime 1099726764 :muser #f)* [procedure] rewind-file-port ''port''\n\n[[STklos]]: sets the position of ''port'' to the beginning of the file.\nUse [[port-current-position]] to get the current position.\n\nSome implementations have more flexible version of this.\nSee [[seek]], [[set-file-position!]], [[port-seek]].\n")
("socket-accept-connection" . "(:ctime 1018343328 :cuser #f :mtime 1099740601 :muser #f)* [procedure] socket-accept-connection ''socket''\n\n[[STk]]: waits for a client to connect to the server\nsocket ''socket'', and accepts it.\nSee also [[make-server-socket]].\n\nThis is called [[socket-accept]] in some implementations, including STklos.\n\n")
("#0#" . "(:ctime 1416210004 :cuser #f :mtime 1416210004 :muser #f)* [reader syntax] #''digits''#\n\n[[SRFI-38]]: Shared structure reference.  Refer to the object\ndefined by [[#0#]](,[[#1#]],[[#2#]]...[[#n#]].)\n")
("string->char-set" . "(:ctime 1018084406 :cuser #f :mtime 1018084406 :muser #f)* [procedure] string->char-set ''string'' [''base-cs'']\n* [procedure] string->char-set! ''string'' ''base-cs''\n\n[[SRFI-14]]: charset constrctor/updator.\nSee also [[char-set]].\n")
("SRFI-39" . "(:ctime 1099277849 :cuser #f :mtime 1122428803 :muser #f)SRFI-39: Parameter objects\n\nhttp://srfi.schemers.org/srfi-39/srfi-39.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[make-parameter]]\n\n[[parameterize]]\n")
("user-info-shell" . "(:ctime 1018125275 :cuser #f :mtime 1018125275 :muser #f)[[$$include user-info?]]\n")
("record-field-mutable?" . "(:ctime 1014948590 :cuser #f :mtime 1014948590 :muser #f)* [procedure] record-field-mutable? ''rtd'' ''field-name''\n\n[[ChezScheme]]\n\nSee also [[make-record-type]], [[define-record]]\n")
("setter" . "(:ctime 1015017195 :cuser #f :mtime 1015017195 :muser #f)* [procedure] setter ''obj''\n\n[[SRFI-17]]\n\nSee also [[set!]], [[getter-with-setter]]\n")
("list-file" . "(:ctime 1015889607 :cuser #f :mtime 1015889607 :muser #f)* [procedure] list-file ''filename''\n\n[[SCM]]: displays the contents of ''filename''\n")
("socket-dup" . "(:ctime 1018343549 :cuser #f :mtime 1018343549 :muser #f)* [procedure] socket-dup ''socket''\n\n[[STk]]: returns a copy of ''socket''.\nSee [[make-server-socket]].\n")
("queue?" . "(:ctime 1015071740 :cuser #f :mtime 1017980725 :muser #f)* [procedure] queue? ''obj''\n\n[[Chicken]], [[Gauche]], [[SLIB]], [[Scheme48]]\n")
("pathname-directory" . "(:ctime 1015100480 :cuser #f :mtime 1018337565 :muser #f)[procedure] pathname-directory ''pathname''\n\n[[Chicken]]: see also [[pathname-file]], [[pathname-extension]],\n[[decompose-pathname]], [[pathname-replace-directory]].\n\nSome implementations call this\n[[dirname]], [[sys-dirname]], [[file-name-directory]].\n\n")
("sys-alarm" . "(:ctime 1038310575 :cuser #f :mtime 1038310575 :muser #f)* [procedure] sys-alarm ''seconds''\n\n[[Gauche]]: POSIX alarm().  Arrange SIGALARM to be delivered\nafter ''seconds''.  Cancel the setting if ''seconds'' is zero.\nSee also [[sys-pause]].\n\nSCM has [[alarm]].\n")
("let" . "(:ctime 1014855144 :cuser #f :mtime 1191209304 :muser #f)* [syntax] let ((''variable'' ''expression'') ...) ''body''\n* [syntax] let ''name'' ((''variable'' ''expression'') ...) ''body''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[let*]], [[letrec]].\n\n* [syntax] let ''name'' ((''parameter'' ''argument'') ... . (''rest-parameter'' ''rest-argument'')) ''body''\n* [syntax] let (''name'' (''parameter'' ''argument'') ... [. (''rest-parameter'' ''rest-argument'')]) ''body''\n\n[[SRFI-5]] extends named-let to allow signature style, and rest argument.\n\n")
("process-id-exit-status" . "(:ctime 1015282877 :cuser #f :mtime 1015282877 :muser #f)* [procedure] process-id-exit-status ''process-id''\n* [procedure] process-id-terminating-signal ''process-id''\n\n[[Scheme48]]: queries about the exit condition of the child process.\nSee also [[fork]], [[wait-for-child-process]], [[process-id?]]\n\nSome implementations provide procedures that queries the exit\nstatus returned by wait() or waitpid().\nSee [[wait]], [[sys-wait]], [[process-wait]].\n")
("hash-table-set!" . "(:ctime 1015071328 :cuser #f :mtime 1144494196 :muser #f)* [procedure] hash-table-set! ''hash-table'' ''key'' ''value''\n\n[[SRFI-69]]: This procedure sets the ''value'' associated to ''key''\nin ''hash-table''.\nThe previous association (if any) is removed.\n\n* [procedure] hash-table-set! ''hash-table'' ''key'' ''value''\n\n[[Chicken]]\n\nThis is called [[hash-table-put!]] in some implementations.\n")
("string-replace" . "(:ctime 1014895013 :cuser #f :mtime 1014895013 :muser #f)* [procedure] string-replace ''s1'' ''s2'' ''start1'' ''end1'' [''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-copy!]]\n")
(">=/>?" . "(:ctime 1144494246 :cuser #f :mtime 1144503649 :muser #f)[[$$include </<?]]\n")
("SRFI-29" . "(:ctime 1036934752 :cuser #f :mtime 1122428725 :muser #f)SRFI-29: Localization\n\nhttp://srfi.schemers.org/srfi-29/srfi-29.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[current-language]], [[current-country]],\n[[current-locale-details]]\n\n[[declare-bundle!]], [[store-bundle]], [[load-bundle!]]\n\n[[localized-template]]\n\n[[format]]\n\n----\nSome implementations also provide [[gettext]] interface, which may be\nan alternative to [[SRFI-29]].\n")
("string-reverse" . "(:ctime 1014894506 :cuser #f :mtime 1015074756 :muser #f)* [procedure] string-reverse ''s'' [''start'' ''end'']\n* [procedure] string-reverse! ''s'' [''start'' ''end'']\n\n[[SRFI-13]], [[Chicken]]\n\n\n")
("vector-of-length-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535528 :muser #f)* [syntax] vector-of-length-ec ''k'' ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe vector of all values of ''expression'', of which there must be exactly\n''k''. This comprehension behaves like [[vector-ec]] but can be implemented more\nefficiently.\n")
("sys-getppid" . "(:ctime 1038190111 :cuser #f :mtime 1038190111 :muser #f)[[$$include sys-getpid]]\n")
("ucs2-whitespace?" . "(:ctime 1039429474 :cuser #f :mtime 1039429474 :muser #f)[[$$include ucs2-alphabetic?]]\n")
("flabs" . "(:ctime 1014952614 :cuser #f :mtime 1191227817 :muser #f)* [procedure] flabs ''flonum''\n\n[[R6RS]], [[ChezScheme]]\n\nSee also [[flonum?]], [[abs]], [[fxabs]]\n")
("intersperse" . "(:ctime 1015070690 :cuser #f :mtime 1184741056 :muser #f)* [procedure] intersperse ''list'' ''x''\n[[Chicken]]\n\n* [procedure] intersperse ''x'' ''list''\n[[Gauche]]:\n\n{{{\ngosh> (use util.list)\n#<undef>\ngosh> (intersperse 'x '(a b c))\n(a x b x c)\n}}}\n")
("#!key" . "(:ctime 1161187076 :cuser #f :mtime 1161201295 :muser #f)* [constant] #!key\n\n[[Kawa]]: a special constant. used in lambda list to mark keyword arguments.\n\nSee also [[#!optional]], [[#!rest]].\n")
("output-file-port?" . "(:ctime 1018334087 :cuser #f :mtime 1018334087 :muser #f)[[$$include input-file-port?]]\n")
("au16" . "(:ctime 1099398107 :cuser #f :mtime 1099398107 :muser #f)[[$$include ac64]]\n")
("fxarithmetic-shift-right" . "(:ctime 1191225695 :cuser #f :mtime 1191225695 :muser #f)[[$$include fxarithmetic-shift]]\n")
("sstats-gc-real" . "(:ctime 1015028875 :cuser #f :mtime 1015028875 :muser #f)* [procedure] sstats-gc-real ''sstats''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[set-sstats-gc-real!]].\n")
("char-set-for-each" . "(:ctime 1039168982 :cuser #f :mtime 1039168982 :muser #f)* [procedure] char-set-for-each ''proc'' ''char-set''\n\n[[SRFI-14]]: apply ''proc'' to each character in ''char-set''.\nSee also [[char-set-fold]], [[char-set-map]].\n")
("interactive-port?" . "(:ctime 1099726138 :cuser #f :mtime 1099726184 :muser #f)* [procedure] interactive-port? ''port''\n\n[[STklos]]: returns #t if ''port'' is connected to a terminal.\n\nThis is called [[isatty?]], [[sys-isatty]], [[terminal-port?]], \nor [[port-is-a-terminal?]]\nin some implementations.\n")
("option-names" . "(:ctime 1099274391 :cuser #f :mtime 1099274391 :muser #f)* [procedure] option-names ''option''\n* [procedure] option-required-arg? ''option''\n* [procedure] option-optiona-arg? ''option''\n* [procedure] option-processor ''option''\n\n[[SRFI-37]]: Accessors of option structure.  See [[option]].\nSee also [[args-fold]].\n")
("boolean-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499071 :muser #f)* [procedure] boolean-compare ''b1'' ''b2''\n[[SRFI-67]]: Compares two booleans, ordered by #f < #t.\n\nNote: A non-#f value is ''not'' interpreted as a ''true value,'' but rather\nan error will be signalled.\n")
("get-effective-user-id" . "(:ctime 1015138629 :cuser #f :mtime 1015138629 :muser #f)[[$$include get-user-id]]\n")
("#!rest" . "(:ctime 1100321328 :cuser #f :mtime 1100321330 :muser #f)[[$$include #!optional]]\n")
("coerce-to" . "(:ctime 1099651278 :cuser #f :mtime 1099651278 :muser #f)* [generic] coerce-to ''class'' ''collection''\n\n[[Gauche]]: generic converter for cllections.\nSee also [[map-to]], [[filter-to]], etc.\n")
("chmod" . "(:ctime 1039755359 :cuser #f :mtime 1099741436 :muser #f)* [procedure] chmod ''filename'' ''option'' ...\n\n[[Bigloo]], [[STklos]]: change file mode.  ''option'' can be \nsymbols consisted of read, write, or execute.\nSee also [[Concept:FileSystem]].\n\nOther implementations call this\n[[change-file-mode]], [[sys-chmod]], or [[set-file-mode]].\n")
("queue-front" . "(:ctime 1015072341 :cuser #f :mtime 1015072341 :muser #f)* [procedure] queue-front ''queue''\n\n[[SLIB]], [[Gauche]]: see [[make-queue]].\n\nThis is called [[queue-first]] in some implementations.\n")
("string-suffix?" . "(:ctime 1014893164 :cuser #f :mtime 1014893164 :muser #f)* [procedure] string-suffix? ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-prefix?]], [[string-suffix-length]]\n")
("cons*" . "(:ctime 1014861684 :cuser #f :mtime 1014861684 :muser #f)* [procedure] cons* ''elt1'' ''elt2'' ...\n\n[[SRFI-1]]: Like [[list]], but the last argument provides \nthe tail of the constructed list.\nThis function is called [[list*]] in Common Lisp and about half of the \nSchemes that provide it, and cons* in the other half. \n\nSee also [[list*]].\n")
("fxremainder" . "(:ctime 1014950815 :cuser #f :mtime 1191225090 :muser #f)[[$$include fxquotient]]\n")
("copy-file" . "(:ctime 1020222179 :cuser #f :mtime 1099741325 :muser #f)* [procedure] copy-file ''srcpath'' ''dstpath''\n\n[[MzScheme]]: copies file.  fails if the destination\nalready exists.\n\n* [procedure] copy-file ''srcpath'' ''dstpath''\n\n[[STklos]]: copies file.  if ''dstpath'' exists, it is overwritten.\n\n\n* [procedure] copy-file ''src'' ''dst'' &keyword ''if-exists'' ''backup-suffix'' ''safe'' ''keep-timestamp''\n\n[[Gauche]]: copies file.  you can customize behavior by\nkeyword arguments.  See also [[move-file]].\n")
("</<=?" . "(:ctime 1144494246 :cuser #f :mtime 1144503587 :muser #f)[[$$include </<?]]\n")
("random-real" . "(:ctime 1038272805 :cuser #f :mtime 1038272805 :muser #f)* [procedure] random-real\n\n[[SRFI-27]]: renturns a random real number in (''0'', ''1'').\nSee also [[random-integer]].\n\n")
("date->time-tai" . "(:ctime 1099300872 :cuser #f :mtime 1099300872 :muser #f)[[$$include date->julian-day]]\n")
("compare-by>=" . "(:ctime 1144494246 :cuser #f :mtime 1144504996 :muser #f)[[$$include compare-by<]]\n")
("call/fdes" . "(:ctime 1018391124 :cuser #f :mtime 1018391124 :muser #f)* [procedure] call/fdes ''fd/port'' ''consumer''\n\n[[Scsh]]: calls ''consumer'' on a file descrptor,\nkeeping track of port's revealed count.\nSee also [[port-revealed]].\n")
("time<?" . "(:ctime 1015317889 :cuser #f :mtime 1015317889 :muser #f)[[$$include time=?]]\n")
("arity" . "(:ctime 1019624881 :cuser #f :mtime 1022544054 :muser #f)* [procedure] arity ''procedure''\n\n[[MzScheme]], [[Gauche]]: returns information about the number of\narguments accepted by the ''procedure''.  Returns either\n(1) an exact non-negative integer, (2) struct arity-at-least,\nor (3) a list of integers and arity-at-least structures.\n\nSee also [[arity-at-least-value]], [[procedure-arity-includes?]].\n")
("signal" . "(:ctime 1026112788 :cuser #f :mtime 1026112788 :muser #f)* [procedure] signal ''signum'' ''proc''\n\n[[Bigloo]]: sets signal handler ''proc'' (one argument procedure) as a signal handler of ''signum''.\n\nOther implementations have [[set-signal-handler!]].\n")
("length" . "(:ctime 1014855067 :cuser #f :mtime 1191314559 :muser #f)* [procedure] length ''list''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[length+]].\n")
("byte-vector?" . "(:ctime 1015275459 :cuser #f :mtime 1017981485 :muser #f)* [procedure] byte-vector? ''obj''\n\n[[Chicken]], [[Scheme48]]: see [[byte-vector]].\n")
("defined?" . "(:ctime 1418333084 :cuser #f :mtime 1418333084 :muser #f)* [procedure] defined? ''symbol''\n\n[[MzScheme]], [[SCM]].\n")
("alarm-interrupt" . "(:ctime 1038310481 :cuser #f :mtime 1038310481 :muser #f)* [procedure] alarm-interrupt\n\n[[SCM]]: callback procedure.  Called when alarm clock\nset by [[alarm]] expires.\n\n")
("julian-day->date" . "(:ctime 1099300969 :cuser #f :mtime 1099300969 :muser #f)* [procedure] julian-day->date ''number'' [''tz-offset'']\n* [procedure] julian-day->time-monotonic ''number''\n* [procedure] julian-day->time-tai ''number''\n* [procedure] julian-day->time-utc ''number''\n\n[[SRFI-19]]: Converts julian day number to date or time object.\nSee also [[make-date]] and [[make-time]].\n")
("create-temp-file" . "(:ctime 1018346655 :cuser #f :mtime 1018346655 :muser #f)* [procedure] create-temp-file [''prefix'']\n\n[[Scsh]]: creates a new temporary file.\nSee also [[temp-file-iterate]].\n\nThis is called [[create-temporary-file]],\n[[temporary-file-name]] or [[sys-tmpnam]]\nin some implementations.\n")
("string-set!" . "(:ctime 1014859769 :cuser #f :mtime 1191220952 :muser #f)* [procedure] string-set! ''string'' ''k'' ''char''\n\n[[R5RS]]: ''k'' must be a valid index of ''string''. \nString-set! stores ''char'' in element ''k'' \nof ''string'' and returns an unspecified value. \n\n[[R6RS]]: In R6RS, this procedure is moved to a library \n'''(rnrs mutable-strings (6))''', which is ''not'' included \nin the composite library '''(rnrs (6))'''.\n\nSee also [[string-ref]].\n")
("create-hard-link" . "(:ctime 1018345803 :cuser #f :mtime 1018345841 :muser #f)* [procedure] create-hard-link ''oldname'' ''newname'' [''override?'']\n\n[[Scsh]]: creates hard link.  See also [[Concept:FileSystem]].\n\nThis is called [[link]] or [[sys-link]] in some\nimplementations.\n")
("string>" . "(:ctime 1015063931 :cuser #f :mtime 1015063931 :muser #f)[[$$include string=]]\n")
("void?" . "(:ctime 1018692588 :cuser #f :mtime 1018692588 :muser #f)* [procedure] void? ''obj''\n\n[[MzScheme]]: returns #t if ''obj'' is a void value.\nSee [[void]].\n")
("hash-table-fold" . "(:ctime 1045089315 :cuser #f :mtime 1144495217 :muser #f)* [procedure] hash-table-fold ''hash-table'' ''f'' ''init-value''\n\n[[SRFI-69]]: This procedure calls ''f'' for every association in ''hash-table'' with three arguments: the key of the association key, the value of the association value, and an `accumulated value', val. val is ''init-value'' for the first invocation of ''f'', and for subsequent invocations of ''f'', the return value of the previous invocation of ''f''. The value final-value returned by [[hash-table-fold]] is the return value of the last invocation of ''f''. The order in which ''f'' is called for different associations is unspecified.\n\n* [procedure] hash-table-fold ''hash-table'' ''kons'' ''knil''\n\n[[Gauche]]: The procedure ''kons'' is called like \n\n (''kons'' ''key'' ''value'' ''accrued'')\n\nfor each ''key''/''value'' in the ''hash-table'', and its result\nis passed to the ''accrued'' argument of the next call of ''kons''.\n\nSee also [[hash-table-for-each]], [[hash-table-map]], [[make-hash-table]].\n")
("subst!" . "(:ctime 1014945220 :cuser #f :mtime 1014945220 :muser #f)* [procedure] subst! ''new'' ''old'' ''tree''\n\n[[ChezScheme]]: linear update variant of [[subst]].\n\nSee also [[subst]], [[substq!]], [[substv!]]\n")
("set-file-owner" . "(:ctime 1018346310 :cuser #f :mtime 1018346310 :muser #f)[[$$include set-file-mode]]\n")
("flo" . "(:ctime 1152518355 :cuser #f :mtime 1152525478 :muser #f)* [format descriptor] flo [''n'']\n[[RRRS]], [[R3RS]]: express with a floating radix point. ''n'' specifies the total number of places to be displayed. ''n'' defaults to the size of a single-precision flonum. If the number is out of range, it is converted to (sci). (flo h) expresses ''n'' in floating point format heuristically for human consumption.\n\nSee also [[sci]] and [[number->string]].\n")
("fdes->inport" . "(:ctime 1018390731 :cuser #f :mtime 1018390731 :muser #f)* [procedure] fdes->inport ''fd''\n* [procedure] fdes->outport ''fd''\n\n[[Scsh]]: returns a port that reads from/writes to the\ngiven file descriptor. \nSee also [[port->fdes]]\n")
("real-ln" . "(:ctime 1170264990 :cuser #f :mtime 1170267339 :muser #f)* real-ln ''x''\n\n[[SRFI-94]]: returns natural logarithm of ''x''. same as [[R5RS]] [[log]]. signals error if ''x'' is not real or the result is not real.\n\nSee also [[real-log]].\n")
("ucs2-numeric?" . "(:ctime 1039429467 :cuser #f :mtime 1039429467 :muser #f)[[$$include ucs2-alphabetic?]]\n")
("char>?" . "(:ctime 1015062454 :cuser #f :mtime 1015062454 :muser #f)[[$$include char=?]]\n")
("char-compare" . "(:ctime 1144494246 :cuser #f :mtime 1144499159 :muser #f)* [procedure] char-compare c1 c2\n[[SRFI-67]]: Compare characters as [[char<=?]].\n")
("test-equal" . "(:ctime 1151049296 :cuser #f :mtime 1151074084 :muser #f)* [syntax] test-equal [''test-name''] ''expected'' ''test-expr''\n\n[[SRFI-64]]: equivalent to\n (test-assert [''test-name''] (equal? ''expected'' ''test-expr''))\n\nSee also [[test-assert]].\n")
("char-whitespace?" . "(:ctime 1014840864 :cuser #f :mtime 1014840864 :muser #f)* [procedure] char-whitespace? ''char''\n\n[[R5RS]]\n\nSee also [[char-alphabetic?]], [[char-numeric?]].\n")
("test-skip" . "(:ctime 1151049296 :cuser #f :mtime 1151077388 :muser #f)* [syntax] test-skip ''specifier''\n\n[[SRFI-64]]: adds ''specifier'' to current active skip specifier list.\nBefore each test, each specifier in current active specifier list is applied to current test runner.\nIf any specifier matches, then the test is skipped.\n\nSee also [[test-match-name]], [[test-match-nth]], [[test-match-any]], [[test-match-all]] and [[test-expect-fail]].\n")
("dequeue-signal!" . "(:ctime 1020374904 :cuser #f :mtime 1020374904 :muser #f)* [procedure] dequeue-signal! ''signal-queue''\n* [procedure] maybe-dequeue-signal! ''signal-queue''\n\n[[Scheme48]]: dequeue next signal from ''signal-queue''.\ndequeue-signal! blocks if the queue is empty, while\nmaybe-dequeue-signal! returns #f in such a case.\nSee [[make-signal-queue]].\n")
("close-directory-stream" . "(:ctime 1018126356 :cuser #f :mtime 1018126356 :muser #f)[[$$include open-directory-stream]]\n")
("SRFI-71" . "(:ctime 1124524891 :cuser #f :mtime 1145787633 :muser #f)SRFI-71: Extended LET-syntax for multiple values\n\nhttp://srfi.schemers.org/srfi-71/srfi-71.html\n\n[[$$srfi-implementors]]\n----\n\n[[let]], [[let*]], [[letrec]]\n\n[[uncons]], [[uncons-2]], [[uncons-3]], [[uncons-4]], [[uncons-cons]],\n[[unlist]], [[unvector]]\n\n[[values->list]], [[values->vector]]\n")
("load-shared-object" . "(:ctime 1014925535 :cuser #f :mtime 1014925535 :muser #f)* [procedure] load-shared-object ''filename''\n\n[[ChezScheme]]: loads the shared object ''filename''.\n\nGauche calls this procedure [[dynamic-load]].\n\nSee also [[foreign-procedure]].\n")
("with-stdio-ports*" . "(:ctime 1018382361 :cuser #f :mtime 1018382361 :muser #f)* [procedure] with-stdio-ports* ''thunk''\n* [syntax] with-stdio-ports ''body'' ...\n\n[[Scsh]]: sets Scheme's standard ports to be\nthe Unix stdin, stdout and stderr, then calls ''thunk''\nor evaluates ''body'' ....\nSee also [[stdio->stdports]].\n")
("ticks" . "(:ctime 1038310235 :cuser #f :mtime 1038310340 :muser #f)* [procedure] ticks ''n''\n\n[[SCM]]: If ''n'' > 0, arrange that [[ticks-interrupt]]\nwill be called after ''n'' ticks.  If ''n'' is zero,\ncancel the tick callback setting.\nSee also [[alarm]].\n\n")
("rename-file" . "(:ctime 1015051217 :cuser #f :mtime 1099741256 :muser #f)* [procedure] rename-file ''old'' ''new''\n\n[[Bigloo]], [[Chicken]], [[Scsh]], [[STk]], [[STklos]]:\nSee [[Concept:FileSystem]].\n\nThis is called [[rename]], [[rename-file-or-directory]] or [[sys-rename]]\nin some implementations.\n")
("radix" . "(:ctime 1152518355 :cuser #f :mtime 1152526182 :muser #f)* [format descriptor] radix ''r'' [''s'']\n[[RRRS]], [[R3RS]]: forces a number to be expressed in the radix ''r''. ''r'' may be the symbol 'B (binary), 'O (octal), 'D (decimal), or 'X (hex). ''s'' must be a symbol, either 'E or 'S, indicating whether the radix prefix is to be expressed or suppressed, respectively. ''s'' defaults to 'E (expressed). If no radix modifier is specified then the default is decimal and the prefix is suppressed.\n\nSee also [[number->string]].\n")
("modulo" . "(:ctime 1014856551 :cuser #f :mtime 1191220103 :muser #f)* [procedure] modulo ''n1'' ''n2''\n\n[[R5RS]]\n\n[[SRFI-94]]: If ''n1'' is not an exact integer, or if ''n2'' is not an exact non-zero integer, an error is signaled.\n\nIn [[R6RS]] this procedure is in R5RS compatibility library.  You may want to use [[mod]] or [[mod0]] instead.\n\nSee also [[quotient]], [[remainder]].\n")
("condition-variable-broadcast!" . "(:ctime 1015927768 :cuser #f :mtime 1015963721 :muser #f)* [procedure] condition-variable-broadcast! ''cv''\n\n[[SRFI-18]], [[SRFI-21]]\n")
("define-library-implementation" . "(:ctime 1015048887 :cuser #f :mtime 1015048958 :muser #f)* [syntax] define-library-implementation ''name'' ''clause'' ...\n\n[[Chicken]]: (define-module ''name'' (unit ''name'') ''clause'' ...)\n\nSee [[define-module]], [[define-library-interface]].\n\n")
("thread-base-priority-set!" . "(:ctime 1015928149 :cuser #f :mtime 1015928149 :muser #f)[[$$include thread-base-priority]]\n")
("set-time-second!" . "(:ctime 1015209961 :cuser #f :mtime 1015209961 :muser #f)[[$$include time-second]]\n")
("read-error-column" . "(:ctime 1099273941 :cuser #f :mtime 1099273941 :muser #f)[[$$include read-error?]]\n")
("string-contains-ci" . "(:ctime 1014894255 :cuser #f :mtime 1014894255 :muser #f)* [procedure] string-contains-ci ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-contains]]\n")
("rxmatch-cond" . "(:ctime 1015915819 :cuser #f :mtime 1015915819 :muser #f)* [syntax] rxmatch-cond ''clause'' ...\n\n[[Gauche]]: cond with regexp match.\n\nSee also [[Concept:RegularExpression]], [[rxmatch-if]], [[rxmatch-let]],\n[[rxmatch-case]].\n\nScsh calls this [[match-cond]].\n")
("SRFI-49" . "(:ctime 1122429204 :cuser #f :mtime 1145787322 :muser #f)SRFI-49: Indentation-sensitive syntax\n\nhttp://srfi.schemers.org/srfi-49/srfi-49.html\n\n[[$$srfi-implementors]]\n")
("nu" . "(:ctime 1170059543 :cuser #f :mtime 1170063615 :muser #f)* [syntax] nu ''expression'' ... ''expressions''\n\n[[SRFI-86]]:\n{{{\n(define-syntax nu\n  (syntax-rules ()\n    ((nu argument ...)\n     (lambda (f) (apply f argument ...)))))\n}}}\n")
("user" . "(:ctime 1015023636 :cuser #f :mtime 1015023636 :muser #f)* [module] user\n\n[[Gauche]]: a module that the user program are in by default.\nSee also [[scheme]], [[gauche]], [[define-module]]\n")
("ninth" . "(:ctime 1014863190 :cuser #f :mtime 1014863190 :muser #f)* [procedure] ninth ''pair''\n\n[[SRFI-1]]\n")
("load-noisily" . "(:ctime 1015069615 :cuser #f :mtime 1015069615 :muser #f)* [procedure] load-noisily ''filename'' [''eval-proc'']\n\n[[Chicken]]\n\nSee also [[load]]\n")
("pair?" . "(:ctime 1014855802 :cuser #f :mtime 1191313949 :muser #f)* [procedure] pair? ''obj''\n\n[[R5RS]], [[R6RS]]: Pair? returns #t if obj is a pair, and otherwise returns #f.\n\nSee also [[null?]], [[list?]], [[not-pair?]].\n")
("exp" . "(:ctime 1014853796 :cuser #f :mtime 1191311762 :muser #f)* [procedure] exp ''z''\n\n[[R5RS]], [[R6RS]]\n\n\n\nSee also [[log]], [[expt]].\n\n")
("find-system-path" . "(:ctime 1020225780 :cuser #f :mtime 1020225780 :muser #f)* [procedure] find-system-path kind-symbol\n\n[[MzScheme]]: returns various machine-specific\npath determined by ''kind-symbol''.\n")
("port-column" . "(:ctime 1038091401 :cuser #f :mtime 1038310132 :muser #f)* [procedure] port-column ''port''\n\n[[SCM]]: returns the current column number of ''port''.\nSee also [[port-line]], [[port-filename]].\n\nSome implementations have [[current-column]].\n")
("filter!" . "(:ctime 1014869092 :cuser #f :mtime 1014869092 :muser #f)* [procedure] filter! ''pred'' ''list''\n\n[[SRFI-1]]: linear-update variant of [[filter]].\n")
("exact->inexact" . "(:ctime 1014847977 :cuser #f :mtime 1191211557 :muser #f)* [procedure] exact->inexact ''z''\n\n[[R5RS]]\n\nIn [[R6RS]], this procedure is in the R5RS compatibility module (rnrs r5rs (6)).\nYou may use the [[inexact]] procedure instead.\n\nSee also [[inexact->exact]], [[inexact]].\n\n")
("vector-reverse-copy!" . "(:ctime 1099388835 :cuser #f :mtime 1099388835 :muser #f)* [procedure] vector-reverse-copy! ''target'' ''tstart'' ''source'' [''sstart'' ''send'']\n\n[[SRFI-43]]: Like [[vector-copy!]], but reverses elements.\n")
("set-sstats-cpu!" . "(:ctime 1015029109 :cuser #f :mtime 1015029109 :muser #f)* [procedure] set-sstats-cpu! ''sstats'' ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[sstats-cpu]].\n")
("current-drive" . "(:ctime 1020221647 :cuser #f :mtime 1020221647 :muser #f)* [procedure] current-drive\n\n[[MzScheme]]: returns the current drive (Windows only).\n")
("apply" . "(:ctime 1014838166 :cuser #f :mtime 1191570572 :muser #f)* [procedure] apply ''proc'' ''arg1'' ... ''args''\n\n[[R5RS]], [[R6RS]]\n\n\n")
("fx=?" . "(:ctime 1191225883 :cuser #f :mtime 1191225906 :muser #f)* [procedure] fx=? ''fx1'' ''fx2'' ''fx3'' ...\n* [procedure] fx<? ''fx1'' ''fx2'' ''fx3'' ...\n* [procedure] fx<=? ''fx1'' ''fx2'' ''fx3'' ...\n* [procedure] fx>? ''fx1'' ''fx2'' ''fx3'' ...\n* [procedure] fx>=? ''fx1'' ''fx2'' ''fx3'' ...\n\n[[R6RS]]: fixnum-specific comparison routines.\nSee [[fixnum?]] for other fixnum operations.\n\nSee [[fl=?]] etc. for flonum-specific versions.\n\nChezScheme and Chicken have [[fx=]] etc, and Bigloo has [[=fx]] etc.\n\n")
("foreign-callback-wrapper" . "(:ctime 1015047498 :cuser #f :mtime 1015047498 :muser #f)* [syntax] foreign-callback-wrapper ''returntype'' ''name'' ''qualifiers'' (''argtype'' ...) ''exp'')\n\n[[Chicken]]: defines an externally callable wrapper around procedure ''exp''.\nSee also [[define-external]].\n\n")
("SLIB" . "(:ctime 1014942758 :cuser #f :mtime 1413630069 :muser #f)Portable Scheme library maintained by Aubrey Jaffer.\n\nhttp://swiss.csail.mit.edu/~jaffer/SLIB\n\n[[$$srfis 0 1 2 8 9 47 59 60 61 63 96]]\n----\nThis list is based on SLIB version 3a3, released on 2006-02-13.\n\n** The library system\n\n[[provided?]], [[feature-eval]], [[provide]]\n\n[[*catalog*]], [[require]], [[require-if]], [[slib:in-catalog?]]\n\n[[catalog:read]]\n\n[[file->requires]], [[feature->requires]], [[feature->requires*]], [[file->requires*]],\n[[file->loads]], [[load->path]], [[file->definitions]], [[file->exports]],\n[[feature->export-alist]], [[feature->exports]], \n\n[[top-refs]], [[top-refs<-file]], [[exports<-info-index]]\n\n[[vet-slib]]\n\n* Universal SLIB Procedures\n\n[[with-load-pathname]]\n\n[[char-code-limit]], [[most-positive-fixnum]], [[slib:tab]], [[slib:form-feed]],\n[[software-type]], [[slib-report-version]], [[slib:report]]\n\n[[file-exists?]], [[delete-file]], [[open-file]], [[port?]], [[close-port]],\n[[call-with-open-ports]], [[tmpnam]], [[current-error-port]],\n[[force-output]], [[output-port-width]], [[output-port-height]]\n\n[[slib:load-source]], [[slib:load-compiled]], [[slib:load]], [[slib:eval]], [[slib-eval-load]],\n[[slib:warn]], [[slib:error]], [[slib:exit]],\n[[browse-url]]\n\n[[identity]], [[expt]]\n\n[[make-exchanger]]\n\n[[t]], [[nil]], [[last-pair]]\n\n** Scheme syntax extension packages\n\n[[gentemp]], [[defmacro:eval]], [[defmacro:load]], [[defmacro?]],\n[[macroexpand-1]], [[macroexpand]], [[defmacro]]\n\n[[defmacro:expand*]]\n\n[[macro:expand]], [[macro:eval]], [[macro:load]]\n\n[[define-syntax]], [[syntax-rules]]\n\n[[macwork:expand]], [[macwork:eval]], [[macwork:load]]\n\n[[synclo:expand]], [[synclo:eval]], [[synclo:load]]\n\n[[transformer]], [[make-syntactic-closure]], [[capture-syntactic-environment]]\n\n[[identifier?]], [[identifier=?]]\n\n[[syncase:expand]], [[syncase:eval]], [[syncase:load]]\n\n[[define-structure]]\n\n[[fluid-let]]\n\n[[define-operation]], [[define-predicate]], [[object]], [[object-with-ancestors]],\n[[operate-as]], [[print]], [[size]]\n\n[[setter]], [[set]], [[add-setter]],\n[[remove-setter-for]], [[define-access-operation]]\n\n\n** Textual conversion packages\n\n*** Precedence Parsing\n[[*syn-defs*]], [[*syn-ignore-whitespace*]], [[prec:define-grammar]], [[prec:parse]], \n[[tok:char-group]], [[tok:decimal-digits]], [[tok:upper-case]], [[tok:lower-case]], [[tok:whitespaces]], [[tok:bump-column]]\n[[prec:make-nud]], [[prec:make-led]],\n[[prec:delim]], [[prec:nofix]], [[prec:prefix]], [[prec:infix]], [[prec:nary]], [[prec:postfix]],\n[[prec:prestfix]], [[prec:commentfix]], [[prec:matchfix]], [[prec:inmatchfix]]\n\n*** Format\n[[format]]\n\n*** Standard Formatted I/O\n[[stdin]], [[stdout]], [[stderr]],\n[[printf]], [[fprintf]], [[sprintf]],\n[[scanf-read-list]], [[scanf]], [[fscanf]], [[sscanf]]\n\n*** Program and Arguments\n[[*argv*]], [[*optind*]], [[*optarg*]], [[getopt]],\n[[getopt--]],\n[[read-command]], [[read-options-file]],\n[[make-paramete-list]], [[paramete-list-ref]], [[remove-parameter]], [[adjoin-parameters!]],\n[[parameter-list-expand]], [[fill-empty-parameters]], [[check-parameters]], [[parameter-list->arglist]],\n[[getopt->parameter-list]], [[getopt->arglist]], \n[[filename:match??]], [[filename-match-ci??]], [[filename:substitute??]], [[filename:substitute-ci??]],\n[[replace-suffix]], [[call-with-tmpnam]],\n[[batch:initialize!]], [[*operating-system*]], [[batch:call-with-output-script]], [[batch:command]],\n[[batch:try-command]], [[batch:try-chopped-command]], [[batch:run-script]], [[batch:comment]],\n[[batch:line->file]], [[batch:delete-file]], [[batch:rename-file]], [[truncate-up-to]], [[string-join]],\n[[must-be-first]], [[must-be-last]], [[os->batch-dialect]]\n\n*** HTML\n[[html:atval]], [[html:plain]], [[html:meta]], [[html:http-equiv]], [[html:meta-refresh]],\n[[html:head]], [[html:body]], [[html:pre]], [[html:comment]]\n\n*** HTML Forms\n[[html:form]], [[html:hidden]], [[html:checkbox]], [[html:text]], [[html:text-area]], [[html:select]],\n[[html:buttons]], [[form:submit]], [[form:image]], [[form:reset]], [[form:element]], [[form:delimited]],\n[[html:delimited-list]], [[get-foreign-choices]], [[command->p-specs]]\n\n*** HTML Tables\n[[html:table]], [[html:caption]], [[html:heading]], [[html:href-heading]], [[html:linked-row-converter]],\n[[table-name->filename]], [[table->linked-html]], [[table->linked-page]]\n\n[[command:modify-table]], [[command:make-editable-table]], [[html:editable-row-converter]]\n\n[[db->html-files]], [[db->html-directory]], [[db->netscape]]\n\n*** HTTP and CGI\n[[http:header]], [[http:content]], [[*http:byline*]], [[http:error-page]], [[http:forwarding-page]],\n[[http:serve-query]], [[cgi:serve-query]], [[make-query-alist-command-server]]\n\n*** Parsing HTML\n[[html-for-each]], [[html:read-title]], [[html-fields]]\n\n*** URI\n[[make-uri]], [[uri:make-path]], [[html:anchor]], [[html:link]], [[html:base]], [[html:isindex]],\n[[uti->tree]], [[uri:split-fields]], [[uri:decode-query]], [[uric:encode]], [[uric:decode]], [[uri:path->keys]]\n\n[[path->uri]], [[absolute-uri?]], [[absolute-path?]], [[null-directory?]], [[glob-pattern?]], [[parse-ftp-address]]\n\n*** Printing Scheme\n[[generic-write]],\n[[object->string]], [[object->limited-string]],\n[[pretty-print]], [[pretty-print->string]], [[pprint-file]], [[pprint-filter-file]]\n\n*** Time and Date\n[[current-time]], [[difftime]], [[offset-time]],\n[[time-zone]], [[tz:params]], [[tz:std-offset]], [[tzset]],  [[*timezone*]], [[daylight?]], [[tzname]],\n[[gmtime]], [[localtime]], [[gmktime]], [[mktime]], [[asctime]], [[gtime]], [[ctime]],\n[[get-decoded-time]], [[get-universal-time]], [[decode-universal-time]], [[encode-universal-time]],\n[[time:gmtime]], [[tiime:invert]], [[time:split]]\n\n*** NCBI-DNA\n[[ncbi:read-dna-sequence]], [[ncbi:read-file]], [[mrna<-cdna]], [[codons<-cdna]], [[protein<-cdna]],\n[[p<-cdna]], [[cdna:base-count]], [[cdna:report-base-count]]\n\n*** Schmooz\n[[schmooz]]\n\n** Mathematical Packages\n\n*** Bit Twiddling\n[[logand]], [[bitwise-and]], [[logior]], [[bitwise-ior]],\n[[logxor]], [[bitwise-xor]], [[lognot]], [[bitwise-not]],\n[[bitwise-if]], [[bitwise-merge]], [[logtest]], [[any-bits-set?]],\n[[logcount]], [[bit-count]], [[integer-length]],\n[[log2-binary-factors]], [[first-set-bit]], [[logbit?]], [[bit-set?]], [[copy-bit]],\n[[bit-field]], [[copy-bit-field]], [[ash]], [[arithmetic-shift]], \n[[rotate-bit-field]], [[reverse-bit-field]], [[integer->list]], [[list->integer]], [[booleand->integer]]\n\n*** Modular Arithmetic\n[[mod]], [[rem]], [[extended-euclid]], [[symmetric:modulus]], [[modulus->integer]],\n[[modular:normalize]], [[modular:invertable?]], [[modular:invert]], [[modular:negate]],\n[[modular:+]], [[modular:-]], [[modular:*]], [[modular:expt]]\n\n*** Prime Numbers\n[[prime:prngs]], [[jacobi-symbol]], [[prime:trials]], [[prime?]], [[primes<]],\n[[primes>]], [[factor]]\n\n*** Random Numbers\n[[random]], [[*random-state*]], [[copy-random-state]], [[seed->random-state]], [[make-random-state]],\n[[random:uniform]], [[random:exp]], [[random:normal]], [[random:normal-vector!]], [[random:hollow-sphere!]], [[random:solid-sphere]]\n\n*** Fast Fourier Transform\n[[fft]], [[fft-1]]\n\n*** Cyclic Checksum\n[[crc-32-polynomial]], [[crc-ccitt-polynomial]], [[crc-16-polynomial]], [[crc-12-polynomial]], [[crc-10-polynomial]], [[crc-8-polynomial]], [[atm-hec-polynomial]], [[dowcrc-polynomial]], [[usb-token-polynomial]],\n[[crc:make-table]], [[cksum]], [[crc16]], [[crc5]]\n\n*** Graphing\n[[charplot:dimensions]], [[plot]], [[histograph]],\n[[create-postscript-graph]], [[whole-page]],\n[[column-range]], [[pad-range]], [[snap-range]], [[combine-ranges]], [[setup-plot]],\n[[plot-column]],\n[[in-graphic-context]], [[set-color]], [[set-font]], [[set-line-width]], [[set-line-dash]], [[set-glyphsize]],\n[[partition-page]], [[plotrect]], [[graphrect]], [[fill-rect]], [[outline-rect]], [[clip-to-rect]],\n[[title-top]], [[title-bottom]], [[topedge]], [[bottomedge]], [[leftedge]], [[rightedge]],\n[[set-margin-templates]], [[rule-vertical]], [[rule-horizontal]], [[y-axis]], [[x-axis]], [[grid-verticals]], [[grid-horizontals]],\n[[graph:dimensions]], [[x1]]\n\n*** Solid Modeling\n[[vrml]], [[vrml-append]], [[vrml-to-file]], [[world:info]],\n[[scene:panorama]], [[scene:sphere]], [[scene:sky-and-dirt]], [[scene:sky-and-grass]], [[scene:sun]], [[scene:overcast]], [[scene:viewpoint]], [[scene:viewpoints]],\n[[light:ambient]], [[light:directional]], [[light:beam]], [[light:point]], [[light:spot]],\n[[solid:box]], [[solid:sylinder]], [[solid:disk]], [[solid:cone]], [[solid:pyramid]], [[solid:sphere]], [[solid:ellipsoid]], [[solid:polyline]], [[solid:basrelief]], [[solid:text]], [[solid:color]], [[solid:texture]], [[solid:font]],\n[[solid:center-row-of]], [[solid:center-array-of]], [[solid:center-pile-of]], [[solid:arrow]],\n[[solid:translation]], [[solid:scale]], [[solid:rotation]]\n\n*** Color\n[[color?]], [[make-color]], [[color-space]], [[color-precision]], [[color-white-point]], [[convet-color]], [[color->string]], [[string->color]],\n[[D65]], [[D50]],\n[[ciexyz->color]], [[color:ciexyz]], [[color->ciexyz]],\n[[rgb709->color]], [[color:rgb709]], [[color->rgb709]],\n[[l*a*b*->color]], [[color:l*a*b*]], [[color->l*a*b*]],\n[[l*u*v*->color]], [[color:l*u*v*]], [[color->l*u*v*]],\n[[l*c*h*->color]], [[color:l*c*h*]], [[color->l*c*h*]],\n[[srgb->color]], [[color:srgb]], [[color->srgb]],\n[[e-srgb->color]], [[color:e-srgb]], [[color->e-srgb]],\n[[read-cie-illuminant]], [[read-normalized-illuminant]],\n[[illuminant-map]], [[illuminat-map->XYZ]],\n[[spectrum->XYZ]], [[spectrum->chromaticity]],\n[[wavelength->XYZ]], [[wavelength->chromaticity]],\n[[blackbody-spectrum]],\n[[temperature->XYZ]], [[temperature->chromaticity]], [[XYZ->chromaticity]],\n[[chromaticity->CIEXYZ]], [[chromaticity->whitepoint]],\n[[XYZ->xyY]], [[xyY->XYZ]], [[xyY:normalize-colors]],\n[[L*a*b*:DE*]], [[CIE:DE*]], [[L*C*h:DE94]], [[CIE:DE*94]], [[CMC:DE*]],\n[[CIEXYZ:D65]], [[CIEXYZ:D50]], [[CIEXYZ:A]], [[CIEXYZ:B]], [[CIEXYZ:C]], [[CIEXYZ:E]],\n[[color:linear-transform]],\n[[CIEXYZ->RGB709]], [[RGB709->CIEXYZ]], [[CIEXYZ->L*u*v*]], [[CIEXYZ->L*u*v*]], [[L*u*v*->CIEXYZ]], [[L*u*v*->CIEXYZ]], [[CIEXYZ->L*a*b*]], [[CIEXYZ->L*a*b*]], [[L*a*b*->CIEXYZ]], [[L*a*b*->CIEXYZ]], [[L*a*b*->L*C*h]], [[L*C*h->L*a*b*]], [[CIEXYZ->sRGB]], [[sRGB->CIEXYZ]], [[CIEXYZ->xRGB]], [[xRGB->CIEXYZ]], [[sRGB->xRGB]], [[xRGB->sRGB]], [[CIEXYZ->e-sRGB]], [[e-sRGB->CIEXYZ]], [[sRGB->e-sRGB]], [[e-sRGB->sRGB]], [[e-sRGB->e-sRGB]]\n[[grey]], [[color-name:canonicalize]], [[color-name->color]], [[color-dictionaries->lookup]], [[color-dictionary]], [[load-color-dictionary]],\n[[file->color-dictionary]], [[url->color-dictionary]], [[make-slib-color-name-db]],\n[[saturate]], [[resense]],\n[[solar-hour]], [[solar-declination]], [[solar-polar]], [[sunlight-spectrum]], [[sunright-chromaticity]], [[zenith-xyy]], [[overcast-sky-color-xyy]], [[clear-sky-color-xyy]], [[sky-color-xyy]]\n\n*** Root Finding\n[[integer-sqrt]], [[newton:find-root]], [[laguerre:find-root]], [[laguerre:find-polynomial-root]], [[secant:find-root]], [[secant:find-bracketed-root]]\n\n*** Minimizing\n[[golden-section-search]]\n\n*** The Limit\n[[limit]]\n\n*** Commutative Rings\n[[*ruleset*]], [[make-ruleset]], [[combined-rulesets]], [[distribute*]], [[distribute/]], [[cring:define-rule]]\n\n*** Matrix Algebra\n[[matrix->lists]], [[matrix->array]], [[determinant]], [[transpose]], [[matrix:product]], [[matrix:inverse]]\n\n** Database Packages\n*** Relational Database\n[[create-database]], [[open-database!]], [[open-database]], [[write-database]], [[sync-database]], [[solidify-database]], [[close-database]], [[mdbm:report]],\n[[open-table]], [[open-table!]],\n[[define-domains]], [[add-domain]], [[define-tables]],\n[[list-table-definition]],\n[[interpolate-from-table]],\n[[wrap-command-interface]], [[add-command-tables]], [[define-*commands*]], [[open-command-database]], [[open-command-database!]],\n[[make-command-server]],\n[[within-database]], [[define-command]], [[define-table]], [[add-macro-support]], [[define-macro]],\n[[browse]]\n\n*** Relational Infrastructure\n[[*basetable-implementations*]],\n[[make-relational-system]]\n\n** Weight-Balanced Trees\n[[make-wt-tree-type]], [[number-wt-type]], [[string-wt-type]], [[make-wt-tree]], [[singleton-wt-tree]], [[alist->wt-tree]],\n[[wt-tree/empty?]], [[wt-tree/size]], [[wt-tree/add]], [[wt-tree/add!]], [[wt-tree/member?]], [[wt-tree/lookup]], [[wt-tree/delete]], [[wt-tree/delete!]],\n[[wt-tree/split<]], [[wt-tree/split>]], [[wt-tree/union]], [[wt-tree/intersection]], [[wt-tree/difference]], [[wt-tree/subset?]], [[wt-tree/set-equal?]], [[wt-tree/fold]], [[wt-tree/for-each]],\n[[wt-tree/index]], [[wt-tree/index-datum]], [[wt-tree/index-pair]], [[wt-tree/rank]], [[wt-tree/min]], [[wt-tree-min-datum]], [[wt-tree/min-pair]], [[wt-tree/delete-min]], [[wt-tree/delete-min!]]\n\n** Other Packages\n*** Data Structures\n[[subarray]], [[subarray0]], [[array-trim]], [[array-map!]], [[array-map]], [[array-for-each]], [[array-indexes]], [[array-index-map!]], [[array:copy!]], [[interpolate-array-ref]], [[resample-array!]]\n\n[[predicate->asso]], [[alist-inquirer]], [[alist-associator]], [[alist-remover]], [[alist-map]], [[alist-for-each]]\n\n[[byte-ref]], [[byte-set!]], [[make-bytes]], [[bytes-length]], [[bytes]], [[bytes->list]], [[list->bytes]], [[bytes-copy]], [[bytes-reverse!]], [[bytes-reverse]], [[write-byte]], [[read-byte]], [[read-bytes]], [[write-bytes]], [[substring-read!]], [[substring-write]]\n\n[[bytes->integer]], [[integer->bytes]], [[bytes->ieee-float]], [[bytes->ieee-double]], [[ieee-fload->bytes]], [[ieee-double->bytes]], [[integer-byte-collate!]], [[integer-byte-collate]], [[ieee-byte-collate!]], [[ieee-byte-decollate!]], [[ieee-byte-collate]], [[ieee-byte-decollate]]\n\n[[matfile:read]], [[matfile:load]]\n\n[[pnm:type-dimensions]], [[pnm:image-file->array]], [[pnm:array-write]]\n\n[[collection?]], [[map-elts]], [[do-elts]], [[map-keys]], [[do-keys]], [[for-each-key]], [[for-each-elt]], [[reduce]],  [[any?]], [[every?]], [[empty?]], [[size]], [[Setter]]\n\n[[make-dynamic]], [[dyanamic?]], [[dynamic-ref]], [[dynamic-set!]], [[call-with-dynamic-binding]]\n\n[[predicate->hash]], [[make-hash-table]], [[predicate->hash-asso]], [[hash-inquirer]], [[hash-associator]], [[hash-remover]], [[hash-map]], [[hash-for-each]], [[hash-rehasher]]\n\n[[make-object]], [[object?]], [[make-generic-method]], [[make-generic-predicate]], [[make-method]], [[make-predicate!]], [[unmake-method]], [[get-method]]\n\n[[make-heap]], [[heap-length]], [[heap-insert]], [[heap-extract-max!]]\n\n[[make-queue]], [[queue?]], [[queue-empty?]], [[queue-push!]], [[enqueue!]], [[dequeue!]], [[queue-pop!]], [[dequeue-all!]], [[queue-front]], [[queue-rear]]\n\n[[make-record-type]], [[record-constructor]], [[record-predicate]], [[record-accessor]], [[record-modifier]]\n\n*** Sorting and Searching\n[[make-list]], [[list*]], [[copy-list]],\n[[adjoin]], [[union]], [[intersection]], [[set-difference]], [[subset?]], [[member-if]], [[some]], [[every]], [[notany]], [[notevery]], [[list-of??]], [[find-if]], [[remove]], [[remove-if]], [[remove-if-not]], [[has-duplicates]], [[remove-duplicates]],\n[[position]], [[reduce]], [[reduce-init]], [[last]], [[butlast]], [[nthcdr]], [[butnthcdr]],\n[[nconc]], [[nreverse]], [[delete]], [[delete-if]], [[delete-if-not]],\n[[and?]], [[or?]], [[atom?]]\n\n[[subst]], [[substq]], [[substv]], [[copy-tree]],\n\n[[chap:string<?]], [[chap:string>?]], [[chap:string<=?]], [[chap:string>=]], [[chap:next-string]]\n\n[[sorted?]], [[merge]], [[merge!]], [[sort]], [[sort!]]\n\n[[tsort]], [[topological-sort]]\n\n[[hashq]], [[hashv]], [[hash]]\n\n[[integer->hilbert-coordinates]], [[integer->gray-code]], [[gray-code->integer]], [[gray-code<?]], [[gray-code>?]], [[gray-code<=?]], [[gray-code>=?]]\n\n[[delaminate-list]]\n\n[[natural-peano-coordinates]], [[peano-corrdinates->natural]], [[integer->peano-coordinates]], [[peadno-coordinates->integer]]\n\n[[make-sierpinski-indexer]]\n\n[[soundex]]\n\n[[string-index]], [[string-index-ci]], [[string-reverse-index]], [[string-reverse-index-ci]], [[substring?]], [[substring-ci?]], [[find-string-from-port?]], [[string-subst]], [[count-newlines]]\n\n[[diff:longest-common-subsequence]], [[diff:edits]], [[diff:edit-length]]\n\n*** Procedures\n[[type-of]], [[coerce]]\n\n[[string-upcase]], [[string-downcase]], [[string-captalize]], [[string-upcase!]], [[string-downcase!]], [[string-titlecase!]], [[string-ci->symbol]], [[symbol-append]], [[StudlyCapsExpand]]\n\n[[call-with-output-string]], [[call-with-input-string]]\n\n[[read-line]], [[read-line!]], [[write-line]], [[system->line]]\n\n[[add-process]], [[process:schedule!]], [[kill-porcess!]]\n\n[[si:conversion-factor]]\n\n[[with-input-from-file]], [[with-output-to-file]]\n\n[[transcript-on]], [[transcript-off]]\n\n[[substring-move-left]], [[substring-move-right!]], [[substring-fill!]], [[string-null?]], [[append!]], [[1+]], [[-1+]], [[<?]], [[<=?]], [[=?]], [[>?]], [[>=?]]\n\n[[list-tail]], [[string-copy]], [[string-fill!]], [[vector-fill!]]\n\n[[/]], [[-]]\n\n[[apply]]\n\n[[rationalize]], [[find-ratio]], [[find-ratio-between]]\n\n[[make-promize]], [[force]], [[delay]]\n\n[[dynamic-wind]]\n\n[[eval]], [[scheme-report-environment]], [[null-environment]], [[interaction-environment]]\n\n[[values]], [[call-with-values]]\n\n[[abort]]\n\n[[repl:top-level]], [[repl:quit]]\n\n[[qp]], [[qpn]], [[qpr]], [[*qp-width*]]\n\n[[trace-all]], [[track-all]], [[stack-all]], [[break-all]]\n\n[[init-debug]], [[breakpoint]], [[continue]], [[break]], [[unbreak]], [[breakf]]\n\n[[debug:max-count]], [[print-call-stack]], [[trace]], [[track]], [[stack]], [[untrace]], [[untrack]], [[unstack]], [[tracef]], [[trackf]], [[stackf]], [[untracef]]\n\n[[getenv]], [[system]]\n\n[[current-directory]], [[make-directory]], [[directory-for-each]]\n\n[[file-lock-owner]], [[file-lock!]], [[file-unlock!]]\n\n[[emacs:backup-name]], [[transact-file-replacement]]\n\n[[user-email-address]]\n\n[[cvs-files]], [[cvs-directories]], [[cvs-root]], [[cvs-repository]], [[cvs-set-root!]], [[cvs-set-roots!]], [[cvs-vet]]\n")
("SRFI-30" . "(:ctime 1029716370 :cuser #f :mtime 1122428735 :muser #f)SRFI-30 : Nested Multi-line Comments\n\nhttp://srfi.schemers.org/srfi-30/srfi-30.html\n\n\n[[$$srfi-implementors]]\n\n\n----\n\n[[#|]]\n")
("string-tabulate" . "(:ctime 1014895543 :cuser #f :mtime 1014895543 :muser #f)* [procedure] string-tabulate ''proc'' ''len''\n\n[SRFI-13]:  ''Proc'' is an integer->char procedure. \nConstruct a string of size ''len''  by applying ''proc'' to each index \nto produce the corresponding string element. \nThe order in which proc is applied to the indices is not specified.\n\n")
("collection-insert-left" . "(:ctime 1443713520 :cuser #f :mtime 1443713520 :muser #f);; Notkun: (insert-left f x u) \n;; Fyrir: f er tvíundarfall, \n;; x=(x1 x2 ... xN) er listi gilda \n;; sem eru lögleg viðföng í f, \n;; u er löglegt viðfang í f. \n;; f verður ávalt að skila gildi 4 \n;; sem er löglegt viðfang í f. \n;; Gildi: (f x1 (f x2 (... (f xN u)...))) \n(define (insert-left f x u) \n           (if (null? x) \n             u (f (car x) \n               (insert-left f (cdr x) u)) ) )\n")
("char-numeric?" . "(:ctime 1014839526 :cuser #f :mtime 1014839526 :muser #f)* [procedure] char-numeric? ''char''\n\n[[R5RS]]\n\nSee also [[char-alphabetic?]], [[char-whitespace?]].\n")
("ucs2>?" . "(:ctime 1039428805 :cuser #f :mtime 1039428805 :muser #f)[[$$include ucs2=?]]\n")
("set-gc-report!" . "(:ctime 1015069384 :cuser #f :mtime 1015069384 :muser #f)* [procedure] set-gc-report! ''flag''\n\n[[Chicken]]:\n\nSee also [[gc]]\n")
("make-tracking-input-port" . "(:ctime 1017989388 :cuser #f :mtime 1017989388 :muser #f)* [procedure] make-tracking-input-port ''input-port''\n* [procedure] make-tracking-output-port ''output-port''\n\n[[Scheme48]]: creates an input or output port that\nkeeps track of current row and column.\n\nSee also [[current-row]] and [[current-column]].\n")
("process-continue" . "(:ctime 1018342657 :cuser #f :mtime 1018342657 :muser #f)[[$$include process-kill]]\n")
("clear-input-port" . "(:ctime 1014956905 :cuser #f :mtime 1014956955 :muser #f)* [procedure] clear-input-port [''port'']\n\n[[ChezScheme]]: discards any characters in the buffer of ''port''.\n\nSee also [[clear-output-port]]\n")
("and-let*" . "(:ctime 1014875222 :cuser #f :mtime 1040351703 :muser #f)* [syntax] and-let* (''claw'' ...) ''body''\n\n[[SRFI-2]]\n\nAlso in [[Bigloo]].\n\n")
("port-idle-register!" . "(:ctime 1099727042 :cuser #f :mtime 1099727043 :muser #f)* [procedure] port-idle-register! ''port'' ''thunk''\n* [procedure] port-idle-unregister! ''port'' ''thunk''\n* [procedure] port-idle-reset! ''port''\n\n[[STklos]]: port idle handler (''thunk'') is called continuously\nwhen a reading primitive is waiting on ''port''.\n\n{{{\n(let ((idle (lambda () (display \"Nothing to read!\\n\"))))\n  (port-idle-register! (current-input-port) idle)\n  (let ((result (read)))\n    (port-idle-unregister! (current-input-port) idle)\n    result))\n}}}\n")
("define" . "(:ctime 1014847419 :cuser #f :mtime 1191208793 :muser #f)* [syntax] define ''variable'' ''expression''\n* [syntax] define (''variable'' ''formals'') ''body''\n\n[[R5RS]], [[R6RS]]:\n\n* [syntax] define (''form'' ''formals'') ''body''\n[[RRRS]]: where ''form'' is a list, is equivalent to (define form (lambda ''formals'' ''body''))\n")
("pop!" . "(:ctime 1015312512 :cuser #f :mtime 1015312512 :muser #f)* [syntax] pop! ''place''\n\n[[Gauche]]: CL's pop macro.  See also [[push!]].\n")
(":string" . "(:ctime 1144527545 :cuser #f :mtime 1144537382 :muser #f)[[$$include :list]]\n")
("current-eval" . "(:ctime 1014965116 :cuser #f :mtime 1014965116 :muser #f)* [procedure] current-eval [''newval'']\n\n[[ChezScheme]]: gets/sets the evaluation procedure used by\n[[eval]], [[load]] and [[new-cafe]].\n")
("member" . "(:ctime 1014856466 :cuser #f :mtime 1014870890 :muser #f)* [procedure] member ''obj'' ''list''\n\n[[R5RS]]: Returns the first sublist of ''list'' whose car is [[equal?]]\nto ''obj''. \nIf ''obj'' does not occur in list, then #f (not the empty list) is returned.\n\nSee also [[memq]], [[memv]].\n\n* [procedure] member ''obj'' ''list'' [''='']\n\n[[SRFI-1]]: This is an upper-compatible extension of R5RS [[member]],\nto allow the client to pass in an optional equality procedure ''='' used to\ncompare keys. \n")
("ar64" . "(:ctime 1099398046 :cuser #f :mtime 1099398046 :muser #f)[[$$include ac64]]\n")
("test-on-test-end-simple" . "(:ctime 1151049296 :cuser #f :mtime 1151083629 :muser #f)* [procedure] test-on-test-end-simple ''runner''\n\n[[SRFI-64]]: (test-runner-on-test-end (test-runner-simple)).\n\nSee also [[test-runner-simple]] and [[test-runner-on-test-end]].\n")
("cp0-score-limit" . "(:ctime 1015024073 :cuser #f :mtime 1015024073 :muser #f)* [procedure] cp0-score-limit [''newval'']\n\n[[ChezScheme]]: compiler parameter.\n")
("fl-" . "(:ctime 1014952260 :cuser #f :mtime 1191227205 :muser #f)[[$$include fl+]]\n")
("first" . "(:ctime 1014862698 :cuser #f :mtime 1014862698 :muser #f)* [procedure] first ''pair''\n\n[[SRFI-1]]\n\n")
("char-set-union" . "(:ctime 1099288370 :cuser #f :mtime 1099288370 :muser #f)* [procedure] char-set-union ''cset1'' ...\n* [procedure] char-set-union! ''cset0'' ''cset1'' ...\n\n[[SRFI-14]]: Returns union of all character sets.\n")
("integer->user-id" . "(:ctime 1018124314 :cuser #f :mtime 1018124314 :muser #f)[[$$include user-id?]]\n")
("fxxor" . "(:ctime 1191224617 :cuser #f :mtime 1191224617 :muser #f)[[$$include fxand]]\n")
("#t" . "(:ctime 1014848438 :cuser #f :mtime 1014848438 :muser #f)* [constant] #t\n\n[[R5RS]] boolean true value.\n\nSee also [[#f]].\n")
("list->ucs2-string" . "(:ctime 1039428239 :cuser #f :mtime 1039428239 :muser #f)[[$$include ucs2-string->list]]\n")
("when-socket-ready" . "(:ctime 1018343585 :cuser #f :mtime 1018343585 :muser #f)* [procedure] when-socket-ready ''socket'' [''handler'']\n\n[[STk]]: sets the handler to the socket.\nSee [[make-client-socket]], [[make-server-socket]].\n")
("nl" . "(:ctime 1015877291 :cuser #f :mtime 1191265557 :muser #f)* [procedure] nl\n* [procedure] nonl\n\n[[SCM]]: curses interface.  see [[initscr]].\n\n* [procedure] nl\n\n[[Library:Fmt]]: Returns a closure that formats a newline.\n")
("fluid?" . "(:ctime 1014929501 :cuser #f :mtime 1014929501 :muser #f)* [procedure] fluid? ''obj''\n\n[[Guile]]: returns #t iff ''obj'' is a fluid.\n\nSee also [[make-fluid]], [[fluid-ref]], [[fluid-set!]]\n")
("noecho" . "(:ctime 1015877277 :cuser #f :mtime 1015877277 :muser #f)[[$$include echo]]\n")
("signal/usr1" . "(:ctime 1015076689 :cuser #f :mtime 1015076689 :muser #f)[[$$include signal/hup]]\n")
("set-sstats-real!" . "(:ctime 1015028952 :cuser #f :mtime 1015028952 :muser #f)* [procedure] set-sstats-real! ''sstats'' ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[sstats-real]].\n")
("unquote-splicing" . "(:ctime 1191664189 :cuser #f :mtime 1191664190 :muser #f)[[$$include unquote]]\n")
("date?" . "(:ctime 1023886389 :cuser #f :mtime 1023886389 :muser #f)* [procedure] date? ''date''\n\n[[SRFI-19]]: see [[make-date]]\n")
("newwin" . "(:ctime 1015877384 :cuser #f :mtime 1015877384 :muser #f)* [procedure] newwin ''nlines'' ''ncols'' ''begy'' ''begx''\n\n[[SCM]]: curses interface.  see [[initscr]], [[subwin]]\n")
("blob-s32-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144719422 :muser #f)* [procedure] blob-s32-set! ''endianness'' ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: equivalent to (blob-sint-set! 4 ''endianness'' ''blob'' ''k'' ''n'').\n\nSee also [[blob-sint-set!]].\n")
("append-map!" . "(:ctime 1014868490 :cuser #f :mtime 1327407301 :muser #f)* [procedure] append-map! ''f'' ''clist1'' ''clist2'' ...\n\n[[SRFI-1]]: Equivalent to (apply append! (map f clist1 clist2 ...)) .\n\nSee also [[append!]], [[append-map]].\n [http://www.obtenir-rio.info numero rio]\n [http://www.obtenir-rio.info code rio]\n")
("#b" . "(:ctime 1014846806 :cuser #f :mtime 1014846806 :muser #f)* [reader syntax] #b''nnnn...''\n\n[[R5RS]] number literal in binary\n\nSee also [[#d]], [[#o]], [[#x]].\n\n")
("let-macro" . "(:ctime 1015044994 :cuser #f :mtime 1020284764 :muser #f)* [syntax] let-macro (''macrodef'' ...) ''body'' ...\n\n[[Chicken]], [[MzScheme]]: creates local macro bindings.  See also [[define-macro]].\n")
("SRFI-123" . "(:ctime 1474475463 :cuser #f :mtime 1474475463 :muser #f)SRFI-123: Generic accessor and modifier operators\n\nhttp://srfi.schemers.org/srfi-123/srfi-123.html\n\n[[$$srfi-implementors]]\n")
("real-exp" . "(:ctime 1170264990 :cuser #f :mtime 1170266947 :muser #f)* real-exp ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[exp]], but signals error if the argument is not real  or the result is not real.\n")
("pathname-strip-extension" . "(:ctime 1015100819 :cuser #f :mtime 1015100819 :muser #f)* [procedure] pathname-strip-extension ''pathname''\n\n[[Chicken]]: see also [[pathname-extension]], [[pathname-replace-extension]],\n[[pathname-strip-directory]].\n")
("Index:x" . "(:ctime 1014861479 :cuser #f :mtime 1015014822 :muser #f)[[$$index x]]\n\n")
("=fx" . "(:ctime 1039346109 :cuser #f :mtime 1191225768 :muser #f)* [procedure] =fx ''fixnum1'' ''fixnum2''\n* [procedure] <fx ''fixnum1'' ''fixnum2''\n* [procedure] <=fx ''fixnum1'' ''fixnum2''\n* [procedure] >fx ''fixnum1'' ''fixnum2''\n* [procedure] >=fx ''fixnum1'' ''fixnum2''\n\n[[Bigloo]]: comparison ops specialized for fixnums.\nSee also [[fixnum?]], [[flonum?]].\n\nChicken and ChezScheme have [[fx=]] etc.\n\nR6RS has [[fx=?]] etc.\n")
("append" . "(:ctime 1014838101 :cuser #f :mtime 1191314621 :muser #f)* [procedure] append ''list'' ...\n\n[[R5RS]], [[R6RS]]: appends lists.  The last argument may be any object.\n\nSee also [[append!]].\n")
("ucs2-string-ref" . "(:ctime 1039427883 :cuser #f :mtime 1039427883 :muser #f)* [procedure] ucs2-string-ref ''ucs2-string'' ''k''\n\n[[Bigloo]]: see [[ucs2-string?]]\n")
("with-handlers" . "(:ctime 1060172481 :cuser #f :mtime 1060172481 :muser #f)* [syntax] with-handlers ((''pred'' ''handler'') ...) ''expr'' ...\n\n[[MzScheme]]: a syntactic form that evaluates the ''expr'' body, installing a new \nexception handler before evaluating the ''expr''s and restoring the handler when a \nvalue is returned (or when control escapes from the expression).\n\nSee also [[raise]], [[current-exception-handler]].\n")
("write-string" . "(:ctime 1018387222 :cuser #f :mtime 1018387222 :muser #f)* [procedure] write-string ''string'' [''fd/port'' ''start'' ''end'']\n\n[[Scsh]]: see also [[write-string/partial]]\n")
("process-execute" . "(:ctime 1015185096 :cuser #f :mtime 1015185096 :muser #f)* [procedure] process-execute ''pathname'' [''list'']\n\n[[Chicken]]: fork & execv.  See also [[process-fork]].\n")
("load-bundle!" . "(:ctime 1099300342 :cuser #f :mtime 1099300342 :muser #f)* [procedure] load-bundle! ''bundle-specifier''\n\n[[SRFI-29]]: Loads the bundle information associated to ''bundle-specifier''\nfrom some implementation-specific repository.  See also [[declare-bundle!]]\nand [[store-bundle]].\n")
("Index:o" . "(:ctime 1014843165 :cuser #f :mtime 1015014658 :muser #f)[[$$index o]]\n\n")
("symbol-value" . "(:ctime 1099723024 :cuser #f :mtime 1099723213 :muser #f)* [procedure] symbol-value ''symbol'' ''module'' [''default'']\n* [procedure] symbol-value* ''symbol'' ''module'' [''default'']\n\n[[STklos]]: returns the value bound to ''symbol'' in ''module''.\n[[symbol-value*]] is transitive, i.e. it searches all symbols\nvisible from ''module'', while [[symbol-value]] searches only in ''module''.\n\nSee also [[in-module]].\n")
("test-result-remove" . "(:ctime 1151049296 :cuser #f :mtime 1151080801 :muser #f)* [syntax] test-result-remove ''runner'' ''pname''\n\n[[SRFI-64]]: removes the test result property named ''pname''.\n")
("string-capitalize!" . "(:ctime 1015073941 :cuser #f :mtime 1015073941 :muser #f)[[$$include string-capitalize]]\n")
("object-apply" . "(:ctime 1201710772 :cuser #f :mtime 1201710772 :muser #f)* [generic function] object-apply ''obj'' ''arg'' ...\n\n[[Gauche]]: When an expression (''obj'' ''arg'' ...) is evaluated\nand ''obj'' is not a built-in funcallable object (a procedure or\na generic function), Gauche invokes this generic function instead.\nThe default method is to signal an error (\"invalid application\"),\nbut any objects can be made \"funcallable\" by defining specialized\nmethod.\n\n{{{\ngosh> (define-method object-apply ((s <string>) (i <integer>)) (string-ref s i))\n#<generic object-apply (7)>\ngosh> (\"abc\" 1)\n#\\b\n}}}\n")
("file-read-access?" . "(:ctime 1015197040 :cuser #f :mtime 1015905687 :muser #f)* [procedure] file-read-access? ''filename'' [''realuid?'']\n* [procedure] file-write-access? ''filename'' [''realuid?'']\n* [procedure] file-execute-access? ''filename'' [''realuid?'']\n\n[[Chicken]]: check file accessibility.  Use effective uid unless\n''realuid?'' is given and true.  See [[Concept:FileSystem]],\n[[file-permissions]].\n\nSome implementations have [[file-is-readable?]] or [[file-readable?]] etc.\n\nGauche has [[sys-access]] which is POSIX access() interface.\n")
("SRFI-59" . "(:ctime 1122428972 :cuser #f :mtime 1144452477 :muser #f)SRFI-59: Vicinity\n\nhttp://srfi.schemers.org/srfi-59/srfi-59.html\n\n[[$$srfi-implementors]]\n----\n\n[[program-vicinity]],\n[[library-vicinity]],\n[[implementation-vicinity]],\n[[user-vicinity]],\n[[home-vicinity]],\n[[in-vicinity]],\n[[sub-vicinity]],\n[[make-vicinity]],\n[[pathname->vicinity]],\n[[vicinity:suffix?]]\n")
("string-byte-ref" . "(:ctime 1015806385 :cuser #f :mtime 1015806385 :muser #f)* [procedure] string-byte-ref ''string'' ''index'' [''default'']\n* [procedure] string-byte-set! ''string'' ''index'' ''byte''\n\n[[Gauche]]: gets and sets ''index''-th byte of ''string''.\n''byte'' is an exact integer between 0 and 255.\n")
("box" . "(:ctime 1014945851 :cuser #f :mtime 1176847923 :muser #f)* [procedure] box ''obj''\n\n[[ChezScheme]], [[SISC]], [[MzScheme]], [[Gambit]]:\ncreates a ''box'' containts ''obj''.  A box is a sort\nof pointer.  Both have a special reader syntax [[#&]] to denote a box.\n\nSee also [[box?]], [[unbox]], [[set-box!]].\n\nScheme48 has ''cell'' which is similar to the box.\nSee [[make-cell]].\n\n* [procedure] box ''win'' ''vertch'' ''horch''\n\n[[SCM]]: curses interface.  See [[initscr]] etc.\n\n")
("fold-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144539152 :muser #f)* [syntax] fold-ec  ''x0'' ''qualifier'' ... ''expression'' ''f2''\n* [syntax] fold3-ec ''x0'' ''qualifier'' ... ''expression'' ''f1'' ''f2''\n[[SRFI-42]]:\nReduces the sequence x[0], x[1], ..., x[n-1] of values obtained by\nevaluating ''expression'' once for each binding as specified by ''qualifier'' ..\n..\nThe arguments ''x0'', ''f2'', and ''f1'', all syntactically equivalent to\n''expression'', specify the reduction process.\n\nThe reduction process for [[fold-ec]] is defined as follows. A reduction\nvariable x is initialized to the value of ''x0'', and for each k in {0, ...,\nn-1} the command (set! x (''f2'' x[k] x)) is evaluated. Finally, x is\nreturned as the value of the comprehension.\n\nThe reduction process for [[fold3-ec]] is different. If and only if n = 0, i.e.\nthe sequence is empty, then ''x0'' is evaluated and returned as the value of\nthe comprehension. Otherwise, a reduction variable x is initialized to the\nvalue of (''f1'' x[0]), and for each k in {1, ..., n-1} the command (set! x\n(''f2'' x[k] x)) is evaluated. Finally, x is returned as the value of the\ncomprehension.\n\nAs the order of the arguments suggests, ''x0'' is evaluated outside the scope\nof the qualifiers, whereas the reduction expressions involving ''f1'' and\n''f2'' are inside the scope of the qualifiers (so they may depend on any\nvariable introduced by the qualifiers). Note that ''f2'' is evaluated\nrepeatedly, with any side-effect or overhead this might have.\n~\n")
("let-values" . "(:ctime 1014882750 :cuser #f :mtime 1455913618 :muser #f)* [syntax] let-values ((''formals'' ''expression'') ...) ''body''\n\n[[R6RS]], [[SRFI-11]], [[Chicken]], [[MzScheme]], [[Kawa]]\n\nSee also [[let*-values]], [[receive]].\n\nChicken and MzScheme also has [[letrec-values]].\n")
("time<=?" . "(:ctime 1015317866 :cuser #f :mtime 1015317881 :muser #f)[[$$include time=?]]\n")
("hash-table-update!" . "(:ctime 1099737826 :cuser #f :mtime 1191360476 :muser #f)* [procedure] hash-table-update! ''hash-table'' ''key'' ''function'' [''thunk'']\n\n[[SRFI-69]]: Semantically equivalent to, but may be implemented more efficiently than, the following code:\n\n{{{\n(hash-table-set! hash-table key\n                 (function (hash-table-ref hash-table key thunk)))\n}}}\n\n* [procedure] hash-table-update! ''hash'' ''key'' ''update-fun'' ''init-value''\n\n[[STklos]]: update the entry of hash table ''hash'' associated with ''key''.\nSee [[make-hash-table]].\n\nSee also [[Concept:HashTable]].\n\nR6RS has [[hashtable-update!]].\n")
("extract-condition" . "(:ctime 1099264329 :cuser #f :mtime 1099264329 :muser #f)* [procedure] extract-condition ''condition'' ''type''\n\n[[SRFI-35]]: Returns a condition of the condition type ''type'' with the field values specified by condition.  \n''Condition'' must has the type ''type''.\n\n(If ''condition'' is a compound condition, each field value is extracted using\nthe same rule as [[condition-ref]]---i.e. if the components of the compound\ncondition has duplicated field names, the first one appears in the argument\nlist of [[make-compound-condition]] effectively ''shadows'' the rest.)\n\n")
("string->html" . "(:ctime 1099777140 :cuser #f :mtime 1099777140 :muser #f)* [procedure] string->html ''string''\n\n[[STklos]]: escapes HTML special chars in ''string''.\n\nGauche has [[html-escape-string]].\n")
("serious-condition?" . "(:ctime 1099267703 :cuser #f :mtime 1099267703 :muser #f)* [procedure] serious-condition? obj\n\n[[SRFI-35]]: See [[&serious]].\n")
("signum" . "(:ctime 1015049794 :cuser #f :mtime 1015049794 :muser #f)* [procedure] signum ''n''\n\n[[Chicken]]: returns -1, 0, or 1, when ''n'' < 0, ''n'' == 0 or ''n'' > 0,\nrespectively.\n")
("SRFI-128" . "(:ctime 1474475614 :cuser #f :mtime 1474475614 :muser #f)SRFI-128:  Comparators (reduced) \n\nhttp://srfi.schemers.org/srfi-128/srfi-128.html\n\n[[$$srfi-implementors]]\n")
("char-set-count" . "(:ctime 1039169134 :cuser #f :mtime 1039169134 :muser #f)* [procedure] char-set-count ''pred'' ''char-set''\n\n[[SRFI-14]]: apply ''pred'' for each character in\n''char-set'', and returns the number of characters\nthat caused ''pred'' to return true.\n")
("ucs2-string-downcase!" . "(:ctime 1039428349 :cuser #f :mtime 1039428349 :muser #f)[[$$include ucs2-string-downcase]]\n")
("file-nlink" . "(:ctime 1037014927 :cuser #f :mtime 1037014927 :muser #f)* [procedure] file-nlink ''filename'' &keyword follow-link?\n\n[[Gauche]]: see also [[sys-stat]].\n\nScsh has [[file-nlinks]].\n")
("open-input-file*" . "(:ctime 1015184522 :cuser #f :mtime 1015184522 :muser #f)* [procedure] open-input-file* ''fileno'' [''openmode'']\n* [procedure] open-output-file* ''fileno'' [''openmode'']\n\n[[Chicken]]: fdopen(2) interface.  See [[port->fileno]],\n[[file-open]].\n")
("time-monotonic->modified-julian-day" . "(:ctime 1099301276 :cuser #f :mtime 1099301276 :muser #f)[[$$include time-monotonic->date]]\n")
("check-report" . "(:ctime 1144485145 :cuser #f :mtime 1144492074 :muser #f)* [procedure] check-report\n[[SRFI-78]]: prints a summary and the first failed check, if there is any,\ndepending on the current mode settings.\n\nSee also [[check-set-mode!]].\n")
("time-utc->julian-day" . "(:ctime 1099301453 :cuser #f :mtime 1099301531 :muser #f)[[$$include time-utc->date]]\n")
("port-name" . "(:ctime 1014956481 :cuser #f :mtime 1099726881 :muser #f)* [procedure] port-name ''port''\n\n[[ChezScheme]], [[Chicken]], [[Gauche]]\n\nSCM has [[port-filename]].\nBigloo has [[input-port-name]].\nSTklos has [[port-file-name]].\n")
("hash" . "(:ctime 1144494246 :cuser #f :mtime 1144495712 :muser #f)* [procedure] hash ''object'' [''bound'']\n\n[[SRFI-69]]: Produces a hash value for ''object'' in the range (0, ''bound'').\nIf ''bound'' is not given, the implementation is free to choose any bound, given that the default bound is greater than the size of any imaginable hash table in a normal application. (This is so that the implementation may choose some very big value in fixnum range for the default bound.) This hash function is acceptable for [[equal?]].\n")
("cbreak" . "(:ctime 1015877189 :cuser #f :mtime 1015877189 :muser #f)* [procedure] cbreak\n* [procedure] nocbreak\n\n\n[[SCM]]: curses interface.  see [[initscr]].\n")
("SRFI-40" . "(:ctime 1099279549 :cuser #f :mtime 1122428811 :muser #f)SRFI-40 : A Library of Streams\n\nhttp://srfi.schemers.org/srfi-40/srfi-40.html\n\n[[$$srfi-implementors]]\n\n----\n[[stream-null]],\n[[stream-cons]],\n[[stream?]],\n[[stream-null?]],\n[[stream-pair?]],\n[[stream-car]],\n[[stream-cdr]],\n[[stream-delay]],\n[[stream]],\n[[stream-unfoldn]],\n[[stream-map]],\n[[stream-for-each]],\n[[stream-filter]]\n")
("test-runner-null" . "(:ctime 1151049296 :cuser #f :mtime 1151078213 :muser #f)* [syntax] test-runner-null\n\n[[SRFI-64]]: creates and returns new test runner that does nothing with the result of test.\n\nSee also [[test-runner-simple]].\n")
("macroexpand" . "(:ctime 1015069853 :cuser #f :mtime 1018336950 :muser #f)* [procedure] macroexpand ''x''\n* [procedure] macroexpand-1 ''x''\n\n[[ChezScheme]], [[Gauche]]\n\nIn Gauche, these expands only a globally defined macros.\nUse [[%macroexpand]] and [[%macroexpand-1]] to expand\nlocally introduced macros (using [[let-syntax]] etc.)\n\nSTk calls these [[macro-expand]] and [[macro-expand-1]].\n\n\n")
("flmax" . "(:ctime 1191227775 :cuser #f :mtime 1191227775 :muser #f)* [procedure] flmax ''fl1'' ''fl2'' ...\n* [procedure] flmin ''fl1'' ''fl2'' ...\n\n[[R6RS]]: flonum-specific [[max]] and [[min]].\nSee [[flonum?]] for other flonum operations.\n")
("date-week-number" . "(:ctime 1023886368 :cuser #f :mtime 1023886368 :muser #f)[[$$include date-nanosecond]]\n")
("process-list" . "(:ctime 1018342687 :cuser #f :mtime 1099738020 :muser #f)* [procedure] process-list\n\n[[STk]], [[STklos]], [[Gauche]]: returns a list of live processes.\nSee also [[run-process]].\n")
("no-submatches" . "(:ctime 1018083405 :cuser #f :mtime 1018083405 :muser #f)* [procedure] no-submatches ''regexp''\n\n[[Scheme48]]: returns a regexp that is the same as \n''regexp'' except all submatch information is deleted.\nSee [[Concept:RegularExpression]], [[match]].\n")
("cons" . "(:ctime 1014841089 :cuser #f :mtime 1191314010 :muser #f)* [procedure] cons ''obj1'' ''obj2''\n\n[[R5RS]], [[R6RS]]\n")
("div" . "(:ctime 1191219288 :cuser #f :mtime 1191396865 :muser #f)* [procedure] div ''x1'' ''x2''\n\n[[R6RS]]: \n\n ''x1'' div ''x2'' = ''nd''\n ''x1'' mod ''x2'' = ''xm''\n   where\n     ''x1'' = ''nd'' * ''x2'' + ''xm''\n     0 <= ''xm'' < |''x2''|\n\nSee also [[div-and-mod]], [[mod]], [[div0]], [[mod0]].\n")
("string-ci>=" . "(:ctime 1015066240 :cuser #f :mtime 1015066240 :muser #f)[[$$include string-ci=]]\n")
("product-ec" . "(:ctime 1144527545 :cuser #f :mtime 1144535733 :muser #f)* [syntax] product-ec ''qualifier'' ... ''expression''\n[[SRFI-42]]:\nThe product of all values of ''expression''.\nThink of it as ([[apply]] [[*]] ([[list-ec]] ''qualifier'' ... ''expression'')).\n")
("real-part" . "(:ctime 1014854399 :cuser #f :mtime 1191313009 :muser #f)* [procedure] real-part ''z''\n\n[[R5RS]], [[R6RS]]: Real part of a complex number ''z''.\n\nSee also [[imag-part]], [[magnitude]], [[angle]].\n")
("default-foreign-libraries" . "(:ctime 1014925979 :cuser #f :mtime 1014925979 :muser #f)* [procedure] default-foreign-libraries [''newlibs'']\n\n[[ChezScheme]]: gets/sets a list of foreign libraries that is used\nby [[provide-foreign-entries]] and [[load-foreign]].\n")
("SRFI-18" . "(:ctime 1015067001 :cuser #f :mtime 1122428640 :muser #f)SRFI-18: Multithreading support\n\nhttp://srfi.schemers.org/srfi-18/srfi-18.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[current-thread]], [[thread?]], [[make-thread]],\n[[thread-name]], [[thread-specific]], [[thread-specific-set!]],\n[[thread-start!]], [[thread-yield!]], [[thread-sleep!]],\n[[thread-terminate!]], [[thread-join!]]\n\n[[mutex?]], [[make-mutex]], [[mutex-name]], [[mutex-specific]],\n[[mutex-specific-set!]], [[mutex-state]], [[mutex-lock!]],\n[[mutex-unlock!]]\n\n[[condition-variable?]], \n[[make-condition-variable]], [[condition-variable-name]],\n[[condition-variable-specific]], [[condition-variable-specific-set!]],\n[[condition-variable-signal!]], [[condition-variable-broadcast!]]\n\n[[current-time]], [[time?]], [[time->seconds]], [[seconds->time]]\n\n[[current-exception-handler]], [[with-exception-handler]],\n[[raise]], [[join-timeout-exception?]], [[abandoned-mutex-exception?]],\n[[terminated-thread-exception?]], [[uncaught-exception?]],\n[[uncaught-exception-reason]]\n")
("format" . "(:ctime 1014961042 :cuser #f :mtime 1358893625 :muser #f)Many Scheme implementations have more-or-less a subset of CommonLisp's\nformat function, but there're wide variations in detail.\n\n* [procedure] format ''output'' ''format-spec'' ''obj'' ...\n\n[[ChezScheme]]: supports all of the Common Lisp format directives\nexcept for those specific to the Common Lisp pretty printer.\n\n[[Chicken]]: implements almost complete spec of CommonLisp's\nformat function in the module format.\n\nThere is a format in extras, with only a few formatting directives. See also [[fprintf]], [[printf]], [[sprintf]].\n\nExample: \n{{{\n(use extras) \n(format #t \"Example output ~a: ~a~%\" 1 20)\n}}}\n=> Example output 1: 20\n\n[[SLIB]]: implements almost complete spec of CommonLisp's\nformat function.\n\n[[Gauche]]: ''output'' may be a port, #t, or #f.  \nRecognizes ~s, ~a, ~d, ~b, ~o, ~x.  Recognizes formatting parameters compatible to \nCommonLisp.  ''output'' can be omitted.\n\n[[STk]]: ''output'' may be a port, #t or #f.  \nRecognizes ~s, ~a, without any formatting parameters.\n\n[[SRFI-48]]: ''output'' may be a port, #t or #f.  \nRecognizes ~s, ~a, ~w, ~d, ~x, ~o, ~b, ~c, ~y, ~?, ~k, ~f, ~~, ~''''''%, ~t, ~&, ~_, ~h.  ~f recognizes formatting parameters.\n''ouptut'' can be omitted.\n\n* [procedure] format ''format-spec'' ''obj'' ...\n\n[[SRFI-28]]: returns a formatted string.  ~a, ~s, ~''''''% and ~~\nis defined.  [[SRFI-29]] adds ~@*.\n\n* Supported Fomat Directives\n||            ||~H ||~A ||~S ||~W ||~~ ||~T ||~''''''% ||~& ||~D ||~X ||~O ||~B ||~F ||~C ||~_ ||~Y ||~? ||~K ||~! ||\n|| ChezScheme || x || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || x || x || @ || x || x ||\n|| Chicken    || x || o || o || x || o || x || o || x || x || o || o || o || x || o || x || x || o || x || o ||\n|| Gauche     || x || @ || @ || x || o || x || o || x || @ || @ || @ || @ || x || x || x || x || x || x || x ||\n|| SLIB       || x || @ || @ || x || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || o || o ||\n|| SRFI-28    || x || o || o || x || o || x || o || x || x || x || x || x || x || x || x || x || x || x || x ||\n|| SRFI-48    || o || o || o || o || o || o || o || o || o || o || o || o || @ || o || o || o || o || o || o ||\n|| STk        || x || o || o || x || x || x || o || x || x || x || x || x || x || x || x || x || x || x || x ||\n|| STklos     || o || o || o || o || o || o || o || o || o || o || o || o || @ || o || o || o || o || o || o ||\n\n||            ||~I ||~Q ||~R ||~P ||~E ||~G ||~$ ||~| ||~^ ||~/ ||~* ||~( ~)||~{ ~}||~[ ~; ~] ||~<newline> || ~< ~> ||\n|| ChezScheme || x || x || @ || @ || @ || @ || @ || @ || @ || x || @ || @ || @ || @ || @ || @ ||\n|| Chicken    || x || x || x || x || x || x || x || x || x || x || x || x || x || x || o || x ||\n|| Gacuhe     || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x ||\n|| SLIB       || o || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || @ || x ||\n|| SRFI-28    || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x ||\n|| SRFI-48    || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x ||\n|| STk        || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x ||\n|| STklos     || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x || x ||\n\n- o: supported\n- x: not supported\n- @: recognize format parameter\n\n*** See Also\n[[Library:Fmt]]: Alex Shinn's combinator formatting library.\n")
("sys-isatty" . "(:ctime 1015313044 :cuser #f :mtime 1099726162 :muser #f)* [procedure] sys-isatty ''port-or-fd''\n\n[[Gauche]]: POSIX isatty.\n\nThis is called [[isatty?]], [[terminal-port?]], [[interactive-port?]]\nor [[port-is-a-terminal?]]\nin some implementations.\n")
("fl>=?" . "(:ctime 1191226781 :cuser #f :mtime 1191226781 :muser #f)[[$$include fl=?]]\n")
("add-signal-handler!" . "(:ctime 1018340670 :cuser #f :mtime 1018340670 :muser #f)* [procedure] add-signal-handler! ''sig'' ''handler''\n\n[[STk]]: adds ''handler'' to the list of handlers for\nsignal ''sig''.  See also [[set-signal-handler!]].\n")
("Concept:RegularExpression" . "(:ctime 1015102873 :cuser #f :mtime 1245540856 :muser #f)Most Scheme implementations come with some sort of\nregular expression matcher, but the interface varies a lot.\n\n- The language it accepts: POSIX, GNU regex library, Perl-compatible\nlibrary, SRE, or original.\n- Whether it has disjoint regexp object, or\njust uses string to represent regexp.\n- The return type of match.  substring? indexes? or a special\n''match'' object?\n- If it has regexp object, whether it supports literal representation\nof regexp or not.\n- Procedure names to match.\n\n----\n** [[Chicken]]\n- language: GNU regex\n- regexp object: Yes\n- return type of match: substring, indexes.\n- API: [[string-match]], [[string-match-positions]], [[string-search]],\n[[string-search-positions]], [[string-split-fields]],\n[[string-substitute]].\n\n** [[Scheme48]]\n- language: built by funcional style\n- regexp object: Yes (mixed with character set object)\n- return type of match:\n- API: [[set]], [[range]], [[ranges]], [[ascii-range]], [[ascii-ranges]],\n[[negate]], [[intersection]], [[union]], [[subtract]], [[lower-case]],\n[[upper-case]], [[alphabetic]], [[numeric]], [[alphanumeric]],\n[[punctuation]], [[graphic]], [[printing]], [[control]], [[blank]],\n[[whitespace]], [[hexdigit]], [[string-start]], [[string-end]],\n[[sequence]], [[one-of]], [[text]], [[repeat]], [[ignore-case]],\n[[use-case]], [[submatch]], [[no-submatches]], [[any-match?]],\n[[exact-match?]], [[match]], [[match-start]], [[match-end]],\n[[match-submatches]]\n\n** [[Gauche]]\n- language: original (similar to POSIX, with some restrictions and\nextensions).\n- regexp object: Yes\n- return type of match: regmatch object\n- literal representation: #/''regexp''/, see [[#/]].\n- API: [[regexp?]],\n[[string->regexp]], [[rxmatch]], [[rxmatch-start]], [[rxmatch-end]],\n[[rxmatch-substring]], [[rxmatch-before]], [[rxmatch-after]], [[rxmatch-if]],\n[[rxmatch-let]], [[rxmatch-cond]], [[rxmatch-case]], [[regexp-replace]],\n[[regexp-replace-all]], [[regexp-quote]]\n\n** [[MzScheme]]\n- language: egrep, Perl-compatible\n- regexp object: Yes\n- return type of match: substring, indexes.\n- literal representation: #rx\"''regexp''\" (regexp), #rx#\"''regexp''\" (byte-regexp), #px\"''regexp''\" (pregexp), #px#\"''regexp''\" (byte-pregexp)\n- API: [[regexp]], [[pregexp]], [[regexp?]], [[pregexp?]],\n[[byte-regexp]], [[byte-pregexp]], [[byte-regexp?]], [[byte-pregexp?]],\n[[regexp-match]], [[regexp-match-positions]], [[regexp-match?]],\n[[regexp-match-peek]], [[regexp-match-peek-positions]],\n[[regexp-match-peek-immediate]], [[regexp-match-peek-positions-immediate]],\n[[regexp-replace]], [[regexp-replace*]]\n\n\n** [[STklos]]\n- language: Perl-compatible\n- regexp object: Yes\n- return type of match: substring, indexes\n- literal representation: No.\n- API: [[string->regexp]], [[regexp?]], [[regexp-match]], [[regexp-match-positions]],\n[[regexp-replace]], [[regexp-replace-all]], [[regexp-quote]]\n")
("string-incomplete?" . "(:ctime 1015805799 :cuser #f :mtime 1015805799 :muser #f)* [procedure] string-incomplete? ''string''\n\n[[Gauche]]: returns #t if ''string'' is an incomplete string.\n''Incomplete string'' in Gauche is a string that contains a\nbyte sequence which is not valid in the native multibyte encoding.\nSee also [[string-complete->incomplete]], [[string-incomplete->complete]].\n")
("errno/inval" . "(:ctime 1015077247 :cuser #f :mtime 1015077247 :muser #f)[[$$include errno/perm]]\n")
("cond-expand" . "(:ctime 1014861365 :cuser #f :mtime 1015045670 :muser #f)* [syntax] cond-expand ''cond-expand-clause'' ...\n\n[[SRFI-0]]: The cond-expand form tests for the existence of features at \nmacro-expansion time. It either expands into the body of one of its\nclauses or signals an error during syntactic processing. cond-expand \nexpands into the body of the first clause whose feature\nrequirement is currently satisfied (the else clause, if present, \nis selected if none of the previous clauses is selected). \n\nBesides various ''srfi-N'' feature identifiers, some implementations define\nmore identifiers.\n\n:[[Chicken]]: feature 'chicken' is defined.  Also feature 'compiling' is\ndefined during compilation.\n:[[Gauche]]: featuer 'gauche' is defined.\n\n\n")
("blob-sint-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144716626 :muser #f)* [procedure] blob-sint-set! ''size'' ''endianness'' ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: Stores the two's complement representation of size ''size'' and specified by ''endianness'' into the ''blob'' at\nindices {k, ..., k + size - 1}.\n''n'' must be an exact integer in the interval [-256^(size-1), (256^(size-1))-1].\n\nSee also [[endianness]].\n")
("null-pointer?" . "(:ctime 1015273949 :cuser #f :mtime 1015273949 :muser #f)* [procedure] null-pointer? ''pointer''\n\n[[Chicken]]: see [[null-pointer]].\n")
("string-for-read" . "(:ctime 1039426938 :cuser #f :mtime 1039426938 :muser #f)* [procedure] string-for-read ''string''\n\n[[Bigloo]]: Returns a copy of ''string'' with each special \ncharacter replaced by an escape sequence.\n")
("end-of-file" . "(:ctime 1015050889 :cuser #f :mtime 1015050889 :muser #f)* [procedure] end-of-file\n\n[[Chicken]]: returns eof object.\n")
("remprop!" . "(:ctime 1039345653 :cuser #f :mtime 1039345653 :muser #f)* [procedure] remprop! ''symbol-or-keyword'' ''key''\n\n[[Bigloo]]: removes property with key ''key'' from\n''symbol-or-keyword'' 's property list.\n\nSee also [[symbol-plist]], [[getprop]], [[putprop!]].\n\nChezScheme calls this [[remprop]].\n")
("fp>=" . "(:ctime 1191226816 :cuser #f :mtime 1191226817 :muser #f)[[$$include fp=]]\n")
("Larceny" . "(:ctime 1173770840 :cuser #f :mtime 1413630025 :muser #f)Larceny is a simple and efficient implementation of the Scheme programming language. Created originally as a test vehicle for research on garbage collection and compiler optimizations, Larceny has grown into a major multiplatform system, and is one of the very few implementations that support all four de facto standards for Scheme: IEEE/ANSI, [[R5RS]], ERR5RS, and the [[R6RS]]. Development of Larceny has been supported by NSF, Sun Microsystems, and Microsoft.\n\nhttp://www.larcenists.org/\n\n[[$$srfis 0 1 2 5 6 8 9 11 13 14 16 17 19 23 25 26 27 28 29 38 39 41 42 43 45 48 51 54 59 61 63 64 67 78 87 98 99 99 99 99 60 66 69 71 74 86 95 96]]\n")
("list->char-set!" . "(:ctime 1018084371 :cuser #f :mtime 1018084371 :muser #f)[[$$include list->char-set]]\n")
("file-execute-access?" . "(:ctime 1015197080 :cuser #f :mtime 1015197080 :muser #f)[[$$include file-read-access?]]\n")
("hash-table-keys" . "(:ctime 1015915549 :cuser #f :mtime 1191360858 :muser #f)* [procedure] hash-table-keys ''hash-table''\n\n[[SRFI-69]]: Returns a list of keys in ''hash-table''. The order of the keys is unspecified.\n\n* [procedure] hash-table-keys ''hash-table''\n* [procedure] hash-table-values ''hash-table''\n\n[[Gauche]]: See [[Concept:HashTable]].\n\nNote: R6RS has [[hashtable-keys]], which returns a ''vector'' of all keys, not a list.\n")
("hash-by-identity" . "(:ctime 1144494246 :cuser #f :mtime 1144495911 :muser #f)* [procedure] hash-by-identity ''object'' [''bound'']\n\n[[SRFI-69]]: The same as [[hash]], except that this function is only guaranteed to be acceptable for [[eq?]]. The reason for providing this function is that it might be implemented significantly more efficiently than [[hash]]. Implementations are encouraged to provide this function as a builtin.\n")
("open-file" . "(:ctime 1018334974 :cuser #f :mtime 1018382589 :muser #f)* [procedure] open-file ''filename'' ''mode''\n\n[[STk]]: ''mode'' is either \"r\" or \"w\".\n\n* [procedure] open-file ''path'' ''file-options'' ''file-mode''\n\n[[Scheme48]]: ''file-options'' and ''file-mode''\nare constructed by [[file-options]] and [[file-mode]].\n\n* [procedure] open-file ''fname'' ''flags'' [''perms'']\n\n[[Scsh]]\n")
("remv" . "(:ctime 1014944870 :cuser #f :mtime 1018333119 :muser #f)* [procedure] remv ''obj'' ''list''\n\n[[ChezScheme]], [[STk]]: remove ''obj'' from ''list'', using [[eqv?]] to compare.\nEquivalent to [[SRFI-1]]'s [[delete]] with passing [[eqv?]] for\ncomparison predicate.\n\nSee also [[remove]], [[remq]], [[remv!]].\n")
("dequeue-all!" . "(:ctime 1015072406 :cuser #f :mtime 1015072406 :muser #f)* [procedure] dequeue-all! ''queue''\n\n[[Gauche]]: see [[make-queue]].\n")
("define-foreign-variable" . "(:ctime 1015046305 :cuser #f :mtime 1015046305 :muser #f)* [syntax] define-foreign-variable ''name'' ''type'' [''string'']\n\n[[Chicken]]: defines a Scheme variable ''name'' that accesses\na foreign variable ''string''.\nSee also [[define-foreign-parameter]].\n")
("directory?" . "(:ctime 1015105359 :cuser #f :mtime 1039754904 :muser #f)* [procedure] directory? ''pathname''\n\n[[Chicken]], [[Bigloo]]: see if the pathname is a directory.\nSee [[Concept:FileSystem]].\n\nThis is called [[file-is-directory?]] on some implementations\n")
("queue-last" . "(:ctime 1015072359 :cuser #f :mtime 1015072359 :muser #f)* [procedure] queue-last ''queue''\n\n[[Chicken]]: see [[make-queue]].\n\nThis is called [[queue-rear]] in some implementations.\n")
("fluid" . "(:ctime 1017989749 :cuser #f :mtime 1152533657 :muser #f)* [magic form] fluid ''identifier''\n\n[[RRS]]: returns the value of ''identifier'' in current dynamic environment.\n\nSee also [[fluidbind]].\n\n* [procedure] fluid ''fluid''\n\n[[Scheme48]]: get fluid's value.  See also [[make-fluid]].\n\nGuile calls this [[fluid-ref]].\n")
("with-string-io" . "(:ctime 1018084225 :cuser #f :mtime 1018084225 :muser #f)* [procedure] with-string-io ''string'' ''proc''\n\n[[Gauche]]: calls ''proc'' with binding the current\ninput port to an input string port from ''string''\nand the current output port to \nan output string port whose content\nat the time ''proc'' returns will be the result\nof with-string-io.\n\nSee also [[call-with-string-io]]\n")
("MzScheme" . "(:ctime 1018647038 :cuser #f :mtime 1327407041 :muser #f)Multi-platform, nearly R5RS-compliant Scheme implementation\nwith a compiler, graphical toolbox, development environment, threads, exceptions, object system, and more.\n\nPLT Scheme is an umbrella name for a family of implementations of the Scheme programming language.  MzScheme is the lightweight, embeddable, scripting-friendly PLT Scheme implementation.\n\nhttp://www.plt-scheme.org/\n\nUp-to-date documentation is found at \n\nhttp://download.plt-scheme.org/doc/ \n\nThe following sections are based upon an *old* version of the PLT MzScheme Manual.\n\nCheck the DrScheme HelpDesk for an up-to-date version of the following list:\n\n[[$$srfis 1 2 4 5 6 7 8 9 11 13 14 16 17 19 23 25 26 27 28 29 30 31 34 35 38 39 40 41 42 43 45 48 54 57 59 60 61 62 63 64 66 67 69 71 74 78 86 87 98]]\n\n\n* Evaluation Order\n\nArguments in an application are evaluated left-to-right.\n\n* Basic Syntax Extensions \n\n[[when]], [[unless]], [[begin0]], [[define-values]],\n[[let-values]], [[let*-values]], [[letrec-values]],\n[[set!-values]], [[fluid-let]], [[case-lambda]]\n\nThe last test expression in an [[and]] or a [[or]] can return\nmultiple values.\n\nThe [[quote]] form never allocates, so the results of multiple\nevaluations of a single quote expression are always [[eq?]].\n\n[[Define]] supports the MIT-generalization.\n\nAn \"empty application\" from () expands to the quoted list '().\n\n\n* Basic Data Extensions - Void and Undefined\n\n[[void]], [[void?]]\n\n* Basic Data Extensions - Booleans\n\n[[andmap]], [[ormap]]\n\n* Basic Data Extensions - Numbers\n\n[[add1]], [[sub1]], \n\n[[quotient/remainder]], [[integer-sqrt]], [[integer-sqrt/remainder]], \n\n[[bitwise-ior]], [[bitwise-and]], [[bitwise-xor]],\n[[bitwise-not]], [[arithmetic-shift]], [[random]],\n\n[[random-seed]], [[pseudo-random-generator->vector]],\n[[vector->pseudo-random-generator]], [[current-pseudo-random-generator]],\n[[make-pseudo-random-generator]], [[pseudo-random-generator?]]\n\n[[integer-bytes->integer]], [[integer->integer-bytes]], [[system-big-endian?]], [[floating-point-bytes->real]], [[real->floating-point-bytes]]\n\n* Basic Data Extensions - Characters\n\n[[char=?]], [[char<?]], ...\n\n[[char-alphabetic?]], [[char-lower-case?]], [[char-upper-case?]],\n[[char-title-case?]], [[char-numeric?]], [[char-symbolic?]],\n[[char-punctuation]], [[char-graphic?]], [[char-whitespace]],\n[[char-blank?]], [[char-iso-control]].\n\n[[char-upcase]], [[char-downcase]], [[char-titlecase]].\n[[make-known-char-list]], [[char-utf-8-length]].\n\n* Basic Data Extensions - Strings\n\n[[string-copy!]]\n\n[[string=?]], [[string<?]], etc. all take two or more\nstring arguments.\n\n[[string-locale=?]], [[string-locale<?]], [[string-locale->?]],\n[[string-locale-ci=?]], [[string-locale-ci<?]], [[string-locale>?]]\n\n* Basic Data Extensions - Byte strings\n\nA byte string is like a string, but is a sequence of bytes and\nnot characters.\n\n[[bytes?]], [[bytes]], [[make-bytes]], [[bytes-length]],\n[[bytes-ref]], [[bytes-set!]], [[bytes-fill!]], [[subbytes]],\n[[bytes-append]], [[bytes-copy]], [[bytes-copy!]], [[bytes->list]],\n[[list->bytes]], [[bytes->immutable-bytes]], [[bytes=?]],\n[[bytes<?]], [[bytes>?]]\n\n[[bytes->string/utf8]], [[bytes->string/locale]], [[bytes->string/latin1]],\n[[string->bytes/utf-8]], [[string->bytes/locale]], [[string->bytes/latin-1]],\n[[string-utf-8-length]], [[bytes-utf-8-length]], [[bytes-utf-8-ref]],\n[[bytes-utf-8-index]]\n\n[[bytes-open-converter]], [[bytes-close-converter]], [[bytes-convert]], \n[[bytes-convert-end]], [[bytes-converter?]], [[locale-string-encoding]]\n\n* Basic Data Extensions - Symbols\n\n[[string->uninterned-symbol]], [[gensym]]\n\n* Basic Data Extensions - Vectors\n\n[[vector->immutable-vector]], [[vector-immutable]]\n\n* Basic Data Extensions - Lists\n\n[[null]], [[reverse!]], [[append!]], [[list*]],\n[[cons-immutable]], [[list-immutable]], [[list*-immutable]],\n[[immutable?]].\n\n* Basic Data Extensions - Boxes\n\n[[box]], [[box-immutable]], [[unbox]], [[set-box!]], [[box?]], [[#&]] \n\n* Basic Data Extensions - Procedures\n\n[[procedure-arity]], [[procedure-arity-includes?]],\n[[arity-at-least-value]]\n\n[[primitive?]], [[primitive-name]], [[primitive-result-arity]],\n[[primitive-closure?]], [[simple-return-primitive?]],\n\n* Basic Data Extensions - Promises\n\n[[promise?]]\n\n* Basic Data Extensions - Hash Tables\n\n[[make-hash-table]], [[make-immutable-hash-table]], [[hash-table?]],\n[[hash-table-put!]], [[hash-table-get]], [[hash-table-remove!]], \n[[hash-table-map]], [[hash-table-for-each]], [[hash-table-count]],\n[[hash-table-copy]], [[eq-hash-code]], [[equal-hash-code]]\n\n--- THE FOLLOWING SECTIONS HAVEN'T BEEN UPDATED SINCE v103 FROM 2000 ---\n\n* Structures\n[[struct]], [[define-struct]], [[let-struct]],\n[[struct?]], [[struct-length]], [[struct-ref]],\n[[struct->vector]], [[struct-type?]], \n[[struct-constructor-procedure?]], [[struct-predicate-procedure?]],\n[[struct-getter-procedure?]], [[struct-setter-procedure?]]\n\n* Classes and objects\n[[interface]], [[class*/names]], [[class*]], [[class]],\n[[meta-object]], [[ivar]], [[ivar/proc]], [[send]],\n[[make-generic/proc]], [[make-generic]], [[object?]],\n[[class?]], [[interface?]], [[class->interface]],\n[[object-interface]], [[is-a?]], [[subclass?]],\n[[implementation?]], [[interface-extension?]],\n[[ivar-in-interface?]], [[interface->ivar-names]],\n[[class-initialization-arity]]\n\n* Units\n[[unit]], [[invoke-unit]], [[compound-unit]], [[unit?]],\n[[unit/sig]], [[define-signature]], [[let-signature]],\n[[compound-unit/sig]], [[invoke-unit/sig]], [[unit/sig->unit]], [[unit->unit/sig]], \n[[verify-signature-match]], [[verify-linkage-signature-match]]\n\n* Exceptions and control flow\n[[raise]], [[current-exception-handler]], [[with-handlers]],\n[[error]], [[raise-type-error]], [[raise-mismatch-error]],\n[[raise-syntax-error]], [[inferred-name]],\n[[let/cc]], [[call-with-escape-continuation]], [[call/ec]],\n[[let/ec]], [[with-continuation-mark]],\n[[current-continuation-marks]], \n[[continuation-mark-set->list]],\n[[continuation-mark-set?]],\n[[error-escape-handler]]\n\n* Threads and namespaces\n[[thread]], [[current-thread]], [[thread?]], [[sleep]],\n[[thread-running?]], [[thread-wait]], [[kill-thread]],\n[[break-thread]], [[call-in-nested-thread]],\n\n[[make-semaphore]], [[semaphore?]], [[semaphore-post]],\n[[semaphore-wait]], [[semaphore-try-wait?]],\n[[semaphore-wait/enable-break]],\n\n[[make-namespace]], [[namespace?]], [[defined?]],\n[[undefine]], [[global-defined-value]], \n[[make-global-value-list]], [[built-in-name]], [[#%]],\n[[keyword-name]], [[keyword-name?]]\n\n[[current-directory]], [[current-input-port]],\n[[current-output-port]], [[current-error-port]],\n[[global-port-print-handler]], [[read-case-sensitive]],\n[[read-square-bracket-as-paren]], [[read-curly-brace-as-paren]],\n[[read-accept-box]], [[read-accespt-compiled]],\n[[read-accept-bar-quote]], [[read-accept-graph]],\n[[read-decimal-as-inexact]], [[print-graph]], [[print-struct]],\n[[print-box]], [[print-vector-length]],\n[[compile-allow-cond-fallthrough]],\n[[compile-allow-set!-undefined]], [[current-prompt-read]],\n[[current-eval]], [[current-namespace]], [[current-print]],\n[[current-load]], [[current-load-extension]],\n[[current-load-relative-directory]],\n[[use-compiled-file-kinds]],\n[[current-library-collection-paths]],\n[[current-require-relative-collection]],\n[[current-exception-handler]], [[error-escape-handler]],\n[[error-display-handler]], [[error-print-width]],\n[[error-value->string-handler]], [[break-enabled]],\n[[current-custodian]], [[exit-handler]],\n[[current-pseudo-random-generator]]\n\n[[make-parameter]], [[parameter?]], \n[[parameter-procedure=?]], [[parameterize]],\n[[check-parameter-procedure]]\n\n[[make-custodian]], [[custodian-shutdown-all]],\n[[custodian?]]\n\n* Regular Expression\n[[regexp]], [[pregexp]], [[regexp?]], [[pregexp?]],\n[[byte-regexp]], [[byte-pregexp]], [[byte-regexp?]], [[byte-pregexp?]],\n[[regexp-match]], [[regexp-match-positions]], [[regexp-match?]],\n[[regexp-match-peek]], [[regexp-match-peek-positions]],\n[[regexp-match-peek-immediate]], [[regexp-match-peek-positions-immediate]],\n[[regexp-replace]], [[regexp-replace*]]\n\n* System Utilities\n[[eof]], [[port?]],\n[[open-input-file]], [[open-output-file]], \n[[call-with-input-file]], [[call-with-output-file]],\n[[with-input-from-file]], [[with-output-from-file]],\n[[make-pipe]],\n[[open-input-string]], [[open-output-string]],\n[[get-output-string]], [[file-stream-port?]],\n[[flush-output]], [[file-position]],\n[[make-input-port]], [[make-output-port]],\n[[read-line]], [[read-string]], [[read-string-avail!]],\n[[read-string-avail!/enable-break]], [[print]],\n[[write-string-avail]], [[write-string-avail/enable-break]],\n[[fprintf]], [[printf]], [[format]],\n[[port-read-handler]], [[port-display-handler]],\n[[port-write-handler]], [[port-print-handler]]\n\n[[build-path]], [[absolute-path?]], [[relative-path?]],\n[[complete-path?]], [[path->complete-path]],\n[[resolve-path]], [[expand-path]], [[simplify-path]],\n[[normal-case-path]], [[split-path]],\n[[find-executable-path]], [[find-system-path]],\n[[path-list-string->path-list]], [[file-exists?]],\n[[link-exists?]], [[delete-file]], [[rename-file-or-directory]],\n[[file-or-directory-modify-seconds]],\n[[file-or-directory-permissions]],\n[[file-size]], [[copy-file]], [[current-directory]],\n[[current-drive]], [[directory-exists?]],\n[[make-directory]], [[delete-directory]], \n[[directory-list]], [[filesystem-root-list]]\n\n[[tcp-listen]], [[tcp-connect]], [[tcp-accept]],\n[[tcp-accept-ready?]], [[tcp-close]], [[tcp-listener?]],\n[[tcp-addresses]]\n\n[[current-seconds]], [[seconds->date]],\n[[current-milliseconds]], [[current-process-milliseconds]],\n[[current-gc-milliseconds]], [[time-apply]], [[time]]\n\n[[system]], [[system*]], [[execute]], [[execute*]],\n[[process]], [[process*]], [[process/ports]],\n[[process*/ports]], [[send-event]]\n\n[[getenv]], [[putenv]]\n\n[[system-type]], [[system-library-subpath]], [[version]],\n[[banner]]\n\n* Memory Management\n[[make-weak-box]], [[weak-box-value]], [[weak-box?]],\n[[make-will-executor]], [[will-executor?]], [[will-register]],\n[[will-execute]], [[will-try-execute]],\n[[collect-garbage]], [[current-memory-use]],\n[[dump-memory-stats]]\n\n* Macros\n[[define-macro]], [[let-macro]], [[macro?]],\n[[define-id-macro]], [[let-id-macro]], [[id-macro?]],\n[[define-expansion-time]], [[let-expansion-time]],\n[[local-expansion-time-value]], \n[[global-expansion-time-value]],\n[[local-expansion-time-bound?]],\n[[expansion-time-value?]], [[begin-elaboration-time]],\n[[syntax?]], [[expand-defmacro]], [[expand-defmacro-once]],\n[[local-expand-defmacro]], [[local-expand-body-expression]]\n\n* Support facilities\n[[eval]], [[load-relative]], [[load/use-compiled]],\n[[load/cd]], [[read-eval-print-loop]], [[exit]]\n\n[[#`]], [[#|]], [[|#]], [[#!]], [[#0=]], [[#0#]]\n\n[[compile]], [[load-extension]], [[write-image-to-file]],\n[[read-image-from-file]]\n\n* Library collections and MzLib\n\n[[require-library]]\n\n[[awk]]\n\n[[class/d]], [[class/d*]], [[class/d*/names]],\n\n[[command-line]], [[parse-command-line]]\n\n[[compile-file]]\n\n[[date->string]], [[date-display-format]], [[find-seconds]],\n[[date->julian/scalinger]], [[julian/scalinger->string]]\n\n\n [http://www.obtenir-rio.info numero rio]\n")
("ucs2>=?" . "(:ctime 1039428814 :cuser #f :mtime 1039428814 :muser #f)[[$$include ucs2=?]]\n")
("unless" . "(:ctime 1014941127 :cuser #f :mtime 1039510360 :muser #f)* [syntax] unless ''test-exp'' ''exp1'' ''exp2'' ...\n\n[[ChezScheme]], [[Chicken]], [[STk]], [[STklos]], [[Gauche]],\n[[MzScheme]], [[SISC]]\n\nSee also [[when]].\n")
("collect-maximum-generation" . "(:ctime 1015030502 :cuser #f :mtime 1015030502 :muser #f)* [procedure] collect-maximum-generation [''newval'']\n\n[[ChezScheme]]: garbage collector parameter.  See [[collect]].\n")
("widget->string" . "(:ctime 1018335723 :cuser #f :mtime 1018335723 :muser #f)* [procedure] widget->string ''widget''\n* [procedure] string->widget ''string''\n\n[[STk]]: converts widget and string back and forth.\n")
("perm/irwxg" . "(:ctime 1015099864 :cuser #f :mtime 1015099864 :muser #f)[[$$include perm/irusr]]\n")
("flonum->fixnum" . "(:ctime 1014952734 :cuser #f :mtime 1039380079 :muser #f)* [procedure] flonum->fixnum ''flonum''\n\n[[ChezScheme]], [[Bigloo]]\n\nSee also [[flonum?]], [[fixnum->flonum]]\n")
("match-start" . "(:ctime 1018083665 :cuser #f :mtime 1018083665 :muser #f)* [procedure] match-start ''match''\n* [procedure] match-end ''match''\n\n[[Scheme48]]: Returns the start or end index of\n''match'' which is returned from [[match]].\nSee also [[Concept:RegularExpression]], [[match]],\n[[match-submatches]].\n\nGauche has similar procedures\nas [[rxmatch-start]], [[rxmatch-end]].\n\n\n")
("string-ref" . "(:ctime 1014859700 :cuser #f :mtime 1191566884 :muser #f)* [procedure] string-ref ''string'' ''k''\n\n[[R5RS]], [[R6RS]]: ''k'' must be a valid index of ''string''. \nString-ref returns character ''k'' of ''string'' using zero-origin indexing. \n\nIn R6RS, it is noted that an implementation ''should'' make [[string-ref]]\nrun in constant time.  It is \"''should''\", so it doesn't exclude implementations\nthat uses multibyte strings or structured strings like ropes, but such\nimplementations should keep in mind that portable R6RS libraries may rely\non the O(1) string-ref to implement some string algorithms.\n\nR6RS has [[string-for-each]], which would be a better choice to process\na string seqentially and avoid variations in string access time.\n\nSee also [[string-set!]].\n")
("string->date" . "(:ctime 1038189623 :cuser #f :mtime 1038189623 :muser #f)* [procedure] string->date ''string'' ''template-string''\n\n[[SRFI-19]]: parse date string.  See also [[make-date]],\n[[date->string]].\n")
("Stalin" . "(:ctime 1152212220 :cuser #f :mtime 1169130591 :muser #f)Stalin is an extremely efficient compiler for R4RS Scheme.  It is designed to be\nused not as a development tool but rather as a means to generate efficient\nexecutable images either for application delivery or for production research\nruns.  \n\nhttp://cobweb.ecn.purdue.edu/~qobi/software.html\n\n[[$$srfis]]\n\n----\n\n[[primitive-procedure]], [[foreign-procedure]]\n\n[[list-length]], [[sublist]], [[sub]], [[list-append]], [[list-reverse]], [[ref]], [[list-set!]], [[ref!]], [[list-fill!]], [[fill!]], [[list-copy]], [[string->uninterned-symbol]], [[string-reverse]], [[<<]], [[>>]], [[bitwise-not]], [[bitwise-and]], [[bitwise-or]], [[make-displaced-vector]], [[subvector]], [[vector-append]], [[vector-reverse]], [[vector-copy]], [[panic]], [[pointer?]], [[integer->string]], [[integer->input-port]], [[integer->output-port]], [[integer->pointer]]\n\n[[argv]]\n")
("char-set:lower-case" . "(:ctime 1018082608 :cuser #f :mtime 1018082608 :muser #f)* [variable] char-set:lower-case\n* [variable] char-set:upper-case\n* [variable] char-set:title-case\n* [variable] char-set:letter\n* [variable] char-set:digit\n* [variable] char-set:letter+digit\n* [variable] char-set:graphic\n* [variable] char-set:printing\n* [variable] char-set:whitespace\n* [variable] char-set:iso-control\n* [variable] char-set:punctuation\n* [variable] char-set:symbol\n* [variable] char-set:hex-digit\n* [variable] char-set:blank\n* [variable] char-set:ascii\n* [variable] char-set:empty\n* [variable] char-set:full\n\n[[SRFI-14]]: predefined character sets.\n\nCf. Scheme48 has [[lower-case]] etc.\n")
("record-predicate" . "(:ctime 1014948083 :cuser #f :mtime 1017982904 :muser #f)* [procedure] record-predicate ''rtd''\n\n[[ChezScheme]], [[SLIB]], [[Scheme48]]\n\nSee also [[make-record-type]], [[define-record]],\n[[define-record-type]].\n")
("set-timer" . "(:ctime 1014964654 :cuser #f :mtime 1015199500 :muser #f)* [procedure] set-timer ''n''\n\n[[ChezScheme]]:  See also [[timer-interrupt-handler]].\n\nThis procedure is called [[set-alarm!]] or [[sys-alarm]]\non some implementations.\n\n")
("array-in-bounds?" . "(:ctime 1099394753 :cuser #f :mtime 1144488716 :muser #f)* [procedure] array-in-bounds? ''array'' ''index0'' ''index1'' ...\n\n[[SRFI-47]], [[SRFI-63]]: Returns #t if its arguments would be acceptable to [[array-ref]].\n")
("string-ci>=?" . "(:ctime 1015063637 :cuser #f :mtime 1015063637 :muser #f)[[$$include string-ci=?]]\n")
("gauche" . "(:ctime 1015023583 :cuser #f :mtime 1015023583 :muser #f)* [module] gauche\n\n[[Gauche]]: a module that contains Gauche built-in bindings.\nSee also [[scheme]], [[null]], [[user]], [[define-module]].\n")
("julian-day->time-tai" . "(:ctime 1099301003 :cuser #f :mtime 1099301003 :muser #f)[[$$include julian-day->date]]\n")
("SRFI-69" . "(:ctime 1126754960 :cuser #f :mtime 1126754961 :muser #f)SRFI-69: Basic hash tables\n\nhttp://srfi.schemers.org/srfi-69/srfi-69.html\n\n[[$$srfi-implementors]]\n----\n\n** Type constructors and predicate\n[[make-hash-table]], [[hash-table?]], [[alist->hash-table]]\n\n** Reflective queries\n[[hash-table-equivalence-function]], [[hash-table-hash-function]]\n\n** Dealing with single elements\n[[hash-table-ref]], [[hash-table-ref/default]], [[hash-table-set!]],\n[[hash-table-delete!]], [[hash-table-exists?]], [[hash-table-update!]],\n[[hash-table-update!/default]]\n\n** Dealing with the whole contents\n[[hash-table-size]], [[hash-table-keys]], [[hash-table-values]], \n[[hash-table-walk]], [[hash-table-fold]], [[hash-table->alist]], \n[[hash-table-copy]], [[hash-table-merge!]]\n\n** Hashing\n[[hash]], [[string-hash]], [[string-ci-hash]], [[hash-by-identity]]\n\nSee also [[Concept:HashTable]].\n\n")
("parameter?" . "(:ctime 1039517747 :cuser #f :mtime 1099777219 :muser #f)* [procedure] parameter? ''obj''\n\n[[MzScheme]], [[STklos]]: true iff ''obj'' is a parameter.\nSee also [[make-parameter]], [[parameter-procedure=?]]\n\nNote: some implementations realizes a parameter as\njust a procedure; it is not possible to distinguish\nparameter from procedure in such implementations.\n\n")
("make-queue" . "(:ctime 1015071722 :cuser #f :mtime 1017980709 :muser #f)* [procedure] make-queue\n\n[[Chicken]]: makes a queue.  Operations defined on queue are:\n[[list->queue]], [[queue?]], [[queue->list]], [[queue-add!]],\n[[queue-empty?]], [[queue-first]], [[queue-last]], [[queue-remove!]].\n\n[[Gauche]] (with module util.queue): makes a queue.  \nOperations defined on queue are: [[queue?]], [[dequeue!]],\n[[dequeue-all!]], [[enqueue!]], [[queue-empty?]], [[queue-front]],                    \n[[queue-rear]], [[queue-pop!]], [[queue-push!]]\n\n[[SLIB]] (with require 'queue): makes a queue.\nOperations defined on queue are: [[queue?]], [[dequeue!]],\n[[enqueue!]], [[queue-empty?]], [[queue-front]],                    \n[[queue-rear]], [[queue-pop!]], [[queue-push!]]\n\n[[Scheme48]]: makes a queue.\nOperations defined on queue are: [[queue?]]\n[[queue-empty?]], [[enqueue!]], [[dequeue!]],\n[[queue-length]], [[queue->list]], [[list->queue]],\n[[delete-from-queue!]].\n")
("time-monotonic->time-utc" . "(:ctime 1099301302 :cuser #f :mtime 1099301302 :muser #f)[[$$include time-monotonic->date]]\n")
("module-name" . "(:ctime 1015772559 :cuser #f :mtime 1099723052 :muser #f)* [procedure] module-name ''module''\n\n[[STk]], [[STklos]], [[Gauche]]: see also [[module-imports]], [[module-exports]],\n[[module-table]].\n")
("file-info-group" . "(:ctime 1040727331 :cuser #f :mtime 1040727331 :muser #f)[[$$include file-info-name]]\n")
("random-source-randomize!" . "(:ctime 1038273376 :cuser #f :mtime 1038273376 :muser #f)* [procedure] random-source-randomize! ''source''\n\n[[SRFI-27]]: Makes an effort to set the state of the random source ''source'' to a truly random state.\n")
("real-time" . "(:ctime 1015028556 :cuser #f :mtime 1015028556 :muser #f)* [procedure] real-time\n\n[[ChezScheme]]: statistics\n")
("if3" . "(:ctime 1144494246 :cuser #f :mtime 1144502273 :muser #f)* [syntax] if3 ''c'' ''less'' ''equal'' ''greater''\n\n[[SRFI-67]]: If3 is the 3-way conditional for comparisons. First ''c'' is\nevaluated, resulting in value ''C''.\nThe value ''C'' must be an exact integer in {-1, 0, 1}, otherwise an error is signalled.\nIf ''C'' = -1 then the value of the\nif3-expression is obtained by evaluating ''less''. If ''C'' = 0 then ''equal'' is\nevaluated. If ''C'' = 1 then ''greater'' is evaluated.\n\n")
("Index:f" . "(:ctime 1014842808 :cuser #f :mtime 1015014510 :muser #f)[[$$index f]]\n\n")
("#," . "(:ctime 1014883021 :cuser #f :mtime 1191206644 :muser #f)* [reader syntax] #,(''tag'' ''datum'' ...)\n\n[[SRFI-10]]: Calls read-time constructor specified by ''tag'' at the read-time.\n\nSee also [[define-reader-ctor]].\n\n* [reader syntax] #,''datum''\n\n[[R6RS]]: Abbreviation of ([[unsyntax]] ''datum'').  See [[quasisyntax]].\n")
("set-input-port-position!" . "(:ctime 1039755948 :cuser #f :mtime 1039755948 :muser #f)* [procedure] set-input-port-position! ''port'' ''pos''\n* [procedure] set-output-port-position! ''port'' ''pos''\n\n[[Bigloo]]: sets the port position.\nSee also [[input-port-position]] and [[output-port-position]].\n\nOther implementations have [[file-position]],\n[[set-file-position!]], [[seek]].\n")
("process-output->string-list" . "(:ctime 1201741705 :cuser #f :mtime 1201741706 :muser #f)[[$$include process-output->string]]\n")
("extend-syntax" . "(:ctime 1015033895 :cuser #f :mtime 1015033929 :muser #f)* [syntax] extend-syntax (''name'' ''key'' ...) (''pat'' ''fender'' ''template'') ...\n\n[[ChezScheme]]: pattern-matching style macro definition.  See also [[with]].\n\n")
("mark-port-closed!" . "(:ctime 1015022051 :cuser #f :mtime 1015022051 :muser #f)* [procedure] mark-port-closed! ''port''\n\n[[ChezScheme]]\n\nSee also [[close-port]]\n")
("unlink" . "(:ctime 1018128313 :cuser #f :mtime 1018337863 :muser #f)* [procedure] unlink ''path''\n\n[[Scheme48]]: POSIX unlink().\nSee also [[Concept:FileSystem]].\n\nThis is called [[delete-file]],\n[[remove-file]] or [[sys-unlink]]\nin some implementations.\n")
("blob-s8-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144716199 :muser #f)* [procedure] blob-s8-ref ''blob'' ''k''\n\n[[SRFI-74]]:  Returns the exact integer corresponding to the two's complement\nrepresentation at index ''k'' of ''blob''.\n\n")
("file-writable?" . "(:ctime 1015905702 :cuser #f :mtime 1015905702 :muser #f)[[$$include file-readable?]]\n")
("seconds->string" . "(:ctime 1015200403 :cuser #f :mtime 1015200403 :muser #f)* [procedure] seconds->string ''seconds''\n\n[[Chicken]]: posix ctime.   See also [[current-seconds]], \n[[time->string]].\n\nOther implementations call this [[posix-ctime]] or [[sys-ctime]].\n")
("fxior" . "(:ctime 1191224604 :cuser #f :mtime 1191224604 :muser #f)[[$$include fxand]]\n")
("SRFI-105" . "(:ctime 1381734825 :cuser #f :mtime 1381734825 :muser #f)SRFI-105: SRFI Libraries\n\nhttp://srfi.schemers.org/srfi-105/srfi-105.html\n\n[[$$srfi-implementors]]\n")
("string>?" . "(:ctime 1015063551 :cuser #f :mtime 1015063551 :muser #f)[[$$include string=?]]\n")
("errno/busy" . "(:ctime 1015077220 :cuser #f :mtime 1015077220 :muser #f)[[$$include errno/perm]]\n")
("let*" . "(:ctime 1014855181 :cuser #f :mtime 1191209319 :muser #f)* [syntax] let* ((''variable'' ''expression'') ...) ''body''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[let]], [[letrec]].\n")
("port-buffering" . "(:ctime 1020320954 :cuser #f :mtime 1020320954 :muser #f)* [procedure] port-buffering ''port''\n* [procedure] (setter port-buffering) ''port'' ''scheme''\n\n[[Gauche]]: gets/sets the buffering mode for the buffered port\n''port''.\n")
("environment-alist" . "(:ctime 1018124864 :cuser #f :mtime 1040617758 :muser #f)* [procedure] environment-alist\n\n[[Scheme48]]: returns all environment variables\nin alist.\nSee also [[lookup-environment-variable]].\n")
("in-vicinity" . "(:ctime 1145047216 :cuser #f :mtime 1145074754 :muser #f)* [procedure] in-vicinity ''vicinity'' ''filename''\n\n[[SRFI-59]]: Returns a filename suitable for use by [[load]], [[open-input-file]], [[open-output-file]], etc. The returned filename is ''filename'' in ''vicinity''. in-vicinity should allow ''filename'' to override ''vicinity'' when filename is an absolute pathname and vicinity is equal to the value of (user-vicinity). The behavior of in-vicinity when filename is absolute and vicinity is not equal to the value of (user-vicinity) is unspecified. For most systems in-vicinity can be [[string-append]].\n\nSee also [[user-vicinity]].\n")
("fxshl" . "(:ctime 1191225552 :cuser #f :mtime 1191225552 :muser #f)* [procedure] fxshl ''fx1'' ''fx2''\n* [procedure] fxshr ''fx1'' ''fx2''\n\n[[Chicken]]: fixnum-specific bitwise shift routines.\nSee [[fixnum?]] for other fixnum operations.\n\nIn R6RS, these are [[fxarithmetic-shift-left]] and [[fxarithmetic-shift-right]].\n")
("list?" . "(:ctime 1014855783 :cuser #f :mtime 1191314165 :muser #f)* [procedure] list? ''obj''\n\n[[R4RS]],[[R5RS]],[[R6RS]]\n\nSee also [[null?]], [[pair?]], [[proper-list?]], [[circular-list?]], [[dotted-list?]],\n[[null-list?]].\n\n")
("widget-name" . "(:ctime 1018335773 :cuser #f :mtime 1018335773 :muser #f)* [procedure] widget-name ''widget''\n\n[[STk]]\n")
("with-error-output-to-port" . "(:ctime 1015073685 :cuser #f :mtime 1018381734 :muser #f)* [procedure] with-error-output-to-port ''port'' ''thunk''\n\n[[Chicken]]\n\nThis is called [[with-error-to-port]] or\n[[with-error-output-port*]] in some implementations.\n\nSee also [[with-input-from-port]], [[with-output-to-port]].\n")
("close-input-port" . "(:ctime 1014840992 :cuser #f :mtime 1014841041 :muser #f)* [procedure] close-input-port ''port''\n\n[[R5RS]]\n\nSee also [[close-output-port]].\n\n")
("string-ci-hash" . "(:ctime 1144494246 :cuser #f :mtime 1191361794 :muser #f)* [procedure] string-ci-hash ''string''\n\n[[R6RS]]: Calculates a hash value for ''string'', suitable for ''string-ci=?'' hashtable. \n\n* [procedure] string-ci-hash ''string'' [''bound'']\n\n[[SRFI-69]]: The same as [[string-hash]], except that the case of characters in ''string'' does not affect the hash value produced.\n\nSee also [[string-hash]], [[Concept:HashTable]].\n")
("make-compound-condition" . "(:ctime 1099264149 :cuser #f :mtime 1099264149 :muser #f)* [procedure] make-compound-condition ''condition_0'' ''condition_1'' ...\n\n[[SRFI-35]]: Returns a compound condition that belongs to all the types\nof given conditions.  When [[condition-ref]] is used to the compound\ncondition, the value of the field of the first ''condition_i'' that has\nsuch field name is returned.\nSee also [[make-condition]], [[extract-condition]].\n")
("string-copy!" . "(:ctime 1014889107 :cuser #f :mtime 1039752560 :muser #f)* [procedure] string-copy! ''target'' ''tstart'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nGuile has [[substring-move!]] which achieves similar \nfunctionality.\n")
("queue-add!" . "(:ctime 1015071875 :cuser #f :mtime 1015072143 :muser #f)* [procedure] queue-add! ''queue'' ''x''\n\n[[Chicken]]: adds ''x'' to the rear of ''queue''.\n\nThis is called [[enqueue!]] in some implementations.\n\nSee also [[make-queue]], [[queue-remove!]]\n\n")
("char-set:empty" . "(:ctime 1018082723 :cuser #f :mtime 1018082723 :muser #f)[[$$include char-set:lower-case]]\n")
("substring-move-right!" . "(:ctime 1152518355 :cuser #f :mtime 1152527646 :muser #f)* [procedure] substring-move-right! ''s1'' ''m1'' ''n1'' ''s2'' ''m2''\n* [procedure] substring-move-left! ''s1'' ''m1'' ''n1'' ''s2'' ''m2''\n\n[[RRRS]]: ''s1'' and ''s2'' must be strings, ''m1'' and ''n1'' must be valid indices of ''s1'' with ''m1'' <= ''n1'' and ''m2'' must be a valid index of ''s2''. These procedures store the elements ''m1'' through ''n1'' of ''s1'' into the string ''s2'' starting at element ''m2'' and return an unspecified value.\n\nThe procedures differ only when (eq? ''s1'' ''s2'') and the substring being moved overlaps the substring being replaced. In this case, substring-move-right! copies serially, starting with the rightmost element and proceeding to the left, while substring-move-left! begins with the leftmost element and proceeds to the right.\n")
("SRFI-28" . "(:ctime 1036934555 :cuser #f :mtime 1122428716 :muser #f)SRFI-28: Basic format string\n\nhttp://srfi.schemers.org/srfi-28/srfi-28.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[format]]\n")
("current-row" . "(:ctime 1017989468 :cuser #f :mtime 1038310084 :muser #f)* [procedure] current-row ''port''\n* [procedure] current-column ''port''\n\n[[Scheme48]]: returns port's current positions.\nSee [[make-tracking-input-port]] and [[make-tracking-output-port]].\n\nSome implementations have similar procedures.\nSee [[port-position]], [[port-current-line]], [[port-line]].\n")
("with-error-to-file" . "(:ctime 1018334215 :cuser #f :mtime 1099726257 :muser #f)* [procedure] with-error-to-file ''string'' ''thunk''\n\n[[Bigloo]], [[STk]], [[STklos]]: see also [[with-input-from-file]],\n[[with-output-to-file]].\n")
("parse-arguments" . "(:ctime 1099772992 :cuser #f :mtime 1099772992 :muser #f)* [syntax] parse-arguments ''args'' ''clause1'' ''clause2'' ...\n\n[[STklos]]: command-line argument parser.  Clause's format is like this:\n\n{{{\n<clause>       ⇒ string | <list-clause>\n<list clause>  ⇒ (<option descr> <expr> ...) | (else <expr> ...)\n<option descr> ⇒ (<option name> `(<keyword> value)*)\n<option name>  ⇒ string\n<keyword>      ⇒ :alternate | :arg | :help\n}}}\n\nHelp document feature is integrated.\n\nShort options can be concatenated.\n\nSimilar features are provided in some implementations\nunder different names: [[getopt]], [[parse-options]], [[args-fold]].\n")
("flush-all-ports" . "(:ctime 1018387360 :cuser #f :mtime 1020129382 :muser #f)* [procedure] flush-all-ports\n\n[[Scsh]], [[Gauche]]: flush all ports.  See also [[force-output]] or [[flush]].\n")
("delete-duplicates!" . "(:ctime 1014871244 :cuser #f :mtime 1014871244 :muser #f)* [procedure] delete-duplicates! ''list'' [''='']\n\n[[SRFI-1]]: linear-update variant of [[delete-duplicates]].\n")
("perm/iroth" . "(:ctime 1015099816 :cuser #f :mtime 1015099816 :muser #f)[[$$include perm/irusr]]\n")
("fourth" . "(:ctime 1014862802 :cuser #f :mtime 1014862802 :muser #f)* [procedure] fourth ''pair''\n\n[[SRFI-1]]\n")
("queue-pop!" . "(:ctime 1015072175 :cuser #f :mtime 1015072175 :muser #f)* [procedure] queue-pop! ''queue''\n\n[[SLIB]], [[Gauche]]: removes and returns the first item of ''queue''.\n\n[[dequeue!]] does the same thing.\n\nThis is called [[queue-remove!]] in some implementations.\n\nSee also [[make-queue]], [[queue-push!]]\n")
("eighth" . "(:ctime 1014863090 :cuser #f :mtime 1014863090 :muser #f)* [procedure] eighth ''pair''\n\n[[SRFI-1]]\n")
("cell-ref" . "(:ctime 1017981130 :cuser #f :mtime 1017981130 :muser #f)* [procedure] cell-ref ''cell''\n\n[[Scheme48]]: get the value of ''cell''.  See [[make-cell]].\n")
("exec-file" . "(:ctime 1015285326 :cuser #f :mtime 1015285326 :muser #f)[[$$include exec]]\n")
("exit-handler" . "(:ctime 1015024616 :cuser #f :mtime 1015047759 :muser #f)* [procedure] exit-handler [''newhandler'']\n\n[[ChezScheme]], [[Chicken]]: gets/sets current exit handler.\n\nSee also [[exit]]\n")
("Concept:ObjectSystem" . "(:ctime 1099882735 :cuser #f :mtime 1245540958 :muser #f)The following tree is extracted from Alex Shinn's \n[http://groups.google.com/groups?hl=en&lr=&c2coff=1&selm=871xpwv30h.wl%40strelka.synthcode.com&rnum=2 post to comp.lang.scheme].\n\n- CLOS: Common Lisp Object System, based on CommonLoops and New Flavors,\n          winning out in the CL standardization over Object Lisp and\n          Common Objects.  I know nothing of those 4 original systems.\n-- TinyCLOS: Subset of CLOS written in pure Scheme, including a\n              meta-object protocol (MOP).  Classes, generics &\n              methods all 1st class.  Native OO system for Chicken.\n--- SOS: MIT Scheme's native OO system, mostly differs in naming\n              and interface.  No MOP via meta-classes but supports\n              computed methods.\n--- RScheme: Based on CLOS and Dylan. The object systems in Gauche and RScheme     \n             are remarkably similar.\n--- [[STklos]]: Native TinyCLOS implementation.  Class redefinition.\n                 Don't need to predefine generics (complicates module\n                 interaction).\n---- [[Gauche]]: Well integrated with native libraries.\n                  Collections API.  MOP utilities.\n---- GOOPS: [[Guile]]'s native OO system, also well integrated.\n             Very well documented.\n-- [[SISC]]: Similar to TinyCLOS (possibly a conscious influence though\n              I can't find any lineage in the docs).  Limited multiple\n              inheritance.\n-- Meroon: Another CLOS derivative, similar to TinyCLOS but more\n            featureful (also has stripped down version Meroonet).\n            MOP.  DSSSL support.  Excellent documentation.\n--- [[Bigloo]]: Native implementation based on Meroon, has 1st class\n                 classes, generics & methods.  No MOP.  Fields can be\n                 typed with native C types for efficiency.\n-- Swindle: PLT Scheme's.  (see [[MzScheme]]).\n- YASOS: Yet Another Scheme Object System, a portable OO system\n          distributed with [[SLIB]].  Works in terms of dispatching\n          methods (called operations) on arbitrary Scheme values\n          (which can inherit from arbitrary Scheme values - there\n          are no classes).  Includes a collections API.\n-- MOS: Macroless Object System, removes macros (and thus uses\n         different API) from YASOS but keeps the idea of methods\n         on objects with no classes.  Distributed with [[SLIB]].\n- [[MzScheme]]: System of classes, objects and methods, all 1st class Scheme\n             values, but no MOP.  Single inheritance with interfaces and a\n             public/private distinction similar to the C++ & Java style of\n             OO.  Uses explicit send syntax to call methods, although a\n             with-method syntax is provided to look like CLOS methods.\n             Excellent interactive documentation.\n- [[Kawa]]: Access to Java OO system.  Methods defined statically with\n             classes.  Provides \"this\" syntax.\n- SICP: Chapter 3 of The Structure & Interpretation of Computer\n                Programs describes a very simple dispatch closure based\n                OO system.  Some of the smaller OO system's in the\n                Scheme repositories follow this style, most Schemers\n                write such an OO system at some point, and many Schemers\n                use this style without any sugar when they want portable\n                code (see much of SLIB).\n")
("complete-path?" . "(:ctime 1020224886 :cuser #f :mtime 1020224886 :muser #f)* [procedure] complete-path? ''path''\n\n[[MzScheme]]: 'complete path' is an absolute path\nwith drive letter (on Windows platform).\nSee also [[absolute-path?]], [[Concept:FileSystem]].\n")
("cell-set!" . "(:ctime 1017981155 :cuser #f :mtime 1017981155 :muser #f)* [procedure] cell-set! ''cell'' ''value''\n\n[[Scheme48]]: set the value of ''cell''.  See [[make-cell]].\n")
("named-lambda" . "(:ctime 1100322441 :cuser #f :mtime 1100322441 :muser #f)[syntax] named-lambda (''name'' . ''formals'') ''body''\n\n[[MIT-Scheme]]: like [[lambda]], but binds the procedure itself to ''name''\nwithin ''body''.\n\nSRFI-31's [[rec]] realizes similar feature.\n")
("sc-expand" . "(:ctime 1014965952 :cuser #f :mtime 1148469164 :muser #f)* [procedure] sc-expand ''obj'' [''env-spec'']\n\n[[ChezScheme]], [[Gambit]], [[Chicken]].\n\nSee also [[expand]], [[current-expand]], [[eps-expand]]\n")
("argc" . "(:ctime 1099742568 :cuser #f :mtime 1099742568 :muser #f)* [procedure] argc\n\n[[STklos]]: returns the number of command line arguments.  See also [[argv]].\n")
("clock" . "(:ctime 1099742912 :cuser #f :mtime 1099742912 :muser #f)* [procedure] clock\n\n[[STklos]]: returns the CPU time used in the program, in milliseconds.\n\nOther implementations provide similar features with the name\nlike [[cpu-time]], \n[[sys-times]], etc.\n")
("signal/usr2" . "(:ctime 1015076697 :cuser #f :mtime 1015076697 :muser #f)[[$$include signal/hup]]\n")
("floor->exact" . "(:ctime 1191219919 :cuser #f :mtime 1191219919 :muser #f)* [procedure] floor->exact ''x''\n* [procedure] ceiling->exact ''x''\n* [procedure] truncate->exact ''x''\n* [procedure] round->exact ''x''\n\n[[Gauche]]: Convenience functions.  (floor->exact ''x'') == (exact (floor ''x'')) etc.\n\nSee [[floor]], [[ceiling]], [[truncate]], [[round]], [[exact]], [[inexact]].\n")
("round" . "(:ctime 1014853937 :cuser #f :mtime 1191219967 :muser #f)[[$$include floor]]\n")
("list-copy" . "(:ctime 1014861873 :cuser #f :mtime 1015772786 :muser #f)* [procedure] list-copy ''flist''\n\n[[SRFI-1]]: Copies the spine of the argument. \n\nAlso in [[ChezScheme]], [[Gauche]]\n\n\n\n")
("socket-server?" . "(:ctime 1099738585 :cuser #f :mtime 1099738585 :muser #f)[[$$include socket-client?]]\n")
("pathname-replace-directory" . "(:ctime 1015100649 :cuser #f :mtime 1015101096 :muser #f)* [procedure] pathname-replace-directory ''pathname'' ''directory''\n\n[[Chicken]]: see also [[pathname-directory]], [[pathname-strip-directory]],\n[[pathname-replace-file]],\n[[pathname-replace-extension]]\n \n")
("lset-diff+intersection!" . "(:ctime 1014874713 :cuser #f :mtime 1014874713 :muser #f)* [procedure] lset-diff+intersection! ''elt='' ''list1'' ''list2'' ...\n\n[[SRFI-1]]: linear-update variant of [[lset-diff+intersection]].\n")
("make-record" . "(:ctime 1017982224 :cuser #f :mtime 1017982247 :muser #f)* [procedure] make-record ''n'' ''value''\n\n[[Scheme48]]: low-level record constructor.\nSee [[define-record-type]].\n")
("+." . "(:ctime 1191218767 :cuser #f :mtime 1191218768 :muser #f)* [procedure] +. ''z'' ...\n* [procedure] *. ''z'' ...\n* [procedure] -. ''z''\n* [procedure] -. ''z1'' ''z2'' ...\n* [procedure] /. ''z''\n* [procedure] /. ''z1'' ''z2'' ...\n\n[[Gauche]]: Like [[+]], [[*]], [[-]], and [[/]], but coerce the arguments to inexact numbers before doing calculation.\n")
("clear-output-port" . "(:ctime 1014956942 :cuser #f :mtime 1014956966 :muser #f)* [procedure] clear-output-port [''port'']\n\n[[ChezScheme]]: Discards any characters in the buffer associated to ''port''.\n\nSee also [[clear-input-port]], [[flush-output-port]]\n\n")
("let-string-start+end" . "(:ctime 1014884683 :cuser #f :mtime 1014884683 :muser #f)* [syntax] let-string-start+end (''start'' ''end'' [''rest'']) ''proc-exp'' ''s-exp'' ''args-exp'' ''body'' ...\n\n[[SRFI-13]]\n\nSee also [[string-parse-start+end]], [[string-parse-final-start+end]].\n")
("min" . "(:ctime 1014856406 :cuser #f :mtime 1191216454 :muser #f)[[$$include max]]\n")
("make-polar" . "(:ctime 1014856159 :cuser #f :mtime 1191312937 :muser #f)* [procedure] make-polar ''mag'' ''angle''\n\n[[R5RS]], [[R6RS]]\n\nSee also [[make-rectangular]], [[magnitude]], [[angle]].\n\n[[SRFI-94]]: If an argument is not real, this procedure signals error.\n")
("array-start" . "(:ctime 1036934004 :cuser #f :mtime 1036934004 :muser #f)* [procedure] array-start ''array'' ''k''\n* [procedure] array-end ''array'' ''k''\n\n[[SRFI-25]]: returns the start and end index of\n''k''-th dimension of the ''array'', respectively.\nSee [[make-array]].\n")
("signal-os-number" . "(:ctime 1020374265 :cuser #f :mtime 1020374265 :muser #f)* [procedure] signal-os-number ''signal''\n\n[[Scheme48]]: accessor of a signal object.\nThis is a reverse function of [[integer->signal]].\nSee also [[signal?]].\n")
("i/o-file-is-read-only-error?" . "(:ctime 1099273556 :cuser #f :mtime 1099273556 :muser #f)* [procedure] i/o-file-is-read-only-error? ''obj''\n\n[[SRFI-36]]: See [[&i/o-file-is-read-only-error]].\n")
("sort!" . "(:ctime 1014942516 :cuser #f :mtime 1015072515 :muser #f)''linear-update'' variant of [[sort]].\nLike [[sort]], this comes with conflicting APIs.\n\n* [procedure] sort! ''sequence'' ''predicate''\n\n[[SLIB]], [[Chicken]]: ''sequence'' can be a list or a vector.  Expects ''predicate''\nto behave like <.  Stable.\n\n* [procedure] sort! ''predicate'' ''list''\n\n[[ChezScheme]]: ''sequence'' must be a list.  Expects ''predicate''\nto behave like <.\n\nSee also [[sort]], [[merge!]].\n\n")
("file-regular?" . "(:ctime 1015905483 :cuser #f :mtime 1015905483 :muser #f)* [procedure] file-regular? ''path''\n\n[[Scsh]].  See also [[Concept:FileSystem]]\n\nThis is called [[file-is-regular?]] in some implementations.\n")
("not=?" . "(:ctime 1144494246 :cuser #f :mtime 1144501941 :muser #f)[[$$include =?]]\n")
("Viivi" . "(:ctime 1307855888 :cuser #f :mtime 1307855888 :muser #f)Viivi is a multilingual [[R5RS]] compliant Scheme interpreter for JVMs.\n\nhttp://home.j00.itscom.net/ilma/english/viivi/index.html\n\n[[$$srfis]]\n----\n")
(":range" . "(:ctime 1144527545 :cuser #f :mtime 1144539832 :muser #f)* [syntax] :range ''vars''         ''stop''\n* [syntax] :range ''vars'' ''start'' ''stop''\n* [syntax] :range ''vars'' ''start'' ''stop'' ''step''\n[[SRFI-42]]:\nRuns through a range of exact rational numbers.\n\nThe form (:range ''vars'' ''stop'') evaluates the expression ''stop'', which mus\nt\nresult in an exact integer ''n'', and runs through the finite sequence 0, 1, 2,\n..., ''n''-1. If ''n'' is zero or negative the sequence is empty.\n\nThe form (:range ''vars'' ''start'' ''stop'') evaluates the expressions ''start''\nand ''stop'', which must result in exact integers ''a'' and ''b'', and runs through\nthe finite sequence ''a'', ''a''+1, ''a''+2, ..., ''b''-1. If b is less or equal a then the\nsequence is empty.\n\nThe form (:range ''vars'' ''start'' ''stop'' ''step'') first evaluates the\nexpressions ''start'', ''stop'', and ''step'', which must result in exact\nintegers ''a'', ''b'', and ''s'' such that ''s'' is unequal to zero. Then the sequence ''a'', ''a''\n+ ''s'', ''a ''+ 2 ''s,'' ..., ''a'' + (''n''-1) s is enumerated where ''n'' = ceil((''b''-''a'')/''s''). In\nother words, the sequence starts at ''a'', increments by ''s'', and stops when the\nnext value would reach or cross ''b''. If ''n'' is zero or negative the sequence is empty.\n")
("vector-map" . "(:ctime 1099387358 :cuser #f :mtime 1191570120 :muser #f)* [procedure] vector-map ''proc'' ''vec1'' ''vec2'' ...\n\n[[R6RS]], [[SRFI-43]]: [[map]] on elements of vectors, instead of lists.  Stores\nthe results into a newly allocated vector and returns it. \nSee also [[vector-map!]].\n\nR6RS requires all vectors have the same size.  SRFI-43 allows different\nsizes, and [[vector-map]] works on the index up to the length of the shortest\nvector.\n\nSee also [[vector-fold]], [[vector-for-each]].\n")
("reduce-right" . "(:ctime 1014867032 :cuser #f :mtime 1014867032 :muser #f)* [procedure] reduce-right ''f'' ''ridentity'' ''list''\n\n[[SRFI-1]]: reduce-right is the [[fold-right]] variant of [[reduce]]. \nIt obeys the following definition: \n\n     (reduce-right f ridentity '()) = ridentity\n     (reduce-right f ridentity '(e1)) = (f e1 ridentity) = e1\n     (reduce-right f ridentity '(e1 e2 ...)) =\n         (f e1 (reduce f ridentity (e2 ...)))\n\n     ...in other words, we compute (fold-right f ridentity list). \n\nSee also [[reduce]], [[fold-right]].\n")
("set-time-nanosecond!" . "(:ctime 1015209949 :cuser #f :mtime 1015209949 :muser #f)[[$$include time-nanosecond]]\n")
("console-input-port" . "(:ctime 1014957364 :cuser #f :mtime 1014957364 :muser #f)* [procedure] console-input-port [''newval'']\n\n[[ChezScheme]]: gets/sets the input port used by the waiter and\ninteractive debugger.\n\nSee also [[console-output-port]]\n")
("i/o-error-port" . "(:ctime 1099273284 :cuser #f :mtime 1099273284 :muser #f)* [procedure] i/o-error-port ''obj''\n\n[[SRFI-36]]: See [[&i/o-port-error]].\n")
("gauche-version" . "(:ctime 1015899868 :cuser #f :mtime 1099742757 :muser #f)* [procedure] gauche-version\n\n[[Gauche]]: returns a string of Gauche version.\n\nOther implementations have [[version]].\n")
("blob-u8-ref" . "(:ctime 1144700986 :cuser #f :mtime 1144716228 :muser #f)* [procedure] blob-u8-ref ''blob'' ''k''\n\n[[SRFI-74]]: Returns the octet at index ''k'' of ''blob''.\n\n")
("open/noctty" . "(:ctime 1015106378 :cuser #f :mtime 1327407346 :muser #f)[[$$include open/rdonly]]\n [http://www.obtenir-rio.info B and You]\n")
("with-exception-handler" . "(:ctime 1015927820 :cuser #f :mtime 1063320203 :muser #f)* [procedure] with-exception-handler ''handler'' ''thunk''\n\n[[SRFI-18]], [[SRFI-21]], [[SRFI-34]]: a fundamental exception handling mechanism.\n\nFrom SRFI-34:\n<<<\nReturns the result(s) of invoking thunk. Handler must be a procedure that accepts one argument. It is installed as the current exception handler for the dynamic extent (as determined by dynamic-wind) of the invocation of thunk.\n>>>\n\nSee the discussion in [[raise]] about the dynamic environment where ''handler'' is called.\n\nSee also [[current-exception-handler]], [[guard]].\n")
("fdes->outport" . "(:ctime 1018390746 :cuser #f :mtime 1018390754 :muser #f)[[$$include fdes->inport]]\n")
("signal?" . "(:ctime 1020374166 :cuser #f :mtime 1020374166 :muser #f)* [procedure] signal? ''obj''\n\n[[Scheme48]]: returns #t if ''obj'' is a signal object.\nSee also [[integer->signal]], [[name->signal]], \n[[signal-name]], [[signal-os-number]], [[signal=?]],\n[[signal-process]], [[make-signal-queue]].\n")
("SRFI-70" . "(:ctime 1144197855 :cuser #f :mtime 1145788588 :muser #f)SRFI 70: Numbers\n\nhttp://srfi.schemers.org/srfi-70/srfi-70.html\n\n[[$$srfi-implementors]]\n----\n\n[[+inf.0]], [[-inf.0]], [[finite?]], [[infinite?]]\n\n[[expt]], [[quotient]], [[remainder]], [[modulo]], [[gcd]], [[lcm]],\n[[exact-floor]], [[exact-ceiling]], [[exact-truncate]], [[exact-round]],\n")
("string-reverse!" . "(:ctime 1014894529 :cuser #f :mtime 1015074777 :muser #f)[[$$include string-reverse]]\n")
("#0=" . "(:ctime 1416209908 :cuser #f :mtime 1416209908 :muser #f)* [reader syntax] #''digits''=\n\n[[SRFI-38]]: Shared structure definition.  The next item of this syntax\ncan be referred afterwards by [[#0=]](,[[#1=]],[[#2=]]...[[#n=]].)\n")
("make-condition-variable" . "(:ctime 1015927666 :cuser #f :mtime 1015963678 :muser #f)* [procedure] make-condition-variable [''name'']\n\n[[SRFI-18]], [[SRFI-21]]\n")
("string-suffix-length-ci" . "(:ctime 1014893294 :cuser #f :mtime 1014893294 :muser #f)* [procedure] string-suffix-length-ci ''s1'' ''s2'' [''start1'' ''end1'' ''start2'' ''end2'']\n\n[[SRFI-13]]\n\nSee also [[string-suffix-length]], [[string-suffix-ci?]]\n")
("read-byte" . "(:ctime 1016068571 :cuser #f :mtime 1016068571 :muser #f)* [procedure] read-byte [''port'']\n\n[[Gauche]]: read a byte from ''port''.\n")
("current-effective-user-id" . "(:ctime 1015198464 :cuser #f :mtime 1015198464 :muser #f)[[$$include current-user-id]]\n")
("&i/o-read-error" . "(:ctime 1099273347 :cuser #f :mtime 1099273348 :muser #f)* [condition-type] &i/o-read-error\n\n[[SRFI-36]]\n{{{\n(define-condition-type &i/o-read-error &i/o-port-error\n  i/o-read-error?)\n}}}\n\nSee [[&condition]], [[&i/o-port-error]].\n")
("gentemp" . "(:ctime 1161187076 :cuser #f :mtime 1161200962 :muser #f)* [procedure] gentemp\n\n[[Kawa]]: Returns a new interned symbol.\n\nSome implementations have [[gensym]].\n")
("wclrtoeol" . "(:ctime 1015882832 :cuser #f :mtime 1015882832 :muser #f)[[$$include wclrtobot]]\n")
("labels" . "(:ctime 1040351788 :cuser #f :mtime 1152543194 :muser #f)* [magic form] labels ((''identifier'' (lambda ''args'' ''form'')) ...) ''body'')\n[[RRS]]: evaluate the ''body'' in an environment where all the ''identifier''s evaluate to the values of the respective lambda expressions. Furthermore, lambda expressions is also closed in that environment; this allows procedures to call themselves and each other.\n\n* [syntax] labels ((''name'' (''arg'' ...) ''body'') ...) ''body'' ...\n\n[[Bigloo]]: Define mutually recursive local procedures,\nsimilarly to the CommonLisp.  The created bindings are\nimmutable.\n")
("SRFI-60" . "(:ctime 1122429009 :cuser #f :mtime 1122434983 :muser #f)SRFI-60: Integers as bits\n\nhttp://srfi.schemers.org/srfi-60/srfi-60.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[logand]], [[bitwise-and]],\n[[logior]], [[bitwise-ior]],\n[[logxor]], [[bitwise-xor]],\n[[lognot]], [[bitwise-not]]\n\n[[bitwise-if]], [[bitwise-merge]], [[logtest]] [[any-bits-set?]]\n\n[[logcount]], [[bit-count]], [[integer-length]], [[log2-binary-factors]],\n[[first-set-bit]]\n\n[[logbit?]], [[bit-set?]], [[copy-bit]]\n\n[[bit-field]], [[copy-bit-field]], [[ash]], [[arithmetic-shift]],\n[[rotate-bit-field]], [[reverse-bit-field]]\n\n[[integer->list]], [[list->integer]], [[booleans->integer]]\n")
("primitive-closure?" . "(:ctime 1019625221 :cuser #f :mtime 1019625221 :muser #f)* [procedure] primitive-closure? ''v''\n\n[[MzScheme]]: returns #t if ''v'' is a primitiev closure.\nSee also [[primitive?]]\n")
("char-set-xor" . "(:ctime 1099288720 :cuser #f :mtime 1099288720 :muser #f)* [procedure] char-set-xor ''cset1'' ...\n* [procedure] char-set-xor! ''cset0'' ''cset1'' ...\n\n[[SRFI-14]]: Returns a character set that is XOR of all the sets.\n")
("make-keyword" . "(:ctime 1015773066 :cuser #f :mtime 1099727718 :muser #f)* [procedure] make-keyword ''name''\n\n[[STk]], [[STklos]], [[Gauche]]: makes a keyword from a symbol or string ''name''.\n\nChicken has [[string->keyword]].\n\n")
("file-type" . "(:ctime 1037014505 :cuser #f :mtime 1037014653 :muser #f)* [procedure] file-type ''fname/fd/port'' [''chase?'']\n\n[[Scsh]]: returns one of \nblock-special, char-special, directory,\nfifo, regular, socket or symlink.\nSee also [[file-info]].\n\n* [procedure] file-type ''filename'' &keyword follwo-link?\n\n[[Gauche]]: returns one of\nregular, directory, character, block, fifo, symlink, \nor socket.  See also [[sys-stat]].\n")
("&message" . "(:ctime 1099267406 :cuser #f :mtime 1099267406 :muser #f)* [condition-type] &message\n\n[[SRFI-35]]:\n\n{{{\n(define-condition-type &message &condition\n  message-condition?\n  (message condition-message))\n}}}\n\nSee also [[&condition]], [[message-condition?]], [[condition-message]].\n")
("nan.0" . "(:ctime 1191210581 :cuser #f :mtime 1191210581 :muser #f)[[$$include inf.0]]\n")
("->integer" . "(:ctime 1383068456 :cuser #f :mtime 1383097721 :muser #f)* [procedure] ->integer ''number''\n[[T]]: Coerces number to an integer, truncating towards zero if necessary. \n\n* [generic] ->integer ''obj''\n[[Sagittarius]]: generic function to convert ''obj'' to an integer.\n\nSee also [[->number]], [[->string]].\n\n[[Gauche]] has [[x->integer]].\n\n\n")
("a:fixz64b" . "(:ctime 1144485145 :cuser #f :mtime 1144529277 :muser #f)* [procedure] a:fixz64b [''n'']\n[[SRFI-63]]: Returns an exact binary fixnum uniform-array prototype with at least 64 bits of precision.\n")
("sprintf" . "(:ctime 1014961312 :cuser #f :mtime 1015070652 :muser #f)* [procedure] fprintf ''port'' ''format-spec'' ''obj'' ...\n\n[[Chicken]]: formats ''obj''s by ''format-spec'' and returns the result\nstring.  Recognizes \"~%\", \"~S\", \"~A\", \"~\\n\", \"~B\", \"~O\", \"~X\", \"~C\",\n\"~~\", \"~!\", \"~?\".\n\nNote: ChezScheme doesn't have this.\n\nSee also [[printf]], [[fprintf]].\n\n* [procedure] sprintf ''out'' ''format-spec'' ''obj'' ...\n\n[[SLIB]]: formats ''obj'' and stores the result to ''out'' if it\nis a string.  If ''out'' is #f, returns newly allocated string.\nIf ''out'' is an integer, returns newly allocated string whose\nlength is up to the number.\nFormat specification is C-like.\n\nSee also [[printf]], [[fprintf]]\n\n")
("path-list-string->path-list" . "(:ctime 1020225871 :cuser #f :mtime 1020225871 :muser #f)* path-list-string->path-list ''string'' ''default-path-list''\n\n[[MzScheme]]: decompose string of path list, such as in PATH\nenvironment variable, in platform-specific manner.\n")
("x->string" . "(:ctime 1015725146 :cuser #f :mtime 1383097785 :muser #f)* [generic] x->string ''obj''\n\n[[Gauche]]: generic function to convert ''obj'' to a string.\nSee also [[x->number]], [[x->integer]], [[write-object]].\n\nSome other implementations have [[->string]].\n")
("copy-array" . "(:ctime 1017981765 :cuser #f :mtime 1017981765 :muser #f)* [procedure] copy-array ''array''\n\n[[Scheme48]]: copy array.  See [[make-array]].\n")
("SRFI-0" . "(:ctime 1014861241 :cuser #f :mtime 1122428483 :muser #f)SRFI-0: Feature-based conditional expansion construct\n\nhttp://srfi.schemers.org/srfi-0/srfi-0.html\n\n[[$$srfi-implementors]]\n----\n\n[[cond-expand]]\n\n")
("port-idle-unregister!" . "(:ctime 1099727056 :cuser #f :mtime 1099727056 :muser #f)[[$$include port-idle-register!]]\n")
("SRFI-38" . "(:ctime 1099277286 :cuser #f :mtime 1122428795 :muser #f)SRFI-38: External Representation for Data With Shared Structure\n\nhttp://srfi.schemers.org/srfi-38/srfi-38.html\n\n[[$$srfi-implementors]]\n\n----\n\n[[#1#]], [[#1=]]\n\n[[write-with-shared-structure]], [[write/ss]]\n\n[[read-with-shared-structure]], [[read/ss]]\n")
("vicinity:suffix?" . "(:ctime 1145047216 :cuser #f :mtime 1145074806 :muser #f)* [procedure] vicinity:suffix? ''chr''\n\n[[SRFI-59]]: Returns the `#t' if ''chr'' is a vicinity suffix character; and #f otherwise. Typical vicinity suffixes are `/', `:', and `\\'.\n")
("declare" . "(:ctime 1015045923 :cuser #f :mtime 1015045923 :muser #f)* [syntax] declare ''declspec'' ...\n\n[[Chicken]]\n")
("int->0..2^x-1" . "(:ctime 1045088981 :cuser #f :mtime 1045088981 :muser #f)[[$$include string->0..255]]\n")
("deserialize" . "(:ctime 1015274339 :cuser #f :mtime 1015274339 :muser #f)* [procedure] deserialize ''u32vector'' [''safe?'']\n\n[[Chicken]]: deserialize object form the given u32vector.  See also [[serialize]].\n")
("char>=?" . "(:ctime 1015062508 :cuser #f :mtime 1015062508 :muser #f)[[$$include char=?]]\n")
("define-values" . "(:ctime 1015044092 :cuser #f :mtime 1174381250 :muser #f)* [syntax] define-values (''var'' ...) ''exp''\n\n[[Chicken]], [[MzScheme]], [[Gauche]]: defines several variables at once by the values returned\nfrom ''exp''.\n")
("blob-uint-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144716729 :muser #f)* [procedure] blob-uint-set! ''size'' ''endianness'' ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: Stores the unsigned representation of size ''size''\nand specified by ''endianness'' into the ''blob'' at indices {k, ..., k + size - 1}.\n''n'' must be an exact integer in the interval [0, (256^size)-1]. \n\nSee also [[endianness]].\n")
("string->symbol-ci" . "(:ctime 1039408705 :cuser #f :mtime 1039408705 :muser #f)* [procedure] string->symbol-ci ''string''\n\n[[Bigloo]]: \n (string->symbol (string-upcase ''string''))\n\nSee also [[string->symbol]].\n")
("<=?" . "(:ctime 1144494246 :cuser #f :mtime 1144501879 :muser #f)[[$$include =?]]\n")
("string-unfold" . "(:ctime 1014894961 :cuser #f :mtime 1014894961 :muser #f)* [procedure] string-unfold ''p'' ''f'' ''g'' ''seed'' [''base'' ''make-final'']\n\n[[SRFI-13]]\n\nSee also [[string-unfold-right]], [[string-fold]]\n")
("trace-print" . "(:ctime 1014896257 :cuser #f :mtime 1014896257 :muser #f)* [procedure] trace-print [''newval'']\n\n[[ChezScheme]]\n\nSee also [[trace]], [[trace-output-port]]\n")
("primitive-result-arity" . "(:ctime 1019625172 :cuser #f :mtime 1019625172 :muser #f)* [procedure] primitive-result-arity ''prim-proc''\n\n[[MzScheme]]: returns the arity of the result of\nthe primitive procedure.  See also [[primitive?]].\n")
("signal-process" . "(:ctime 1020374348 :cuser #f :mtime 1020374443 :muser #f)* [procedure] signal-process ''process-id'' ''signal''\n\n[[Scheme48]]: sends ''signal'' to the process specified\nby ''process-id''.\n\nSee [[signal?]] for signal object.\n\nThis is called [[process-send-signal]], [[process-signal]],\nor [[sys-kill]] on other implementations.\n")
("as16" . "(:ctime 1099398079 :cuser #f :mtime 1099398079 :muser #f)[[$$include ac64]]\n")
("symbol-plist" . "(:ctime 1039345384 :cuser #f :mtime 1039345511 :muser #f)* [procedure] symbol-plist ''symbol-or-keyword''\n\n[[Bigloo]]: Returns the property-list associated with ''symbol-or-keyword''.\n\nSee also [[getprop]], [[putprop!]], [[remprop!]].\n\nChezScheme calls this [[property-list]].\n")
("thread-quantum-set!" . "(:ctime 1015105229 :cuser #f :mtime 1015105229 :muser #f)[[$$include thread-quantum]]\n")
("sys-pipe" . "(:ctime 1244511873 :cuser #f :mtime 1244511883 :muser #f)* [procedure] sys-pipe &key (buffering :line)\n\n[[Gauche]]: Opens a pipe and returns two values, an input port and\nan output port.  The keyword argument ''buffering'' specifies the \nbuffering mode of the returned ports.\n\nSee also: [[pipe]].\n")
("char-set-complement" . "(:ctime 1099288281 :cuser #f :mtime 1099288281 :muser #f)* [procedure] char-set-complement ''cset''\n* [procedure] char-set-complement! ''cset''\n\n[[SRFI-14]]: Returns a character set which is a complement of\n''cset''.\n")
("a:flor128b" . "(:ctime 1144485145 :cuser #f :mtime 1144529236 :muser #f)* [procedure] a:flor128b [''z'']\n[[SRFI-63]]: Returns an inexact 128.bit flonum real uniform-array prototype.\n")
("dump" . "(:ctime 1015279318 :cuser #f :mtime 1018344062 :muser #f)* [procedure] dump ''exp'' [''port'']\n\n[[Chicken]]: writes a hex-dump of data of ''exp''.  See also [[describe]].\n\n* [procedure] dump ''newpath'' [''flag-or-thunk'']\n\n[[SCM]]: dumps current SCM session image to the specified path.\nSee also [[boot-tail]].\n\n* [procedure] dump ''string''\n\n[[STk]]: dumps current continuation to the specified file.\n")
("-." . "(:ctime 1191218820 :cuser #f :mtime 1191218821 :muser #f)[[$$include +.]]\n")
("random-source?" . "(:ctime 1038273029 :cuser #f :mtime 1038273029 :muser #f)* [procedure] random-source? ''obj''\n\n[[SRFI-27]]: returns true iff ''obj'' is a random\nsource object.\n")
("set-sstats-gc-real!" . "(:ctime 1015029031 :cuser #f :mtime 1015029056 :muser #f)* [procedure] set-sstats-gc-real! ''sstats'' ''obj''\n\n[[ChezScheme]]: statistics.  See [[statistics]], [[sstats-gc-real]].\n")
("struct?" . "(:ctime 1063240092 :cuser #f :mtime 1099725792 :muser #f)* [procedure] struct? ''obj''\n\n[[Bigloo]], [[STklos]]: returns #t iff ''obj'' is a struct.  See [[define-struct]].\n\n[[MzScheme]]: returns #t iff [[struct->vector]] exposes any fields of \na structure ''obj'' with the current inspector.  See [[define-struct]].\n")
("read-directory-stream" . "(:ctime 1018126350 :cuser #f :mtime 1018126350 :muser #f)[[$$include open-directory-stream]]\n")
("char->latin-1-integer" . "(:ctime 1019619653 :cuser #f :mtime 1019619653 :muser #f)* [procedure] char->latin-1-integer ''char''\n* [procedure[ latin-1-integer->char ''k''\n\n[[MzScheme]]: a variant of [[char->integer]] and\n[[integer->char]] with assuming ISO8859-1 character encoding.\n\nSee also [[char->ascii]] and [[ascii->char]].\n")
("##" . "(:ctime 1015139544 :cuser #f :mtime 1015139544 :muser #f)* [reader syntax] ##\n\n[[Scheme48]]: in the repl, this refers the current value.\n")
("string>=?" . "(:ctime 1015063564 :cuser #f :mtime 1015063573 :muser #f)[[$$include string=?]]\n\n")
("blob-u32-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144719363 :muser #f)* [procedure] blob-u32-set! ''endianness'' ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: equivalent to (blob-uint-set! 4 ''endianness'' ''blob'' ''k'' ''n'').\n\nSee also [[blob-uint-set!]].\n")
("pairwise-not=?" . "(:ctime 1144494246 :cuser #f :mtime 1144504323 :muser #f)* [procedure] pairwise-not=? ''compare'' ''x1'' ...\n[[SRFI-67]]: Tests if the values ''x1'' ...(zero or more values) are pairwise unequal with\nrespect to the compare procedure ''compare''. The result is a boolean (either #t or #f). The order in which the values are compared is unspecified, but each value\nis compared at least once (even if there is just one).\n\nThe values ''x1'', ..., ''x''[''n''] are pairwise unequal if ([[not=?]] ''compare'' ''x''[''i''] ''x''[''j''])\nfor all ''i'' /= ''j''.\n")
("defmacro" . "(:ctime 1161187076 :cuser #f :mtime 1161200882 :muser #f)* [syntax]: defmacro ''name'' ''lambda-list'' ''form'' ...\n\n[[Kawa]]: Defines CL-style legacy macro.\n\nSome implementations have [[define-macro]].\n")
("ucs2-upper-case?" . "(:ctime 1039429480 :cuser #f :mtime 1039429480 :muser #f)[[$$include ucs2-alphabetic?]]\n")
("make-struct-type" . "(:ctime 1099725364 :cuser #f :mtime 1099725727 :muser #f)* [procedure] make-struct-type ''name'' ''parent'' ''slots''\n\n[[STklos]]: returns a new struct type.  Related: [[struct-type?]],\n[[sturct-type-name]], [[struct-type-slots]].\n\nSee also [[define-struct]], [[make-struct]].\n\n\nSome implementations have [[make-record-type]].\n")
("test-expect-fail" . "(:ctime 1151049296 :cuser #f :mtime 1151077661 :muser #f)* [syntax] test-expect-fail ''specifier''\n\n[[SRFI-64]]: marks tests match ''specifier'' as ''expected to fail''.\n\nSee also [[test-match-name]], [[test-match-nth]], [[test-match-any]], [[test-match-all]] and [[test-skip]].\n")
("port-input-buffer" . "(:ctime 1014956205 :cuser #f :mtime 1014956205 :muser #f)* [procedure] port-input-buffer ''port''\n\n[[ChezScheme]]\n\nSee also [[make-input-port]]\n")
("blob-s16-native-set!" . "(:ctime 1144700986 :cuser #f :mtime 1144717901 :muser #f)* [procedure] blob-s16-native-set! ''blob'' ''k'' ''n''\n\n[[SRFI-74]]: equivalent to (blob-sint-set! 2 (endianness native) ''blob'' ''k'' ''n'').\n\nSee also [[blob-sint-set!]] and [[endianness]].\n")
("with-current-output-port" . "(:ctime 1018381890 :cuser #f :mtime 1018381890 :muser #f)[[$$include with-current-input-port]]\n")
("char-set-adjoin!" . "(:ctime 1099288175 :cuser #f :mtime 1099288175 :muser #f)[[$$include char-set-adjoin]]\n")
("<=fl" . "(:ctime 1039382042 :cuser #f :mtime 1039382042 :muser #f)[[$$include =fl]]\n")
("string-for-each" . "(:ctime 1014894759 :cuser #f :mtime 1191567033 :muser #f)* [procedure] string-for-each ''proc'' ''string1'' ''string2'' ...\n\n[[R6RS]]: Applies ''proc'' to each set of ''i''-th characters in the\ngiven strings.  The strings ''must'' have the same length.\n\n* [procedure] string-for-each ''proc'' ''s'' [''start'' ''end'']\n\n[[SRFI-13]]\n\nSee also [[string-map]], [[string-for-each-index]], [[string-fold]]\n")
("quotient/remainder" . "(:ctime 1112811644 :cuser #f :mtime 1112826438 :muser #f)* [procedure] quotient/remainder ''n1'' ''n2''\n\n[[MzScheme]]: returns two values: ([[quotient]] n1 n2) and ([[remainder]] n1 n2).\nThis can be useful because efficient algorithms exists that calculate both \nvalues together. Therefore separate calls to quotient and remainder would\nrun slower.\n\nSome other implementations have [[quotient&remainder]].\n")
("real-atan" . "(:ctime 1170264990 :cuser #f :mtime 1170267533 :muser #f)* real-atan ''x''\n\n[[SRFI-94]]: simular to [[R5RS]] [[atan]], but signals error if the argument is not real  or the result is not real.\n")
("rxmatch-let" . "(:ctime 1015915713 :cuser #f :mtime 1015915841 :muser #f)* [syntax] rxmatch-let ''match-expr'' (''var'' ...) ''form'' ...\n\n[[Gauche]]: evaluates ''match-expr'' that should return a [[<regmatch>]] object.\nThen binds matched substrings to ''var'' ..., and evaluates ''form'' ...\n\nSee also [[Concept:RegularExpression]], [[rxmatch-if]], [[rxmatch-cond]],\n[[rxmatch-case]].\n\nScsh calls this [[let-match]].\n")
("ucs2-string-upcase" . "(:ctime 1039428363 :cuser #f :mtime 1039428363 :muser #f)[[$$include ucs2-string-downcase]]\n")
("top-level-bound?" . "(:ctime 1014930159 :cuser #f :mtime 1014930159 :muser #f)* [procedure] top-level-bound? ''symbol''\n\n[[ChezScheme]]: see if ''symbol'' is bound in top level.\n\nSee also [[define-top-level-value]], [[top-level-value]].\n")
("identifier->symbol" . "(:ctime 1015805657 :cuser #f :mtime 1015805657 :muser #f)* [procedure] identifier->symbol ''identifier''\n\n[[Gauche]]: strips syntactic structure of ''identifier'' and returns its symbol name.\n")
("make-fluid" . "(:ctime 1014929689 :cuser #f :mtime 1017989717 :muser #f)* [procedure] make-fluid \n\n[[Guile]]: creates a fluid, an object that can keep one value\nper dynamic root.\n\nSee also [[fluid-ref]], [[fluid-set!]], [[fluid?]], [[with-fluids*]].\n\n* [procedure] make-fluid ''value''\n\n[[Scheme48]]: creates a fluid with the given value.\n\nSee also [[fluid]], [[let-fluid]], [[let-fluids]].\n")
("chain<=?" . "(:ctime 1144494246 :cuser #f :mtime 1144504141 :muser #f)[[$$include chain=?]]\n")
("SRFI-100" . "(:ctime 1327805221 :cuser #f :mtime 1327805221 :muser #f)SRFI 100: define-lambda-object\n\nhttp://srfi.schemers.org/srfi-100/srfi-100.html\n\n[[$$srfi-implementors]]\n----\n\n[[define-lambda-object]]\n")
