((identifier (srfi 0)) (title "cond-expand") (symbols cond-expand) (source chibi))
((identifier (srfi 1)) (title "list library") (symbols alist-cons alist-copy alist-delete alist-delete! any append! append-map append-map! append-reverse append-reverse! break break! car+cdr circular-list circular-list? concatenate concatenate! cons* count delete delete! delete-duplicates delete-duplicates! dotted-list? drop drop-right drop-right! drop-while eighth every fifth filter filter! filter-map find find-tail first fold fold-right fourth iota last last-pair length+ list-copy list-index list-tabulate list= lset-adjoin lset-diff+intersection lset-diff+intersection! lset-difference lset-difference! lset-intersection lset-intersection! lset-union lset-union! lset-xor lset-xor! lset<= lset= make-list map! map-in-order ninth not-pair? null-list? pair-fold pair-fold-right pair-for-each partition partition! proper-list? reduce reduce-right remove remove! reverse! second seventh sixth span span! split-at split-at! take take! take-right take-while take-while! tenth third unfold unfold-right unzip1 unzip2 unzip3 unzip4 unzip5 xcons zip) (source chibi))
((identifier (srfi 2)) (title "and-let*") (symbols and-let*) (source chibi))
((identifier (srfi 6)) (title "basic string ports") (symbols get-output-string open-input-string open-output-string) (source chibi))
((identifier (srfi 8)) (title "receive") (symbols receive) (source chibi))
((identifier (srfi 9)) (title "define-record-type") (symbols define-record-type) (source chibi))
((identifier (srfi 11)) (title "let-values/let*-values") (symbols let*-values let-values) (source chibi))
((identifier (srfi 14)) (title "character-set library") (symbols ->char-set char-set char-set->list char-set->string char-set-adjoin char-set-adjoin! char-set-any char-set-complement char-set-complement! char-set-contains? char-set-copy char-set-count char-set-cursor char-set-cursor-next char-set-delete char-set-delete! char-set-diff+intersection char-set-diff+intersection! char-set-difference char-set-difference! char-set-every char-set-filter char-set-filter! char-set-fold char-set-for-each char-set-hash char-set-intersection char-set-intersection! char-set-map char-set-ref char-set-size char-set-unfold char-set-unfold! char-set-union char-set-union! char-set-xor char-set-xor! char-set:ascii char-set:blank char-set:digit char-set:empty char-set:full char-set:graphic char-set:hex-digit char-set:iso-control char-set:letter char-set:letter+digit char-set:lower-case char-set:printing char-set:punctuation char-set:symbol char-set:title-case char-set:upper-case char-set:whitespace char-set<= char-set= char-set? end-of-char-set? list->char-set list->char-set! string->char-set string->char-set! ucs-range->char-set ucs-range->char-set!) (source chibi))
((identifier (srfi 16)) (title "case-lambda") (symbols case-lambda) (source chibi))
((identifier (srfi 18)) (title "multi-threading support") (symbols abandoned-mutex-exception? condition-variable-broadcast! condition-variable-name condition-variable-signal! condition-variable-specific condition-variable-specific-set! condition-variable? current-exception-handler current-thread current-time join-timeout-exception? make-condition-variable make-mutex make-thread mutex-lock! mutex-name mutex-specific mutex-specific-set! mutex-state mutex-unlock! mutex? raise seconds->time terminated-thread-exception? thread-join! thread-name thread-sleep! thread-specific thread-specific-set! thread-start! thread-terminate! thread-yield! thread? time->seconds time? uncaught-exception-reason uncaught-exception? with-exception-handler) (source chibi))
((identifier (srfi 22)) (title "running scheme scripts on Unix") (symbols) (source chibi))
((identifier (srfi 23)) (title "error reporting mechanism") (symbols error) (source chibi))
((identifier (srfi 26)) (title "cut/cute partial application") (symbols cut cute) (source chibi))
((identifier (srfi 27)) (title "sources of random bits") (symbols default-random-source make-random-source random-integer random-real random-source-make-integers random-source-make-reals random-source-pseudo-randomize! random-source-randomize! random-source-state-ref random-source-state-set! random-source?) (source chibi))
((identifier (srfi 33)) (title "bitwise operators") (symbols all-bits-set? any-bits-set? arithmetic-shift bit-count bit-set? bitwise-and bitwise-andc1 bitwise-andc2 bitwise-eqv bitwise-ior bitwise-merge bitwise-nand bitwise-nor bitwise-not bitwise-orc1 bitwise-orc2 bitwise-xor clear-bit-field copy-bit-field extract-bit-field first-set-bit integer-length replace-bit-field test-bit-field?) (source chibi))
((identifier (srfi 38)) (title "read/write shared structures") (symbols read-with-shared-structure read/ss write-with-shared-structure write/ss) (source chibi))
((identifier (srfi 39)) (title "parameter objects") (symbols make-parameter parameterize) (source chibi))
((identifier (srfi 41)) (title "streams") (symbols _ define-stream list->stream port->stream stream stream->list stream-append stream-car stream-cdr stream-concat stream-cons stream-constant stream-drop stream-drop-while stream-filter stream-fold stream-for-each stream-from stream-iterate stream-lambda stream-length stream-let stream-map stream-match stream-null stream-null? stream-of stream-pair? stream-range stream-ref stream-reverse stream-scan stream-take stream-take-while stream-unfold stream-unfolds stream-zip stream?) (source chibi))
((identifier (srfi 46)) (title "basic syntax-rules extensions") (symbols syntax-rules) (source chibi))
((identifier (srfi 55)) (title "require-extension") (symbols require-extension) (source chibi))
((identifier (srfi 62)) (title "s-expression comments") (symbols) (source chibi))
((identifier (srfi 69)) (title "basic hash tables") (symbols alist->hash-table hash hash-by-identity hash-table->alist hash-table-cell hash-table-copy hash-table-delete! hash-table-equivalence-function hash-table-exists? hash-table-fold hash-table-hash-function hash-table-keys hash-table-merge! hash-table-ref hash-table-ref/default hash-table-set! hash-table-size hash-table-update! hash-table-update!/default hash-table-values hash-table-walk hash-table? make-hash-table string-ci-hash string-hash) (source chibi))
((identifier (srfi 95)) (title "sorting and merging") (symbols merge merge! object-cmp sort sort! sorted?) (source chibi))
((identifier (srfi 98)) (title "environment access") (symbols get-environment-variable get-environment-variables) (source chibi))
((identifier (srfi 99)) (title "ERR5RS records") (symbols define-record-type make-rtd record-rtd record? rtd-accessor rtd-all-field-names rtd-constructor rtd-field-mutable? rtd-field-names rtd-mutator rtd-name rtd-parent rtd-predicate rtd?) (source chibi))
((identifier (srfi 101)) (title "purely functional random-access pairs and lists") (symbols append caaaar caaadr caaar caadar caaddr caadr caar cadaar cadadr cadar caddar cadddr caddr cadr car cdaaar cdaadr cdaar cdadar cdaddr cdadr cdar cddaar cddadr cddar cdddar cddddr cdddr cddr cdr cons for-each length linear-access-list->random-access-list list list-ref list-ref/update list-set list-tail list? make-list map null? pair? quote random-access-list->linear-access-list reverse) (source chibi))
((identifier (srfi 111)) (title "boxes") (symbols box box? set-box! unbox) (source chibi))
((identifier (srfi 113)) (title "sets and bags") (symbols alist->bag bag bag->alist bag->list bag->set bag-adjoin bag-adjoin! bag-any? bag-comparator bag-contains? bag-copy bag-count bag-decrement! bag-delete bag-delete! bag-delete-all bag-delete-all! bag-difference bag-difference! bag-disjoint? bag-element-comparator bag-element-count bag-empty? bag-every? bag-filter bag-filter! bag-find bag-fold bag-fold-unique bag-for-each bag-for-each-unique bag-increment! bag-intersection bag-intersection! bag-map bag-member bag-partition bag-partition! bag-product bag-product! bag-remove bag-remove! bag-replace bag-replace! bag-search! bag-size bag-sum bag-sum! bag-unfold bag-union bag-union! bag-unique-size bag-xor bag-xor! bag<=? bag<? bag=? bag>=? bag>? bag? list->bag list->bag! list->set list->set! set set->bag set->bag! set->list set-adjoin set-adjoin! set-any? set-comparator set-contains? set-copy set-count set-delete set-delete! set-delete-all set-delete-all! set-difference set-difference! set-disjoint? set-element-comparator set-empty? set-every? set-filter set-filter! set-find set-fold set-for-each set-intersection set-intersection! set-map set-member set-partition set-partition! set-remove set-remove! set-replace set-replace! set-search! set-size set-unfold set-union set-union! set-xor set-xor! set<=? set<? set=? set>=? set>? set?) (source chibi))
((identifier (srfi 115)) (title "Scheme regular expressions") (symbols char-set->sre regexp regexp->sre regexp-extract regexp-fold regexp-match->list regexp-match-count regexp-match-submatch regexp-match-submatch-end regexp-match-submatch-start regexp-match? regexp-matches regexp-matches? regexp-partition regexp-replace regexp-replace-all regexp-search regexp-split regexp? rx valid-sre?) (source chibi))
((identifier (srfi 116)) (title "immutable list library") (symbols dotted-ilist? gtree->itree gtree->tree ialist-cons ialist-delete iany iappend iappend-map iappend-reverse iapply iassoc iassq iassv ibreak icaaaar icaaadr icaaar icaadar icaaddr icaadr icaar icadaar icadadr icadar icaddar icadddr icaddr icadr icar icar+icdr icdaaar icdaadr icdaar icdadar icdaddr icdadr icdar icddaar icddadr icddar icdddar icddddr icdddr icddr icdr iconcatenate icount idelete idelete-duplicates idrop idrop-right idrop-while ieighth ievery ififth ifilter ifilter-map ifind ifind-tail ifirst ifold ifold-right ifor-each ifourth iiota ilast ilength ilist ilist->list ilist-comparator ilist-copy ilist-index ilist-ref ilist-tabulate ilist-tail ilist= ilist? imap imap-in-order imember imemq imemv ininth ipair ipair* ipair->pair ipair-comparator ipair-fold ipair-fold-right ipair-for-each ipair? ipartition iq ireduce ireduce-right iremove ireverse isecond iseventh isixth ispan isplit-at itake itake-right itake-while itenth ithird itree->tree iunfold iunfold-right iunzip1 iunzip2 iunzip3 iunzip4 iunzip5 izip last-ipair list->ilist make-icar-comparator make-icdr-comparator make-ilist make-ilist-comparator make-improper-ilist-comparator not-ipair? null-ilist? pair->ipair proper-ilist? replace-icar replace-icdr tree->itree xipair) (source chibi))
((identifier (srfi 117)) (title "mutable queues") (symbols list-queue list-queue-add-back! list-queue-add-front! list-queue-append list-queue-append! list-queue-back list-queue-concatenate list-queue-copy list-queue-empty? list-queue-first-last list-queue-for-each list-queue-front list-queue-list list-queue-map list-queue-map! list-queue-remove-all! list-queue-remove-back! list-queue-remove-front! list-queue-set-list! list-queue-unfold list-queue-unfold-right list-queue? make-list-queue) (source chibi))
((identifier (srfi 121)) (title "generators") (symbols bytevector->generator gappend gcombine gcons* gdelete gdelete-neighbor-dups gdrop gdrop-while generator generator->list generator->reverse-list generator->string generator->vector generator->vector! generator-any generator-count generator-every generator-find generator-fold generator-for-each generator-unfold gfilter gindex gremove gselect gtake gtake-while list->generator make-coroutine-generator make-for-each-generator make-iota-generator make-range-generator make-unfold-generator reverse-vector->generator string->generator vector->generator) (source chibi))
((identifier (srfi 124)) (title "ephemerons") (symbols ephemeron-broken? ephemeron-datum ephemeron-key ephemeron? make-ephemeron) (source chibi))
((identifier (srfi 125)) (title "intermediate hash tables") (symbols alist->hash-table hash hash-by-identity hash-table hash-table->alist hash-table-clear! hash-table-contains? hash-table-copy hash-table-count hash-table-delete! hash-table-difference! hash-table-empty-copy hash-table-empty? hash-table-entries hash-table-equivalence-function hash-table-exists? hash-table-find hash-table-fold hash-table-for-each hash-table-hash-function hash-table-intern! hash-table-intersection! hash-table-keys hash-table-map hash-table-map! hash-table-map->list hash-table-merge! hash-table-mutable? hash-table-pop! hash-table-prune! hash-table-ref hash-table-ref/default hash-table-set! hash-table-size hash-table-unfold hash-table-union! hash-table-update! hash-table-update!/default hash-table-values hash-table-walk hash-table-xor! hash-table=? hash-table? make-hash-table string-ci-hash string-hash) (source chibi))
((identifier (srfi 127)) (title "lazy sequences") (symbols generator->lseq lseq->generator lseq-any lseq-append lseq-car lseq-cdr lseq-drop lseq-drop-while lseq-every lseq-filter lseq-find lseq-find-tail lseq-first lseq-for-each lseq-index lseq-length lseq-map lseq-member lseq-memq lseq-memv lseq-realize lseq-ref lseq-remove lseq-rest lseq-take lseq-take-while lseq-zip lseq=? lseq?) (source chibi))
((identifier (srfi 128)) (title "comparators (reduced)") (symbols <=? <? =? >=? >? boolean-hash char-ci-hash char-hash comparator-check-type comparator-equality-predicate comparator-hash comparator-hash-function comparator-hashable? comparator-if<=> comparator-ordered? comparator-ordering-predicate comparator-register-default! comparator-test-type comparator-type-test-predicate comparator? default-hash hash-bound hash-salt make-comparator make-default-comparator make-eq-comparator make-equal-comparator make-eqv-comparator make-list-comparator make-pair-comparator make-vector-comparator number-hash string-ci-hash string-hash symbol-hash) (source chibi))
((identifier (srfi 129)) (title "titlecase procedures") (symbols char-title-case? char-titlecase string-titlecase) (source chibi))
((identifier (srfi 130)) (title "cursor-based string library") (symbols reverse-list->string string->list/cursors string->vector/cursors string-any string-concatenate string-concatenate-reverse string-contains string-contains-right string-copy/cursors string-count string-cursor->index string-cursor-back string-cursor-diff string-cursor-end string-cursor-forward string-cursor-next string-cursor-prev string-cursor-start string-cursor<=? string-cursor<? string-cursor=? string-cursor>=? string-cursor>? string-cursor? string-drop string-drop-right string-every string-filter string-fold string-fold-right string-for-each-cursor string-index string-index->cursor string-index-right string-join string-null? string-pad string-pad-right string-prefix-length string-prefix? string-ref/cursor string-remove string-replace string-replicate string-reverse string-skip string-skip-right string-split string-suffix-length string-suffix? string-tabulate string-take string-take-right string-trim string-trim-both string-trim-right string-unfold string-unfold-right substring/cursors) (source chibi))
((identifier (srfi 132)) (title "sort libraries") (symbols list-delete-neighbor-dups list-delete-neighbor-dups! list-merge list-merge! list-sort list-sort! list-sorted? list-stable-sort list-stable-sort! vector-delete-neighbor-dups vector-delete-neighbor-dups! vector-find-median vector-find-median! vector-merge vector-merge! vector-select! vector-separate! vector-sort vector-sort! vector-sorted? vector-stable-sort vector-stable-sort!) (source chibi))
((identifier (srfi 133)) (title "vector library") (symbols list->vector make-vector reverse-list->vector reverse-vector->list string->vector vector vector->list vector->string vector-any vector-append vector-append-subvectors vector-binary-search vector-concatenate vector-copy vector-copy! vector-count vector-cumulate vector-empty? vector-every vector-fill! vector-fold vector-fold-right vector-for-each vector-index vector-index-right vector-length vector-map vector-map! vector-partition vector-ref vector-reverse! vector-reverse-copy vector-reverse-copy! vector-set! vector-skip vector-skip-right vector-swap! vector-unfold vector-unfold! vector-unfold-right vector-unfold-right! vector= vector?) (source chibi))
((identifier (srfi 134)) (title "immutable deques") (symbols generator->ideque ideque ideque->generator ideque->list ideque-add-back ideque-add-front ideque-any ideque-append ideque-append-map ideque-back ideque-break ideque-count ideque-drop ideque-drop-right ideque-drop-while ideque-drop-while-right ideque-empty? ideque-every ideque-filter ideque-filter-map ideque-find ideque-find-right ideque-fold ideque-fold-right ideque-for-each ideque-for-each-right ideque-front ideque-length ideque-map ideque-partition ideque-ref ideque-remove ideque-remove-back ideque-remove-front ideque-reverse ideque-span ideque-split-at ideque-tabulate ideque-take ideque-take-right ideque-take-while ideque-take-while-right ideque-unfold ideque-unfold-right ideque-zip ideque= ideque? list->ideque) (source chibi))
((identifier (srfi 135)) (title "immutable texts") (symbols list->text make-text reverse-list->text string->text subtext subtextual text text-length text-ref text-tabulate text-unfold text-unfold-right text? textual->list textual->string textual->text textual->utf16 textual->utf16be textual->utf16le textual->utf8 textual->vector textual-any textual-append textual-ci<=? textual-ci<? textual-ci=? textual-ci>=? textual-ci>? textual-concatenate textual-concatenate-reverse textual-contains textual-contains-right textual-copy textual-count textual-downcase textual-drop textual-drop-right textual-every textual-filter textual-fold textual-fold-right textual-foldcase textual-for-each textual-for-each-index textual-index textual-index-right textual-join textual-length textual-map textual-map-index textual-null? textual-pad textual-pad-right textual-prefix-length textual-prefix? textual-ref textual-remove textual-replace textual-replicate textual-skip textual-skip-right textual-split textual-suffix-length textual-suffix? textual-take textual-take-right textual-titlecase textual-trim textual-trim-both textual-trim-right textual-upcase textual<=? textual<? textual=? textual>=? textual>? textual? utf16->text utf16be->text utf16le->text utf8->text vector->text) (source chibi))
((identifier (srfi 139)) (title "syntax parameters") (symbols define-syntax-parameter syntax-parameterize) (source chibi))
((identifier (srfi 141)) (title "integer division") (symbols balanced-quotient balanced-remainder balanced/ ceiling-quotient ceiling-remainder ceiling/ euclidean-quotient euclidean-remainder euclidean/ floor-quotient floor-remainder floor/ round-quotient round-remainder round/ truncate-quotient truncate-remainder truncate/) (source chibi))
((identifier (srfi 142)) (title "bitwise operations") (symbols any-bit-set? arithmetic-shift bit-count bit-field bit-field-any? bit-field-clear bit-field-every? bit-field-replace bit-field-replace-same bit-field-reverse bit-field-rotate bit-field-set bit-set? bit-swap bits bitwise-and bitwise-andc1 bitwise-andc2 bitwise-eqv bitwise-fold bitwise-for-each bitwise-if bitwise-ior bitwise-nand bitwise-nor bitwise-not bitwise-orc1 bitwise-orc2 bitwise-unfold bitwise-xor copy-bit every-bit-set? first-set-bit integer->list integer->vector integer-length list->integer make-bitwise-generator vector->integer) (source chibi))
((identifier (srfi 143)) (title "fixnums") (symbols fixnum? fx* fx+ fx+*/carry fx+/carry fx- fx-/carry fx-greatest fx-least fx-width fx<=? fx<? fx=? fx>=? fx>? fxabs fxand fxarithmetic-shift fxarithmetic-shift-left fxarithmetic-shift-right fxbit-count fxbit-field fxbit-field-reverse fxbit-field-rotate fxbit-set? fxcopy-bit fxeven? fxfirst-set-bit fxif fxior fxlength fxmax fxmin fxneg fxnegative? fxnot fxodd? fxpositive? fxquotient fxremainder fxsqrt fxsquare fxxor fxzero?) (source chibi))
((identifier (srfi 144)) (title "flonums") (symbols fl* fl+ fl+* fl- fl-1/log-phi fl-1/pi fl-1/sqrt-2 fl-2/pi fl-2/sqrt-pi fl-4thrt-2 fl-cbrt-2 fl-cbrt-3 fl-cos-1 fl-e fl-e-2 fl-e-euler fl-euler fl-fast-+* fl-greatest fl-integer-exponent-nan fl-integer-exponent-zero fl-least fl-log-10 fl-log-2 fl-log-phi fl-log10-e fl-log2-e fl-phi fl-pi fl-pi/2 fl-pi/4 fl-sin-1 fl-sqrt-10 fl-sqrt-2 fl-sqrt-3 fl-sqrt-5 fl-sqrt-pi fl/ fl< fl<= fl= fl> fl>= flabs flabsdiff flacos flacosh fladjacent flasin flasinh flatan flatanh flbalanced-quotient flbalanced-remainder flbalanced/ flcbrt flceiling flceiling-quotient flceiling-remainder flceiling/ flcopysign flcos flcosh fldenominator fldenormalized? flerf flerfc fleuclidean-quotient fleuclidean-remainder fleuclidean/ fleven? flexp flexp-1 flexp2 flexponent flexpt flfinite? flfirst-bessel flfloor flfloor-quotient flfloor-remainder flfloor/ flgamma flhypot flinfinite? flinteger-exponent flinteger-fraction flinteger? fllog fllog1+ fllog10 fllog2 flloggamma flmax flmin flnan? flnegative? flnormalized-fraction-exponent flnormalized? flnumerator flodd? flonum flonum? flposdiff flpositive? flremquo flround flround-quotient flround-remainder flround/ flsecond-bessel flsgn flsin flsinh flsqrt flsquare fltan fltanh fltruncate fltruncate-quotient fltruncate-remainder fltruncate/ flunordered? flzero? make-flonum sign-bit) (source chibi))
((identifier (srfi 145)) (title "assumptions") (symbols assume) (source chibi))
((identifier (srfi 147)) (title "custom macro transformers") (symbols define-syntax let-syntax letrec-syntax syntax-rules) (source chibi))
((identifier (srfi 151)) (title "bitwise operators") (symbols any-bit-set? arithmetic-shift bit-count bit-field bit-field-any? bit-field-clear bit-field-every? bit-field-replace bit-field-replace-same bit-field-reverse bit-field-rotate bit-field-set bit-set? bit-swap bits bits->list bits->vector bitwise-and bitwise-andc1 bitwise-andc2 bitwise-eqv bitwise-fold bitwise-for-each bitwise-if bitwise-ior bitwise-nand bitwise-nor bitwise-not bitwise-orc1 bitwise-orc2 bitwise-unfold bitwise-xor copy-bit every-bit-set? first-set-bit integer-length list->bits make-bitwise-generator vector->bits) (source chibi))
((identifier (srfi 154)) (title "first-class dynamic extents") (symbols closed-lambda current-dynamic-environment dynamic-environment? with-dynamic-environment) (source chibi))
((identifier (srfi 159)) (title "combinator formatting") (symbols as-black as-blue as-bold as-cyan as-green as-magenta as-red as-underline as-unicode as-white as-yellow call-with-output call-with-output-generator call-with-output-generators columnar displayed downcased each each-in-list escaped fitted fitted/both fitted/left fitted/right fl fn fn-fork from-file joined joined/dot joined/last joined/prefix joined/range joined/suffix justified line-numbers maybe-escaped nl nothing numeric numeric/comma numeric/fitted numeric/si padded padded/both padded/left padded/right show show-columns space-to string->line-generator tab-to tabular trimmed trimmed/both trimmed/lazy trimmed/left trimmed/right unicode-terminal-width upcased with with! wrapped wrapped/char wrapped/list written written-shared written-simply) (source chibi))
